<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Wisdom's blog]]></title>
  <subtitle><![CDATA[Encode my life]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.xuerlove.com/"/>
  <updated>2015-11-23T11:41:44.000Z</updated>
  <id>http://blog.xuerlove.com/</id>
  
  <author>
    <name><![CDATA[Wisdom]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[html5文件上传]]></title>
    <link href="http://blog.xuerlove.com/2015/10/04/html5%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>http://blog.xuerlove.com/2015/10/04/html5文件上传/</id>
    <published>2015-10-04T11:20:11.000Z</published>
    <updated>2015-11-23T11:41:44.000Z</updated>
    <content type="html"><![CDATA[<h4 id="File">File</h4><blockquote>
<ul>
<li>背景<br>我们之前在浏览器端操作文件，一般都是通过flash,silverlight或者ActiveX插件，这些实现都是依赖第三方插件，不够独立也伴随着升级带来的不稳定，也不够通用，使用了这些技术后也很难进行跨平台、跨浏览器、跨设备等情况下实现统一的表现。<br>之前图片上传方式，1、form提交。2、flash上传。3、插件上传。</li>
<li>form上传无法取消，没有上传进度，flash上传，非IE浏览器无法传递cookie，插件上传的问题就是跨浏览器上传。</li>
<li>HTML5的File API可以很轻松的使用JS来控制文件的读取、写入等一系列的操作。<a id="more"></a>
<h5 id="js对象">js对象</h5></li>
<li>FileList<br>File对象的集合,file标签设置multiple，就支持多文件上传<br><code>&lt;input type=&quot;file&quot; multiple=&quot;multiple&quot; name=&quot;file&quot; id=&quot;js_file&quot; /&gt;</code></li>
<li>Blob<br>原始数据对象<br>使用slice方法可以读取原始数据中的某块数据<br>属性：size（数据的大小），type（数据的MIME类型）</li>
<li>File<br>继承自Blob对象,指向一个具体的文件<br>属性：name（文件名), lastModifiedDate（最后修改时间)</li>
<li>FileReader<br>读取文件数据</li>
<li>URL scheme</li>
</ul>
</blockquote>
<h5 id="FileReader">FileReader</h5><ul>
<li>三个方法<ul>
<li>readAsBinaryString(Blob blob);传入一个Blob对象，读取数据的结果作为二进制字符串的形式放到FileReader的result属性中。</li>
<li>readAsText(Blob blob, optional DOMString encoding);第一个参数传入Blog对象，第二个参数传入编码格式，异步将数据读取成功后放到result属性中，读取的内容是普通的文本字符串。</li>
<li>readAsDataURL(Blob blob);传入一个Blob对象，读取内容可以做为URL属性，图片返回结果可以赋值给img的src。</li>
</ul>
</li>
<li>六个事件<ul>
<li>Onloadstart 文件读取开始时触发。</li>
<li>Progress 读取进行中定时触发。事件参数中会含有已读取总数据量。</li>
<li>Abort 当读取被中止时触发。</li>
<li>Error 当读取出错时触发。</li>
<li>Load 当读取成功完成时触发。</li>
<li>Loadend 当读取完成时，无论成功或者失败都会触发。</li>
</ul>
</li>
</ul>
<h5 id="拖拽上传">拖拽上传</h5><blockquote>
<p>拖拽简介<br>拖拽源和拖拽目标：</p>
<ul>
<li>拖拽源：设置draggable属性为true标识该对象可作为拖拽源。然后监听源对象的dragstart事件，在事件处理函数里设置DataTransfer。在DataTransfer里可以设置拖拽数据的类型和值。比如是纯文本的值，可以设置类型为”text/plain”，url则把类型设置为”text/uri-list”。这样，目标对象就可以根据期望的类型来选择数据了。</li>
<li>拖拽目标：一个拖拽目标必须监听3个事件。<ul>
<li>dragenter：目标对象通过响应这个事件来确定是否接收拖拽。如果接收则需要取消这个事件，停止事件继续传播。</li>
<li>dragover：通过响应这个事件来显示拖拽的提示效果。</li>
<li>drop：目标对象通过响应这个事件来处理拖拽数据。在drop事件中可以获取DataTransfer对象，取出要上传的数据。</li>
</ul>
</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="File">File</h4><blockquote>
<ul>
<li>背景<br>我们之前在浏览器端操作文件，一般都是通过flash,silverlight或者ActiveX插件，这些实现都是依赖第三方插件，不够独立也伴随着升级带来的不稳定，也不够通用，使用了这些技术后也很难进行跨平台、跨浏览器、跨设备等情况下实现统一的表现。<br>之前图片上传方式，1、form提交。2、flash上传。3、插件上传。</li>
<li>form上传无法取消，没有上传进度，flash上传，非IE浏览器无法传递cookie，插件上传的问题就是跨浏览器上传。</li>
<li>HTML5的File API可以很轻松的使用JS来控制文件的读取、写入等一系列的操作。]]>
    
    </summary>
    
      <category term="javascript" scheme="http://blog.xuerlove.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript数组]]></title>
    <link href="http://blog.xuerlove.com/2015/10/03/javascript%E6%95%B0%E7%BB%84/"/>
    <id>http://blog.xuerlove.com/2015/10/03/javascript数组/</id>
    <published>2015-10-03T11:16:37.000Z</published>
    <updated>2015-11-23T11:41:55.000Z</updated>
    <content type="html"><![CDATA[<h4 id="数组操作的方法">数组操作的方法</h4><ul>
<li>shift：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line"><span class="keyword">var</span> b = a.shift(); <span class="comment">//a：[2,3,4,5] b：1</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p>unshift：将参数添加到原数组开头，并返回数组的长度</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line"><span class="keyword">var</span> b = a.unshift(-<span class="number">2</span>,-<span class="number">1</span>); <span class="comment">//a：[-2,-1,1,2,3,4,5] b：7 </span></span><br><span class="line"><span class="comment">//注：在IE6.0下测试返回值总为undefined，FF2.0下测试返回值为7，所以这个方法的返回值不可靠，需要用返回值时可用splice代替本方法来使用。</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>pop：删除原数组最后一项，并返回删除元素的值；如果数组为空则返回undefined</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line"><span class="keyword">var</span> b = a.pop(); <span class="comment">//a：[1,2,3,4] b：5</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>push：将参数添加到原数组末尾，并返回数组的长度</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line"><span class="keyword">var</span> b = a.push(<span class="number">6</span>,<span class="number">7</span>); <span class="comment">//a：[1,2,3,4,5,6,7] b：7</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>concat：返回一个新数组，是将参数添加到原数组中构成的</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line"><span class="keyword">var</span> b = a.concat(<span class="number">6</span>,<span class="number">7</span>); <span class="comment">//a：[1,2,3,4,5] b：[1,2,3,4,5,6,7]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>splice(start,deleteCount,val1,val2,…)：从start位置开始删除deleteCount项，并从该位置起插入val1,val2,…</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.splice(<span class="number">2</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>); <span class="comment">//a：[1,2,7,8,9,5] b：[3,4] </span></span><br><span class="line"><span class="keyword">var</span> b = a.splice(<span class="number">0</span>,<span class="number">1</span>); <span class="comment">//同shift </span></span><br><span class="line">a.splice(<span class="number">0</span>,<span class="number">0</span>,-<span class="number">2</span>,-<span class="number">1</span>); <span class="keyword">var</span> b = a.length; <span class="comment">//同unshift </span></span><br><span class="line"><span class="keyword">var</span> b = a.splice(a.length-<span class="number">1</span>,<span class="number">1</span>); <span class="comment">//同pop </span></span><br><span class="line">a.splice(a.length,<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>); <span class="keyword">var</span> b = a.length; <span class="comment">//同push</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>reverse：将数组反序</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.reverse(); <span class="comment">//a：[5,4,3,2,1] b：[5,4,3,2,1]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>sort(orderfunction)：按指定的参数对数组进行排序</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.sort(); <span class="comment">//a：[1,2,3,4,5] b：[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>slice(start,end)：返回从原数组中指定开始下标到结束下标之间的项组成的新数组</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.slice(<span class="number">2</span>,<span class="number">5</span>); <span class="comment">//a：[1,2,3,4,5] b：[3,4,5]</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>join(separator)：将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> b = a.join(<span class="string">"|"</span>); <span class="comment">//a：[1,2,3,4,5] b："1|2|3|4|5"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>toSource()<br>返回该对象的源代码;</p>
</li>
<li>toString()<br>把数组转换为字符串，并返回结果;</li>
<li>toLocaleString()<br>把数组转换为本地数组，并返回结果;</li>
<li>valueOf()<br>返回数组对象的原始值;</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="数组操作的方法">数组操作的方法</h4><ul>
<li>shift：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; </span><br><span class="line"><span class="keyword">var</span> b = a.shift(); <span class="comment">//a：[2,3,4,5] b：1</span></span><br></pre></td></tr></table></figure>
</li>
</ul>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://blog.xuerlove.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript实现浏览器本地存储]]></title>
    <link href="http://blog.xuerlove.com/2015/10/02/javascript%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8/"/>
    <id>http://blog.xuerlove.com/2015/10/02/javascript实现浏览器本地存储/</id>
    <published>2015-10-02T11:08:17.000Z</published>
    <updated>2015-11-23T11:52:17.000Z</updated>
    <content type="html"><![CDATA[<h4 id="高级浏览器">高级浏览器</h4><h5 id="localStorage">localStorage</h5><blockquote>
<p>一旦存储，除非手动删除，否则永远存储在浏览器本地。</p>
</blockquote>
<ul>
<li>优点：容量大，最大可支持5M</li>
<li>缺点：IE8以下的版本不支持，安全性也差，不适合保存敏感数据。</li>
<li><p>隐私模式下localStorage，只能读取，不能写入，使用前需要检测是否支持，检测代码：</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isSupport</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> storage = <span class="built_in">window</span>.localStorage;</span><br><span class="line">    <span class="keyword">if</span>(!storage)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> key = <span class="string">'jason'</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        storage.setItem(key, <span class="string">'jason'</span>);</span><br><span class="line">        storage.removeItem(key);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (error)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>localStorage对象可以将数据永久保存在客户端。</p>
<ul>
<li>存储：localStorage.setItem(key,value)<ul>
<li>如果key存在时，更新value</li>
</ul>
</li>
<li>获取：localStorage.getItem(key)<ul>
<li>如果key不存在返回null</li>
</ul>
</li>
<li>删除：localStorage.removeItem(key)<ul>
<li>一旦删除，key对应的数据将会全部删除</li>
</ul>
</li>
<li>全部清除：localStorage.clear()</li>
<li>某些时候使用removeItem逐个删除太麻烦，可以使用clear,执行的后果是会清除所有localStorage对象保存的数据</li>
<li>遍历localStorage存储的key<ul>
<li><code>.length</code> 数据总量，例：localStorage.length</li>
<li><code>.key(index)</code> 获取key，例：var key=localStorage.key(index);</li>
</ul>
</li>
</ul>
</li>
<li>存储JSON格式数据<ul>
<li><code>JSON.stringify(data)</code> 将一个对象转换成JSON格式的数据串,返回转换后的串</li>
<li><code>JSON.parse(data)</code> 将数据解析成对象，返回解析后的对象</li>
</ul>
</li>
</ul>
<h5 id="IE低版本浏览器（IE8以下的版本）">IE低版本浏览器（IE8以下的版本）</h5><ul>
<li><p>ActiveXObject</p>
<blockquote>
<p>ActiveXObject 对象为 Microsoft 扩展，仅在 Internet Explorer 中受支持。<br>ActiveXObject(“htmlfile”)创建的文档是一个完美的HTML文档，它拥有document.title,document.body等HTML DOM专有的属性，还能运行javascript。全局变量this就是我们要找的全局对象，它还拥有我们想要的一切，Array，Boolean，String，Date，Object等等。</p>
</blockquote>
</li>
<li><p>userData</p>
<blockquote>
<p>UserData是微软为IE专门在系统中开辟的一块存储空间<br>正常情况下，这个文件夹在个人文件夹下 <code>Application Data\Microsoft\Internet Explorer\UserData</code><br>线上使用时，单个文件的大小限制是128KB，一个域名下总共可以保存1024KB的文件，文件个数应该没有限制。在受限站点里这两个值分别是64KB和640KB，所以如果考虑到各种情况的话，单个文件最好能控制64KB以下,xml格式的文件</p>
</blockquote>
</li>
<li><p>低版本就是使用UserData进行存储，数据存储在硬盘上</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//javascript</span></span><br><span class="line">o = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);</span><br><span class="line">o.type = <span class="string">"hidden"</span>;</span><br><span class="line">o.addBehavior (<span class="string">"#default#userData"</span>);</span><br><span class="line"><span class="comment">//UserData.o.style.behavior = "url('#default#userData')" ;</span></span><br><span class="line"><span class="comment">//上面的语句也是一样的作用</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(o);</span><br><span class="line"><span class="xml"><span class="comment">&lt;!--html--&gt;</span></span><br><span class="line">//说白了UserData就是样式里的一个Behavior，所以这样写也是一样的：</span><br><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">hidden</span> <span class="attribute">class</span>= <span class="attribute">storeuserData</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">style</span>&gt;</span><span class="css"></span><br><span class="line"><span class="class">.storeuserData</span> <span class="rules">&#123;<span class="rule"><span class="attribute">behavior</span>:<span class="value"><span class="function">url</span>(<span class="hexcolor">#defa</span>ult#userData)</span></span>;&#125;</span></span><br><span class="line"></span><span class="tag">&lt;/<span class="title">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
</li>
<li><p>UserData对象有以下的属性和方法：</p>
</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">expires</td>
<td style="text-align:center">设置或读取文件过期时间</td>
</tr>
<tr>
<td style="text-align:left">XMLDocument</td>
<td style="text-align:center">读取文件的XML DOM</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">getAttribute</td>
<td style="text-align:center">读取指定属性的值</td>
</tr>
<tr>
<td style="text-align:left">load</td>
<td style="text-align:center">打开文件</td>
</tr>
<tr>
<td style="text-align:left">removeAttribute</td>
<td style="text-align:center">删除指定的属性</td>
</tr>
<tr>
<td style="text-align:left">save</td>
<td style="text-align:center">保存文件</td>
</tr>
<tr>
<td style="text-align:left">setAttribute</td>
<td style="text-align:center">为指定属性赋值</td>
</tr>
</tbody>
</table>
<ul>
<li><p>UserData文件实际上就是一个XML文件，通过文件名-&gt;属性的方式保存字符串，如以下一段代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">o.setAttribute(<span class="string">"code"</span>, <span class="string">"hello world!"</span>);</span><br><span class="line">o.save(<span class="string">"baidu"</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>执行后，UserData文件夹中会生成一个baidu[1].xml文件，其中的内容是：</p>
<ul>
<li><code>&lt;ROOTSTUB code=&quot;hello,world!&quot;/&gt;</code></li>
</ul>
</li>
<li>在一个文件中可以有多个属性，也就是可以存储多种不同的数据。</li>
</ul>
<h5 id="兼容所有浏览器">兼容所有浏览器</h5><blockquote>
<p>store.js就是使用上述两种方式进行兼容使用，从而达到兼容所有浏览器的本地存储</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="高级浏览器">高级浏览器</h4><h5 id="localStorage">localStorage</h5><blockquote>
<p>一旦存储，除非手动删除，否则永远存储在浏览器本地。</p>
</blockquote>
<ul>
<li>优点：容量大，最大可支持5M</li>
<li>缺点：IE8以下的版本不支持，安全性也差，不适合保存敏感数据。</li>
<li><p>隐私模式下localStorage，只能读取，不能写入，使用前需要检测是否支持，检测代码：</p>]]>
    
    </summary>
    
      <category term="javascript" scheme="http://blog.xuerlove.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何调试移动端网页]]></title>
    <link href="http://blog.xuerlove.com/2015/10/01/%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%BD%91%E9%A1%B5/"/>
    <id>http://blog.xuerlove.com/2015/10/01/如何调试移动端网页/</id>
    <published>2015-10-01T09:50:37.000Z</published>
    <updated>2015-11-23T10:05:16.000Z</updated>
    <content type="html"><![CDATA[<h4 id="真机上调试移动端的页面">真机上调试移动端的页面</h4><h5 id="1-_mac_safri_ios设备safri">1. mac safri ios设备safri</h5><blockquote>
<p>步骤：</p>
<ol>
<li>在设置&gt;safri&gt;高级web检查器（打开）</li>
<li>mac下safri 偏好设置&gt;高级&gt;显示开发菜单</li>
<li>在手机safri访问网址，在开发中找到自己的设备，找到网址，点击就可以调试<a id="more"></a>
<h5 id="2-_DebugGap">2. DebugGap</h5>官网地址：<a href="http://www.debuggap.com/" target="_blank" rel="external">http://www.debuggap.com/</a></li>
</ol>
<ul>
<li>介绍<ul>
<li>支持 windows、mac、linux</li>
<li>支持HTML5的都支持，不仅限手机内置浏览器，及应用或平台。</li>
<li>多设备调试</li>
<li>调试功能：<ul>
<li>Elements - css修改、结构查看</li>
<li>Network - 网络请求查看</li>
<li>Resources - cookie、本地存储查看</li>
<li>Sources - 断点调试</li>
<li>Console - 控制台</li>
</ul>
</li>
</ul>
</li>
<li>使用：<ul>
<li>windows<ul>
<li>下载windows版本，然后解压，打开 DebugGap.exe,然后可以默认设置也可以自定义设置</li>
<li>接下来，在我们要调试的页面最底部添加一个引用<br>  <code>&lt;script src=&quot;./debuggap.js&quot;&gt;&lt;/script&gt;</code></li>
<li>直接访问我们的页面，页面右上角会多出一个蓝色的圆形按钮，pc上如果点不动，就使用浏览器模拟器</li>
<li>点击config，把之前设置的ip port填进去，然后点击连接</li>
<li>再点击蓝色的圆形按钮，再点击Inspect,观察之前起的应用，多一个蓝色框框的区域，点击进去，调试工具就出来了。</li>
<li>移动设备调试，可以把手机和电脑连接同一个wifi，保证在一个网段，然后在电脑上起一个服务器，保证页面通过手机能访问到，然后手机访问电脑ip+端口号，然后就是页面路径，就可以访问到了，其他操作同上。</li>
</ul>
</li>
<li>mac,linux<ul>
<li>方法同上</li>
</ul>
</li>
</ul>
</li>
<li>支持情况<ul>
<li>windows从性能以及调试情况来看，支持的最好</li>
</ul>
</li>
<li>断点调试条件<ul>
<li>chrome浏览器可以单步调试，</li>
<li>没定制过的webview, Android 4.4+</li>
<li>需要在电脑上安装设备驱动，并且打开usb调试，连接数据线</li>
</ul>
</li>
</ul>
</blockquote>
<h5 id="3-_Weinre">3. Weinre</h5><blockquote>
<p>使用方法</p>
<ul>
<li>windows安装 <code>npm -g install weinre</code></li>
<li><code>weinre —httpPort 8081 —boundHost -all-</code> 用这个打开8081调试端口</li>
<li>浏览器打开 <code>http://localhost:8081</code> 会看到weinre的介绍信息</li>
<li><code>&lt;script src=&quot;http://localhost:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code></li>
<li>需要调试的页面加上这个脚本，需要将上面代码中的localhost替换为电脑ip，手机访问页面也可以</li>
<li>anonymous 这个可以换成自己的标识，这样多人调试的时候也不会混乱了。</li>
</ul>
</blockquote>
<h5 id="4-_vorlon">4. vorlon</h5><blockquote>
<p>使用方法<br>基于 Node.js 和 Socket.IO 开发。<br>调试css比较靠谱，其安装方法以及调试方式和Weinre比较类似，但是更容易定位问题，忽略内容，直观的都是dom结构</p>
<ul>
<li>安装 <code>npm i -g vorlon</code></li>
<li>运行 <code>vorlon</code></li>
<li>需要调试的页面上添加 <code>&lt;script src=&quot;http://localhost:1337/vorlon.js&quot;&gt;&lt;/script&gt;</code>这样一段标签</li>
<li>浏览器访问 <code>http://localhost:1337</code> 就可以调试了</li>
</ul>
</blockquote>
<h5 id="5-_UC浏览器开发版">5. UC浏览器开发版</h5><blockquote>
<p>准备</p>
<ul>
<li>adb tool。</li>
<li>UC浏览器开发版本(apk)。</li>
<li>usb数据线一根<br>WIFI的调试方法，保证pc和手机在同一个网段，在PC上打开Chrome或Safari，在地址栏输入：手机IP + :9998，在手机端会弹出确认按钮，点击确认后，就可在pc上看到效果了</li>
</ul>
</blockquote>
<h5 id="6-_Chrome">6. Chrome</h5><blockquote>
<p>调试方法</p>
<ul>
<li>翻墙。</li>
<li>PC Chrome最新版</li>
<li>安卓 Chrome最新版</li>
<li>插线后，在chrome浏览器输入 chrome://inspect</li>
</ul>
</blockquote>
<h5 id="7-_Firefox">7. Firefox</h5><blockquote>
<p>调试方法</p>
<ul>
<li>PC Firefox 15+</li>
<li>Android Firefox 15+</li>
<li>一根数据线</li>
<li>adb驱动(UC浏览器那步已经安装过了)</li>
<li>adb devices（查看连接的设备）</li>
<li>adb forward tcp:6000 tcp:6000（本地开一个接口做代理接受数据）</li>
<li>手机端Firefox点击菜单栏的”设置”-&gt;”开发者工具”，勾选”远程调试”。</li>
<li>PC端Firefox打开about:config，设置devtools.debugger.remote-enabled为True</li>
<li>接下来找到桌面端Firefox-菜单-工具-Web开发者-远程链接。保证端口号和上面开启的端口号一致就好了。</li>
</ul>
</blockquote>
<h5 id="8-_Opera">8. Opera</h5><blockquote>
<p>调试方法</p>
<ul>
<li>打开pc opera control+shift+i 打开调试，点击右上角远程调试设置端口，在用模拟器输入opera:debug，连接端口，就可以了</li>
<li>上面这个方法有些过时 打开新版的手机opera浏览器，输入opera:debug，里面讲解了调试方式，工具就是adb和pc chrome浏览器<br>稍微麻烦一点，因为要装一些软件，完成后可以用pc端模拟器调试也可以用真机调试。</li>
</ul>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="真机上调试移动端的页面">真机上调试移动端的页面</h4><h5 id="1-_mac_safri_ios设备safri">1. mac safri ios设备safri</h5><blockquote>
<p>步骤：</p>
<ol>
<li>在设置&gt;safri&gt;高级web检查器（打开）</li>
<li>mac下safri 偏好设置&gt;高级&gt;显示开发菜单</li>
<li>在手机safri访问网址，在开发中找到自己的设备，找到网址，点击就可以调试]]>
    
    </summary>
    
      <category term="web" scheme="http://blog.xuerlove.com/tags/web/"/>
    
  </entry>
  
</feed>
