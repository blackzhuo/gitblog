{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"themes/concise/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/concise/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/concise/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/concise/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/concise/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/concise/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/concise/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/concise/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/concise/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/concise/source/imgs/favicon.ico","path":"imgs/favicon.ico","modified":1,"renderable":1},{"_id":"themes/concise/source/imgs/logo.png","path":"imgs/logo.png","modified":1,"renderable":1},{"_id":"themes/concise/source/imgs/scrollup.png","path":"imgs/scrollup.png","modified":1,"renderable":1},{"_id":"themes/concise/source/js/counter.js","path":"js/counter.js","modified":1,"renderable":1},{"_id":"themes/concise/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/concise/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1,"renderable":1},{"_id":"themes/concise/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/concise/source/js/jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":1,"renderable":1},{"_id":"themes/concise/source/imgs/author.jpg","path":"imgs/author.jpg","modified":1,"renderable":1},{"_id":"themes/concise/source/css/font/fontawesome-webfont.eot","path":"css/font/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/concise/source/css/font/fontdiao.eot","path":"css/font/fontdiao.eot","modified":1,"renderable":1},{"_id":"themes/concise/source/css/font/fontdiao.ttf","path":"css/font/fontdiao.ttf","modified":1,"renderable":1},{"_id":"themes/concise/source/css/font/fontdiao.woff","path":"css/font/fontdiao.woff","modified":1,"renderable":1},{"_id":"themes/concise/source/css/font/fontawesome-webfont.woff","path":"css/font/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/concise/source/css/font/fontawesome-webfont.ttf","path":"css/font/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/concise/source/css/font/FontAwesome.otf","path":"css/font/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/concise/source/css/font/fontdiao.svg","path":"css/font/fontdiao.svg","modified":1,"renderable":1},{"_id":"themes/concise/source/css/font/fontawesome-webfont.svg","path":"css/font/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"f74fc83b4bc716649e212f710e7ed641b029b387","modified":1487301189000},{"_id":"source/CNAME","hash":"fd02134de092b93822372d124a4dfa947e97069d","modified":1487301189000},{"_id":"source/robots.txt","hash":"71cdd7ddc6965611c619d599ce4e23209baac6aa","modified":1487301189000},{"_id":"themes/concise/LICENSE","hash":"9fc4002ee3d7d73a33d88f686bb41927f4a80424","modified":1487301189000},{"_id":"themes/concise/README.md","hash":"b4e68d3f218eded85bae3220f688cd0f5b4ff3c5","modified":1487301189000},{"_id":"themes/concise/README_ZH.md","hash":"9d7c96d33ca316996d54e766b34e2bb4636e3f51","modified":1487301189000},{"_id":"themes/concise/_config.yml","hash":"67fefa2b3b9ec228efe0b18dd6a05cbd0d769114","modified":1487301504000},{"_id":"source/about/index.md","hash":"1bffd2c36e8c723965098ea3643938386de30b3e","modified":1487301189000},{"_id":"source/_posts/BigPipe.md","hash":"1dc6d8b7971c6602bbfa6ec797bdf9c38d5788db","modified":1487301189000},{"_id":"source/_posts/CNAME","hash":"fb63616f7672bb3764ac3a59d29a3436827807f3","modified":1487301189000},{"_id":"source/_posts/DOM操作.md","hash":"08712d99b18e7d80aee48fb39c9e8bc6ce9d197c","modified":1487301189000},{"_id":"source/_posts/Dom元素尺寸相关.md","hash":"fc17b4acd26441d40237c1aae84ef5e8ee16afc5","modified":1487301189000},{"_id":"source/_posts/Jcrop.md","hash":"e169b3e0e8e0df5f4f87aa62204b30c559b503c1","modified":1487301189000},{"_id":"source/_posts/NodeJs子进程.md","hash":"47f4101fcd45d9bac74551fe22b57221a34578f5","modified":1487301189000},{"_id":"source/_posts/NodeJs搭建静态资源服务器.md","hash":"89bf016017dbd9f7de64002b647d0c6505ba4a98","modified":1487301189000},{"_id":"source/_posts/NodeJs模块之http.md","hash":"f5b43dc9d5731a3a4d70c07cc2219ca60d7301dd","modified":1487301189000},{"_id":"source/_posts/RactiveJs应用.md","hash":"112a4815c564adca823a258223150f16d467c28d","modified":1487301189000},{"_id":"source/_posts/Synergy实现多个主机之间共享键鼠.md","hash":"86357a297be04965b1b86bc9fab8e1f4afa086e2","modified":1487301189000},{"_id":"source/_posts/avalon应用.md","hash":"7c8cba0138c3f05fea4c765e779e5277f232ba52","modified":1487301189000},{"_id":"source/_posts/fetch.md","hash":"b48c6296af727d0026b57001d98dcd3a1b8e623e","modified":1487301189000},{"_id":"source/_posts/html5文件上传.md","hash":"a5191ac765b60872e1003d3e605fc962967f5a8f","modified":1487301189000},{"_id":"source/_posts/html页面中meta标签.md","hash":"764fbab3c9b5686c867433d55cc6e8933eb466d9","modified":1487301189000},{"_id":"source/_posts/javascript中判断变量类型.md","hash":"16981f4549ecf662b360cc3212dd67eb37876db9","modified":1487301189000},{"_id":"source/_posts/javascript中变量作用域.md","hash":"aa808b8c8f0d6cc07b89bbdcd45e7b802f4ffdcb","modified":1487301189000},{"_id":"source/_posts/javascript变量提升与函数声明.md","hash":"fa1fa4e2127aad81e98417f39350884afb92af2c","modified":1487301189000},{"_id":"source/_posts/javascript实现浏览器本地存储.md","hash":"821d6ee3a40a84425a7afdfe142cc2f67f7df41b","modified":1487301189000},{"_id":"source/_posts/javascript实现继承.md","hash":"7b8f028679527a0ef0a19d4001891243521cb195","modified":1487301189000},{"_id":"source/_posts/javascript对象之navigator.md","hash":"b8f8b7207b8b874a7cdd95e6edfbaec7038b9e05","modified":1487301189000},{"_id":"source/_posts/javascript对象的深度拷贝.md","hash":"2f64b3a9f77cbd6a88c3c99bce19f27617b3c44e","modified":1487301189000},{"_id":"source/_posts/javascript数组.md","hash":"924b186e085e9bc9ea5b9287565fbb7960973a6a","modified":1487301189000},{"_id":"source/_posts/javascript数组排序.md","hash":"1d97d481323c8165e01c9f16d65d1e016aa5478f","modified":1487301189000},{"_id":"source/_posts/javascript数组的深度拷贝.md","hash":"60bb303b4ba4e008ff89431c23d90ee6eddbac46","modified":1487301189000},{"_id":"source/_posts/javascript脚本执行对页面加载的影响.md","hash":"85b9d19752eefced43d08e69abe0153ea840e3a6","modified":1487301189000},{"_id":"source/_posts/javascript跳出循环.md","hash":"f75f52c2d6642b2d93739acb7635b97526b2327c","modified":1487301189000},{"_id":"source/_posts/javascript面向对象相关.md","hash":"3986187ef35a3482b45c8e76fd11da5034a01a70","modified":1487301189000},{"_id":"source/_posts/linux下创建服务.md","hash":"f84b829fcdff0aab5b9b6f9fbf094c3f05427c98","modified":1487301189000},{"_id":"source/_posts/linux常用命令.md","hash":"9129a03c3e117803b4ef105f221608d5117b1bee","modified":1487301189000},{"_id":"source/_posts/markdown语法.md","hash":"4a829387bea79cb3af49382bea8661f3b385edc0","modified":1487301189000},{"_id":"source/_posts/mongodb.md","hash":"e9609b2caf08215cddf5e1b98b47ff9e774276be","modified":1487301189000},{"_id":"source/_posts/nginx配置https.md","hash":"3e769c20f5181a634e8df7534c64c11601ad995f","modified":1487301189000},{"_id":"source/_posts/nodejs-mongodb.md","hash":"119eefab1142e0a645cb37472d993230cbe77d01","modified":1487301189000},{"_id":"source/_posts/nodejs中fs模块.md","hash":"52f5dc545551fdede2233624381b8e32d886c48d","modified":1487301189000},{"_id":"source/_posts/nodejs利用session做登录控制.md","hash":"1c0c35a2395d2125b31c604b62caef73ed7207f9","modified":1487301189000},{"_id":"source/_posts/nodejs开发控制台工具.md","hash":"32e883409463bc8652c6c101348310fcf0b98b42","modified":1487301189000},{"_id":"source/_posts/nodejs网页抓取.md","hash":"30e7ca3b3ce2f0d68dc3d39b96a6e2b358dd5595","modified":1487301189000},{"_id":"source/_posts/nodejs读取指定路径下文件夹文件.md","hash":"43a97efcc4c807727a1438fa9c947c35660b5b4e","modified":1487301189000},{"_id":"source/_posts/nodejs调用phantom.md","hash":"9c00a9b0b32c6e832ab829c556c42287acfd42b1","modified":1487301189000},{"_id":"source/_posts/npm包开发.md","hash":"0edb0c13ef27d544e4e6ee31ebf5e488cb20173b","modified":1487301189000},{"_id":"source/_posts/reactjs应用.md","hash":"f06c096e05bad2f57e56247ffb7f431764ac3b5a","modified":1487301189000},{"_id":"source/_posts/shell基础.md","hash":"d2df10ec0f2fd6bd60738eac440363df95674309","modified":1487301189000},{"_id":"source/_posts/smartcropJs.md","hash":"22745e5d87fbff9caeedd34d417fb2ab47cc80e4","modified":1487301189000},{"_id":"source/_posts/velocity语法.md","hash":"50aa5a943770793b223a6380c7f3edd617b5339b","modified":1487301189000},{"_id":"source/_posts/从零开始Node-01.md","hash":"96a8a8c4951130c2c03b1cc45cdd1f483da70019","modified":1487301189000},{"_id":"source/_posts/从零开始Node-02.md","hash":"14f5743f71e3674b4157fa112b5e93bd3f9be1b8","modified":1487301189000},{"_id":"source/_posts/从零开始Node-03.md","hash":"ac1d0aaeee70e8a3c54573f4e827b1003946ad9b","modified":1487301189000},{"_id":"source/_posts/从零开始Node-04.md","hash":"1c40a4eb6b4995183eb47f4831b6623d5991b376","modified":1487301189000},{"_id":"source/_posts/从零开始Node-05.md","hash":"6b3996adcaa6b3cd0f0e6e9618d9886c6ace4d36","modified":1487301189000},{"_id":"source/_posts/从零开始Python-01.md","hash":"392d207ddc948a3232eabcec56bf55d21efe153e","modified":1487301189000},{"_id":"source/_posts/从零开始Python-02.md","hash":"c7d14dcac1f0b6ed6eb4f92db871619a55ce3614","modified":1487301189000},{"_id":"source/_posts/从零开始Python-03.md","hash":"52bd108b1c5392ef01a0cad2ad54a355bc336138","modified":1487301189000},{"_id":"source/_posts/从零开始Python-04.md","hash":"d725ca323a050a6d9de919e896be4880659c607a","modified":1487301189000},{"_id":"source/_posts/从零开始Python-05.md","hash":"bc66fd4d05e518c66bd058aa2ed95d3db507495e","modified":1487301189000},{"_id":"source/_posts/从零开始Python-06.md","hash":"35093573303c5e8281c0cb9c15c31e95d7b2e314","modified":1487301189000},{"_id":"source/_posts/从零开始Python-07.md","hash":"0ae042590d8d7d06dc1405367401fd5bbf3283f3","modified":1487301189000},{"_id":"source/_posts/使用nproxy实现本地代理.md","hash":"47369de756b2f78fa5bb73abb4b4dd943b563673","modified":1487301189000},{"_id":"source/_posts/前端知识点集合.md","hash":"4db421024595448ba7d45e83ffe1e9aa19661d6e","modified":1487301189000},{"_id":"source/_posts/前端笔试题集.md","hash":"9216ed88a33451be65a627b75b9e6c73c9f55116","modified":1487301189000},{"_id":"source/_posts/动态脚本.md","hash":"05d2faa45c531124669593d8cb564b0534944c4f","modified":1487301189000},{"_id":"source/_posts/动画.md","hash":"e47783b3c4139b1122f46d04d1c30ac6703ba45d","modified":1487301189000},{"_id":"source/_posts/如何调试移动端网页.md","hash":"e6b7aab6dc33f76bec77b995a2f8d94258eb0fb3","modified":1487301189000},{"_id":"source/_posts/实现发送邮件功能.md","hash":"5e1222e4ec3b46ea786d656faa2a290b0f165dbc","modified":1487301189000},{"_id":"source/_posts/延迟加载解决方案.md","hash":"4a3fcd0e5892564953f031f478ee953f2f0f40ad","modified":1487301189000},{"_id":"source/_posts/异步javascript.md","hash":"cef0a93d41fa80a8db80f056565d48db92d55f20","modified":1487301189000},{"_id":"source/_posts/微信小程序开发.md","hash":"005f01870c58f1f22227abad183563c056ace152","modified":1487301189000},{"_id":"source/_posts/浏览器扩展应用开发.md","hash":"7a57000942006bc8341ea7b58f345bb0e1ae7a36","modified":1487301189000},{"_id":"source/_posts/爬虫.md","hash":"f54d236ad844e12d7f0c57f85b4a38c023ae9503","modified":1487301189000},{"_id":"source/_posts/移动端布局.md","hash":"f54ffa91045a81cf694e4e2fcd35bf1d1d53f80d","modified":1487301189000},{"_id":"source/_posts/移动端开发性能优化.md","hash":"1fdd94efe09325e33682fbdd315026e537d05140","modified":1487301189000},{"_id":"source/_posts/网站性能监控showslow.md","hash":"57145e024e3b7afef4f9e797f979359524df071e","modified":1487301189000},{"_id":"source/_posts/表单中按回车键自动提交.md","hash":"ef44448ab94b737daf8f47175ffd70c2ae80842b","modified":1487301189000},{"_id":"source/_posts/页面脚本加载分析.md","hash":"aeaeef80e10c04c846c9aa7e93b7c934bfa1e9bf","modified":1487301189000},{"_id":"themes/concise/languages/default.yml","hash":"5db1f550634d9ba11ea0a6388e866f95f01a93b2","modified":1487301189000},{"_id":"themes/concise/languages/zh-CN.yml","hash":"1b7d34e0fc88db3fd6daab75ac315efa59c3a7cd","modified":1487301189000},{"_id":"themes/concise/languages/zh-TW.yml","hash":"1b7d34e0fc88db3fd6daab75ac315efa59c3a7cd","modified":1487301189000},{"_id":"themes/concise/layout/.DS_Store","hash":"d4d592500838b64385a175804d80f9c66f8b171e","modified":1487301189000},{"_id":"themes/concise/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1487301189000},{"_id":"themes/concise/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1487301189000},{"_id":"themes/concise/layout/index.ejs","hash":"b024d199cd0f280694244fea1eaa99813f1ada0a","modified":1487301189000},{"_id":"themes/concise/layout/layout.ejs","hash":"5725f27f161f15cc44e4a6c55251eeebb5e123a7","modified":1487301189000},{"_id":"themes/concise/layout/page.ejs","hash":"fd4ee754cec9e39a33c00f90a22ccf6639db1078","modified":1487301189000},{"_id":"themes/concise/layout/post.ejs","hash":"fd4ee754cec9e39a33c00f90a22ccf6639db1078","modified":1487301189000},{"_id":"themes/concise/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1487301189000},{"_id":"themes/concise/source/.DS_Store","hash":"cec55b25796760b2b0bea8b5754e9eafef128623","modified":1487301189000},{"_id":"themes/concise/layout/_partial/after_footer.ejs","hash":"eb41a63550c087e15ad6f5e4056abb574e2188a7","modified":1487301189000},{"_id":"themes/concise/layout/_partial/archive.ejs","hash":"29ff211b455d57a2067d9b0ff56abb3aabf88d35","modified":1487301189000},{"_id":"themes/concise/layout/_partial/article_2.ejs","hash":"06445448b12c0475c21aa1ba645822f738916d20","modified":1487301189000},{"_id":"themes/concise/layout/_partial/article.ejs","hash":"4d3881c160297cee0bbf3e00c156a241ad30b2b6","modified":1487301189000},{"_id":"themes/concise/layout/_partial/footer.ejs","hash":"3af91b7b46c264452ca97f53efe3958122136f08","modified":1487301189000},{"_id":"themes/concise/layout/_partial/google_analytics.ejs","hash":"09585ef60b18844ae8810d30308d76278f194ba8","modified":1487301189000},{"_id":"themes/concise/layout/_partial/header.ejs","hash":"4b27b54876d3e9da8c5e38723e5d2fef04292612","modified":1487301189000},{"_id":"themes/concise/layout/_partial/head.ejs","hash":"10651389f3f0711e67028f9c0f41cccb182d98f1","modified":1487301189000},{"_id":"themes/concise/layout/_partial/math-jax.ejs","hash":"f59ee799c8804eb545dc65b683bbdaa515633a7a","modified":1487301189000},{"_id":"themes/concise/layout/_partial/pagination.ejs","hash":"1206b630a07444e8744365f14ddb26095c925ae1","modified":1487301189000},{"_id":"themes/concise/layout/_partial/sidebar.ejs","hash":"caf351797a18d03d8ee945ceb9f83785c50c09f9","modified":1487301189000},{"_id":"themes/concise/layout/_partial/totop.ejs","hash":"337a3f9c4cc1968601698c993002e03a6892b7fc","modified":1487301189000},{"_id":"themes/concise/layout/_widget/category.ejs","hash":"8a2b90dc29661371f060f710668929c3588e15e4","modified":1487301189000},{"_id":"themes/concise/layout/_widget/links.ejs","hash":"3e2827c4b677bcf3b3c79a2f3d6b6cba0fb022fa","modified":1487301189000},{"_id":"themes/concise/layout/_widget/recent_comments.ejs","hash":"2f4fae2bc1ca491b2a7e48e803065a66cee21f40","modified":1487301189000},{"_id":"themes/concise/layout/_widget/search.ejs","hash":"a479d00ba3252695dd6ddb33c467c528841b7aa1","modified":1487301189000},{"_id":"themes/concise/layout/_widget/tag.ejs","hash":"1914db78bea49c333067d79fe7ad9567d2b08d00","modified":1487301189000},{"_id":"themes/concise/layout/_widget/tagcloud.ejs","hash":"a236c86481196ae43206e056ba78cec14f1ac014","modified":1487301189000},{"_id":"themes/concise/layout/_widget/weibo.ejs","hash":"a81938299e5ed23fd02c552bdc9d40f29948dfd2","modified":1487301189000},{"_id":"themes/concise/source/css/style.styl","hash":"03b2ff8632e0ae79b84f1d54e909409a51ad0b33","modified":1487301189000},{"_id":"themes/concise/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487301189000},{"_id":"themes/concise/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487301189000},{"_id":"themes/concise/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487301189000},{"_id":"themes/concise/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487301189000},{"_id":"themes/concise/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487301189000},{"_id":"themes/concise/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487301189000},{"_id":"themes/concise/source/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1487301189000},{"_id":"themes/concise/source/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1487301189000},{"_id":"themes/concise/source/imgs/favicon.ico","hash":"b2035b84842afea8c42a01f1cae384341b5b0b80","modified":1487301189000},{"_id":"themes/concise/source/imgs/logo.png","hash":"431c34935ad6a1b9dc89e54bffe9a0bca894a936","modified":1487301189000},{"_id":"themes/concise/source/imgs/scrollup.png","hash":"aadafe1118fa1820f565f30f217b9396361c48fe","modified":1487301189000},{"_id":"themes/concise/source/js/counter.js","hash":"8557a4674fa639f11fe78ca14f47089cad8d2df4","modified":1487301189000},{"_id":"themes/concise/source/js/gallery.js","hash":"d64473e9711d84267fccd1777f6b6b6fae63f34c","modified":1487301189000},{"_id":"themes/concise/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1487301189000},{"_id":"themes/concise/source/js/totop.js","hash":"05cbb8cd660b0bd525102773c11b39feaa660164","modified":1487301189000},{"_id":"themes/concise/source/imgs/.DS_Store","hash":"6654692fc8737953e68a04f0f92b39c0a2320122","modified":1487301189000},{"_id":"themes/concise/source/css/_base/utils.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1487301189000},{"_id":"themes/concise/source/js/jquery-2.1.0.min.js","hash":"98884258cbdb0d939fa2c5e74fc7ac9e56d8170f","modified":1487301189000},{"_id":"themes/concise/source/imgs/author.jpg","hash":"804c678d6922ee1d91bef56d608d0425726acc48","modified":1487301189000},{"_id":"themes/concise/layout/_partial/post/baidushare.ejs","hash":"940b2c1b23403b989dfaf0e979cbed19b212276f","modified":1487301189000},{"_id":"themes/concise/layout/_partial/post/article.ejs","hash":"3f157de67a7d1e11a91ea70c0e6914b4f8dcb7fc","modified":1487301189000},{"_id":"themes/concise/layout/_partial/post/category.ejs","hash":"be740939c5c2d4ffdbed9557b4e63a590058b476","modified":1487301189000},{"_id":"themes/concise/layout/_partial/post/comment.ejs","hash":"6d09fdafe0bd60c0387f6e8ec6d6aef9f607ba0d","modified":1487301189000},{"_id":"themes/concise/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1487301189000},{"_id":"themes/concise/layout/_partial/post/header.ejs","hash":"3b2d653f5dfcd6f58a291a35eda240458dd69b1b","modified":1487301189000},{"_id":"themes/concise/layout/_partial/post/pagination.ejs","hash":"3e9e6fd7e719bac399e706f28baf415f577ea363","modified":1487301189000},{"_id":"themes/concise/layout/_partial/post/tag.ejs","hash":"095418df66a27a28cbab16d7cb0d16001b0e23f1","modified":1487301189000},{"_id":"themes/concise/layout/_partial/post/title.ejs","hash":"d7fbc575d35ae68f9045a382c651450e4131f335","modified":1487301189000},{"_id":"themes/concise/source/css/_base/layout.styl","hash":"2727fddb6a27187444eb294550d2a17206ed406e","modified":1487301189000},{"_id":"themes/concise/source/css/_base/variable.styl","hash":"98fc63ca68915b690d410a2e82bc42a1774b47c8","modified":1487301189000},{"_id":"themes/concise/source/css/_partial/archive.styl","hash":"67fe4aae8e2f4b37395450c620114ed7aedbc007","modified":1487301189000},{"_id":"themes/concise/source/css/_partial/comment.styl","hash":"7217deecf31cd5b498f1d6938ec775cf390925e0","modified":1487301189000},{"_id":"themes/concise/source/css/_partial/footer.styl","hash":"48dd10f1bb2ee466a5a0ce3b1aed8efeb516b342","modified":1487301189000},{"_id":"themes/concise/source/css/_partial/article.styl","hash":"f43a8d7003404b61b8139f821eff65576af4f451","modified":1487301189000},{"_id":"themes/concise/source/css/_partial/header.styl","hash":"7a952f0703ab7fac01bc722355848bdb71ea0b95","modified":1487301189000},{"_id":"themes/concise/source/css/_partial/index.styl","hash":"df18a54f3bd44dc74bdf4c41c2b1014f3120b9b4","modified":1487301189000},{"_id":"themes/concise/source/css/_partial/recent_comment.styl","hash":"fd32c90f90f933e51394ad86e0a3ccde00102bc8","modified":1487301189000},{"_id":"themes/concise/source/css/_partial/sidebar.styl","hash":"de8573f11d2769ea810d55eec69183bdf57831b0","modified":1487301189000},{"_id":"themes/concise/source/css/_partial/syntax.styl","hash":"6dac3435a74faa483cb98e86847a715c57f01644","modified":1487301189000},{"_id":"themes/concise/source/css/font/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1487301189000},{"_id":"themes/concise/source/css/font/fontdiao.eot","hash":"b86d86b4d150d794de1b2f33a6b6119170bc2e84","modified":1487301189000},{"_id":"themes/concise/source/css/font/fontdiao.ttf","hash":"ec74cab50808d3cf154deb898a901b2bf91e40f1","modified":1487301189000},{"_id":"themes/concise/source/css/font/fontdiao.woff","hash":"454ef07ddeda09ea9801a2892893ab6e1d75e8b8","modified":1487301189000},{"_id":"themes/concise/source/css/font/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1487301189000},{"_id":"themes/concise/source/css/font/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1487301189000},{"_id":"themes/concise/source/css/font/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1487301189000},{"_id":"themes/concise/source/css/font/fontdiao.svg","hash":"696bd584a358dc3fde8424a6d6459b605d15685c","modified":1487301189000},{"_id":"themes/concise/source/css/font/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1487301189000},{"_id":"public/baidusitemap.xml","hash":"db76e7e95e15e5bed693a0f3c5a1eccd91b0a7e5","modified":1487301532898},{"_id":"public/atom.xml","hash":"66170e345fdd26bdbfc506ea3dd32615539e4e12","modified":1487301534093},{"_id":"public/sitemap.xml","hash":"5258dba49c5643919bd7ba4fbd71ed3cf45b10d3","modified":1487301534094},{"_id":"public/about/index.html","hash":"fe74aa5ed5c74c6b41cb1b9d2ba96c62a8a6e054","modified":1487301534143},{"_id":"public/2016/04/14/移动端布局/index.html","hash":"3875e23a0d4a8373cf033ab7f151a1b990e64ead","modified":1487301534143},{"_id":"public/2015/11/18/异步javascript/index.html","hash":"ec5cbf3599277a6943b097f2fc02563eb8ebe160","modified":1487301534143},{"_id":"public/2015/11/17/动画/index.html","hash":"eb48b38ffc1d19aa7c42291e3a4f9417d481e8ef","modified":1487301534143},{"_id":"public/2015/11/16/Synergy实现多个主机之间共享键鼠/index.html","hash":"ec3eff50e05f258269647bfe631e2b50407c135d","modified":1487301534143},{"_id":"public/2015/11/15/Jcrop/index.html","hash":"aa8fbd848fd3a2c47cbad5576c16e09618003a18","modified":1487301534143},{"_id":"public/2015/11/14/smartcropJs/index.html","hash":"a4bbc618f966f7759d21f1cca7965a5166cc9720","modified":1487301534143},{"_id":"public/2015/11/06/nodejs网页抓取/index.html","hash":"7234be58f2c5e6688b5f957b78629329b5c11e49","modified":1487301534143},{"_id":"public/2015/10/27/javascript数组的深度拷贝/index.html","hash":"8f05f295b5510cb0ab8e6b0d37dc62353bddde90","modified":1487301534143},{"_id":"public/2015/10/18/javascript对象之navigator/index.html","hash":"4091a7269a2e9983140c4d95a35028b499bd885d","modified":1487301534144},{"_id":"public/2015/10/15/从零开始Node-04/index.html","hash":"8f5c15becfc43e41bb0a60e656271489c7b97daa","modified":1487301534144},{"_id":"public/2015/10/13/从零开始Node-01/index.html","hash":"dc429fe6cca6fd7198a613c5bbfc1619cfc667a7","modified":1487301534144},{"_id":"public/2015/10/10/从零开始Python-05/index.html","hash":"9598e063befb6cf855660954990843669c5b96a4","modified":1487301534144},{"_id":"public/2015/10/06/从零开始Python-01/index.html","hash":"d90715179d0592c7dbaa41cc8d947e66ecde2a1f","modified":1487301534144},{"_id":"public/archives/index.html","hash":"3c8a57ac63268fa5585d8767fc5261869e366a07","modified":1487301534144},{"_id":"public/archives/page/2/index.html","hash":"7e40081b54a6e343f8693677b5ddfd3df5be1492","modified":1487301534144},{"_id":"public/archives/page/3/index.html","hash":"6ea5d5944e8c61ec39c3bb43bc11f5ae970ccc46","modified":1487301534144},{"_id":"public/archives/page/4/index.html","hash":"f99946e9994353f0c4db2dc1acbff6916849080f","modified":1487301534144},{"_id":"public/archives/page/5/index.html","hash":"77d65ccce49d2033c787a65e33081c7d843a2b18","modified":1487301534144},{"_id":"public/archives/page/6/index.html","hash":"574cd654ac8ad0776b43a34488043415cfa6fa39","modified":1487301534144},{"_id":"public/archives/page/7/index.html","hash":"e1647c1766f374cf77d9dcb9715f7bd0be19a4a7","modified":1487301534144},{"_id":"public/archives/page/8/index.html","hash":"7ceb7ff3d50c565cd705d6d13edbdb842554cf34","modified":1487301534144},{"_id":"public/archives/2015/index.html","hash":"a7fdd264de6b8b294f0584d3def86db5c6a9f7a5","modified":1487301534144},{"_id":"public/archives/2015/page/2/index.html","hash":"cbf3ac102edbbf5e43c10765e638b8ade3b2251a","modified":1487301534144},{"_id":"public/archives/2015/page/3/index.html","hash":"757812ae739e4b8b81f62ec17900062960ad9c88","modified":1487301534144},{"_id":"public/archives/2015/page/4/index.html","hash":"edc7c5489c9dbbdbd106597131d8e79466512352","modified":1487301534144},{"_id":"public/archives/2015/page/5/index.html","hash":"913ed2c032fdcc5b6f30cd4ef1eecb740027f858","modified":1487301534144},{"_id":"public/archives/2015/page/6/index.html","hash":"dfd8782ed8a85e2b9443c3db8529f92d7b2d7232","modified":1487301534145},{"_id":"public/archives/2015/10/index.html","hash":"aaf4e764cba5aacbadb399353f98c7aacc035f6a","modified":1487301534145},{"_id":"public/archives/2015/10/page/2/index.html","hash":"2ade99a7bb68133e6d1cad7bad1211d856354705","modified":1487301534145},{"_id":"public/archives/2015/10/page/3/index.html","hash":"b900ed4465150a702d628cdca9e0a75eb31deee0","modified":1487301534145},{"_id":"public/archives/2015/10/page/4/index.html","hash":"9e0b3fa3677c8ecb16aab090ea06ec1e5a47ba96","modified":1487301534145},{"_id":"public/archives/2015/11/index.html","hash":"a955148634a8c2e894339a7c7b20a5037c6c8357","modified":1487301534145},{"_id":"public/archives/2015/11/page/2/index.html","hash":"cc4e6f5362194924a0c5bb800ffd7f2d9f23b352","modified":1487301534145},{"_id":"public/archives/2015/11/page/3/index.html","hash":"b591a6c59abae092911667977ecb3e1e5975ddc2","modified":1487301534145},{"_id":"public/archives/2016/index.html","hash":"f8daea41254c4dc75c9e2e155935acb423323598","modified":1487301534145},{"_id":"public/archives/2016/04/index.html","hash":"823147a95502212d434762d7c49438b37fb63674","modified":1487301534145},{"_id":"public/archives/2016/08/index.html","hash":"2233d1a8d5f9028efe545b7c7fbbf553e6a89553","modified":1487301534145},{"_id":"public/archives/2016/10/index.html","hash":"693429a8cabed7d134b423736b331a21327a9013","modified":1487301534145},{"_id":"public/archives/2016/11/index.html","hash":"6b0723d9657695bdc282ff1eca751a2f0c28742b","modified":1487301534145},{"_id":"public/archives/2017/index.html","hash":"62a4e8b00686846cb77f4d0553954ffb2afd6d50","modified":1487301534145},{"_id":"public/archives/2017/02/index.html","hash":"4e950a51ecddf4223415c7abf7adf89beba55839","modified":1487301534145},{"_id":"public/page/8/index.html","hash":"0794c17baf3f3b3330a349275519120778b686e4","modified":1487301534145},{"_id":"public/tags/web/index.html","hash":"798d4c0b016bc1e0f59ae9e9a4d9abcecdbe0919","modified":1487301534145},{"_id":"public/tags/web/page/2/index.html","hash":"3670c5a2cba0f7d67936c2a1d1f97c543232330b","modified":1487301534146},{"_id":"public/tags/web/page/3/index.html","hash":"bc038c8d01c36fb182ca7fd5aaf2b1e2e98f5e07","modified":1487301534146},{"_id":"public/tags/javascript/index.html","hash":"e372d43fa47237ed20f20da080b166f4559c9230","modified":1487301534146},{"_id":"public/tags/javascript/page/2/index.html","hash":"5da4f741ef0730e10f4e8d058beefe2998995ab8","modified":1487301534146},{"_id":"public/tags/javascript/page/3/index.html","hash":"6f567d53155d957d661e1b28dd552c30477d05f4","modified":1487301534146},{"_id":"public/tags/nodejs/index.html","hash":"356b0c1d6593f62a9878612777250da4c0b83b0c","modified":1487301534146},{"_id":"public/tags/nodejs/page/2/index.html","hash":"b0c6183e43609463e58f772b24f2d424ba755f5a","modified":1487301534146},{"_id":"public/tags/tools/index.html","hash":"6ee021c6a73859a3dd2ca72b534d9c767d41cbb7","modified":1487301534146},{"_id":"public/tags/linux/index.html","hash":"0f2e07241c97560552009636bc316e1533e7fcc0","modified":1487301534146},{"_id":"public/tags/python/index.html","hash":"47c76edbccd3e7140d3388e3ff7c28a86f8a703b","modified":1487301534146},{"_id":"public/2017/02/09/网站性能监控showslow/index.html","hash":"3d52d667aad8b96b9db31fc20d4c08deea7cbaaa","modified":1487301534146},{"_id":"public/2017/02/09/实现发送邮件功能/index.html","hash":"a17434fa725d262a980529f0167d9bfc5fe2477d","modified":1487301534146},{"_id":"public/2017/02/07/前端笔试题集/index.html","hash":"e04d209797e6b11190483196ee3a4bd77d7ad562","modified":1487301534146},{"_id":"public/2017/02/07/linux下创建服务/index.html","hash":"0c4a7972c3ee689690a6d5da472643a607113e02","modified":1487301534146},{"_id":"public/2016/11/03/微信小程序开发/index.html","hash":"e25217df8603a21c11204a7c012bc4d2c1460588","modified":1487301534146},{"_id":"public/2016/11/02/nodejs利用session做登录控制/index.html","hash":"5e2b0ad1b77d6ad6ac204b44a65d790ef19f23a1","modified":1487301534146},{"_id":"public/2016/10/31/nodejs-mongodb/index.html","hash":"3eab3719472c20e7c1bcf9df1de399d2b56d1d83","modified":1487301534146},{"_id":"public/2016/10/31/mongodb/index.html","hash":"7ce14fca3daf6576134b3a1487f336ef2f800c4e","modified":1487301534147},{"_id":"public/2016/08/31/fetch/index.html","hash":"cf938148783a83e2cdf142824755bb3f609e16d1","modified":1487301534147},{"_id":"public/2016/04/14/移动端开发性能优化/index.html","hash":"8b3751cade995280280f8e609be3fbea83ec0c28","modified":1487301534147},{"_id":"public/2016/04/14/reactjs应用/index.html","hash":"3fec01e384a76e1945b370d17eaeb013c2d509e4","modified":1487301534147},{"_id":"public/2016/04/14/npm包开发/index.html","hash":"a020a457fd4c5c726a6c50fa80d659341b389401","modified":1487301534147},{"_id":"public/2016/04/14/nodejs开发控制台工具/index.html","hash":"8e031ff90f86c7bc2137d56652d127175712ff94","modified":1487301534147},{"_id":"public/2015/11/25/动态脚本/index.html","hash":"ffdf6fa9ab4957dd1dbb8088b69cf7df1b2c6f80","modified":1487301534147},{"_id":"public/2015/11/24/DOM操作/index.html","hash":"af951fb5d452fe7f0067b73a450935ee96caf9b8","modified":1487301534147},{"_id":"public/2015/11/23/shell基础/index.html","hash":"fc7c818f7adb7c2fa7d80dd9167178c39bfcfc5d","modified":1487301534147},{"_id":"public/2015/11/22/使用nproxy实现本地代理/index.html","hash":"c969279bcd291c0ad8ed65e17f661eb8ee7fbc78","modified":1487301534147},{"_id":"public/2015/11/21/javascript面向对象相关/index.html","hash":"d3c1383f625301fea056178b112e02eea737e305","modified":1487301534147},{"_id":"public/2015/11/21/nginx配置https/index.html","hash":"2e07222767df33b13439c6753d5cb52358f3758d","modified":1487301534147},{"_id":"public/2015/11/20/表单中按回车键自动提交/index.html","hash":"2607f6f55c74e7b4935046d136d164edf34e1141","modified":1487301534147},{"_id":"public/2015/11/19/前端知识点集合/index.html","hash":"4474e23d799ca2c16c48ab4a02f8b22573e40327","modified":1487301534147},{"_id":"public/2015/11/13/RactiveJs应用/index.html","hash":"84201252e66009792a3474ddc3ad4d41dd7a0fa2","modified":1487301534147},{"_id":"public/2015/11/12/avalon应用/index.html","hash":"f2d60fa7233d49209f0a5a04b02222328f8c8111","modified":1487301534147},{"_id":"public/2015/11/11/html页面中meta标签/index.html","hash":"702866ffd46ce550542252891f4cd666e5198951","modified":1487301534147},{"_id":"public/2015/11/10/浏览器扩展应用开发/index.html","hash":"3e37bb0a736552dca08c7f4c3d605c378abe0b01","modified":1487301534147},{"_id":"public/2015/11/09/BigPipe/index.html","hash":"234344e5dde3a7632a22de167bf7f7724a7d716f","modified":1487301534148},{"_id":"public/2015/11/08/nodejs调用phantom/index.html","hash":"f91eadfcf3edb9e60e8bc6960ee49a3fa604da01","modified":1487301534148},{"_id":"public/2015/11/07/nodejs读取指定路径下文件夹文件/index.html","hash":"1fc2d698c7bbe1038cf87865c36eb31e2823e187","modified":1487301534148},{"_id":"public/2015/11/05/nodejs中fs模块/index.html","hash":"8e0ce260a49b265e77399e87dd612208ad360597","modified":1487301534148},{"_id":"public/2015/11/04/javascript变量提升与函数声明/index.html","hash":"047984f5b8cb13b05ae02dd8f6987301afaaac86","modified":1487301534148},{"_id":"public/2015/11/03/javascript实现继承/index.html","hash":"64f367957c090463ff9249c8289bcf3e08f20186","modified":1487301534148},{"_id":"public/2015/11/02/爬虫/index.html","hash":"f67eda32213a7836051014091167b792a580d331","modified":1487301534148},{"_id":"public/2015/11/01/NodeJs搭建静态资源服务器/index.html","hash":"a305998244cd550d4adb49a0e27f3e6d84906368","modified":1487301534148},{"_id":"public/2015/10/31/NodeJs模块之http/index.html","hash":"7accabfe47a5cd14aa70bfb131eb1efd36c6f831","modified":1487301534148},{"_id":"public/2015/10/30/javascript数组排序/index.html","hash":"cc27f390cd63a0eb869766a8a57ee5db5684336d","modified":1487301534148},{"_id":"public/2015/10/29/NodeJs子进程/index.html","hash":"5f9821e491cb6b46e5b4f6e6d0ab3ce04b355c84","modified":1487301534148},{"_id":"public/2015/10/28/linux常用命令/index.html","hash":"6558ac85d9dc5e0b53bd9e8dcf5fc69edb46896d","modified":1487301534148},{"_id":"public/2015/10/26/javascript对象的深度拷贝/index.html","hash":"831433dea10e787490d64c1cfc5ac7b0b55cf5c4","modified":1487301534148},{"_id":"public/2015/10/25/延迟加载解决方案/index.html","hash":"b2c62451443780c6e9dbf924f390fed6fedcc597","modified":1487301534148},{"_id":"public/2015/10/24/javascript脚本执行对页面加载的影响/index.html","hash":"56bb6d92a523d8f946f34fbed84c43241b7d8fec","modified":1487301534148},{"_id":"public/2015/10/23/页面脚本加载分析/index.html","hash":"d8f9714af6bb3a629bb725b59e51798f6a2fc779","modified":1487301534148},{"_id":"public/2015/10/22/javascript中判断变量类型/index.html","hash":"9248592d651cbc8f8501aa3e04a621f3b6fc20e2","modified":1487301534148},{"_id":"public/2015/10/21/javascript中变量作用域/index.html","hash":"b694ac69e3f9424e16e906c2ad15d21cd2e104a8","modified":1487301534148},{"_id":"public/2015/10/20/markdown语法/index.html","hash":"cf03bfea34a8be167582803f14a8f6089de9d0db","modified":1487301534148},{"_id":"public/2015/10/19/velocity语法/index.html","hash":"f32217fc8021861b8384ae0a08800e977d87f6af","modified":1487301534149},{"_id":"public/2015/10/17/javascript跳出循环/index.html","hash":"5f1107c6bb69752e88b2a54b9e938f4674f09acd","modified":1487301534149},{"_id":"public/2015/10/16/从零开始Node-05/index.html","hash":"3beb8f3d2470891e94c8221afd1473dcfc7eb366","modified":1487301534149},{"_id":"public/2015/10/14/从零开始Node-03/index.html","hash":"64c852996f8460bfc7f7dd4f5a5026134b1d239b","modified":1487301534149},{"_id":"public/2015/10/13/从零开始Node-02/index.html","hash":"48b0f9fc8c338761d8a0498d9eec17acb23bdc24","modified":1487301534149},{"_id":"public/2015/10/12/从零开始Python-07/index.html","hash":"4e23406b45d7dccfedb157029622851c35b25038","modified":1487301534149},{"_id":"public/2015/10/11/从零开始Python-06/index.html","hash":"7c9b45ee37c2562a72985332a155244b13000329","modified":1487301534149},{"_id":"public/2015/10/09/从零开始Python-04/index.html","hash":"6bfe99227704ea7b44522af08cafb1368fbe0457","modified":1487301534149},{"_id":"public/2015/10/08/从零开始Python-03/index.html","hash":"69a8d8aadd5976d86622e770410a9aba358f78c1","modified":1487301534149},{"_id":"public/2015/10/07/从零开始Python-02/index.html","hash":"5f29fda6105f9c8fe522e86a1d00a46dcadac349","modified":1487301534149},{"_id":"public/2015/10/05/Dom元素尺寸相关/index.html","hash":"1a7b314065d2b30d1c11adc9692bea3d03b9f67d","modified":1487301534149},{"_id":"public/2015/10/04/html5文件上传/index.html","hash":"dcfeed14977e49246e0240148186a95f0d1115d6","modified":1487301534149},{"_id":"public/2015/10/03/javascript数组/index.html","hash":"a354602646ec868149b2eaa2aecc7f2b99588375","modified":1487301534149},{"_id":"public/2015/10/02/javascript实现浏览器本地存储/index.html","hash":"d3736a4826cca2ecf3de009c1835f639666240ee","modified":1487301534149},{"_id":"public/2015/10/01/如何调试移动端网页/index.html","hash":"aac5210047bd4f16590695d7951cc3cef35dcabe","modified":1487301534149},{"_id":"public/index.html","hash":"1d7855763077164323f673561e333a41afc627da","modified":1487301534149},{"_id":"public/page/2/index.html","hash":"56d24bddc2d5c5a04ee0b249f7641aeffd07cf4b","modified":1487301534149},{"_id":"public/page/3/index.html","hash":"26be5b9aadb5eb736f4ce0699ed052cc12d2eab0","modified":1487301534149},{"_id":"public/page/4/index.html","hash":"f712caf272464b2cfba4a4d90865f8f05cfafb49","modified":1487301534149},{"_id":"public/page/5/index.html","hash":"4f9395b0e1fb08415dfb46fda8e14ea5281ad944","modified":1487301534150},{"_id":"public/page/6/index.html","hash":"a7bb13c0e5c6564a39c64f54c0607d65b5df0dec","modified":1487301534150},{"_id":"public/page/7/index.html","hash":"21b689be640ba798535452a630ecc3d11a6ab13e","modified":1487301534150},{"_id":"public/robots.txt","hash":"71cdd7ddc6965611c619d599ce4e23209baac6aa","modified":1487301534158},{"_id":"public/CNAME","hash":"fd02134de092b93822372d124a4dfa947e97069d","modified":1487301534158},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1487301534158},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1487301534158},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1487301534158},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1487301534159},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1487301534159},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1487301534159},{"_id":"public/imgs/favicon.ico","hash":"b2035b84842afea8c42a01f1cae384341b5b0b80","modified":1487301534159},{"_id":"public/imgs/scrollup.png","hash":"aadafe1118fa1820f565f30f217b9396361c48fe","modified":1487301534159},{"_id":"public/imgs/logo.png","hash":"431c34935ad6a1b9dc89e54bffe9a0bca894a936","modified":1487301534160},{"_id":"public/css/font/fontdiao.ttf","hash":"ec74cab50808d3cf154deb898a901b2bf91e40f1","modified":1487301534160},{"_id":"public/css/font/fontdiao.woff","hash":"454ef07ddeda09ea9801a2892893ab6e1d75e8b8","modified":1487301534160},{"_id":"public/css/font/fontdiao.eot","hash":"b86d86b4d150d794de1b2f33a6b6119170bc2e84","modified":1487301534160},{"_id":"public/css/font/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1487301534160},{"_id":"public/css/font/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1487301534160},{"_id":"public/imgs/author.jpg","hash":"804c678d6922ee1d91bef56d608d0425726acc48","modified":1487301534825},{"_id":"public/css/font/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1487301534827},{"_id":"public/css/font/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1487301534827},{"_id":"public/fancybox/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1487301534866},{"_id":"public/js/gallery.js","hash":"d64473e9711d84267fccd1777f6b6b6fae63f34c","modified":1487301534867},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1487301534867},{"_id":"public/js/counter.js","hash":"8557a4674fa639f11fe78ca14f47089cad8d2df4","modified":1487301534867},{"_id":"public/js/totop.js","hash":"05cbb8cd660b0bd525102773c11b39feaa660164","modified":1487301534867},{"_id":"public/css/style.css","hash":"1735f90cca3ea2da1d4d52f4f7301600878d8a8b","modified":1487301534867},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1487301534867},{"_id":"public/js/jquery-2.1.0.min.js","hash":"98884258cbdb0d939fa2c5e74fc7ac9e56d8170f","modified":1487301534867},{"_id":"public/css/font/fontdiao.svg","hash":"696bd584a358dc3fde8424a6d6459b605d15685c","modified":1487301534874},{"_id":"public/css/font/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1487301534879}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2015-10-01T09:41:32.000Z","_content":"#### 个人简介\n\n##### 经历\n>web前端工程师，2014年至今就职于去哪儿网，度假部门FE，先后参与开发c2b私人订制项目,b2b同业网，b2c tts交易系统，b2b2c系统，app首页(hy),touch首页,度假搜索频道,度假团购等。\n\n##### 技能\njavascript avalon nodejs reactjs css\n\n##### 联系方式\n* mobile: 18515981595\n* email: wuzhuo0425@163.com","source":"about/index.md","raw":"title: about\ndate: 2015-10-01 17:41:32\n---\n#### 个人简介\n\n##### 经历\n>web前端工程师，2014年至今就职于去哪儿网，度假部门FE，先后参与开发c2b私人订制项目,b2b同业网，b2c tts交易系统，b2b2c系统，app首页(hy),touch首页,度假搜索频道,度假团购等。\n\n##### 技能\njavascript avalon nodejs reactjs css\n\n##### 联系方式\n* mobile: 18515981595\n* email: wuzhuo0425@163.com","updated":"2017-02-17T03:13:09.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciz98xhlt0000t0yjg5vcnfh2","content":"<h4 id=\"个人简介\">个人简介</h4><h5 id=\"经历\">经历</h5><blockquote>\n<p>web前端工程师，2014年至今就职于去哪儿网，度假部门FE，先后参与开发c2b私人订制项目,b2b同业网，b2c tts交易系统，b2b2c系统，app首页(hy),touch首页,度假搜索频道,度假团购等。</p>\n</blockquote>\n<h5 id=\"技能\">技能</h5><p>javascript avalon nodejs reactjs css</p>\n<h5 id=\"联系方式\">联系方式</h5><ul>\n<li>mobile: 18515981595</li>\n<li>email: wuzhuo0425@163.com</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"个人简介\">个人简介</h4><h5 id=\"经历\">经历</h5><blockquote>\n<p>web前端工程师，2014年至今就职于去哪儿网，度假部门FE，先后参与开发c2b私人订制项目,b2b同业网，b2c tts交易系统，b2b2c系统，app首页(hy),touch首页,度假搜索频道,度假团购等。</p>\n</blockquote>\n<h5 id=\"技能\">技能</h5><p>javascript avalon nodejs reactjs css</p>\n<h5 id=\"联系方式\">联系方式</h5><ul>\n<li>mobile: 18515981595</li>\n<li>email: wuzhuo0425@163.com</li>\n</ul>\n"}],"Post":[{"title":"BigPipe","date":"2015-11-09T07:03:01.000Z","toc":true,"_content":"#### BigPipe\n>1. BigPipe就是把网页分解成多个模块，然后通过服务器和浏览器建立管道链接，分别对各个模块进行输出，最后完成一个完整的页面。\n2. 传统方式的页面渲染大致分为两类，一种是使用动态语言jsp，asp.net等进行完整页面的渲染以及交互，另一种是服务端负责渲染最基本的页面结构，或者说是页面上静态的结构，然后由javascript负责渲染页面动态的部分，以及各种交互的部分。\n<!--more-->\n\t* 第一种方式在服务器进行完整的计算渲染后，一次性传输到浏览器端，过程可能会比较长。\n\t* 第二种方式页面渲染速度比较快，但是到了客户端后，可能会发出很多网络数据请求，数据请求的过程对性能的影响也是比较大的。\n\t那么使用bigpipe的好处就突显出来了。\n\t* 首先各个请求都是异步的，互不影响的，当一个请求返回结果后，服务器端就可以继续完成数据处理以及dom元素渲染，然后输出到浏览器端，浏览器端接收到结果后直接渲染页面某一模块。\n\t* 其次，浏览器在整个页面阶段只发出了一个请求，那就是页面请求，页面渲染结束期间，这个请求是不会中断的。\n\t虽然上面叙述了一些bigpipe的好处，但是有没有发现，由于请求接口的过程是异步的，那么返回时间也是不固定的，就会出现页面渲染并不是按照我们预想的顺序。这时候我们又想出了一个办法，在页面初始阶段返回页面基本骨架，然后各个请求返回结果后，渲染到固定模块内，保证页面不会乱。而bigpipe初始阶段返回不闭合的html，等所有传输结束后返回页面闭合标签，整个过程结束。\n3. http1.1 支持持续的连接，这样就可以发出多个请求，并且接收多个请求。还可以发送流水请求，在一个请求未返回结果的时候就继续发生第二个请求。\n\n#### nodejs实现\n1. 核心就是http.requert()\n2. html页面访问直接请求nodejs渲染的页面。\n3. 当请求到达nodejs时，nodejs返回一个不闭合html框架。\n4. nodejs发出多个请求，每个请求都是一个页面的模块部分。\n5. 分别接收到各个请求结果后，处理数据，渲染模版，取到html，返回一个script标签，里面调用客户端脚本，在指定div内写这段html。这段代码就是最简单的`document.getElementById('#id').innerHTML=html;。`\n6. 所有请求返回结果后，nodejs返回页面闭合标签。\n7. 其他的页面效果，特效，交互交给javascript。\n\n#### 简单实现\n\n```javascript\n\nvar http = require('http');\nhttp.createServer(function(request, response) {\n\tresponse.writeHead(200, {\"Content-Type\": \"text/html\"});\n\tresponse.write(\"<!Doctype html><html lang=\\\"en\\\"><head><title>bigpipe</title>\");\n\tresponse.write(\"<script type=\\\"text/javascript\\\">function load(id,html) { var ele=document.getElementById(id); ele.innerHTML = html;}</script>\");\n\tresponse.write(\"</head><body><div id=\\\"top\\\"></div>\");\n\n\tvar url = 'http://test.com/a.json';\n\tvar requestHeaders = request.headers;\n\n\tvar options = {\n\t    url: url,\n\t    method: \"POST\",\n\t    headers: {\n\t        \"user-agent\": requestHeaders[\"user-agent\"],\n\t        \"cookie\": requestHeaders[\"cookie\"]\n\t    },\n\t    timeout: 6000\n\t};\n\n\tvar post = http.request(options);\n\tpost.addListener('response', function(res) {\n\t\tres.addListener('data', function(data) {\n\t\t\tvar html = dealHtml(data);\n\t\t\tresponse.write('<script>load('top','+html+')</script>');\n\t\t});\n\t\tres.addListener('end', function() {\n\t\t\tresponse.end();\n\t\t});\n\t});\n\tpost.end();\n\tresponse.write(\"</body></html>\");\n\n}).listen(8998);\n```","source":"_posts/BigPipe.md","raw":"title: BigPipe\ndate: 2015-11-09 15:03:01\ntags: web\ntoc: true\n---\n#### BigPipe\n>1. BigPipe就是把网页分解成多个模块，然后通过服务器和浏览器建立管道链接，分别对各个模块进行输出，最后完成一个完整的页面。\n2. 传统方式的页面渲染大致分为两类，一种是使用动态语言jsp，asp.net等进行完整页面的渲染以及交互，另一种是服务端负责渲染最基本的页面结构，或者说是页面上静态的结构，然后由javascript负责渲染页面动态的部分，以及各种交互的部分。\n<!--more-->\n\t* 第一种方式在服务器进行完整的计算渲染后，一次性传输到浏览器端，过程可能会比较长。\n\t* 第二种方式页面渲染速度比较快，但是到了客户端后，可能会发出很多网络数据请求，数据请求的过程对性能的影响也是比较大的。\n\t那么使用bigpipe的好处就突显出来了。\n\t* 首先各个请求都是异步的，互不影响的，当一个请求返回结果后，服务器端就可以继续完成数据处理以及dom元素渲染，然后输出到浏览器端，浏览器端接收到结果后直接渲染页面某一模块。\n\t* 其次，浏览器在整个页面阶段只发出了一个请求，那就是页面请求，页面渲染结束期间，这个请求是不会中断的。\n\t虽然上面叙述了一些bigpipe的好处，但是有没有发现，由于请求接口的过程是异步的，那么返回时间也是不固定的，就会出现页面渲染并不是按照我们预想的顺序。这时候我们又想出了一个办法，在页面初始阶段返回页面基本骨架，然后各个请求返回结果后，渲染到固定模块内，保证页面不会乱。而bigpipe初始阶段返回不闭合的html，等所有传输结束后返回页面闭合标签，整个过程结束。\n3. http1.1 支持持续的连接，这样就可以发出多个请求，并且接收多个请求。还可以发送流水请求，在一个请求未返回结果的时候就继续发生第二个请求。\n\n#### nodejs实现\n1. 核心就是http.requert()\n2. html页面访问直接请求nodejs渲染的页面。\n3. 当请求到达nodejs时，nodejs返回一个不闭合html框架。\n4. nodejs发出多个请求，每个请求都是一个页面的模块部分。\n5. 分别接收到各个请求结果后，处理数据，渲染模版，取到html，返回一个script标签，里面调用客户端脚本，在指定div内写这段html。这段代码就是最简单的`document.getElementById('#id').innerHTML=html;。`\n6. 所有请求返回结果后，nodejs返回页面闭合标签。\n7. 其他的页面效果，特效，交互交给javascript。\n\n#### 简单实现\n\n```javascript\n\nvar http = require('http');\nhttp.createServer(function(request, response) {\n\tresponse.writeHead(200, {\"Content-Type\": \"text/html\"});\n\tresponse.write(\"<!Doctype html><html lang=\\\"en\\\"><head><title>bigpipe</title>\");\n\tresponse.write(\"<script type=\\\"text/javascript\\\">function load(id,html) { var ele=document.getElementById(id); ele.innerHTML = html;}</script>\");\n\tresponse.write(\"</head><body><div id=\\\"top\\\"></div>\");\n\n\tvar url = 'http://test.com/a.json';\n\tvar requestHeaders = request.headers;\n\n\tvar options = {\n\t    url: url,\n\t    method: \"POST\",\n\t    headers: {\n\t        \"user-agent\": requestHeaders[\"user-agent\"],\n\t        \"cookie\": requestHeaders[\"cookie\"]\n\t    },\n\t    timeout: 6000\n\t};\n\n\tvar post = http.request(options);\n\tpost.addListener('response', function(res) {\n\t\tres.addListener('data', function(data) {\n\t\t\tvar html = dealHtml(data);\n\t\t\tresponse.write('<script>load('top','+html+')</script>');\n\t\t});\n\t\tres.addListener('end', function() {\n\t\t\tresponse.end();\n\t\t});\n\t});\n\tpost.end();\n\tresponse.write(\"</body></html>\");\n\n}).listen(8998);\n```","slug":"BigPipe","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhlx0001t0yj8vww2me9","content":"<h4 id=\"BigPipe\">BigPipe</h4><blockquote>\n<ol>\n<li>BigPipe就是把网页分解成多个模块，然后通过服务器和浏览器建立管道链接，分别对各个模块进行输出，最后完成一个完整的页面。</li>\n<li>传统方式的页面渲染大致分为两类，一种是使用动态语言jsp，asp.net等进行完整页面的渲染以及交互，另一种是服务端负责渲染最基本的页面结构，或者说是页面上静态的结构，然后由javascript负责渲染页面动态的部分，以及各种交互的部分。<a id=\"more\"></a>\n<ul>\n<li>第一种方式在服务器进行完整的计算渲染后，一次性传输到浏览器端，过程可能会比较长。</li>\n<li>第二种方式页面渲染速度比较快，但是到了客户端后，可能会发出很多网络数据请求，数据请求的过程对性能的影响也是比较大的。<br>那么使用bigpipe的好处就突显出来了。</li>\n<li>首先各个请求都是异步的，互不影响的，当一个请求返回结果后，服务器端就可以继续完成数据处理以及dom元素渲染，然后输出到浏览器端，浏览器端接收到结果后直接渲染页面某一模块。</li>\n<li>其次，浏览器在整个页面阶段只发出了一个请求，那就是页面请求，页面渲染结束期间，这个请求是不会中断的。<br>虽然上面叙述了一些bigpipe的好处，但是有没有发现，由于请求接口的过程是异步的，那么返回时间也是不固定的，就会出现页面渲染并不是按照我们预想的顺序。这时候我们又想出了一个办法，在页面初始阶段返回页面基本骨架，然后各个请求返回结果后，渲染到固定模块内，保证页面不会乱。而bigpipe初始阶段返回不闭合的html，等所有传输结束后返回页面闭合标签，整个过程结束。</li>\n</ul>\n</li>\n<li>http1.1 支持持续的连接，这样就可以发出多个请求，并且接收多个请求。还可以发送流水请求，在一个请求未返回结果的时候就继续发生第二个请求。</li>\n</ol>\n</blockquote>\n<h4 id=\"nodejs实现\">nodejs实现</h4><ol>\n<li>核心就是http.requert()</li>\n<li>html页面访问直接请求nodejs渲染的页面。</li>\n<li>当请求到达nodejs时，nodejs返回一个不闭合html框架。</li>\n<li>nodejs发出多个请求，每个请求都是一个页面的模块部分。</li>\n<li>分别接收到各个请求结果后，处理数据，渲染模版，取到html，返回一个script标签，里面调用客户端脚本，在指定div内写这段html。这段代码就是最简单的<code>document.getElementById(&#39;#id&#39;).innerHTML=html;。</code></li>\n<li>所有请求返回结果后，nodejs返回页面闭合标签。</li>\n<li>其他的页面效果，特效，交互交给javascript。</li>\n</ol>\n<h4 id=\"简单实现\">简单实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">\tresponse.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">\tresponse.write(<span class=\"string\">\"&lt;!Doctype html&gt;&lt;html lang=\\\"en\\\"&gt;&lt;head&gt;&lt;title&gt;bigpipe&lt;/title&gt;\"</span>);</div><div class=\"line\">\tresponse.write(<span class=\"string\">\"&lt;script type=\\\"text/javascript\\\"&gt;function load(id,html) &#123; var ele=document.getElementById(id); ele.innerHTML = html;&#125;&lt;/script&gt;\"</span>);</div><div class=\"line\">\tresponse.write(<span class=\"string\">\"&lt;/head&gt;&lt;body&gt;&lt;div id=\\\"top\\\"&gt;&lt;/div&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> url = <span class=\"string\">'http://test.com/a.json'</span>;</div><div class=\"line\">\t<span class=\"keyword\">var</span> requestHeaders = request.headers;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\t    <span class=\"attr\">url</span>: url,</div><div class=\"line\">\t    <span class=\"attr\">method</span>: <span class=\"string\">\"POST\"</span>,</div><div class=\"line\">\t    <span class=\"attr\">headers</span>: &#123;</div><div class=\"line\">\t        <span class=\"string\">\"user-agent\"</span>: requestHeaders[<span class=\"string\">\"user-agent\"</span>],</div><div class=\"line\">\t        <span class=\"string\">\"cookie\"</span>: requestHeaders[<span class=\"string\">\"cookie\"</span>]</div><div class=\"line\">\t    &#125;,</div><div class=\"line\">\t    <span class=\"attr\">timeout</span>: <span class=\"number\">6000</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> post = http.request(options);</div><div class=\"line\">\tpost.addListener(<span class=\"string\">'response'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">\t\tres.addListener(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> html = dealHtml(data);</div><div class=\"line\">\t\t\tresponse.write(<span class=\"string\">'&lt;script&gt;load('</span>top<span class=\"string\">','</span>+html+<span class=\"string\">')&lt;/script&gt;'</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\tres.addListener(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\tresponse.end();</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tpost.end();</div><div class=\"line\">\tresponse.write(<span class=\"string\">\"&lt;/body&gt;&lt;/html&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;).listen(<span class=\"number\">8998</span>);</div></pre></td></tr></table></figure>","excerpt":"<h4 id=\"BigPipe\">BigPipe</h4><blockquote>\n<ol>\n<li>BigPipe就是把网页分解成多个模块，然后通过服务器和浏览器建立管道链接，分别对各个模块进行输出，最后完成一个完整的页面。</li>\n<li>传统方式的页面渲染大致分为两类，一种是使用动态语言jsp，asp.net等进行完整页面的渲染以及交互，另一种是服务端负责渲染最基本的页面结构，或者说是页面上静态的结构，然后由javascript负责渲染页面动态的部分，以及各种交互的部分。","more":"<ul>\n<li>第一种方式在服务器进行完整的计算渲染后，一次性传输到浏览器端，过程可能会比较长。</li>\n<li>第二种方式页面渲染速度比较快，但是到了客户端后，可能会发出很多网络数据请求，数据请求的过程对性能的影响也是比较大的。<br>那么使用bigpipe的好处就突显出来了。</li>\n<li>首先各个请求都是异步的，互不影响的，当一个请求返回结果后，服务器端就可以继续完成数据处理以及dom元素渲染，然后输出到浏览器端，浏览器端接收到结果后直接渲染页面某一模块。</li>\n<li>其次，浏览器在整个页面阶段只发出了一个请求，那就是页面请求，页面渲染结束期间，这个请求是不会中断的。<br>虽然上面叙述了一些bigpipe的好处，但是有没有发现，由于请求接口的过程是异步的，那么返回时间也是不固定的，就会出现页面渲染并不是按照我们预想的顺序。这时候我们又想出了一个办法，在页面初始阶段返回页面基本骨架，然后各个请求返回结果后，渲染到固定模块内，保证页面不会乱。而bigpipe初始阶段返回不闭合的html，等所有传输结束后返回页面闭合标签，整个过程结束。</li>\n</ul>\n</li>\n<li>http1.1 支持持续的连接，这样就可以发出多个请求，并且接收多个请求。还可以发送流水请求，在一个请求未返回结果的时候就继续发生第二个请求。</li>\n</ol>\n</blockquote>\n<h4 id=\"nodejs实现\">nodejs实现</h4><ol>\n<li>核心就是http.requert()</li>\n<li>html页面访问直接请求nodejs渲染的页面。</li>\n<li>当请求到达nodejs时，nodejs返回一个不闭合html框架。</li>\n<li>nodejs发出多个请求，每个请求都是一个页面的模块部分。</li>\n<li>分别接收到各个请求结果后，处理数据，渲染模版，取到html，返回一个script标签，里面调用客户端脚本，在指定div内写这段html。这段代码就是最简单的<code>document.getElementById(&#39;#id&#39;).innerHTML=html;。</code></li>\n<li>所有请求返回结果后，nodejs返回页面闭合标签。</li>\n<li>其他的页面效果，特效，交互交给javascript。</li>\n</ol>\n<h4 id=\"简单实现\">简单实现</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">request, response</span>) </span>&#123;</div><div class=\"line\">\tresponse.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"text/html\"</span>&#125;);</div><div class=\"line\">\tresponse.write(<span class=\"string\">\"&lt;!Doctype html&gt;&lt;html lang=\\\"en\\\"&gt;&lt;head&gt;&lt;title&gt;bigpipe&lt;/title&gt;\"</span>);</div><div class=\"line\">\tresponse.write(<span class=\"string\">\"&lt;script type=\\\"text/javascript\\\"&gt;function load(id,html) &#123; var ele=document.getElementById(id); ele.innerHTML = html;&#125;&lt;/script&gt;\"</span>);</div><div class=\"line\">\tresponse.write(<span class=\"string\">\"&lt;/head&gt;&lt;body&gt;&lt;div id=\\\"top\\\"&gt;&lt;/div&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> url = <span class=\"string\">'http://test.com/a.json'</span>;</div><div class=\"line\">\t<span class=\"keyword\">var</span> requestHeaders = request.headers;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\t    <span class=\"attr\">url</span>: url,</div><div class=\"line\">\t    <span class=\"attr\">method</span>: <span class=\"string\">\"POST\"</span>,</div><div class=\"line\">\t    <span class=\"attr\">headers</span>: &#123;</div><div class=\"line\">\t        <span class=\"string\">\"user-agent\"</span>: requestHeaders[<span class=\"string\">\"user-agent\"</span>],</div><div class=\"line\">\t        <span class=\"string\">\"cookie\"</span>: requestHeaders[<span class=\"string\">\"cookie\"</span>]</div><div class=\"line\">\t    &#125;,</div><div class=\"line\">\t    <span class=\"attr\">timeout</span>: <span class=\"number\">6000</span></div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> post = http.request(options);</div><div class=\"line\">\tpost.addListener(<span class=\"string\">'response'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">\t\tres.addListener(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> html = dealHtml(data);</div><div class=\"line\">\t\t\tresponse.write(<span class=\"string\">'&lt;script&gt;load('</span>top<span class=\"string\">','</span>+html+<span class=\"string\">')&lt;/script&gt;'</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t\tres.addListener(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t\tresponse.end();</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tpost.end();</div><div class=\"line\">\tresponse.write(<span class=\"string\">\"&lt;/body&gt;&lt;/html&gt;\"</span>);</div><div class=\"line\"></div><div class=\"line\">&#125;).listen(<span class=\"number\">8998</span>);</div></pre></td></tr></table></figure>"},{"title":"DOM操作","date":"2015-11-24T07:03:01.000Z","toc":true,"_content":"#### Node\n##### 操作节点\n* appendChild()\n一个参数，要插入的节点\n* insertBefore()\n两个参数，要插入的节点和参照的节点\n* replaceChild()\n两个参数，要插入的节点和要替换的节点\n* removeChild()\n一个参数，要移除的节点\n* cloneNode()\n一个参数，布尔值，是否执行深度克隆\n* normalize()\n合并文本节点\n<!--more-->\n\n#### Document\n##### document.getElementById\n* IE7及以前的版本忽略大小写，除此之外必须严格按照大小写\n* 如果不传参数返回null\n* IE7及以前的版本如果表单元素name属性和某元素id相等，会返回表单元素\n##### document.getElementsByTagName\n* 返回标签元素的集合\n##### namedItem 返回标签集合中指定name元素\n* 使用中括号的方式能达到namedItem效果\n* 获取所有html元素，传入`*`\n```javascript\nvar images = document.getElementsByTagName('image');\nvar logo = images.namedItem('logo');\nvar author = images['author'];\ndocument.getElementsByName\n```\n与 document.getElementsByTagName 类似\n\n##### 特殊方法\n* document.anchors返回所有带name的a元素\n* document.forms返回所有form元素\n* document.images返回所有img元素\n* document.links返回所有带href的元素\n##### 元素属性\n* id 元素唯一标示\n* title 附加说明\n* className 元素css类\n* lang 元素内容语言代码\n* dir 语言方向\n\n##### 元素方法\n* getAttribute\n不能获取style属性，以及类似onclick这样的事件处理属性\n* setAttribute\n设置属性值，接收两个参数，第一个是属性名，第二个是属性值\n* removeAttribute\n彻底删除属性\n* attributes属性\nElement类型拥有attributes属性\n\n##### 方法\n* getNamedItem(name) 返回指定属性值 (可以使用方括号访问方式)\n```javascript\nvar id = elements.attributes.getNamedItem('id').nodeValue;\nvar id = elements.attributes['id'].nodeValue;\n```\n* removeNamedItem(name) 移除指定属性\n* setNamedItem(node) 添加属性\n* item(pos) 返回位于pos位置的节点\n\n* 遍历所有属性的时候可以使用这些方法\n* attributes属性,不同浏览器返回顺序不一致\n* IE7及以前的版本会返回所有可能的属性，为避免这个，需要使用specified检测，未设置过的特性为false\n\n##### 创建元素\n* document.createElement()\n接收一个参数，创建的标签\n```javascript\nvar div = document.createElement('div');\ndiv.id=\"top\";\ndiv.className = \"m-top\";\n```\n\t* IE中支持参数传入完整的标签内容，有助于避免IE7以及以前版本的一些bug\n\t* 不能动态设置iframe name属性\n\t* 创建name相同的radio，互无联系\n\t* 但是，这样方式又只有IE才支持，所以，使用时需要做检测执行\n##### Text文本节点\n创建文本节点document.createTextNode()\n```javascript\nvar ele = document.createElement('div');\nvar txt = document.createTextNode('hello');\nele.appendChild(txt);\ndocument.body.appendChild(ele);\n```\n##### 规范化文本节点\n* 使用normalize()方法合并文本节点\n\n##### 分割文本节点\n* splitText(pos)方法，pos是指定位置\n##### 其它方法\n* appendData(text)\n* deleteData(offset,count)\n* insertData(offset,text)\n* replaceData(offset,count,text)\n* substringData(offset,data)\n\n##### DocumentFragment\n* 文档片段，创建方法\n\tdocument.createDocumentFragment()\n* 操作复杂dom的时候，可以使用片段操作，这样会避免页面多次页面重新渲染\n\n##### Attr属性\n* 创建属性\ndocument.createAttribute()\n```javascript\nvar attr = document.createAttribute('align');\nattr.value = 'left';\nele.setAttribute(attr);\n```\n##### selector API\n1. querySelector()\n\t* 接收css选择符，返回匹配到的第一个元素\n\t* document.querySelector()\n\t* document.body.querySelector()\n2. querySelectorAll()\n\t* 返回NodeList,使用与querySelector()相同\n","source":"_posts/DOM操作.md","raw":"title: DOM操作\ndate: 2015-11-24 15:03:01\ntags: javascript\ntoc: true\n---\n#### Node\n##### 操作节点\n* appendChild()\n一个参数，要插入的节点\n* insertBefore()\n两个参数，要插入的节点和参照的节点\n* replaceChild()\n两个参数，要插入的节点和要替换的节点\n* removeChild()\n一个参数，要移除的节点\n* cloneNode()\n一个参数，布尔值，是否执行深度克隆\n* normalize()\n合并文本节点\n<!--more-->\n\n#### Document\n##### document.getElementById\n* IE7及以前的版本忽略大小写，除此之外必须严格按照大小写\n* 如果不传参数返回null\n* IE7及以前的版本如果表单元素name属性和某元素id相等，会返回表单元素\n##### document.getElementsByTagName\n* 返回标签元素的集合\n##### namedItem 返回标签集合中指定name元素\n* 使用中括号的方式能达到namedItem效果\n* 获取所有html元素，传入`*`\n```javascript\nvar images = document.getElementsByTagName('image');\nvar logo = images.namedItem('logo');\nvar author = images['author'];\ndocument.getElementsByName\n```\n与 document.getElementsByTagName 类似\n\n##### 特殊方法\n* document.anchors返回所有带name的a元素\n* document.forms返回所有form元素\n* document.images返回所有img元素\n* document.links返回所有带href的元素\n##### 元素属性\n* id 元素唯一标示\n* title 附加说明\n* className 元素css类\n* lang 元素内容语言代码\n* dir 语言方向\n\n##### 元素方法\n* getAttribute\n不能获取style属性，以及类似onclick这样的事件处理属性\n* setAttribute\n设置属性值，接收两个参数，第一个是属性名，第二个是属性值\n* removeAttribute\n彻底删除属性\n* attributes属性\nElement类型拥有attributes属性\n\n##### 方法\n* getNamedItem(name) 返回指定属性值 (可以使用方括号访问方式)\n```javascript\nvar id = elements.attributes.getNamedItem('id').nodeValue;\nvar id = elements.attributes['id'].nodeValue;\n```\n* removeNamedItem(name) 移除指定属性\n* setNamedItem(node) 添加属性\n* item(pos) 返回位于pos位置的节点\n\n* 遍历所有属性的时候可以使用这些方法\n* attributes属性,不同浏览器返回顺序不一致\n* IE7及以前的版本会返回所有可能的属性，为避免这个，需要使用specified检测，未设置过的特性为false\n\n##### 创建元素\n* document.createElement()\n接收一个参数，创建的标签\n```javascript\nvar div = document.createElement('div');\ndiv.id=\"top\";\ndiv.className = \"m-top\";\n```\n\t* IE中支持参数传入完整的标签内容，有助于避免IE7以及以前版本的一些bug\n\t* 不能动态设置iframe name属性\n\t* 创建name相同的radio，互无联系\n\t* 但是，这样方式又只有IE才支持，所以，使用时需要做检测执行\n##### Text文本节点\n创建文本节点document.createTextNode()\n```javascript\nvar ele = document.createElement('div');\nvar txt = document.createTextNode('hello');\nele.appendChild(txt);\ndocument.body.appendChild(ele);\n```\n##### 规范化文本节点\n* 使用normalize()方法合并文本节点\n\n##### 分割文本节点\n* splitText(pos)方法，pos是指定位置\n##### 其它方法\n* appendData(text)\n* deleteData(offset,count)\n* insertData(offset,text)\n* replaceData(offset,count,text)\n* substringData(offset,data)\n\n##### DocumentFragment\n* 文档片段，创建方法\n\tdocument.createDocumentFragment()\n* 操作复杂dom的时候，可以使用片段操作，这样会避免页面多次页面重新渲染\n\n##### Attr属性\n* 创建属性\ndocument.createAttribute()\n```javascript\nvar attr = document.createAttribute('align');\nattr.value = 'left';\nele.setAttribute(attr);\n```\n##### selector API\n1. querySelector()\n\t* 接收css选择符，返回匹配到的第一个元素\n\t* document.querySelector()\n\t* document.body.querySelector()\n2. querySelectorAll()\n\t* 返回NodeList,使用与querySelector()相同\n","slug":"DOM操作","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhm50002t0yjpjuf1tgv","content":"<h4 id=\"Node\">Node</h4><h5 id=\"操作节点\">操作节点</h5><ul>\n<li>appendChild()<br>一个参数，要插入的节点</li>\n<li>insertBefore()<br>两个参数，要插入的节点和参照的节点</li>\n<li>replaceChild()<br>两个参数，要插入的节点和要替换的节点</li>\n<li>removeChild()<br>一个参数，要移除的节点</li>\n<li>cloneNode()<br>一个参数，布尔值，是否执行深度克隆</li>\n<li>normalize()<br>合并文本节点<a id=\"more\"></a>\n</li>\n</ul>\n<h4 id=\"Document\">Document</h4><h5 id=\"document-getElementById\">document.getElementById</h5><ul>\n<li>IE7及以前的版本忽略大小写，除此之外必须严格按照大小写</li>\n<li>如果不传参数返回null</li>\n<li>IE7及以前的版本如果表单元素name属性和某元素id相等，会返回表单元素<h5 id=\"document-getElementsByTagName\">document.getElementsByTagName</h5></li>\n<li>返回标签元素的集合<h5 id=\"namedItem_返回标签集合中指定name元素\">namedItem 返回标签集合中指定name元素</h5></li>\n<li>使用中括号的方式能达到namedItem效果</li>\n<li>获取所有html元素，传入<code>*</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> images = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'image'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> logo = images.namedItem(<span class=\"string\">'logo'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> author = images[<span class=\"string\">'author'</span>];</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByName</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>与 document.getElementsByTagName 类似</p>\n<h5 id=\"特殊方法\">特殊方法</h5><ul>\n<li>document.anchors返回所有带name的a元素</li>\n<li>document.forms返回所有form元素</li>\n<li>document.images返回所有img元素</li>\n<li>document.links返回所有带href的元素<h5 id=\"元素属性\">元素属性</h5></li>\n<li>id 元素唯一标示</li>\n<li>title 附加说明</li>\n<li>className 元素css类</li>\n<li>lang 元素内容语言代码</li>\n<li>dir 语言方向</li>\n</ul>\n<h5 id=\"元素方法\">元素方法</h5><ul>\n<li>getAttribute<br>不能获取style属性，以及类似onclick这样的事件处理属性</li>\n<li>setAttribute<br>设置属性值，接收两个参数，第一个是属性名，第二个是属性值</li>\n<li>removeAttribute<br>彻底删除属性</li>\n<li>attributes属性<br>Element类型拥有attributes属性</li>\n</ul>\n<h5 id=\"方法\">方法</h5><ul>\n<li><p>getNamedItem(name) 返回指定属性值 (可以使用方括号访问方式)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> id = elements.attributes.getNamedItem(<span class=\"string\">'id'</span>).nodeValue;</div><div class=\"line\"><span class=\"keyword\">var</span> id = elements.attributes[<span class=\"string\">'id'</span>].nodeValue;</div></pre></td></tr></table></figure>\n</li>\n<li><p>removeNamedItem(name) 移除指定属性</p>\n</li>\n<li>setNamedItem(node) 添加属性</li>\n<li><p>item(pos) 返回位于pos位置的节点</p>\n</li>\n<li><p>遍历所有属性的时候可以使用这些方法</p>\n</li>\n<li>attributes属性,不同浏览器返回顺序不一致</li>\n<li>IE7及以前的版本会返回所有可能的属性，为避免这个，需要使用specified检测，未设置过的特性为false</li>\n</ul>\n<h5 id=\"创建元素\">创建元素</h5><ul>\n<li><p>document.createElement()<br>接收一个参数，创建的标签</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">div.id=<span class=\"string\">\"top\"</span>;</div><div class=\"line\">div.className = <span class=\"string\">\"m-top\"</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li>IE中支持参数传入完整的标签内容，有助于避免IE7以及以前版本的一些bug</li>\n<li>不能动态设置iframe name属性</li>\n<li>创建name相同的radio，互无联系</li>\n<li>但是，这样方式又只有IE才支持，所以，使用时需要做检测执行<h5 id=\"Text文本节点\">Text文本节点</h5>创建文本节点document.createTextNode()<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ele = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> txt = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">'hello'</span>);</div><div class=\"line\">ele.appendChild(txt);</div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(ele);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"规范化文本节点\">规范化文本节点</h5><ul>\n<li>使用normalize()方法合并文本节点</li>\n</ul>\n<h5 id=\"分割文本节点\">分割文本节点</h5><ul>\n<li>splitText(pos)方法，pos是指定位置<h5 id=\"其它方法\">其它方法</h5></li>\n<li>appendData(text)</li>\n<li>deleteData(offset,count)</li>\n<li>insertData(offset,text)</li>\n<li>replaceData(offset,count,text)</li>\n<li>substringData(offset,data)</li>\n</ul>\n<h5 id=\"DocumentFragment\">DocumentFragment</h5><ul>\n<li>文档片段，创建方法<br>  document.createDocumentFragment()</li>\n<li>操作复杂dom的时候，可以使用片段操作，这样会避免页面多次页面重新渲染</li>\n</ul>\n<h5 id=\"Attr属性\">Attr属性</h5><ul>\n<li>创建属性<br>document.createAttribute()<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> attr = <span class=\"built_in\">document</span>.createAttribute(<span class=\"string\">'align'</span>);</div><div class=\"line\">attr.value = <span class=\"string\">'left'</span>;</div><div class=\"line\">ele.setAttribute(attr);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"selector_API\">selector API</h5><ol>\n<li>querySelector()<ul>\n<li>接收css选择符，返回匹配到的第一个元素</li>\n<li>document.querySelector()</li>\n<li>document.body.querySelector()</li>\n</ul>\n</li>\n<li>querySelectorAll()<ul>\n<li>返回NodeList,使用与querySelector()相同</li>\n</ul>\n</li>\n</ol>\n","excerpt":"<h4 id=\"Node\">Node</h4><h5 id=\"操作节点\">操作节点</h5><ul>\n<li>appendChild()<br>一个参数，要插入的节点</li>\n<li>insertBefore()<br>两个参数，要插入的节点和参照的节点</li>\n<li>replaceChild()<br>两个参数，要插入的节点和要替换的节点</li>\n<li>removeChild()<br>一个参数，要移除的节点</li>\n<li>cloneNode()<br>一个参数，布尔值，是否执行深度克隆</li>\n<li>normalize()<br>合并文本节点","more":"</li>\n</ul>\n<h4 id=\"Document\">Document</h4><h5 id=\"document-getElementById\">document.getElementById</h5><ul>\n<li>IE7及以前的版本忽略大小写，除此之外必须严格按照大小写</li>\n<li>如果不传参数返回null</li>\n<li>IE7及以前的版本如果表单元素name属性和某元素id相等，会返回表单元素<h5 id=\"document-getElementsByTagName\">document.getElementsByTagName</h5></li>\n<li>返回标签元素的集合<h5 id=\"namedItem_返回标签集合中指定name元素\">namedItem 返回标签集合中指定name元素</h5></li>\n<li>使用中括号的方式能达到namedItem效果</li>\n<li>获取所有html元素，传入<code>*</code><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> images = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'image'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> logo = images.namedItem(<span class=\"string\">'logo'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> author = images[<span class=\"string\">'author'</span>];</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementsByName</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>与 document.getElementsByTagName 类似</p>\n<h5 id=\"特殊方法\">特殊方法</h5><ul>\n<li>document.anchors返回所有带name的a元素</li>\n<li>document.forms返回所有form元素</li>\n<li>document.images返回所有img元素</li>\n<li>document.links返回所有带href的元素<h5 id=\"元素属性\">元素属性</h5></li>\n<li>id 元素唯一标示</li>\n<li>title 附加说明</li>\n<li>className 元素css类</li>\n<li>lang 元素内容语言代码</li>\n<li>dir 语言方向</li>\n</ul>\n<h5 id=\"元素方法\">元素方法</h5><ul>\n<li>getAttribute<br>不能获取style属性，以及类似onclick这样的事件处理属性</li>\n<li>setAttribute<br>设置属性值，接收两个参数，第一个是属性名，第二个是属性值</li>\n<li>removeAttribute<br>彻底删除属性</li>\n<li>attributes属性<br>Element类型拥有attributes属性</li>\n</ul>\n<h5 id=\"方法\">方法</h5><ul>\n<li><p>getNamedItem(name) 返回指定属性值 (可以使用方括号访问方式)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> id = elements.attributes.getNamedItem(<span class=\"string\">'id'</span>).nodeValue;</div><div class=\"line\"><span class=\"keyword\">var</span> id = elements.attributes[<span class=\"string\">'id'</span>].nodeValue;</div></pre></td></tr></table></figure>\n</li>\n<li><p>removeNamedItem(name) 移除指定属性</p>\n</li>\n<li>setNamedItem(node) 添加属性</li>\n<li><p>item(pos) 返回位于pos位置的节点</p>\n</li>\n<li><p>遍历所有属性的时候可以使用这些方法</p>\n</li>\n<li>attributes属性,不同浏览器返回顺序不一致</li>\n<li>IE7及以前的版本会返回所有可能的属性，为避免这个，需要使用specified检测，未设置过的特性为false</li>\n</ul>\n<h5 id=\"创建元素\">创建元素</h5><ul>\n<li><p>document.createElement()<br>接收一个参数，创建的标签</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">div.id=<span class=\"string\">\"top\"</span>;</div><div class=\"line\">div.className = <span class=\"string\">\"m-top\"</span>;</div></pre></td></tr></table></figure>\n<ul>\n<li>IE中支持参数传入完整的标签内容，有助于避免IE7以及以前版本的一些bug</li>\n<li>不能动态设置iframe name属性</li>\n<li>创建name相同的radio，互无联系</li>\n<li>但是，这样方式又只有IE才支持，所以，使用时需要做检测执行<h5 id=\"Text文本节点\">Text文本节点</h5>创建文本节点document.createTextNode()<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> ele = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> txt = <span class=\"built_in\">document</span>.createTextNode(<span class=\"string\">'hello'</span>);</div><div class=\"line\">ele.appendChild(txt);</div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(ele);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"规范化文本节点\">规范化文本节点</h5><ul>\n<li>使用normalize()方法合并文本节点</li>\n</ul>\n<h5 id=\"分割文本节点\">分割文本节点</h5><ul>\n<li>splitText(pos)方法，pos是指定位置<h5 id=\"其它方法\">其它方法</h5></li>\n<li>appendData(text)</li>\n<li>deleteData(offset,count)</li>\n<li>insertData(offset,text)</li>\n<li>replaceData(offset,count,text)</li>\n<li>substringData(offset,data)</li>\n</ul>\n<h5 id=\"DocumentFragment\">DocumentFragment</h5><ul>\n<li>文档片段，创建方法<br>  document.createDocumentFragment()</li>\n<li>操作复杂dom的时候，可以使用片段操作，这样会避免页面多次页面重新渲染</li>\n</ul>\n<h5 id=\"Attr属性\">Attr属性</h5><ul>\n<li>创建属性<br>document.createAttribute()<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> attr = <span class=\"built_in\">document</span>.createAttribute(<span class=\"string\">'align'</span>);</div><div class=\"line\">attr.value = <span class=\"string\">'left'</span>;</div><div class=\"line\">ele.setAttribute(attr);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"selector_API\">selector API</h5><ol>\n<li>querySelector()<ul>\n<li>接收css选择符，返回匹配到的第一个元素</li>\n<li>document.querySelector()</li>\n<li>document.body.querySelector()</li>\n</ul>\n</li>\n<li>querySelectorAll()<ul>\n<li>返回NodeList,使用与querySelector()相同</li>\n</ul>\n</li>\n</ol>"},{"title":"Dom元素尺寸相关","date":"2015-10-05T13:11:49.000Z","toc":true,"_content":"##### 元素距左侧偏移量\n```javascript\nfunction getElementLeft(element){\n\tvar leftval = element.offsetLeft;\n\tvar current = element.offsetParent;\n\twhile(current !== null){\n\t\tleftVal += current.offsetLeft;\n\t\tcurrent = current.offsetParent;\n   }\n\treturn leftVal;\n}\n```\n<!--more-->\n\n##### 元素距上方偏移量\n```javascript\nfunction getElementTop(element){\n\tvar topVal = element.offsetTop;\n\tvar current = element.offsetParent;\n\twhile(current !== null){\n\ttopVal += current.offsetTop;\n\tcurrent = current.offsetParent;\t\n  }\n  return topVal;\n}\n```\n#####浏览器视口大小\n```javascript\nfunction getViewport(){\n\tif(document.compatMode === 'BackCompat'){\n\t  return {\n\t   width:document.body.clientWidth,\n\t   height:document.body.clientHeight \n   }\n  }else{\n     return {\n\t  width:document.documentElement.clientWidth,\n height:document.documentElement.clientHeight  \n  }\n  }\n}\n```\n##### 滚动大小\n* scrollHeight 没有滚动情况元素内容总高度\n* scrollWidth 没有滚动情况下元素内容总宽度\n* scrollLeft 隐藏在元素区域左侧像素\n* scrollTop 隐藏在元素区域上方的像素\n\n通过 scrollHeight/clientHeight  和 scrollWidth/clientWidth中最大值可以获取到文档宽高\n\n##### getBoundingClientRect() \n>返回四个属性 left top right bottom\n\n实现\n```javascript\nfunction getBoundingClientRect(element){\n\tvar scrollTop = document.documentElement.scrollTop;\n\tvar scrollLeft = document.documentElement.scrollLeft;\n\tif(element.getBoundingClientRect){\n\t\tif(typeof arguments.callee.offset != 'number'){\n\t\t\tvar temp = document.createElement('div');\n\t\t\ttemp.style.cssText = 'position:absolute;left:0;top:0;';\n\t\t\tdocument.body.appendChild(temp);\n\t\t\targuments.callee.offset = -temp.getBoundingClientRect().top - scrollTop;\n\t\t\tdocument.body.removeChild(temp);\n\t\t\ttemp = null;\n\t\t}\n\t\tvar rect = element.getBoundingClientRect();\n\t\tvar offset = arguments.callee.offset;\n\n\t\treturn {\n\t\t\tleft:rect.left + offset,\n\t\t\tright:rect.right + offset,\n\t\t\ttop:rect.top+offset + offset,\n\t\t\tbottom:rect.bottom + offset\n\t\t};\n\t} else {\n\t\tvar actualLeft = getElementLeft(element);\n\t\tvar actualTop = getElementTop(element);\n\n\t\treturn {\n\t\t\tleft:actualLeft - scrollLeft,\n\t\t\tright:actualLeft + element.offsetWidth - scrollLeft,\n\t\t\ttop:actualTop - scrollTop,\n\t\t\tbottom:actualTop + element.offsetHeight - scrollTop\n\t\t};\n\t}\n}\n```","source":"_posts/Dom元素尺寸相关.md","raw":"title: Dom元素尺寸相关\ndate: 2015-10-05 21:11:49\ntags: javascript\ntoc: true\n---\n##### 元素距左侧偏移量\n```javascript\nfunction getElementLeft(element){\n\tvar leftval = element.offsetLeft;\n\tvar current = element.offsetParent;\n\twhile(current !== null){\n\t\tleftVal += current.offsetLeft;\n\t\tcurrent = current.offsetParent;\n   }\n\treturn leftVal;\n}\n```\n<!--more-->\n\n##### 元素距上方偏移量\n```javascript\nfunction getElementTop(element){\n\tvar topVal = element.offsetTop;\n\tvar current = element.offsetParent;\n\twhile(current !== null){\n\ttopVal += current.offsetTop;\n\tcurrent = current.offsetParent;\t\n  }\n  return topVal;\n}\n```\n#####浏览器视口大小\n```javascript\nfunction getViewport(){\n\tif(document.compatMode === 'BackCompat'){\n\t  return {\n\t   width:document.body.clientWidth,\n\t   height:document.body.clientHeight \n   }\n  }else{\n     return {\n\t  width:document.documentElement.clientWidth,\n height:document.documentElement.clientHeight  \n  }\n  }\n}\n```\n##### 滚动大小\n* scrollHeight 没有滚动情况元素内容总高度\n* scrollWidth 没有滚动情况下元素内容总宽度\n* scrollLeft 隐藏在元素区域左侧像素\n* scrollTop 隐藏在元素区域上方的像素\n\n通过 scrollHeight/clientHeight  和 scrollWidth/clientWidth中最大值可以获取到文档宽高\n\n##### getBoundingClientRect() \n>返回四个属性 left top right bottom\n\n实现\n```javascript\nfunction getBoundingClientRect(element){\n\tvar scrollTop = document.documentElement.scrollTop;\n\tvar scrollLeft = document.documentElement.scrollLeft;\n\tif(element.getBoundingClientRect){\n\t\tif(typeof arguments.callee.offset != 'number'){\n\t\t\tvar temp = document.createElement('div');\n\t\t\ttemp.style.cssText = 'position:absolute;left:0;top:0;';\n\t\t\tdocument.body.appendChild(temp);\n\t\t\targuments.callee.offset = -temp.getBoundingClientRect().top - scrollTop;\n\t\t\tdocument.body.removeChild(temp);\n\t\t\ttemp = null;\n\t\t}\n\t\tvar rect = element.getBoundingClientRect();\n\t\tvar offset = arguments.callee.offset;\n\n\t\treturn {\n\t\t\tleft:rect.left + offset,\n\t\t\tright:rect.right + offset,\n\t\t\ttop:rect.top+offset + offset,\n\t\t\tbottom:rect.bottom + offset\n\t\t};\n\t} else {\n\t\tvar actualLeft = getElementLeft(element);\n\t\tvar actualTop = getElementTop(element);\n\n\t\treturn {\n\t\t\tleft:actualLeft - scrollLeft,\n\t\t\tright:actualLeft + element.offsetWidth - scrollLeft,\n\t\t\ttop:actualTop - scrollTop,\n\t\t\tbottom:actualTop + element.offsetHeight - scrollTop\n\t\t};\n\t}\n}\n```","slug":"Dom元素尺寸相关","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhmd0004t0yjvey9cv0f","content":"<h5 id=\"元素距左侧偏移量\">元素距左侧偏移量</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getElementLeft</span>(<span class=\"params\">element</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> leftval = element.offsetLeft;</div><div class=\"line\">\t<span class=\"keyword\">var</span> current = element.offsetParent;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(current !== <span class=\"literal\">null</span>)&#123;</div><div class=\"line\">\t\tleftVal += current.offsetLeft;</div><div class=\"line\">\t\tcurrent = current.offsetParent;</div><div class=\"line\">   &#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> leftVal;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h5 id=\"元素距上方偏移量\">元素距上方偏移量</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getElementTop</span>(<span class=\"params\">element</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> topVal = element.offsetTop;</div><div class=\"line\">\t<span class=\"keyword\">var</span> current = element.offsetParent;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(current !== <span class=\"literal\">null</span>)&#123;</div><div class=\"line\">\ttopVal += current.offsetTop;</div><div class=\"line\">\tcurrent = current.offsetParent;\t</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> topVal;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>#####浏览器视口大小<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getViewport</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.compatMode === <span class=\"string\">'BackCompat'</span>)&#123;</div><div class=\"line\">\t  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t   <span class=\"attr\">width</span>:<span class=\"built_in\">document</span>.body.clientWidth,</div><div class=\"line\">\t   <span class=\"attr\">height</span>:<span class=\"built_in\">document</span>.body.clientHeight </div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t  <span class=\"attr\">width</span>:<span class=\"built_in\">document</span>.documentElement.clientWidth,</div><div class=\"line\"> <span class=\"attr\">height</span>:<span class=\"built_in\">document</span>.documentElement.clientHeight  </div><div class=\"line\">  &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"滚动大小\">滚动大小</h5><ul>\n<li>scrollHeight 没有滚动情况元素内容总高度</li>\n<li>scrollWidth 没有滚动情况下元素内容总宽度</li>\n<li>scrollLeft 隐藏在元素区域左侧像素</li>\n<li>scrollTop 隐藏在元素区域上方的像素</li>\n</ul>\n<p>通过 scrollHeight/clientHeight  和 scrollWidth/clientWidth中最大值可以获取到文档宽高</p>\n<h5 id=\"getBoundingClientRect()\">getBoundingClientRect()</h5><blockquote>\n<p>返回四个属性 left top right bottom</p>\n</blockquote>\n<p>实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBoundingClientRect</span>(<span class=\"params\">element</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> scrollTop = <span class=\"built_in\">document</span>.documentElement.scrollTop;</div><div class=\"line\">\t<span class=\"keyword\">var</span> scrollLeft = <span class=\"built_in\">document</span>.documentElement.scrollLeft;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(element.getBoundingClientRect)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">arguments</span>.callee.offset != <span class=\"string\">'number'</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> temp = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">\t\t\ttemp.style.cssText = <span class=\"string\">'position:absolute;left:0;top:0;'</span>;</div><div class=\"line\">\t\t\t<span class=\"built_in\">document</span>.body.appendChild(temp);</div><div class=\"line\">\t\t\t<span class=\"built_in\">arguments</span>.callee.offset = -temp.getBoundingClientRect().top - scrollTop;</div><div class=\"line\">\t\t\t<span class=\"built_in\">document</span>.body.removeChild(temp);</div><div class=\"line\">\t\t\ttemp = <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> rect = element.getBoundingClientRect();</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> offset = <span class=\"built_in\">arguments</span>.callee.offset;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">left</span>:rect.left + offset,</div><div class=\"line\">\t\t\t<span class=\"attr\">right</span>:rect.right + offset,</div><div class=\"line\">\t\t\t<span class=\"attr\">top</span>:rect.top+offset + offset,</div><div class=\"line\">\t\t\t<span class=\"attr\">bottom</span>:rect.bottom + offset</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> actualLeft = getElementLeft(element);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> actualTop = getElementTop(element);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">left</span>:actualLeft - scrollLeft,</div><div class=\"line\">\t\t\t<span class=\"attr\">right</span>:actualLeft + element.offsetWidth - scrollLeft,</div><div class=\"line\">\t\t\t<span class=\"attr\">top</span>:actualTop - scrollTop,</div><div class=\"line\">\t\t\t<span class=\"attr\">bottom</span>:actualTop + element.offsetHeight - scrollTop</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<h5 id=\"元素距左侧偏移量\">元素距左侧偏移量</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getElementLeft</span>(<span class=\"params\">element</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> leftval = element.offsetLeft;</div><div class=\"line\">\t<span class=\"keyword\">var</span> current = element.offsetParent;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(current !== <span class=\"literal\">null</span>)&#123;</div><div class=\"line\">\t\tleftVal += current.offsetLeft;</div><div class=\"line\">\t\tcurrent = current.offsetParent;</div><div class=\"line\">   &#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> leftVal;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<h5 id=\"元素距上方偏移量\">元素距上方偏移量</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getElementTop</span>(<span class=\"params\">element</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> topVal = element.offsetTop;</div><div class=\"line\">\t<span class=\"keyword\">var</span> current = element.offsetParent;</div><div class=\"line\">\t<span class=\"keyword\">while</span>(current !== <span class=\"literal\">null</span>)&#123;</div><div class=\"line\">\ttopVal += current.offsetTop;</div><div class=\"line\">\tcurrent = current.offsetParent;\t</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"keyword\">return</span> topVal;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>#####浏览器视口大小<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getViewport</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"built_in\">document</span>.compatMode === <span class=\"string\">'BackCompat'</span>)&#123;</div><div class=\"line\">\t  <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t   <span class=\"attr\">width</span>:<span class=\"built_in\">document</span>.body.clientWidth,</div><div class=\"line\">\t   <span class=\"attr\">height</span>:<span class=\"built_in\">document</span>.body.clientHeight </div><div class=\"line\">   &#125;</div><div class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t  <span class=\"attr\">width</span>:<span class=\"built_in\">document</span>.documentElement.clientWidth,</div><div class=\"line\"> <span class=\"attr\">height</span>:<span class=\"built_in\">document</span>.documentElement.clientHeight  </div><div class=\"line\">  &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"滚动大小\">滚动大小</h5><ul>\n<li>scrollHeight 没有滚动情况元素内容总高度</li>\n<li>scrollWidth 没有滚动情况下元素内容总宽度</li>\n<li>scrollLeft 隐藏在元素区域左侧像素</li>\n<li>scrollTop 隐藏在元素区域上方的像素</li>\n</ul>\n<p>通过 scrollHeight/clientHeight  和 scrollWidth/clientWidth中最大值可以获取到文档宽高</p>\n<h5 id=\"getBoundingClientRect()\">getBoundingClientRect()</h5><blockquote>\n<p>返回四个属性 left top right bottom</p>\n</blockquote>\n<p>实现<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getBoundingClientRect</span>(<span class=\"params\">element</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> scrollTop = <span class=\"built_in\">document</span>.documentElement.scrollTop;</div><div class=\"line\">\t<span class=\"keyword\">var</span> scrollLeft = <span class=\"built_in\">document</span>.documentElement.scrollLeft;</div><div class=\"line\">\t<span class=\"keyword\">if</span>(element.getBoundingClientRect)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"keyword\">typeof</span> <span class=\"built_in\">arguments</span>.callee.offset != <span class=\"string\">'number'</span>)&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> temp = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">\t\t\ttemp.style.cssText = <span class=\"string\">'position:absolute;left:0;top:0;'</span>;</div><div class=\"line\">\t\t\t<span class=\"built_in\">document</span>.body.appendChild(temp);</div><div class=\"line\">\t\t\t<span class=\"built_in\">arguments</span>.callee.offset = -temp.getBoundingClientRect().top - scrollTop;</div><div class=\"line\">\t\t\t<span class=\"built_in\">document</span>.body.removeChild(temp);</div><div class=\"line\">\t\t\ttemp = <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> rect = element.getBoundingClientRect();</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> offset = <span class=\"built_in\">arguments</span>.callee.offset;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">left</span>:rect.left + offset,</div><div class=\"line\">\t\t\t<span class=\"attr\">right</span>:rect.right + offset,</div><div class=\"line\">\t\t\t<span class=\"attr\">top</span>:rect.top+offset + offset,</div><div class=\"line\">\t\t\t<span class=\"attr\">bottom</span>:rect.bottom + offset</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> actualLeft = getElementLeft(element);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> actualTop = getElementTop(element);</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"attr\">left</span>:actualLeft - scrollLeft,</div><div class=\"line\">\t\t\t<span class=\"attr\">right</span>:actualLeft + element.offsetWidth - scrollLeft,</div><div class=\"line\">\t\t\t<span class=\"attr\">top</span>:actualTop - scrollTop,</div><div class=\"line\">\t\t\t<span class=\"attr\">bottom</span>:actualTop + element.offsetHeight - scrollTop</div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"Jcrop","date":"2015-11-15T07:03:01.000Z","toc":true,"_content":"#### 引用资源\n##### css\n`<link rel=\"stylesheet\" href=\"jquery.Jcrop.css\">`\n##### JavaScript\n`<script src=\"jquery.js\"></script>`\n`<script src=\"jquery.Jcrop.js\"></script>`\n<!--more-->\n\n##### 使用\n```javascript\n<img id=\"image\" src=\"image.jpg\">\n\n$('#image').Jcrop();\n```\n##### 参数\n|属性\t|值\t|描述|\n|| :-- ||:--: ||:--: ||\n|allowSelect|\ttrue|\t允许新选框|\n|allowMove|\ttrue\t|允许选框移动|\n|allowResize|\ttrue|\t允许选框缩放|\n|aspectRatio|\t1\t|选框宽高比。说明：width/height|\n|keySupport|\ttrue|\t支持键盘控制。按键列表：上下左右（移动选框）、Esc（取消选框）|\n|dragEdges|\ttrue|\t允许拖动边框|\n|boxWidth\t|100|\t画布宽度|\n|boxHeight|\t100\t|画布高度|\n|minSelect|\t[10,10]|\t选择框最小选择尺寸。说明：若选择框小于该尺寸，则自动取消选择|\n|maxSize|\t[10,10]|\t选择框最大尺寸|\n|minSize\t|[10,10]|\t选择框最小尺寸|\n|onChange|\tfunction(data){}|\t选择框改变时的事件|\n|onSelect\t|function(data){}|\t选择框选定时的事件|\n|onDblClick\t|function(data){}|\t在选择框内双击时的事件|\n|onRelease\t|function(data){}|\t取消选择框时的事件|\n后面四个回调函数的参数data是一个对象，包含所选尺寸的x,y,w,h\n\n##### API介绍\n|方法|\t描述|\n|| :-- ||:--: ||\n|getBounds()\t|获取图片实际尺寸，格式为：[w, h]|\n|getWidgetSize()\t|获取图片显示尺寸，格式为：[w, h]|\n|getScaleFactor()\t|获取图片缩放的比例，格式为：[w, h]|\n","source":"_posts/Jcrop.md","raw":"title: Jcrop\ndate: 2015-11-15 15:03:01\ntags: web\ntoc: true\n---\n#### 引用资源\n##### css\n`<link rel=\"stylesheet\" href=\"jquery.Jcrop.css\">`\n##### JavaScript\n`<script src=\"jquery.js\"></script>`\n`<script src=\"jquery.Jcrop.js\"></script>`\n<!--more-->\n\n##### 使用\n```javascript\n<img id=\"image\" src=\"image.jpg\">\n\n$('#image').Jcrop();\n```\n##### 参数\n|属性\t|值\t|描述|\n|| :-- ||:--: ||:--: ||\n|allowSelect|\ttrue|\t允许新选框|\n|allowMove|\ttrue\t|允许选框移动|\n|allowResize|\ttrue|\t允许选框缩放|\n|aspectRatio|\t1\t|选框宽高比。说明：width/height|\n|keySupport|\ttrue|\t支持键盘控制。按键列表：上下左右（移动选框）、Esc（取消选框）|\n|dragEdges|\ttrue|\t允许拖动边框|\n|boxWidth\t|100|\t画布宽度|\n|boxHeight|\t100\t|画布高度|\n|minSelect|\t[10,10]|\t选择框最小选择尺寸。说明：若选择框小于该尺寸，则自动取消选择|\n|maxSize|\t[10,10]|\t选择框最大尺寸|\n|minSize\t|[10,10]|\t选择框最小尺寸|\n|onChange|\tfunction(data){}|\t选择框改变时的事件|\n|onSelect\t|function(data){}|\t选择框选定时的事件|\n|onDblClick\t|function(data){}|\t在选择框内双击时的事件|\n|onRelease\t|function(data){}|\t取消选择框时的事件|\n后面四个回调函数的参数data是一个对象，包含所选尺寸的x,y,w,h\n\n##### API介绍\n|方法|\t描述|\n|| :-- ||:--: ||\n|getBounds()\t|获取图片实际尺寸，格式为：[w, h]|\n|getWidgetSize()\t|获取图片显示尺寸，格式为：[w, h]|\n|getScaleFactor()\t|获取图片缩放的比例，格式为：[w, h]|\n","slug":"Jcrop","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhmh0005t0yjdf748a6v","content":"<h4 id=\"引用资源\">引用资源</h4><h5 id=\"css\">css</h5><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;jquery.Jcrop.css&quot;&gt;</code></p>\n<h5 id=\"JavaScript\">JavaScript</h5><p><code>&lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;</code><br><code>&lt;script src=&quot;jquery.Jcrop.js&quot;&gt;&lt;/script&gt;</code><br><a id=\"more\"></a></p>\n<h5 id=\"使用\">使用</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img id=<span class=\"string\">\"image\"</span> src=<span class=\"string\">\"image.jpg\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#image'</span>).Jcrop();</div></pre></td></tr></table></figure>\n<h5 id=\"参数\">参数</h5><p>|属性    |值    |描述|<br>|| :– ||:–: ||:–: ||<br>|allowSelect|    true|    允许新选框|<br>|allowMove|    true    |允许选框移动|<br>|allowResize|    true|    允许选框缩放|<br>|aspectRatio|    1    |选框宽高比。说明：width/height|<br>|keySupport|    true|    支持键盘控制。按键列表：上下左右（移动选框）、Esc（取消选框）|<br>|dragEdges|    true|    允许拖动边框|<br>|boxWidth    |100|    画布宽度|<br>|boxHeight|    100    |画布高度|<br>|minSelect|    [10,10]|    选择框最小选择尺寸。说明：若选择框小于该尺寸，则自动取消选择|<br>|maxSize|    [10,10]|    选择框最大尺寸|<br>|minSize    |[10,10]|    选择框最小尺寸|<br>|onChange|    function(data){}|    选择框改变时的事件|<br>|onSelect    |function(data){}|    选择框选定时的事件|<br>|onDblClick    |function(data){}|    在选择框内双击时的事件|<br>|onRelease    |function(data){}|    取消选择框时的事件|<br>后面四个回调函数的参数data是一个对象，包含所选尺寸的x,y,w,h</p>\n<h5 id=\"API介绍\">API介绍</h5><p>|方法|    描述|<br>|| :– ||:–: ||<br>|getBounds()    |获取图片实际尺寸，格式为：[w, h]|<br>|getWidgetSize()    |获取图片显示尺寸，格式为：[w, h]|<br>|getScaleFactor()    |获取图片缩放的比例，格式为：[w, h]|</p>\n","excerpt":"<h4 id=\"引用资源\">引用资源</h4><h5 id=\"css\">css</h5><p><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;jquery.Jcrop.css&quot;&gt;</code></p>\n<h5 id=\"JavaScript\">JavaScript</h5><p><code>&lt;script src=&quot;jquery.js&quot;&gt;&lt;/script&gt;</code><br><code>&lt;script src=&quot;jquery.Jcrop.js&quot;&gt;&lt;/script&gt;</code><br>","more":"</p>\n<h5 id=\"使用\">使用</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;img id=<span class=\"string\">\"image\"</span> src=<span class=\"string\">\"image.jpg\"</span>&gt;</div><div class=\"line\"></div><div class=\"line\">$(<span class=\"string\">'#image'</span>).Jcrop();</div></pre></td></tr></table></figure>\n<h5 id=\"参数\">参数</h5><p>|属性    |值    |描述|<br>|| :– ||:–: ||:–: ||<br>|allowSelect|    true|    允许新选框|<br>|allowMove|    true    |允许选框移动|<br>|allowResize|    true|    允许选框缩放|<br>|aspectRatio|    1    |选框宽高比。说明：width/height|<br>|keySupport|    true|    支持键盘控制。按键列表：上下左右（移动选框）、Esc（取消选框）|<br>|dragEdges|    true|    允许拖动边框|<br>|boxWidth    |100|    画布宽度|<br>|boxHeight|    100    |画布高度|<br>|minSelect|    [10,10]|    选择框最小选择尺寸。说明：若选择框小于该尺寸，则自动取消选择|<br>|maxSize|    [10,10]|    选择框最大尺寸|<br>|minSize    |[10,10]|    选择框最小尺寸|<br>|onChange|    function(data){}|    选择框改变时的事件|<br>|onSelect    |function(data){}|    选择框选定时的事件|<br>|onDblClick    |function(data){}|    在选择框内双击时的事件|<br>|onRelease    |function(data){}|    取消选择框时的事件|<br>后面四个回调函数的参数data是一个对象，包含所选尺寸的x,y,w,h</p>\n<h5 id=\"API介绍\">API介绍</h5><p>|方法|    描述|<br>|| :– ||:–: ||<br>|getBounds()    |获取图片实际尺寸，格式为：[w, h]|<br>|getWidgetSize()    |获取图片显示尺寸，格式为：[w, h]|<br>|getScaleFactor()    |获取图片缩放的比例，格式为：[w, h]|</p>"},{"title":"NodeJs子进程","date":"2015-10-29T07:03:01.000Z","toc":true,"_content":"##### child_process\n>* NodeJs的子进程有很多和系统交互的接口，我们先看一下主要的API:\n\t1. child.stdin 标准输入\n\t2. child.stdout 标准输出\n\t3. child.stderr 标准错误输出\n\t4. child.pid 子进程PID\n<!--more-->\n* 生成子进程的方法:\n\t1. `spawn(command,[args],[options])` 启动一个新的进程来执行command，args命令行参数\n\t2. `exex(command,[options],callback)` 启动一个新的进程来执行command命令，callback用于在进程结束时获取辨准输入，标准输出，以及错误信息\n\t3. `execFile(file,[args],[options],[callback])` 启动一个新的进程来执行可执行文件file，callback用于在进程结束时获取辨准输入，标准输出，以及错误信息\n\t4. fork(modulePath,[args],[options]),启动一个新的进程来执行一个javascript文件模块，创建Node子进程\n* 进程间通信：\n\t1. 使用send方法进行发送消息，通过监听message事件来获取消息\n\t```javascript\n\tvar child = require('child_process');\n\tvar fork = child.fork;\n\tvar ch = fork('./test.js');\n\tch.on('message',function(m){\n\t\tconsole.log(m);\n\t});\n\tch.send({k:'key'});\n\t```\n\t```javascript\n\t//test.js\n\tprocess.on('message',function(m){\n\t\tconsole.log(m);\n\t});\n\tprocess.send({k:'test'});\n\t```\n\t2. send方法同步发送消息，要避免发送数据量比较大的数据，造成性能无谓的消耗\n\t3. send(message,[sendHandle])\n\t4. send可以用来发送\n\t\t* net.Native\n\t\t* net.Server\n\t\t* net.Socket\n\t\t* dgram.Native\n\t\t* dgram.Socket\n\t```javascript\n\tvar child = require('child_process');\n\tvar fork = child.fork;\n\tvar ch = fork('./test.js');\n\tvar server = require('net').createServer();\n\tserver.listen(3000,function(){\n\t\tch.send('server',server);\n\t}).on('connection',function(){\n\t\tconsole.log('parent');\n\t});\n\t```\n\t```javascript\n\tprocess.on('message', function(k, v) {\n\t    if (k === 'server') {\n\t        v.on('connection', function() {\n\t            console.log('child');\n\t        });\n\t    }\n\t});\n\t```\n* 使用子进程统计系统登录次数\n```javascript\nvar child = require('child_process');\nvar exec = child.exec;\nvar last = exec('last | wc -l');\nlast.stdout.on('data', function (data) { \n\tconsole.log(data); \n}); \nlast.on('exit', function (code) { \n\tconsole.log('子进程已关闭：' + code); \n});\n```\n\n##### Cluster实现多进程\n```javascript\nvar cluster = require('cluster');\nvar http = require('http');\n\nif (cluster.isMaster) {\n  require('os').cpus().forEach(function(){\n    cluster.fork();\n  });\n  cluster.on('exit', function(worker, code, signal) {\n    console.log('worker ' + worker.process.pid + ' died');\n  });\n  cluster.on('listening', function(worker, address) {  \n    console.log(\"A worker with #\"+worker.id+\" is now connected to \" +\n     address.address +\n    \":\" + address.port);  \n  }); \n} else {\n  http.createServer(function(req, res) {\n    res.writeHead(200);\n    res.end(\"hello world\\n\");\n    console.log('Worker #' + cluster.worker.id + ' make a response');\n  }).listen(8000);\n}\n```\n* 只有主线程才能调用，当有请求发起时，主线程随机分配给某个子进程","source":"_posts/NodeJs子进程.md","raw":"title: NodeJs子进程\ndate: 2015-10-29 15:03:01\ntags: nodejs\ntoc: true\n---\n##### child_process\n>* NodeJs的子进程有很多和系统交互的接口，我们先看一下主要的API:\n\t1. child.stdin 标准输入\n\t2. child.stdout 标准输出\n\t3. child.stderr 标准错误输出\n\t4. child.pid 子进程PID\n<!--more-->\n* 生成子进程的方法:\n\t1. `spawn(command,[args],[options])` 启动一个新的进程来执行command，args命令行参数\n\t2. `exex(command,[options],callback)` 启动一个新的进程来执行command命令，callback用于在进程结束时获取辨准输入，标准输出，以及错误信息\n\t3. `execFile(file,[args],[options],[callback])` 启动一个新的进程来执行可执行文件file，callback用于在进程结束时获取辨准输入，标准输出，以及错误信息\n\t4. fork(modulePath,[args],[options]),启动一个新的进程来执行一个javascript文件模块，创建Node子进程\n* 进程间通信：\n\t1. 使用send方法进行发送消息，通过监听message事件来获取消息\n\t```javascript\n\tvar child = require('child_process');\n\tvar fork = child.fork;\n\tvar ch = fork('./test.js');\n\tch.on('message',function(m){\n\t\tconsole.log(m);\n\t});\n\tch.send({k:'key'});\n\t```\n\t```javascript\n\t//test.js\n\tprocess.on('message',function(m){\n\t\tconsole.log(m);\n\t});\n\tprocess.send({k:'test'});\n\t```\n\t2. send方法同步发送消息，要避免发送数据量比较大的数据，造成性能无谓的消耗\n\t3. send(message,[sendHandle])\n\t4. send可以用来发送\n\t\t* net.Native\n\t\t* net.Server\n\t\t* net.Socket\n\t\t* dgram.Native\n\t\t* dgram.Socket\n\t```javascript\n\tvar child = require('child_process');\n\tvar fork = child.fork;\n\tvar ch = fork('./test.js');\n\tvar server = require('net').createServer();\n\tserver.listen(3000,function(){\n\t\tch.send('server',server);\n\t}).on('connection',function(){\n\t\tconsole.log('parent');\n\t});\n\t```\n\t```javascript\n\tprocess.on('message', function(k, v) {\n\t    if (k === 'server') {\n\t        v.on('connection', function() {\n\t            console.log('child');\n\t        });\n\t    }\n\t});\n\t```\n* 使用子进程统计系统登录次数\n```javascript\nvar child = require('child_process');\nvar exec = child.exec;\nvar last = exec('last | wc -l');\nlast.stdout.on('data', function (data) { \n\tconsole.log(data); \n}); \nlast.on('exit', function (code) { \n\tconsole.log('子进程已关闭：' + code); \n});\n```\n\n##### Cluster实现多进程\n```javascript\nvar cluster = require('cluster');\nvar http = require('http');\n\nif (cluster.isMaster) {\n  require('os').cpus().forEach(function(){\n    cluster.fork();\n  });\n  cluster.on('exit', function(worker, code, signal) {\n    console.log('worker ' + worker.process.pid + ' died');\n  });\n  cluster.on('listening', function(worker, address) {  \n    console.log(\"A worker with #\"+worker.id+\" is now connected to \" +\n     address.address +\n    \":\" + address.port);  \n  }); \n} else {\n  http.createServer(function(req, res) {\n    res.writeHead(200);\n    res.end(\"hello world\\n\");\n    console.log('Worker #' + cluster.worker.id + ' make a response');\n  }).listen(8000);\n}\n```\n* 只有主线程才能调用，当有请求发起时，主线程随机分配给某个子进程","slug":"NodeJs子进程","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhmn0006t0yj7ylfpct0","content":"<h5 id=\"child_process\">child_process</h5><blockquote>\n<ul>\n<li>NodeJs的子进程有很多和系统交互的接口，我们先看一下主要的API:<ol>\n<li>child.stdin 标准输入</li>\n<li>child.stdout 标准输出</li>\n<li>child.stderr 标准错误输出</li>\n<li>child.pid 子进程PID<a id=\"more\"></a></li>\n</ol>\n</li>\n<li>生成子进程的方法:<ol>\n<li><code>spawn(command,[args],[options])</code> 启动一个新的进程来执行command，args命令行参数</li>\n<li><code>exex(command,[options],callback)</code> 启动一个新的进程来执行command命令，callback用于在进程结束时获取辨准输入，标准输出，以及错误信息</li>\n<li><code>execFile(file,[args],[options],[callback])</code> 启动一个新的进程来执行可执行文件file，callback用于在进程结束时获取辨准输入，标准输出，以及错误信息</li>\n<li>fork(modulePath,[args],[options]),启动一个新的进程来执行一个javascript文件模块，创建Node子进程</li>\n</ol>\n</li>\n<li>进程间通信：<ol>\n<li>使用send方法进行发送消息，通过监听message事件来获取消息<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fork = child.fork;</div><div class=\"line\"><span class=\"keyword\">var</span> ch = fork(<span class=\"string\">'./test.js'</span>);</div><div class=\"line\">ch.on(<span class=\"string\">'message'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(m);</div><div class=\"line\">&#125;);</div><div class=\"line\">ch.send(&#123;<span class=\"attr\">k</span>:<span class=\"string\">'key'</span>&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n<pre><code><span class=\"comment\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//test.js</span></div><div class=\"line\">process.on(<span class=\"string\">'message'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(m);</div><div class=\"line\">&#125;);</div><div class=\"line\">process.send(&#123;<span class=\"attr\">k</span>:<span class=\"string\">'test'</span>&#125;);</div></pre></td></tr></table></figure></span>\n\n2. send方法同步发送消息，要避免发送数据量比较大的数据，造成性能无谓的消耗\n3. send(message,[sendHandle])\n4. send可以用来发送\n    * net.Native\n    * net.Server\n    * net.Socket\n    * dgram.Native\n    * dgram.Socket\n<span class=\"comment\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fork = child.fork;</div><div class=\"line\"><span class=\"keyword\">var</span> ch = fork(<span class=\"string\">'./test.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tch.send(<span class=\"string\">'server'</span>,server);</div><div class=\"line\">&#125;).on(<span class=\"string\">'connection'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'parent'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></span>\n\n<span class=\"comment\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k, v</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (k === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">        v.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'child'</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></span>\n</code></pre><ul>\n<li>使用子进程统计系统登录次数<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> exec = child.exec;</div><div class=\"line\"><span class=\"keyword\">var</span> last = exec(<span class=\"string\">'last | wc -l'</span>);</div><div class=\"line\">last.stdout.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123; </div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(data); </div><div class=\"line\">&#125;); </div><div class=\"line\">last.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">code</span>) </span>&#123; </div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'子进程已关闭：'</span> + code); </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Cluster实现多进程\">Cluster实现多进程</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cluster = <span class=\"built_in\">require</span>(<span class=\"string\">'cluster'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (cluster.isMaster) &#123;</div><div class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>).cpus().forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    cluster.fork();</div><div class=\"line\">  &#125;);</div><div class=\"line\">  cluster.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">worker, code, signal</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'worker '</span> + worker.process.pid + <span class=\"string\">' died'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  cluster.on(<span class=\"string\">'listening'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">worker, address</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"A worker with #\"</span>+worker.id+<span class=\"string\">\" is now connected to \"</span> +</div><div class=\"line\">     address.address +</div><div class=\"line\">    <span class=\"string\">\":\"</span> + address.port);  </div><div class=\"line\">  &#125;); </div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>);</div><div class=\"line\">    res.end(<span class=\"string\">\"hello world\\n\"</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Worker #'</span> + cluster.worker.id + <span class=\"string\">' make a response'</span>);</div><div class=\"line\">  &#125;).listen(<span class=\"number\">8000</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>只有主线程才能调用，当有请求发起时，主线程随机分配给某个子进程</li>\n</ul>\n","excerpt":"<h5 id=\"child_process\">child_process</h5><blockquote>\n<ul>\n<li>NodeJs的子进程有很多和系统交互的接口，我们先看一下主要的API:<ol>\n<li>child.stdin 标准输入</li>\n<li>child.stdout 标准输出</li>\n<li>child.stderr 标准错误输出</li>\n<li>child.pid 子进程PID","more":"</li>\n</ol>\n</li>\n<li>生成子进程的方法:<ol>\n<li><code>spawn(command,[args],[options])</code> 启动一个新的进程来执行command，args命令行参数</li>\n<li><code>exex(command,[options],callback)</code> 启动一个新的进程来执行command命令，callback用于在进程结束时获取辨准输入，标准输出，以及错误信息</li>\n<li><code>execFile(file,[args],[options],[callback])</code> 启动一个新的进程来执行可执行文件file，callback用于在进程结束时获取辨准输入，标准输出，以及错误信息</li>\n<li>fork(modulePath,[args],[options]),启动一个新的进程来执行一个javascript文件模块，创建Node子进程</li>\n</ol>\n</li>\n<li>进程间通信：<ol>\n<li>使用send方法进行发送消息，通过监听message事件来获取消息<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fork = child.fork;</div><div class=\"line\"><span class=\"keyword\">var</span> ch = fork(<span class=\"string\">'./test.js'</span>);</div><div class=\"line\">ch.on(<span class=\"string\">'message'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(m);</div><div class=\"line\">&#125;);</div><div class=\"line\">ch.send(&#123;<span class=\"attr\">k</span>:<span class=\"string\">'key'</span>&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ul>\n</blockquote>\n<pre><code><span class=\"comment\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//test.js</span></div><div class=\"line\">process.on(<span class=\"string\">'message'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">m</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(m);</div><div class=\"line\">&#125;);</div><div class=\"line\">process.send(&#123;<span class=\"attr\">k</span>:<span class=\"string\">'test'</span>&#125;);</div></pre></td></tr></table></figure></span>\n\n2. send方法同步发送消息，要避免发送数据量比较大的数据，造成性能无谓的消耗\n3. send(message,[sendHandle])\n4. send可以用来发送\n    * net.Native\n    * net.Server\n    * net.Socket\n    * dgram.Native\n    * dgram.Socket\n<span class=\"comment\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fork = child.fork;</div><div class=\"line\"><span class=\"keyword\">var</span> ch = fork(<span class=\"string\">'./test.js'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"built_in\">require</span>(<span class=\"string\">'net'</span>).createServer();</div><div class=\"line\">server.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\tch.send(<span class=\"string\">'server'</span>,server);</div><div class=\"line\">&#125;).on(<span class=\"string\">'connection'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'parent'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></span>\n\n<span class=\"comment\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.on(<span class=\"string\">'message'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k, v</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (k === <span class=\"string\">'server'</span>) &#123;</div><div class=\"line\">        v.on(<span class=\"string\">'connection'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'child'</span>);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></span>\n</code></pre><ul>\n<li>使用子进程统计系统登录次数<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> child = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> exec = child.exec;</div><div class=\"line\"><span class=\"keyword\">var</span> last = exec(<span class=\"string\">'last | wc -l'</span>);</div><div class=\"line\">last.stdout.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123; </div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(data); </div><div class=\"line\">&#125;); </div><div class=\"line\">last.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">code</span>) </span>&#123; </div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'子进程已关闭：'</span> + code); </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"Cluster实现多进程\">Cluster实现多进程</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cluster = <span class=\"built_in\">require</span>(<span class=\"string\">'cluster'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (cluster.isMaster) &#123;</div><div class=\"line\">  <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>).cpus().forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    cluster.fork();</div><div class=\"line\">  &#125;);</div><div class=\"line\">  cluster.on(<span class=\"string\">'exit'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">worker, code, signal</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'worker '</span> + worker.process.pid + <span class=\"string\">' died'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">  cluster.on(<span class=\"string\">'listening'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">worker, address</span>) </span>&#123;  </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"A worker with #\"</span>+worker.id+<span class=\"string\">\" is now connected to \"</span> +</div><div class=\"line\">     address.address +</div><div class=\"line\">    <span class=\"string\">\":\"</span> + address.port);  </div><div class=\"line\">  &#125;); </div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">  http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>);</div><div class=\"line\">    res.end(<span class=\"string\">\"hello world\\n\"</span>);</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Worker #'</span> + cluster.worker.id + <span class=\"string\">' make a response'</span>);</div><div class=\"line\">  &#125;).listen(<span class=\"number\">8000</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>只有主线程才能调用，当有请求发起时，主线程随机分配给某个子进程</li>\n</ul>"},{"title":"NodeJs搭建静态资源服务器","date":"2015-11-01T07:03:01.000Z","toc":true,"_content":"这里我们使用nodejs,一步一步实现一个静态资源服务器。\n\n<!--more-->\n\n##### 实现1\n我们主要用到的是http模块，还会使用fs文件操作，url,path模块用作辅助文件读取。\n\n```javascript\n//file_types.js\nexports.file_types = {\n\t\"html\": \"text/html\",\n\t\"js\": \"text/javascript\",\n  \t\"css\": \"text/css\",\n  \t\"json\": \"application/json\",\n  \t\"xml\": \"text/xml\",\n \t\"txt\": \"text/plain\",\n  \t\"gif\": \"image/gif\",\n  \t\"jpeg\": \"image/jpeg\",\n  \t\"jpg\": \"image/jpeg\",\n  \t\"ico\": \"image/x-icon\",\n  \t\"png\": \"image/png\"\n};\n```\n\n```javascript\nvar http = require('http');\nvar fs=require('fs');\nvar url=require('url');\nvar path=require('path');\nvar file_types=require('./file_types').file_types;\n\nvar listen_port = '8998';\nvar server = new http.Server();\nserver.listen(listen_port);\nconsole.log(\"Server is start ... port: \" + listen_port + \"...\");\n\nserver.on('request',function(req,res){\n    var pathname = url.parse(req.url).pathname;\n    var realPath = path.join(\"assets\", pathname);\n    var extname = path.extname(realPath);\n    extname = extname ? extname.slice(1) : 'unknown';\n    fs.exists(realPath, function (exists) {\n        if (!exists) {\n            res.writeHead(404, {\n                'Content-Type': 'text/plain'\n            });\n\n            res.write(pathname + \" is not found\");\n            res.end();\n        } else {\n            fs.readFile(realPath, function (err, content) {\n                if (err) {\n                    res.writeHead(500, {\n                        'Content-Type': 'text/plain'\n                    });\n                    res.end(err);\n                } else {\n                    var contentType = file_types[extname] || \"text/plain\";\n                    res.writeHead(200, {\n                        'Content-Type': contentType\n                    });\n                    res.write(content);\n                    res.end();\n                }\n            });\n        }\n    });\n});\n```\n\n我们创建了文件的映射规则，对于不用类型的文件，输出不用的文件头，找不到文件返回404,读取错误返回500\n\n##### 实现2\n主要使用connect的static方法\n```javascript\nvar http = require('http');  \nvar path = require('path');\nvar connect = require('connect');  \nvar port = 8998;\nvar app = connect()\n        .use(connect.logger('tiny'))\n        .use(connect.query())\n        .use(connect.bodyParser())\n        .use(connect[\"static\"](path.join(__dirname, '../'), {\n          hidden: true,\n          redirect: true,\n          index: 'null'\n        })).use(connect.directory(path.join(__dirname, '../')));\n\nvar server = http.createServer(app);\nserver.listen(port);\nserver.on(\"listening\", function(e) {\n  console.log(\"blog server 运行成功, 端口为 \" + port + \".\");\n  return console.log(\"按 Ctrl + C 结束进程.\");\n});\n```\n","source":"_posts/NodeJs搭建静态资源服务器.md","raw":"title: NodeJs搭建静态资源服务器\ndate: 2015-11-01 15:03:01\ntags: nodejs\ntoc: true\n---\n这里我们使用nodejs,一步一步实现一个静态资源服务器。\n\n<!--more-->\n\n##### 实现1\n我们主要用到的是http模块，还会使用fs文件操作，url,path模块用作辅助文件读取。\n\n```javascript\n//file_types.js\nexports.file_types = {\n\t\"html\": \"text/html\",\n\t\"js\": \"text/javascript\",\n  \t\"css\": \"text/css\",\n  \t\"json\": \"application/json\",\n  \t\"xml\": \"text/xml\",\n \t\"txt\": \"text/plain\",\n  \t\"gif\": \"image/gif\",\n  \t\"jpeg\": \"image/jpeg\",\n  \t\"jpg\": \"image/jpeg\",\n  \t\"ico\": \"image/x-icon\",\n  \t\"png\": \"image/png\"\n};\n```\n\n```javascript\nvar http = require('http');\nvar fs=require('fs');\nvar url=require('url');\nvar path=require('path');\nvar file_types=require('./file_types').file_types;\n\nvar listen_port = '8998';\nvar server = new http.Server();\nserver.listen(listen_port);\nconsole.log(\"Server is start ... port: \" + listen_port + \"...\");\n\nserver.on('request',function(req,res){\n    var pathname = url.parse(req.url).pathname;\n    var realPath = path.join(\"assets\", pathname);\n    var extname = path.extname(realPath);\n    extname = extname ? extname.slice(1) : 'unknown';\n    fs.exists(realPath, function (exists) {\n        if (!exists) {\n            res.writeHead(404, {\n                'Content-Type': 'text/plain'\n            });\n\n            res.write(pathname + \" is not found\");\n            res.end();\n        } else {\n            fs.readFile(realPath, function (err, content) {\n                if (err) {\n                    res.writeHead(500, {\n                        'Content-Type': 'text/plain'\n                    });\n                    res.end(err);\n                } else {\n                    var contentType = file_types[extname] || \"text/plain\";\n                    res.writeHead(200, {\n                        'Content-Type': contentType\n                    });\n                    res.write(content);\n                    res.end();\n                }\n            });\n        }\n    });\n});\n```\n\n我们创建了文件的映射规则，对于不用类型的文件，输出不用的文件头，找不到文件返回404,读取错误返回500\n\n##### 实现2\n主要使用connect的static方法\n```javascript\nvar http = require('http');  \nvar path = require('path');\nvar connect = require('connect');  \nvar port = 8998;\nvar app = connect()\n        .use(connect.logger('tiny'))\n        .use(connect.query())\n        .use(connect.bodyParser())\n        .use(connect[\"static\"](path.join(__dirname, '../'), {\n          hidden: true,\n          redirect: true,\n          index: 'null'\n        })).use(connect.directory(path.join(__dirname, '../')));\n\nvar server = http.createServer(app);\nserver.listen(port);\nserver.on(\"listening\", function(e) {\n  console.log(\"blog server 运行成功, 端口为 \" + port + \".\");\n  return console.log(\"按 Ctrl + C 结束进程.\");\n});\n```\n","slug":"NodeJs搭建静态资源服务器","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhmr0009t0yjc2jjztof","content":"<p>这里我们使用nodejs,一步一步实现一个静态资源服务器。</p>\n<a id=\"more\"></a>\n<h5 id=\"实现1\">实现1</h5><p>我们主要用到的是http模块，还会使用fs文件操作，url,path模块用作辅助文件读取。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//file_types.js</span></div><div class=\"line\">exports.file_types = &#123;</div><div class=\"line\">\t<span class=\"string\">\"html\"</span>: <span class=\"string\">\"text/html\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"js\"</span>: <span class=\"string\">\"text/javascript\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"css\"</span>: <span class=\"string\">\"text/css\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"json\"</span>: <span class=\"string\">\"application/json\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"xml\"</span>: <span class=\"string\">\"text/xml\"</span>,</div><div class=\"line\"> \t<span class=\"string\">\"txt\"</span>: <span class=\"string\">\"text/plain\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"gif\"</span>: <span class=\"string\">\"image/gif\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"jpeg\"</span>: <span class=\"string\">\"image/jpeg\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"jpg\"</span>: <span class=\"string\">\"image/jpeg\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"ico\"</span>: <span class=\"string\">\"image/x-icon\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"png\"</span>: <span class=\"string\">\"image/png\"</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs=<span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url=<span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path=<span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> file_types=<span class=\"built_in\">require</span>(<span class=\"string\">'./file_types'</span>).file_types;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> listen_port = <span class=\"string\">'8998'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> http.Server();</div><div class=\"line\">server.listen(listen_port);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server is start ... port: \"</span> + listen_port + <span class=\"string\">\"...\"</span>);</div><div class=\"line\"></div><div class=\"line\">server.on(<span class=\"string\">'request'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(req.url).pathname;</div><div class=\"line\">    <span class=\"keyword\">var</span> realPath = path.join(<span class=\"string\">\"assets\"</span>, pathname);</div><div class=\"line\">    <span class=\"keyword\">var</span> extname = path.extname(realPath);</div><div class=\"line\">    extname = extname ? extname.slice(<span class=\"number\">1</span>) : <span class=\"string\">'unknown'</span>;</div><div class=\"line\">    fs.exists(realPath, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">exists</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!exists) &#123;</div><div class=\"line\">            res.writeHead(<span class=\"number\">404</span>, &#123;</div><div class=\"line\">                <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span></div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">            res.write(pathname + <span class=\"string\">\" is not found\"</span>);</div><div class=\"line\">            res.end();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            fs.readFile(realPath, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, content</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">                    res.writeHead(<span class=\"number\">500</span>, &#123;</div><div class=\"line\">                        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span></div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    res.end(err);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">var</span> contentType = file_types[extname] || <span class=\"string\">\"text/plain\"</span>;</div><div class=\"line\">                    res.writeHead(<span class=\"number\">200</span>, &#123;</div><div class=\"line\">                        <span class=\"string\">'Content-Type'</span>: contentType</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    res.write(content);</div><div class=\"line\">                    res.end();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>我们创建了文件的映射规则，对于不用类型的文件，输出不用的文件头，找不到文件返回404,读取错误返回500</p>\n<h5 id=\"实现2\">实现2</h5><p>主要使用connect的static方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);  </div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> connect = <span class=\"built_in\">require</span>(<span class=\"string\">'connect'</span>);  </div><div class=\"line\"><span class=\"keyword\">var</span> port = <span class=\"number\">8998</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> app = connect()</div><div class=\"line\">        .use(connect.logger(<span class=\"string\">'tiny'</span>))</div><div class=\"line\">        .use(connect.query())</div><div class=\"line\">        .use(connect.bodyParser())</div><div class=\"line\">        .use(connect[<span class=\"string\">\"static\"</span>](path.join(__dirname, <span class=\"string\">'../'</span>), &#123;</div><div class=\"line\">          <span class=\"attr\">hidden</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">          <span class=\"attr\">redirect</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">          <span class=\"attr\">index</span>: <span class=\"string\">'null'</span></div><div class=\"line\">        &#125;)).use(connect.directory(path.join(__dirname, <span class=\"string\">'../'</span>)));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(app);</div><div class=\"line\">server.listen(port);</div><div class=\"line\">server.on(<span class=\"string\">\"listening\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"blog server 运行成功, 端口为 \"</span> + port + <span class=\"string\">\".\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"按 Ctrl + C 结束进程.\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>这里我们使用nodejs,一步一步实现一个静态资源服务器。</p>","more":"<h5 id=\"实现1\">实现1</h5><p>我们主要用到的是http模块，还会使用fs文件操作，url,path模块用作辅助文件读取。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//file_types.js</span></div><div class=\"line\">exports.file_types = &#123;</div><div class=\"line\">\t<span class=\"string\">\"html\"</span>: <span class=\"string\">\"text/html\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"js\"</span>: <span class=\"string\">\"text/javascript\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"css\"</span>: <span class=\"string\">\"text/css\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"json\"</span>: <span class=\"string\">\"application/json\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"xml\"</span>: <span class=\"string\">\"text/xml\"</span>,</div><div class=\"line\"> \t<span class=\"string\">\"txt\"</span>: <span class=\"string\">\"text/plain\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"gif\"</span>: <span class=\"string\">\"image/gif\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"jpeg\"</span>: <span class=\"string\">\"image/jpeg\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"jpg\"</span>: <span class=\"string\">\"image/jpeg\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"ico\"</span>: <span class=\"string\">\"image/x-icon\"</span>,</div><div class=\"line\">  \t<span class=\"string\">\"png\"</span>: <span class=\"string\">\"image/png\"</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs=<span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url=<span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path=<span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> file_types=<span class=\"built_in\">require</span>(<span class=\"string\">'./file_types'</span>).file_types;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> listen_port = <span class=\"string\">'8998'</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> http.Server();</div><div class=\"line\">server.listen(listen_port);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"Server is start ... port: \"</span> + listen_port + <span class=\"string\">\"...\"</span>);</div><div class=\"line\"></div><div class=\"line\">server.on(<span class=\"string\">'request'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pathname = url.parse(req.url).pathname;</div><div class=\"line\">    <span class=\"keyword\">var</span> realPath = path.join(<span class=\"string\">\"assets\"</span>, pathname);</div><div class=\"line\">    <span class=\"keyword\">var</span> extname = path.extname(realPath);</div><div class=\"line\">    extname = extname ? extname.slice(<span class=\"number\">1</span>) : <span class=\"string\">'unknown'</span>;</div><div class=\"line\">    fs.exists(realPath, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">exists</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!exists) &#123;</div><div class=\"line\">            res.writeHead(<span class=\"number\">404</span>, &#123;</div><div class=\"line\">                <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span></div><div class=\"line\">            &#125;);</div><div class=\"line\"></div><div class=\"line\">            res.write(pathname + <span class=\"string\">\" is not found\"</span>);</div><div class=\"line\">            res.end();</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            fs.readFile(realPath, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, content</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">                    res.writeHead(<span class=\"number\">500</span>, &#123;</div><div class=\"line\">                        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span></div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    res.end(err);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">var</span> contentType = file_types[extname] || <span class=\"string\">\"text/plain\"</span>;</div><div class=\"line\">                    res.writeHead(<span class=\"number\">200</span>, &#123;</div><div class=\"line\">                        <span class=\"string\">'Content-Type'</span>: contentType</div><div class=\"line\">                    &#125;);</div><div class=\"line\">                    res.write(content);</div><div class=\"line\">                    res.end();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>我们创建了文件的映射规则，对于不用类型的文件，输出不用的文件头，找不到文件返回404,读取错误返回500</p>\n<h5 id=\"实现2\">实现2</h5><p>主要使用connect的static方法<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);  </div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> connect = <span class=\"built_in\">require</span>(<span class=\"string\">'connect'</span>);  </div><div class=\"line\"><span class=\"keyword\">var</span> port = <span class=\"number\">8998</span>;</div><div class=\"line\"><span class=\"keyword\">var</span> app = connect()</div><div class=\"line\">        .use(connect.logger(<span class=\"string\">'tiny'</span>))</div><div class=\"line\">        .use(connect.query())</div><div class=\"line\">        .use(connect.bodyParser())</div><div class=\"line\">        .use(connect[<span class=\"string\">\"static\"</span>](path.join(__dirname, <span class=\"string\">'../'</span>), &#123;</div><div class=\"line\">          <span class=\"attr\">hidden</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">          <span class=\"attr\">redirect</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">          <span class=\"attr\">index</span>: <span class=\"string\">'null'</span></div><div class=\"line\">        &#125;)).use(connect.directory(path.join(__dirname, <span class=\"string\">'../'</span>)));</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(app);</div><div class=\"line\">server.listen(port);</div><div class=\"line\">server.on(<span class=\"string\">\"listening\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"blog server 运行成功, 端口为 \"</span> + port + <span class=\"string\">\".\"</span>);</div><div class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">\"按 Ctrl + C 结束进程.\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>"},{"title":"NodeJs模块之http","date":"2015-10-31T07:03:01.000Z","toc":true,"_content":"#### http\n##### http.createServer是创建服务器的核心\n<!--more-->\n```javascript\nvar http = require('http');\nvar server = http.createServer(function(req,res){\n\tres.writeHeader(200,{'Content-Type':'text/plain'});\n\tres.end('data');\n});\n//另一种创建方式\nvar server = new http.server();\nserver.on('request',function(req,res){\n\tres.writeHeader(200,{'Content-Type':'text/plain'});\n\tres.end('data');\n});\nserver.maxHeadersCount 设置最大请求数，默认是1000， 0代表无限制\nserver.timeout 请求超时时间\n\n//server.on还可以可以监听的事件：\n1. connection\n2. close\n3. checkContinue\n4. connet\n5. upgrade\n6. clientError\n\nserver.listen(3000,function(){\n   console.log('Server is start ... Listen port 3000...');\n});\n```\n##### http.request\n做为客户端向服务器发起请求\n```javascript\nvar http = require('http');\nvar options = {\n\tmethod:'POST',\n\thostname:'www.test.com',\n\tport:80,\n\tpath:'/test',\n\theader:{} //路由发出req中可取到cookie user-agent信息\n};\nvar req = http.request(options,function(res){\n\tres.setEncoding('utf8');\n    res.on('data',function(chunk){\n       console.log('data:' + chunk);\n    });\n    res.on('end',function(chunk){\n\n    });\n    res.write('123');\n    res.end();\n});\nreq.on('error',function(e){\n   console.log(e.message);//请求过程中发生错误\n});\nreq.write('qwe');\nreq.end();\nreq.abort(); //用于阻止请求\nreq.setNoDelay(0); //设置无延迟\n```\n##### http.get\n```javascript\nvar http = require('http');\nhttp.get('http://www.test.com/test',function(res){\n    res.setEncoding('utf8');\n    res.on('data',function(chunk){\n       console.log('data:' + chunk);\n    });\n    res.on('end',function(chunk){\n\n    });\n    res.write('123');\n    res.end();\n}).on('error',function(e){\n    console.log(e.message);//请求过程中发生错误\n});\n```","source":"_posts/NodeJs模块之http.md","raw":"title: NodeJs模块之http\ndate: 2015-10-31 15:03:01\ntags: nodejs\ntoc: true\n---\n#### http\n##### http.createServer是创建服务器的核心\n<!--more-->\n```javascript\nvar http = require('http');\nvar server = http.createServer(function(req,res){\n\tres.writeHeader(200,{'Content-Type':'text/plain'});\n\tres.end('data');\n});\n//另一种创建方式\nvar server = new http.server();\nserver.on('request',function(req,res){\n\tres.writeHeader(200,{'Content-Type':'text/plain'});\n\tres.end('data');\n});\nserver.maxHeadersCount 设置最大请求数，默认是1000， 0代表无限制\nserver.timeout 请求超时时间\n\n//server.on还可以可以监听的事件：\n1. connection\n2. close\n3. checkContinue\n4. connet\n5. upgrade\n6. clientError\n\nserver.listen(3000,function(){\n   console.log('Server is start ... Listen port 3000...');\n});\n```\n##### http.request\n做为客户端向服务器发起请求\n```javascript\nvar http = require('http');\nvar options = {\n\tmethod:'POST',\n\thostname:'www.test.com',\n\tport:80,\n\tpath:'/test',\n\theader:{} //路由发出req中可取到cookie user-agent信息\n};\nvar req = http.request(options,function(res){\n\tres.setEncoding('utf8');\n    res.on('data',function(chunk){\n       console.log('data:' + chunk);\n    });\n    res.on('end',function(chunk){\n\n    });\n    res.write('123');\n    res.end();\n});\nreq.on('error',function(e){\n   console.log(e.message);//请求过程中发生错误\n});\nreq.write('qwe');\nreq.end();\nreq.abort(); //用于阻止请求\nreq.setNoDelay(0); //设置无延迟\n```\n##### http.get\n```javascript\nvar http = require('http');\nhttp.get('http://www.test.com/test',function(res){\n    res.setEncoding('utf8');\n    res.on('data',function(chunk){\n       console.log('data:' + chunk);\n    });\n    res.on('end',function(chunk){\n\n    });\n    res.write('123');\n    res.end();\n}).on('error',function(e){\n    console.log(e.message);//请求过程中发生错误\n});\n```","slug":"NodeJs模块之http","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhmw000bt0yjpbvovj2z","content":"<h4 id=\"http\">http</h4><h5 id=\"http-createServer是创建服务器的核心\">http.createServer是创建服务器的核心</h5><a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">\tres.writeHeader(<span class=\"number\">200</span>,&#123;<span class=\"string\">'Content-Type'</span>:<span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'data'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//另一种创建方式</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> http.server();</div><div class=\"line\">server.on(<span class=\"string\">'request'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">\tres.writeHeader(<span class=\"number\">200</span>,&#123;<span class=\"string\">'Content-Type'</span>:<span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'data'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.maxHeadersCount 设置最大请求数，默认是<span class=\"number\">1000</span>， <span class=\"number\">0</span>代表无限制</div><div class=\"line\">server.timeout 请求超时时间</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//server.on还可以可以监听的事件：</span></div><div class=\"line\"><span class=\"number\">1.</span> connection</div><div class=\"line\"><span class=\"number\">2.</span> close</div><div class=\"line\"><span class=\"number\">3.</span> checkContinue</div><div class=\"line\"><span class=\"number\">4.</span> connet</div><div class=\"line\"><span class=\"number\">5.</span> upgrade</div><div class=\"line\"><span class=\"number\">6.</span> clientError</div><div class=\"line\"></div><div class=\"line\">server.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'Server is start ... Listen port 3000...'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"http-request\">http.request</h5><p>做为客户端向服务器发起请求<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\t<span class=\"attr\">method</span>:<span class=\"string\">'POST'</span>,</div><div class=\"line\">\t<span class=\"attr\">hostname</span>:<span class=\"string\">'www.test.com'</span>,</div><div class=\"line\">\t<span class=\"attr\">port</span>:<span class=\"number\">80</span>,</div><div class=\"line\">\t<span class=\"attr\">path</span>:<span class=\"string\">'/test'</span>,</div><div class=\"line\">\t<span class=\"attr\">header</span>:&#123;&#125; <span class=\"comment\">//路由发出req中可取到cookie user-agent信息</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> req = http.request(options,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</div><div class=\"line\">\tres.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">    res.on(<span class=\"string\">'data'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)</span>&#123;</div><div class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'data:'</span> + chunk);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    res.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\">    res.write(<span class=\"string\">'123'</span>);</div><div class=\"line\">    res.end();</div><div class=\"line\">&#125;);</div><div class=\"line\">req.on(<span class=\"string\">'error'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(e.message);<span class=\"comment\">//请求过程中发生错误</span></div><div class=\"line\">&#125;);</div><div class=\"line\">req.write(<span class=\"string\">'qwe'</span>);</div><div class=\"line\">req.end();</div><div class=\"line\">req.abort(); <span class=\"comment\">//用于阻止请求</span></div><div class=\"line\">req.setNoDelay(<span class=\"number\">0</span>); <span class=\"comment\">//设置无延迟</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"http-get\">http.get</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\">http.get(<span class=\"string\">'http://www.test.com/test'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</div><div class=\"line\">    res.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">    res.on(<span class=\"string\">'data'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)</span>&#123;</div><div class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'data:'</span> + chunk);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    res.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\">    res.write(<span class=\"string\">'123'</span>);</div><div class=\"line\">    res.end();</div><div class=\"line\">&#125;).on(<span class=\"string\">'error'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);<span class=\"comment\">//请求过程中发生错误</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","excerpt":"<h4 id=\"http\">http</h4><h5 id=\"http-createServer是创建服务器的核心\">http.createServer是创建服务器的核心</h5>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">\tres.writeHeader(<span class=\"number\">200</span>,&#123;<span class=\"string\">'Content-Type'</span>:<span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'data'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//另一种创建方式</span></div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> http.server();</div><div class=\"line\">server.on(<span class=\"string\">'request'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req,res</span>)</span>&#123;</div><div class=\"line\">\tres.writeHeader(<span class=\"number\">200</span>,&#123;<span class=\"string\">'Content-Type'</span>:<span class=\"string\">'text/plain'</span>&#125;);</div><div class=\"line\">\tres.end(<span class=\"string\">'data'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">server.maxHeadersCount 设置最大请求数，默认是<span class=\"number\">1000</span>， <span class=\"number\">0</span>代表无限制</div><div class=\"line\">server.timeout 请求超时时间</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//server.on还可以可以监听的事件：</span></div><div class=\"line\"><span class=\"number\">1.</span> connection</div><div class=\"line\"><span class=\"number\">2.</span> close</div><div class=\"line\"><span class=\"number\">3.</span> checkContinue</div><div class=\"line\"><span class=\"number\">4.</span> connet</div><div class=\"line\"><span class=\"number\">5.</span> upgrade</div><div class=\"line\"><span class=\"number\">6.</span> clientError</div><div class=\"line\"></div><div class=\"line\">server.listen(<span class=\"number\">3000</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">'Server is start ... Listen port 3000...'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h5 id=\"http-request\">http.request</h5><p>做为客户端向服务器发起请求<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> options = &#123;</div><div class=\"line\">\t<span class=\"attr\">method</span>:<span class=\"string\">'POST'</span>,</div><div class=\"line\">\t<span class=\"attr\">hostname</span>:<span class=\"string\">'www.test.com'</span>,</div><div class=\"line\">\t<span class=\"attr\">port</span>:<span class=\"number\">80</span>,</div><div class=\"line\">\t<span class=\"attr\">path</span>:<span class=\"string\">'/test'</span>,</div><div class=\"line\">\t<span class=\"attr\">header</span>:&#123;&#125; <span class=\"comment\">//路由发出req中可取到cookie user-agent信息</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> req = http.request(options,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</div><div class=\"line\">\tres.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">    res.on(<span class=\"string\">'data'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)</span>&#123;</div><div class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'data:'</span> + chunk);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    res.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\">    res.write(<span class=\"string\">'123'</span>);</div><div class=\"line\">    res.end();</div><div class=\"line\">&#125;);</div><div class=\"line\">req.on(<span class=\"string\">'error'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(e.message);<span class=\"comment\">//请求过程中发生错误</span></div><div class=\"line\">&#125;);</div><div class=\"line\">req.write(<span class=\"string\">'qwe'</span>);</div><div class=\"line\">req.end();</div><div class=\"line\">req.abort(); <span class=\"comment\">//用于阻止请求</span></div><div class=\"line\">req.setNoDelay(<span class=\"number\">0</span>); <span class=\"comment\">//设置无延迟</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"http-get\">http.get</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\">http.get(<span class=\"string\">'http://www.test.com/test'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>)</span>&#123;</div><div class=\"line\">    res.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">    res.on(<span class=\"string\">'data'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)</span>&#123;</div><div class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'data:'</span> + chunk);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    res.on(<span class=\"string\">'end'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>)</span>&#123;</div><div class=\"line\"></div><div class=\"line\">    &#125;);</div><div class=\"line\">    res.write(<span class=\"string\">'123'</span>);</div><div class=\"line\">    res.end();</div><div class=\"line\">&#125;).on(<span class=\"string\">'error'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(e.message);<span class=\"comment\">//请求过程中发生错误</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"RactiveJs应用","date":"2015-11-13T07:03:01.000Z","toc":true,"_content":"#### 简介\nRactive.js是一款简单却功能强大的JS库，它实现了模板，数据绑定，DOM实时更新，事件处理等多个有用的功能。\n\n#### 应用\n关联dom和模版\n```javascript\n//html\n<div id='output'></div>\n<script id='template' type='text/ractive'>\n</script>\n\n//js\nvar ractive = new Ractive({\n\tel: '#output',\n\ttemplate: '#template'\n});\n```\n<!--more-->\n\n#### 模版内绑定属性\n```javascript\n//html\n<div id='output'></div>\n<script id='template' type='text/ractive'>\n<p>{{greeting}} {{name}}!</p>\n</script>\n\n//js\nvar ractive = new Ractive({\n\tel: '#output',\n\ttemplate: '#template'，\n        data: {\n\t    greeting: 'Hello',\n\t    name: 'world'\n\t}\n});\n```\n#### 配置\n#### 模版\n#### mustache模版\n#### 数据和绑定\n#### 事件\n#### 过度效果和动画\n#### 组件\n#### API\n#### 插件\n\n\n#### 待续\n","source":"_posts/RactiveJs应用.md","raw":"title: RactiveJs应用\ndate: 2015-11-13 15:03:01\ntags: web\ntoc: true\n---\n#### 简介\nRactive.js是一款简单却功能强大的JS库，它实现了模板，数据绑定，DOM实时更新，事件处理等多个有用的功能。\n\n#### 应用\n关联dom和模版\n```javascript\n//html\n<div id='output'></div>\n<script id='template' type='text/ractive'>\n</script>\n\n//js\nvar ractive = new Ractive({\n\tel: '#output',\n\ttemplate: '#template'\n});\n```\n<!--more-->\n\n#### 模版内绑定属性\n```javascript\n//html\n<div id='output'></div>\n<script id='template' type='text/ractive'>\n<p>{{greeting}} {{name}}!</p>\n</script>\n\n//js\nvar ractive = new Ractive({\n\tel: '#output',\n\ttemplate: '#template'，\n        data: {\n\t    greeting: 'Hello',\n\t    name: 'world'\n\t}\n});\n```\n#### 配置\n#### 模版\n#### mustache模版\n#### 数据和绑定\n#### 事件\n#### 过度效果和动画\n#### 组件\n#### API\n#### 插件\n\n\n#### 待续\n","slug":"RactiveJs应用","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhn0000dt0yjfd213vki","content":"<h4 id=\"简介\">简介</h4><p>Ractive.js是一款简单却功能强大的JS库，它实现了模板，数据绑定，DOM实时更新，事件处理等多个有用的功能。</p>\n<h4 id=\"应用\">应用</h4><p>关联dom和模版<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//html</span></div><div class=\"line\">&lt;div id=<span class=\"string\">'output'</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script id=<span class=\"string\">'template'</span> type=<span class=\"string\">'text/ractive'</span>&gt;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//js</span></div><div class=\"line\"><span class=\"keyword\">var</span> ractive = <span class=\"keyword\">new</span> Ractive(&#123;</div><div class=\"line\">\t<span class=\"attr\">el</span>: <span class=\"string\">'#output'</span>,</div><div class=\"line\">\t<span class=\"attr\">template</span>: <span class=\"string\">'#template'</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h4 id=\"模版内绑定属性\">模版内绑定属性</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//html</div><div class=\"line\">&lt;div id='output'&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script id='template' type='text/ractive'&gt;</div><div class=\"line\">&lt;p&gt;&#123;&#123;greeting&#125;&#125; &#123;&#123;name&#125;&#125;!&lt;/p&gt;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">//js</div><div class=\"line\">var ractive = new Ractive(&#123;</div><div class=\"line\">\tel: '#output',</div><div class=\"line\">\ttemplate: '#template'，</div><div class=\"line\">        data: &#123;</div><div class=\"line\">\t    greeting: 'Hello',</div><div class=\"line\">\t    name: 'world'</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"配置\">配置</h4><h4 id=\"模版\">模版</h4><h4 id=\"mustache模版\">mustache模版</h4><h4 id=\"数据和绑定\">数据和绑定</h4><h4 id=\"事件\">事件</h4><h4 id=\"过度效果和动画\">过度效果和动画</h4><h4 id=\"组件\">组件</h4><h4 id=\"API\">API</h4><h4 id=\"插件\">插件</h4><h4 id=\"待续\">待续</h4>","excerpt":"<h4 id=\"简介\">简介</h4><p>Ractive.js是一款简单却功能强大的JS库，它实现了模板，数据绑定，DOM实时更新，事件处理等多个有用的功能。</p>\n<h4 id=\"应用\">应用</h4><p>关联dom和模版<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//html</span></div><div class=\"line\">&lt;div id=<span class=\"string\">'output'</span>&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script id=<span class=\"string\">'template'</span> type=<span class=\"string\">'text/ractive'</span>&gt;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//js</span></div><div class=\"line\"><span class=\"keyword\">var</span> ractive = <span class=\"keyword\">new</span> Ractive(&#123;</div><div class=\"line\">\t<span class=\"attr\">el</span>: <span class=\"string\">'#output'</span>,</div><div class=\"line\">\t<span class=\"attr\">template</span>: <span class=\"string\">'#template'</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>","more":"<h4 id=\"模版内绑定属性\">模版内绑定属性</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">//html</div><div class=\"line\">&lt;div id='output'&gt;&lt;/div&gt;</div><div class=\"line\">&lt;script id='template' type='text/ractive'&gt;</div><div class=\"line\">&lt;p&gt;&#123;&#123;greeting&#125;&#125; &#123;&#123;name&#125;&#125;!&lt;/p&gt;</div><div class=\"line\">&lt;/script&gt;</div><div class=\"line\"></div><div class=\"line\">//js</div><div class=\"line\">var ractive = new Ractive(&#123;</div><div class=\"line\">\tel: '#output',</div><div class=\"line\">\ttemplate: '#template'，</div><div class=\"line\">        data: &#123;</div><div class=\"line\">\t    greeting: 'Hello',</div><div class=\"line\">\t    name: 'world'</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"配置\">配置</h4><h4 id=\"模版\">模版</h4><h4 id=\"mustache模版\">mustache模版</h4><h4 id=\"数据和绑定\">数据和绑定</h4><h4 id=\"事件\">事件</h4><h4 id=\"过度效果和动画\">过度效果和动画</h4><h4 id=\"组件\">组件</h4><h4 id=\"API\">API</h4><h4 id=\"插件\">插件</h4><h4 id=\"待续\">待续</h4>"},{"title":"Synergy实现多个主机之间共享键鼠","date":"2015-11-16T07:03:01.000Z","toc":true,"_content":"##### 工具\n* Synergy软件\n* 两台电脑，一套键鼠\n<!--more-->\n\n##### 使用方法\n* A电脑做为共享键鼠的主机\n* B电脑去使用共享的键鼠\n* A电脑打开软件后选择共享选项\n* B电脑配置成使用另一台电脑的键鼠，并且配置A电脑IP\n* A电脑点击配置服务，然后在B电脑显示器对应的图标上点击，然后输入B电脑的display name然后确认即可","source":"_posts/Synergy实现多个主机之间共享键鼠.md","raw":"title: Synergy实现多个主机之间共享键鼠\ndate: 2015-11-16 15:03:01\ntags: tools\ntoc: true\n---\n##### 工具\n* Synergy软件\n* 两台电脑，一套键鼠\n<!--more-->\n\n##### 使用方法\n* A电脑做为共享键鼠的主机\n* B电脑去使用共享的键鼠\n* A电脑打开软件后选择共享选项\n* B电脑配置成使用另一台电脑的键鼠，并且配置A电脑IP\n* A电脑点击配置服务，然后在B电脑显示器对应的图标上点击，然后输入B电脑的display name然后确认即可","slug":"Synergy实现多个主机之间共享键鼠","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhn2000ft0yj0hg1hoam","content":"<h5 id=\"工具\">工具</h5><ul>\n<li>Synergy软件</li>\n<li>两台电脑，一套键鼠<a id=\"more\"></a>\n</li>\n</ul>\n<h5 id=\"使用方法\">使用方法</h5><ul>\n<li>A电脑做为共享键鼠的主机</li>\n<li>B电脑去使用共享的键鼠</li>\n<li>A电脑打开软件后选择共享选项</li>\n<li>B电脑配置成使用另一台电脑的键鼠，并且配置A电脑IP</li>\n<li>A电脑点击配置服务，然后在B电脑显示器对应的图标上点击，然后输入B电脑的display name然后确认即可</li>\n</ul>\n","excerpt":"<h5 id=\"工具\">工具</h5><ul>\n<li>Synergy软件</li>\n<li>两台电脑，一套键鼠","more":"</li>\n</ul>\n<h5 id=\"使用方法\">使用方法</h5><ul>\n<li>A电脑做为共享键鼠的主机</li>\n<li>B电脑去使用共享的键鼠</li>\n<li>A电脑打开软件后选择共享选项</li>\n<li>B电脑配置成使用另一台电脑的键鼠，并且配置A电脑IP</li>\n<li>A电脑点击配置服务，然后在B电脑显示器对应的图标上点击，然后输入B电脑的display name然后确认即可</li>\n</ul>"},{"title":"avalon应用","date":"2015-11-12T07:03:01.000Z","toc":true,"_content":"#### 介绍：\navalon是一个轻量型的MVVM框架\n\n#### 配置：\n```javascript\navalon.config({\n    debug: false\n});\n```\n为了方便调试，我们把debug模式设为true,那么avalon源码中的所有调试信息都会在控制台输出，我们把debug设为false就可以屏蔽它们。\n<!--more-->\n\n#### 定义\n`avalon.define()`\n对html页面的处理：\n```html\n<body ms-controller=\"page_model\">\n...\n<p>{{name}}</p>\n<p>{{age}}</p>\n<p>{{from}}</p>\n<a href=\"javascript:;\" ms-click=\"check\">click</a>\n</body>\n```\n```javascript\nvar vm = avalon.define({\n    $id: \"page_model\",\n    name: 'wz',\n    age: 25,\n    from: 'changchun'\n    check: function($events){\n       $events.preventDefault();\n       //do something\n    }\n})\n```\n* avalon.define定义页面对应的controller\n* 放在$skipArray数组里面的属性，将不会被扫描\n* 单向绑定 需要在ms-*属性的值前面加::，或花括号内部的前面加::\n\n#### 常用属性\n* `ms-duplex / ms-duplex-text —text `\n* `ms-visible —boolean`\n* `ms-repeat —list`\n* `ms-value / `\n* `ms-attr-*` —对应html标签的属性\n* `ms-data`\n* `ms-click`\n* `ms-class / ms-hover / ms-active`\n* `ms-widget`\n* `$watch` 属性监控\n```javascript\navalon.vmodels.grid.room_checked.$watch(\"length\", function(n) {\n     $avalon.vmodels.grid.allchecked = n === $$.grid.all_room.size();\n})\n```\n* `$unwatch` 解除监控\n* `$events` 对象，avalon中这个对象替代我们之前用的 event\n#### 扫描\n* 把视图中的所有指令全部抽取出来，转换为一个个视图刷新函数，然后放到一个个数组中，当VM的属性变动时，就会执行这些数组的函数。数组里面的东西不定是函数，也可能是对象，但里面肯定有个视图刷新函数。\n* avalon.scan，有两个可选参数，第一个是元素节点，第二个是数组，里面为一个个VM。\n#### 模版\n* ms-html 可以加载一段html结构\n* ms-include=”template” 负值一个模版变量，用于加载一段html结构\n* ms-include-src=”aaa.html” 用于加载一个资源\n#### 类操作\n* ms-class,\n* ms-hover\n* ms-active\n#### 事件绑定\n* ms-on-*\n#### 绑定\n* 显示绑定ms-visible\n* 插入绑定ms-if\n* 双工绑定ms-duplex\n* 样式绑定ms-css\n* 数据绑定ms-data\n* 属性绑定ms-attr\n* 循环绑定\n  * `ms-repeat 用于循环数组与对象 循环当前元素`\n  * `ms-each 用于循环数组 循环当前元素的内部`\n  * `ms-with 用于循环对象 循环当前元素的内部`\n  * `el: 默认el，也可以用ms-repeat-item，就变成了item指向当前元素。`\n  * `$first: 判定是否为监控数组的第一个元素`\n  * `$last: 判定是否为监控数组的最后一个元素`\n  * `$index: 得到当前元素的索引值`\n  * `$outer: 得到外围循环的那个元素。`\n  * `$remove: 这是一个方法，用于移除此元素`\n* 动画绑定ms-effect\n#### 过滤器\n\n```javascript\n它只能用于{{}}插值表达式。如果不存在参数，要求直接跟|filter，如果存在参传，则要用小括号括起，参数要有逗号\n* html\n* uppercase\n* lowercase\n* truncate – 对长字符串进行截短，truncate(number, truncation), number默认为30\n* camelize --驼峰化处理\n* escape --对类似于HTML格式的字符串进行转义\n* currency\n* number\n* date\n* 自定义过滤器\navalon.filters.format = function(str, args, args2){\n   //str为原数据，默认传入，此方法必须返回一个值\n   /* 具体逻辑 */\n   return ret;\n}\n```\n#### AJAX\n* 功能同jquery ajax\n#### 路由\n#### 加载器\n#### 自定义指令\n#### 显示优化\n* `.ms-controller, [ms-controller]{ visibility:hidden}`\n\n* 我们在页面使用了大量插值表达式，网速慢时，就会被用户看到，认为是乱码了。为了预防这种情况， 我们可以在样式中定义 `.ms-controller, [ms-controller]{ visibility:hidden}` 那么当元素被扫描后，它们才会安全显示出来。\n","source":"_posts/avalon应用.md","raw":"title: avalon应用\ndate: 2015-11-12 15:03:01\ntags: web\ntoc: true\n---\n#### 介绍：\navalon是一个轻量型的MVVM框架\n\n#### 配置：\n```javascript\navalon.config({\n    debug: false\n});\n```\n为了方便调试，我们把debug模式设为true,那么avalon源码中的所有调试信息都会在控制台输出，我们把debug设为false就可以屏蔽它们。\n<!--more-->\n\n#### 定义\n`avalon.define()`\n对html页面的处理：\n```html\n<body ms-controller=\"page_model\">\n...\n<p>{{name}}</p>\n<p>{{age}}</p>\n<p>{{from}}</p>\n<a href=\"javascript:;\" ms-click=\"check\">click</a>\n</body>\n```\n```javascript\nvar vm = avalon.define({\n    $id: \"page_model\",\n    name: 'wz',\n    age: 25,\n    from: 'changchun'\n    check: function($events){\n       $events.preventDefault();\n       //do something\n    }\n})\n```\n* avalon.define定义页面对应的controller\n* 放在$skipArray数组里面的属性，将不会被扫描\n* 单向绑定 需要在ms-*属性的值前面加::，或花括号内部的前面加::\n\n#### 常用属性\n* `ms-duplex / ms-duplex-text —text `\n* `ms-visible —boolean`\n* `ms-repeat —list`\n* `ms-value / `\n* `ms-attr-*` —对应html标签的属性\n* `ms-data`\n* `ms-click`\n* `ms-class / ms-hover / ms-active`\n* `ms-widget`\n* `$watch` 属性监控\n```javascript\navalon.vmodels.grid.room_checked.$watch(\"length\", function(n) {\n     $avalon.vmodels.grid.allchecked = n === $$.grid.all_room.size();\n})\n```\n* `$unwatch` 解除监控\n* `$events` 对象，avalon中这个对象替代我们之前用的 event\n#### 扫描\n* 把视图中的所有指令全部抽取出来，转换为一个个视图刷新函数，然后放到一个个数组中，当VM的属性变动时，就会执行这些数组的函数。数组里面的东西不定是函数，也可能是对象，但里面肯定有个视图刷新函数。\n* avalon.scan，有两个可选参数，第一个是元素节点，第二个是数组，里面为一个个VM。\n#### 模版\n* ms-html 可以加载一段html结构\n* ms-include=”template” 负值一个模版变量，用于加载一段html结构\n* ms-include-src=”aaa.html” 用于加载一个资源\n#### 类操作\n* ms-class,\n* ms-hover\n* ms-active\n#### 事件绑定\n* ms-on-*\n#### 绑定\n* 显示绑定ms-visible\n* 插入绑定ms-if\n* 双工绑定ms-duplex\n* 样式绑定ms-css\n* 数据绑定ms-data\n* 属性绑定ms-attr\n* 循环绑定\n  * `ms-repeat 用于循环数组与对象 循环当前元素`\n  * `ms-each 用于循环数组 循环当前元素的内部`\n  * `ms-with 用于循环对象 循环当前元素的内部`\n  * `el: 默认el，也可以用ms-repeat-item，就变成了item指向当前元素。`\n  * `$first: 判定是否为监控数组的第一个元素`\n  * `$last: 判定是否为监控数组的最后一个元素`\n  * `$index: 得到当前元素的索引值`\n  * `$outer: 得到外围循环的那个元素。`\n  * `$remove: 这是一个方法，用于移除此元素`\n* 动画绑定ms-effect\n#### 过滤器\n\n```javascript\n它只能用于{{}}插值表达式。如果不存在参数，要求直接跟|filter，如果存在参传，则要用小括号括起，参数要有逗号\n* html\n* uppercase\n* lowercase\n* truncate – 对长字符串进行截短，truncate(number, truncation), number默认为30\n* camelize --驼峰化处理\n* escape --对类似于HTML格式的字符串进行转义\n* currency\n* number\n* date\n* 自定义过滤器\navalon.filters.format = function(str, args, args2){\n   //str为原数据，默认传入，此方法必须返回一个值\n   /* 具体逻辑 */\n   return ret;\n}\n```\n#### AJAX\n* 功能同jquery ajax\n#### 路由\n#### 加载器\n#### 自定义指令\n#### 显示优化\n* `.ms-controller, [ms-controller]{ visibility:hidden}`\n\n* 我们在页面使用了大量插值表达式，网速慢时，就会被用户看到，认为是乱码了。为了预防这种情况， 我们可以在样式中定义 `.ms-controller, [ms-controller]{ visibility:hidden}` 那么当元素被扫描后，它们才会安全显示出来。\n","slug":"avalon应用","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhn5000it0yjr60wopnd","content":"<h4 id=\"介绍：\">介绍：</h4><p>avalon是一个轻量型的MVVM框架</p>\n<h4 id=\"配置：\">配置：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">avalon.config(&#123;</div><div class=\"line\">    <span class=\"attr\">debug</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>为了方便调试，我们把debug模式设为true,那么avalon源码中的所有调试信息都会在控制台输出，我们把debug设为false就可以屏蔽它们。<br><a id=\"more\"></a></p>\n<h4 id=\"定义\">定义</h4><p><code>avalon.define()</code><br>对html页面的处理：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ms-controller</span>=<span class=\"string\">\"page_model\"</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;from&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">ms-click</span>=<span class=\"string\">\"check\"</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = avalon.define(&#123;</div><div class=\"line\">    <span class=\"attr\">$id</span>: <span class=\"string\">\"page_model\"</span>,</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'wz'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">25</span>,</div><div class=\"line\">    <span class=\"attr\">from</span>: <span class=\"string\">'changchun'</span></div><div class=\"line\">    check: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$events</span>)</span>&#123;</div><div class=\"line\">       $events.preventDefault();</div><div class=\"line\">       <span class=\"comment\">//do something</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>avalon.define定义页面对应的controller</li>\n<li>放在$skipArray数组里面的属性，将不会被扫描</li>\n<li>单向绑定 需要在ms-*属性的值前面加::，或花括号内部的前面加::</li>\n</ul>\n<h4 id=\"常用属性\">常用属性</h4><ul>\n<li><code>ms-duplex / ms-duplex-text —text</code></li>\n<li><code>ms-visible —boolean</code></li>\n<li><code>ms-repeat —list</code></li>\n<li><code>ms-value /</code></li>\n<li><code>ms-attr-*</code> —对应html标签的属性</li>\n<li><code>ms-data</code></li>\n<li><code>ms-click</code></li>\n<li><code>ms-class / ms-hover / ms-active</code></li>\n<li><code>ms-widget</code></li>\n<li><p><code>$watch</code> 属性监控</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">avalon.vmodels.grid.room_checked.$watch(<span class=\"string\">\"length\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">     $avalon.vmodels.grid.allchecked = n === $$.grid.all_room.size();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>$unwatch</code> 解除监控</p>\n</li>\n<li><code>$events</code> 对象，avalon中这个对象替代我们之前用的 event<h4 id=\"扫描\">扫描</h4></li>\n<li>把视图中的所有指令全部抽取出来，转换为一个个视图刷新函数，然后放到一个个数组中，当VM的属性变动时，就会执行这些数组的函数。数组里面的东西不定是函数，也可能是对象，但里面肯定有个视图刷新函数。</li>\n<li>avalon.scan，有两个可选参数，第一个是元素节点，第二个是数组，里面为一个个VM。<h4 id=\"模版\">模版</h4></li>\n<li>ms-html 可以加载一段html结构</li>\n<li>ms-include=”template” 负值一个模版变量，用于加载一段html结构</li>\n<li>ms-include-src=”aaa.html” 用于加载一个资源<h4 id=\"类操作\">类操作</h4></li>\n<li>ms-class,</li>\n<li>ms-hover</li>\n<li>ms-active<h4 id=\"事件绑定\">事件绑定</h4></li>\n<li>ms-on-*<h4 id=\"绑定\">绑定</h4></li>\n<li>显示绑定ms-visible</li>\n<li>插入绑定ms-if</li>\n<li>双工绑定ms-duplex</li>\n<li>样式绑定ms-css</li>\n<li>数据绑定ms-data</li>\n<li>属性绑定ms-attr</li>\n<li>循环绑定<ul>\n<li><code>ms-repeat 用于循环数组与对象 循环当前元素</code></li>\n<li><code>ms-each 用于循环数组 循环当前元素的内部</code></li>\n<li><code>ms-with 用于循环对象 循环当前元素的内部</code></li>\n<li><code>el: 默认el，也可以用ms-repeat-item，就变成了item指向当前元素。</code></li>\n<li><code>$first: 判定是否为监控数组的第一个元素</code></li>\n<li><code>$last: 判定是否为监控数组的最后一个元素</code></li>\n<li><code>$index: 得到当前元素的索引值</code></li>\n<li><code>$outer: 得到外围循环的那个元素。</code></li>\n<li><code>$remove: 这是一个方法，用于移除此元素</code></li>\n</ul>\n</li>\n<li>动画绑定ms-effect<h4 id=\"过滤器\">过滤器</h4></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">它只能用于&#123;&#123;&#125;&#125;插值表达式。如果不存在参数，要求直接跟|filter，如果存在参传，则要用小括号括起，参数要有逗号</div><div class=\"line\">* html</div><div class=\"line\">* uppercase</div><div class=\"line\">* lowercase</div><div class=\"line\">* truncate – 对长字符串进行截短，truncate(number, truncation), number默认为<span class=\"number\">30</span></div><div class=\"line\">* camelize --驼峰化处理</div><div class=\"line\">* <span class=\"built_in\">escape</span> --对类似于HTML格式的字符串进行转义</div><div class=\"line\">* currency</div><div class=\"line\">* number</div><div class=\"line\">* date</div><div class=\"line\">* 自定义过滤器</div><div class=\"line\">avalon.filters.format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str, args, args2</span>)</span>&#123;</div><div class=\"line\">   <span class=\"comment\">//str为原数据，默认传入，此方法必须返回一个值</span></div><div class=\"line\">   <span class=\"comment\">/* 具体逻辑 */</span></div><div class=\"line\">   <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"AJAX\">AJAX</h4><ul>\n<li>功能同jquery ajax<h4 id=\"路由\">路由</h4><h4 id=\"加载器\">加载器</h4><h4 id=\"自定义指令\">自定义指令</h4><h4 id=\"显示优化\">显示优化</h4></li>\n<li><p><code>.ms-controller, [ms-controller]{ visibility:hidden}</code></p>\n</li>\n<li><p>我们在页面使用了大量插值表达式，网速慢时，就会被用户看到，认为是乱码了。为了预防这种情况， 我们可以在样式中定义 <code>.ms-controller, [ms-controller]{ visibility:hidden}</code> 那么当元素被扫描后，它们才会安全显示出来。</p>\n</li>\n</ul>\n","excerpt":"<h4 id=\"介绍：\">介绍：</h4><p>avalon是一个轻量型的MVVM框架</p>\n<h4 id=\"配置：\">配置：</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">avalon.config(&#123;</div><div class=\"line\">    <span class=\"attr\">debug</span>: <span class=\"literal\">false</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>为了方便调试，我们把debug模式设为true,那么avalon源码中的所有调试信息都会在控制台输出，我们把debug设为false就可以屏蔽它们。<br>","more":"</p>\n<h4 id=\"定义\">定义</h4><p><code>avalon.define()</code><br>对html页面的处理：<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span> <span class=\"attr\">ms-controller</span>=<span class=\"string\">\"page_model\"</span>&gt;</span></div><div class=\"line\">...</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;from&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"javascript:;\"</span> <span class=\"attr\">ms-click</span>=<span class=\"string\">\"check\"</span>&gt;</span>click<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> vm = avalon.define(&#123;</div><div class=\"line\">    <span class=\"attr\">$id</span>: <span class=\"string\">\"page_model\"</span>,</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">'wz'</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">25</span>,</div><div class=\"line\">    <span class=\"attr\">from</span>: <span class=\"string\">'changchun'</span></div><div class=\"line\">    check: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">$events</span>)</span>&#123;</div><div class=\"line\">       $events.preventDefault();</div><div class=\"line\">       <span class=\"comment\">//do something</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li>avalon.define定义页面对应的controller</li>\n<li>放在$skipArray数组里面的属性，将不会被扫描</li>\n<li>单向绑定 需要在ms-*属性的值前面加::，或花括号内部的前面加::</li>\n</ul>\n<h4 id=\"常用属性\">常用属性</h4><ul>\n<li><code>ms-duplex / ms-duplex-text —text</code></li>\n<li><code>ms-visible —boolean</code></li>\n<li><code>ms-repeat —list</code></li>\n<li><code>ms-value /</code></li>\n<li><code>ms-attr-*</code> —对应html标签的属性</li>\n<li><code>ms-data</code></li>\n<li><code>ms-click</code></li>\n<li><code>ms-class / ms-hover / ms-active</code></li>\n<li><code>ms-widget</code></li>\n<li><p><code>$watch</code> 属性监控</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">avalon.vmodels.grid.room_checked.$watch(<span class=\"string\">\"length\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">n</span>) </span>&#123;</div><div class=\"line\">     $avalon.vmodels.grid.allchecked = n === $$.grid.all_room.size();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>$unwatch</code> 解除监控</p>\n</li>\n<li><code>$events</code> 对象，avalon中这个对象替代我们之前用的 event<h4 id=\"扫描\">扫描</h4></li>\n<li>把视图中的所有指令全部抽取出来，转换为一个个视图刷新函数，然后放到一个个数组中，当VM的属性变动时，就会执行这些数组的函数。数组里面的东西不定是函数，也可能是对象，但里面肯定有个视图刷新函数。</li>\n<li>avalon.scan，有两个可选参数，第一个是元素节点，第二个是数组，里面为一个个VM。<h4 id=\"模版\">模版</h4></li>\n<li>ms-html 可以加载一段html结构</li>\n<li>ms-include=”template” 负值一个模版变量，用于加载一段html结构</li>\n<li>ms-include-src=”aaa.html” 用于加载一个资源<h4 id=\"类操作\">类操作</h4></li>\n<li>ms-class,</li>\n<li>ms-hover</li>\n<li>ms-active<h4 id=\"事件绑定\">事件绑定</h4></li>\n<li>ms-on-*<h4 id=\"绑定\">绑定</h4></li>\n<li>显示绑定ms-visible</li>\n<li>插入绑定ms-if</li>\n<li>双工绑定ms-duplex</li>\n<li>样式绑定ms-css</li>\n<li>数据绑定ms-data</li>\n<li>属性绑定ms-attr</li>\n<li>循环绑定<ul>\n<li><code>ms-repeat 用于循环数组与对象 循环当前元素</code></li>\n<li><code>ms-each 用于循环数组 循环当前元素的内部</code></li>\n<li><code>ms-with 用于循环对象 循环当前元素的内部</code></li>\n<li><code>el: 默认el，也可以用ms-repeat-item，就变成了item指向当前元素。</code></li>\n<li><code>$first: 判定是否为监控数组的第一个元素</code></li>\n<li><code>$last: 判定是否为监控数组的最后一个元素</code></li>\n<li><code>$index: 得到当前元素的索引值</code></li>\n<li><code>$outer: 得到外围循环的那个元素。</code></li>\n<li><code>$remove: 这是一个方法，用于移除此元素</code></li>\n</ul>\n</li>\n<li>动画绑定ms-effect<h4 id=\"过滤器\">过滤器</h4></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">它只能用于&#123;&#123;&#125;&#125;插值表达式。如果不存在参数，要求直接跟|filter，如果存在参传，则要用小括号括起，参数要有逗号</div><div class=\"line\">* html</div><div class=\"line\">* uppercase</div><div class=\"line\">* lowercase</div><div class=\"line\">* truncate – 对长字符串进行截短，truncate(number, truncation), number默认为<span class=\"number\">30</span></div><div class=\"line\">* camelize --驼峰化处理</div><div class=\"line\">* <span class=\"built_in\">escape</span> --对类似于HTML格式的字符串进行转义</div><div class=\"line\">* currency</div><div class=\"line\">* number</div><div class=\"line\">* date</div><div class=\"line\">* 自定义过滤器</div><div class=\"line\">avalon.filters.format = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">str, args, args2</span>)</span>&#123;</div><div class=\"line\">   <span class=\"comment\">//str为原数据，默认传入，此方法必须返回一个值</span></div><div class=\"line\">   <span class=\"comment\">/* 具体逻辑 */</span></div><div class=\"line\">   <span class=\"keyword\">return</span> ret;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"AJAX\">AJAX</h4><ul>\n<li>功能同jquery ajax<h4 id=\"路由\">路由</h4><h4 id=\"加载器\">加载器</h4><h4 id=\"自定义指令\">自定义指令</h4><h4 id=\"显示优化\">显示优化</h4></li>\n<li><p><code>.ms-controller, [ms-controller]{ visibility:hidden}</code></p>\n</li>\n<li><p>我们在页面使用了大量插值表达式，网速慢时，就会被用户看到，认为是乱码了。为了预防这种情况， 我们可以在样式中定义 <code>.ms-controller, [ms-controller]{ visibility:hidden}</code> 那么当元素被扫描后，它们才会安全显示出来。</p>\n</li>\n</ul>"},{"title":"fetch","date":"2016-08-31T13:17:37.000Z","toc":true,"_content":"##### 介绍\n* 遵循Promise解决方案\n* XMLHttpRequest的替代者\n\n##### 使用\n* 引入Promise兼容方案\n* 引入fetch兼容方案（高级浏览器高版本已经支持）\n* 兼容方案以及使用说明见 https://github.com/github/fetch\n<!--more-->\n\n##### 详解\n\n###### Header\n\n###### Request\n\n###### Response\n\n##### 示例\n```javascript\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response\n  } else {\n    var error = new Error(response.statusText)\n    error.response = response\n    throw error\n  }\n}\n\nfunction parseJSON(response) {\n  return response.json()\n}\n\nfetch('/test.json')\n  .then(checkStatus)\n  .then(parseJSON)\n  .then(function(data) {\n    console.log('request succeeded with JSON response', data)\n  }).catch(function(error) {\n    console.log('request failed', error)\n  });\n```","source":"_posts/fetch.md","raw":"title: fetch\ndate: 2016-08-31 21:17:37\ntags: javascript\ntoc: true\n---\n##### 介绍\n* 遵循Promise解决方案\n* XMLHttpRequest的替代者\n\n##### 使用\n* 引入Promise兼容方案\n* 引入fetch兼容方案（高级浏览器高版本已经支持）\n* 兼容方案以及使用说明见 https://github.com/github/fetch\n<!--more-->\n\n##### 详解\n\n###### Header\n\n###### Request\n\n###### Response\n\n##### 示例\n```javascript\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response\n  } else {\n    var error = new Error(response.statusText)\n    error.response = response\n    throw error\n  }\n}\n\nfunction parseJSON(response) {\n  return response.json()\n}\n\nfetch('/test.json')\n  .then(checkStatus)\n  .then(parseJSON)\n  .then(function(data) {\n    console.log('request succeeded with JSON response', data)\n  }).catch(function(error) {\n    console.log('request failed', error)\n  });\n```","slug":"fetch","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhn9000kt0yjxhv8lnsn","content":"<h5 id=\"介绍\">介绍</h5><ul>\n<li>遵循Promise解决方案</li>\n<li>XMLHttpRequest的替代者</li>\n</ul>\n<h5 id=\"使用\">使用</h5><ul>\n<li>引入Promise兼容方案</li>\n<li>引入fetch兼容方案（高级浏览器高版本已经支持）</li>\n<li>兼容方案以及使用说明见 <a href=\"https://github.com/github/fetch\" target=\"_blank\" rel=\"external\">https://github.com/github/fetch</a><a id=\"more\"></a>\n</li>\n</ul>\n<h5 id=\"详解\">详解</h5><h6 id=\"Header\">Header</h6><h6 id=\"Request\">Request</h6><h6 id=\"Response\">Response</h6><h5 id=\"示例\">示例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkStatus</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (response.status &gt;= <span class=\"number\">200</span> &amp;&amp; response.status &lt; <span class=\"number\">300</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> response</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(response.statusText)</div><div class=\"line\">    error.response = response</div><div class=\"line\">    <span class=\"keyword\">throw</span> error</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseJSON</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> response.json()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fetch(<span class=\"string\">'/test.json'</span>)</div><div class=\"line\">  .then(checkStatus)</div><div class=\"line\">  .then(parseJSON)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'request succeeded with JSON response'</span>, data)</div><div class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'request failed'</span>, error)</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>","excerpt":"<h5 id=\"介绍\">介绍</h5><ul>\n<li>遵循Promise解决方案</li>\n<li>XMLHttpRequest的替代者</li>\n</ul>\n<h5 id=\"使用\">使用</h5><ul>\n<li>引入Promise兼容方案</li>\n<li>引入fetch兼容方案（高级浏览器高版本已经支持）</li>\n<li>兼容方案以及使用说明见 <a href=\"https://github.com/github/fetch\">https://github.com/github/fetch</a>","more":"</li>\n</ul>\n<h5 id=\"详解\">详解</h5><h6 id=\"Header\">Header</h6><h6 id=\"Request\">Request</h6><h6 id=\"Response\">Response</h6><h5 id=\"示例\">示例</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">checkStatus</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (response.status &gt;= <span class=\"number\">200</span> &amp;&amp; response.status &lt; <span class=\"number\">300</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> response</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(response.statusText)</div><div class=\"line\">    error.response = response</div><div class=\"line\">    <span class=\"keyword\">throw</span> error</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseJSON</span>(<span class=\"params\">response</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> response.json()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">fetch(<span class=\"string\">'/test.json'</span>)</div><div class=\"line\">  .then(checkStatus)</div><div class=\"line\">  .then(parseJSON)</div><div class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'request succeeded with JSON response'</span>, data)</div><div class=\"line\">  &#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'request failed'</span>, error)</div><div class=\"line\">  &#125;);</div></pre></td></tr></table></figure>"},{"title":"html5文件上传","date":"2015-10-04T11:20:11.000Z","toc":true,"_content":"#### File\n>* 背景\n我们之前在浏览器端操作文件，一般都是通过flash,silverlight或者ActiveX插件，这些实现都是依赖第三方插件，不够独立也伴随着升级带来的不稳定，也不够通用，使用了这些技术后也很难进行跨平台、跨浏览器、跨设备等情况下实现统一的表现。\n之前图片上传方式，1、form提交。2、flash上传。3、插件上传。\n* form上传无法取消，没有上传进度，flash上传，非IE浏览器无法传递cookie，插件上传的问题就是跨浏览器上传。\n* HTML5的File API可以很轻松的使用JS来控制文件的读取、写入等一系列的操作。\n<!--more-->\n\n##### js对象\n* FileList\nFile对象的集合,file标签设置multiple，就支持多文件上传\n`<input type=\"file\" multiple=\"multiple\" name=\"file\" id=\"js_file\" />`\n* Blob\n原始数据对象\n使用slice方法可以读取原始数据中的某块数据\n属性：size（数据的大小），type（数据的MIME类型）\n* File\n继承自Blob对象,指向一个具体的文件\n属性：name（文件名), lastModifiedDate（最后修改时间)\n* FileReader\n读取文件数据\n* URL scheme\n\n##### FileReader\n* 三个方法\n\t* readAsBinaryString(Blob blob);传入一个Blob对象，读取数据的结果作为二进制字符串的形式放到FileReader的result属性中。\n\t* readAsText(Blob blob, optional DOMString encoding);第一个参数传入Blog对象，第二个参数传入编码格式，异步将数据读取成功后放到result属性中，读取的内容是普通的文本字符串。\n\t* readAsDataURL(Blob blob);传入一个Blob对象，读取内容可以做为URL属性，图片返回结果可以赋值给img的src。\n* 六个事件\n\t* Onloadstart 文件读取开始时触发。\n\t* Progress 读取进行中定时触发。事件参数中会含有已读取总数据量。\n\t* Abort 当读取被中止时触发。\n\t* Error 当读取出错时触发。\n\t* Load 当读取成功完成时触发。\n\t* Loadend 当读取完成时，无论成功或者失败都会触发。\n\n##### 拖拽上传\n>拖拽简介\n拖拽源和拖拽目标：\n* 拖拽源：设置draggable属性为true标识该对象可作为拖拽源。然后监听源对象的dragstart事件，在事件处理函数里设置DataTransfer。在DataTransfer里可以设置拖拽数据的类型和值。比如是纯文本的值，可以设置类型为”text/plain”，url则把类型设置为”text/uri-list”。这样，目标对象就可以根据期望的类型来选择数据了。\n* 拖拽目标：一个拖拽目标必须监听3个事件。\n\t* dragenter：目标对象通过响应这个事件来确定是否接收拖拽。如果接收则需要取消这个事件，停止事件继续传播。\n\t* dragover：通过响应这个事件来显示拖拽的提示效果。\n\t* drop：目标对象通过响应这个事件来处理拖拽数据。在drop事件中可以获取DataTransfer对象，取出要上传的数据。\n","source":"_posts/html5文件上传.md","raw":"title: html5文件上传\ndate: 2015-10-04 19:20:11\ntags: javascript\ntoc: true\n---\n#### File\n>* 背景\n我们之前在浏览器端操作文件，一般都是通过flash,silverlight或者ActiveX插件，这些实现都是依赖第三方插件，不够独立也伴随着升级带来的不稳定，也不够通用，使用了这些技术后也很难进行跨平台、跨浏览器、跨设备等情况下实现统一的表现。\n之前图片上传方式，1、form提交。2、flash上传。3、插件上传。\n* form上传无法取消，没有上传进度，flash上传，非IE浏览器无法传递cookie，插件上传的问题就是跨浏览器上传。\n* HTML5的File API可以很轻松的使用JS来控制文件的读取、写入等一系列的操作。\n<!--more-->\n\n##### js对象\n* FileList\nFile对象的集合,file标签设置multiple，就支持多文件上传\n`<input type=\"file\" multiple=\"multiple\" name=\"file\" id=\"js_file\" />`\n* Blob\n原始数据对象\n使用slice方法可以读取原始数据中的某块数据\n属性：size（数据的大小），type（数据的MIME类型）\n* File\n继承自Blob对象,指向一个具体的文件\n属性：name（文件名), lastModifiedDate（最后修改时间)\n* FileReader\n读取文件数据\n* URL scheme\n\n##### FileReader\n* 三个方法\n\t* readAsBinaryString(Blob blob);传入一个Blob对象，读取数据的结果作为二进制字符串的形式放到FileReader的result属性中。\n\t* readAsText(Blob blob, optional DOMString encoding);第一个参数传入Blog对象，第二个参数传入编码格式，异步将数据读取成功后放到result属性中，读取的内容是普通的文本字符串。\n\t* readAsDataURL(Blob blob);传入一个Blob对象，读取内容可以做为URL属性，图片返回结果可以赋值给img的src。\n* 六个事件\n\t* Onloadstart 文件读取开始时触发。\n\t* Progress 读取进行中定时触发。事件参数中会含有已读取总数据量。\n\t* Abort 当读取被中止时触发。\n\t* Error 当读取出错时触发。\n\t* Load 当读取成功完成时触发。\n\t* Loadend 当读取完成时，无论成功或者失败都会触发。\n\n##### 拖拽上传\n>拖拽简介\n拖拽源和拖拽目标：\n* 拖拽源：设置draggable属性为true标识该对象可作为拖拽源。然后监听源对象的dragstart事件，在事件处理函数里设置DataTransfer。在DataTransfer里可以设置拖拽数据的类型和值。比如是纯文本的值，可以设置类型为”text/plain”，url则把类型设置为”text/uri-list”。这样，目标对象就可以根据期望的类型来选择数据了。\n* 拖拽目标：一个拖拽目标必须监听3个事件。\n\t* dragenter：目标对象通过响应这个事件来确定是否接收拖拽。如果接收则需要取消这个事件，停止事件继续传播。\n\t* dragover：通过响应这个事件来显示拖拽的提示效果。\n\t* drop：目标对象通过响应这个事件来处理拖拽数据。在drop事件中可以获取DataTransfer对象，取出要上传的数据。\n","slug":"html5文件上传","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhnd000nt0yjhqd57xyd","content":"<h4 id=\"File\">File</h4><blockquote>\n<ul>\n<li>背景<br>我们之前在浏览器端操作文件，一般都是通过flash,silverlight或者ActiveX插件，这些实现都是依赖第三方插件，不够独立也伴随着升级带来的不稳定，也不够通用，使用了这些技术后也很难进行跨平台、跨浏览器、跨设备等情况下实现统一的表现。<br>之前图片上传方式，1、form提交。2、flash上传。3、插件上传。</li>\n<li>form上传无法取消，没有上传进度，flash上传，非IE浏览器无法传递cookie，插件上传的问题就是跨浏览器上传。</li>\n<li>HTML5的File API可以很轻松的使用JS来控制文件的读取、写入等一系列的操作。<a id=\"more\"></a>\n</li>\n</ul>\n</blockquote>\n<h5 id=\"js对象\">js对象</h5><ul>\n<li>FileList<br>File对象的集合,file标签设置multiple，就支持多文件上传<br><code>&lt;input type=&quot;file&quot; multiple=&quot;multiple&quot; name=&quot;file&quot; id=&quot;js_file&quot; /&gt;</code></li>\n<li>Blob<br>原始数据对象<br>使用slice方法可以读取原始数据中的某块数据<br>属性：size（数据的大小），type（数据的MIME类型）</li>\n<li>File<br>继承自Blob对象,指向一个具体的文件<br>属性：name（文件名), lastModifiedDate（最后修改时间)</li>\n<li>FileReader<br>读取文件数据</li>\n<li>URL scheme</li>\n</ul>\n<h5 id=\"FileReader\">FileReader</h5><ul>\n<li>三个方法<ul>\n<li>readAsBinaryString(Blob blob);传入一个Blob对象，读取数据的结果作为二进制字符串的形式放到FileReader的result属性中。</li>\n<li>readAsText(Blob blob, optional DOMString encoding);第一个参数传入Blog对象，第二个参数传入编码格式，异步将数据读取成功后放到result属性中，读取的内容是普通的文本字符串。</li>\n<li>readAsDataURL(Blob blob);传入一个Blob对象，读取内容可以做为URL属性，图片返回结果可以赋值给img的src。</li>\n</ul>\n</li>\n<li>六个事件<ul>\n<li>Onloadstart 文件读取开始时触发。</li>\n<li>Progress 读取进行中定时触发。事件参数中会含有已读取总数据量。</li>\n<li>Abort 当读取被中止时触发。</li>\n<li>Error 当读取出错时触发。</li>\n<li>Load 当读取成功完成时触发。</li>\n<li>Loadend 当读取完成时，无论成功或者失败都会触发。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"拖拽上传\">拖拽上传</h5><blockquote>\n<p>拖拽简介<br>拖拽源和拖拽目标：</p>\n<ul>\n<li>拖拽源：设置draggable属性为true标识该对象可作为拖拽源。然后监听源对象的dragstart事件，在事件处理函数里设置DataTransfer。在DataTransfer里可以设置拖拽数据的类型和值。比如是纯文本的值，可以设置类型为”text/plain”，url则把类型设置为”text/uri-list”。这样，目标对象就可以根据期望的类型来选择数据了。</li>\n<li>拖拽目标：一个拖拽目标必须监听3个事件。<ul>\n<li>dragenter：目标对象通过响应这个事件来确定是否接收拖拽。如果接收则需要取消这个事件，停止事件继续传播。</li>\n<li>dragover：通过响应这个事件来显示拖拽的提示效果。</li>\n<li>drop：目标对象通过响应这个事件来处理拖拽数据。在drop事件中可以获取DataTransfer对象，取出要上传的数据。</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n","excerpt":"<h4 id=\"File\">File</h4><blockquote>\n<ul>\n<li>背景<br>我们之前在浏览器端操作文件，一般都是通过flash,silverlight或者ActiveX插件，这些实现都是依赖第三方插件，不够独立也伴随着升级带来的不稳定，也不够通用，使用了这些技术后也很难进行跨平台、跨浏览器、跨设备等情况下实现统一的表现。<br>之前图片上传方式，1、form提交。2、flash上传。3、插件上传。</li>\n<li>form上传无法取消，没有上传进度，flash上传，非IE浏览器无法传递cookie，插件上传的问题就是跨浏览器上传。</li>\n<li>HTML5的File API可以很轻松的使用JS来控制文件的读取、写入等一系列的操作。","more":"</li>\n</ul>\n</blockquote>\n<h5 id=\"js对象\">js对象</h5><ul>\n<li>FileList<br>File对象的集合,file标签设置multiple，就支持多文件上传<br><code>&lt;input type=&quot;file&quot; multiple=&quot;multiple&quot; name=&quot;file&quot; id=&quot;js_file&quot; /&gt;</code></li>\n<li>Blob<br>原始数据对象<br>使用slice方法可以读取原始数据中的某块数据<br>属性：size（数据的大小），type（数据的MIME类型）</li>\n<li>File<br>继承自Blob对象,指向一个具体的文件<br>属性：name（文件名), lastModifiedDate（最后修改时间)</li>\n<li>FileReader<br>读取文件数据</li>\n<li>URL scheme</li>\n</ul>\n<h5 id=\"FileReader\">FileReader</h5><ul>\n<li>三个方法<ul>\n<li>readAsBinaryString(Blob blob);传入一个Blob对象，读取数据的结果作为二进制字符串的形式放到FileReader的result属性中。</li>\n<li>readAsText(Blob blob, optional DOMString encoding);第一个参数传入Blog对象，第二个参数传入编码格式，异步将数据读取成功后放到result属性中，读取的内容是普通的文本字符串。</li>\n<li>readAsDataURL(Blob blob);传入一个Blob对象，读取内容可以做为URL属性，图片返回结果可以赋值给img的src。</li>\n</ul>\n</li>\n<li>六个事件<ul>\n<li>Onloadstart 文件读取开始时触发。</li>\n<li>Progress 读取进行中定时触发。事件参数中会含有已读取总数据量。</li>\n<li>Abort 当读取被中止时触发。</li>\n<li>Error 当读取出错时触发。</li>\n<li>Load 当读取成功完成时触发。</li>\n<li>Loadend 当读取完成时，无论成功或者失败都会触发。</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"拖拽上传\">拖拽上传</h5><blockquote>\n<p>拖拽简介<br>拖拽源和拖拽目标：</p>\n<ul>\n<li>拖拽源：设置draggable属性为true标识该对象可作为拖拽源。然后监听源对象的dragstart事件，在事件处理函数里设置DataTransfer。在DataTransfer里可以设置拖拽数据的类型和值。比如是纯文本的值，可以设置类型为”text/plain”，url则把类型设置为”text/uri-list”。这样，目标对象就可以根据期望的类型来选择数据了。</li>\n<li>拖拽目标：一个拖拽目标必须监听3个事件。<ul>\n<li>dragenter：目标对象通过响应这个事件来确定是否接收拖拽。如果接收则需要取消这个事件，停止事件继续传播。</li>\n<li>dragover：通过响应这个事件来显示拖拽的提示效果。</li>\n<li>drop：目标对象通过响应这个事件来处理拖拽数据。在drop事件中可以获取DataTransfer对象，取出要上传的数据。</li>\n</ul>\n</li>\n</ul>\n</blockquote>"},{"title":"html页面中meta标签","date":"2015-11-11T07:03:01.000Z","toc":true,"_content":"#### 介绍\n>meta标签提供的数据不会展示页页面当中，但是对于机器来说，这些内容确是重要的，它会告诉机器怎么展示页面，还可以设置搜索引擎对页面的抓取。\n\n##### 属性\nkey | value | des\n---- | ------ | ----\nhttp-equiv | content-type / expire / refresh / set-cookie |\t把content属性关联到HTTP头部\nname | author / description / keywords / generator / revised / others |\t把 content 属性关联到一个名称\ncontent | text\t| 定义用于 content 属性值的格式\n\n<!--more-->\n\n##### SEO相关\n* name=”keywords” 网页内容关键字\n* name=”description” 网页内容描述\n* name=”robots” 搜索引擎索引方式\n\tnone 搜索引擎将忽略此网页，等价于noindex，nofollow。\n\tnoindex 搜索引擎不索引此网页。\n\tnofollow 搜索引擎不继续通过此网页的链接索引搜索其它的网页。\n\tall 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。\n\tindex 搜索引擎索引此网页。\n\tfollow 搜索引擎继续通过此网页的链接索引搜索其它的网页。\n* http-equiv=”refresh” 页面重定向和刷新,content内的数字代表时间，多少秒后刷新。如果加url,则会重定向到指定网页\n\t`<meta http-equiv=\"refresh\" content=\"0;url=http://www.baidu.com\" />`\n* name=”author” 作者\n* 针对谷歌GOOGLEBOT使用robots\n\t`<meta name=\"googlebot\" content=\"noindex, nofollow\" />`\n* 针对百度baiduspider使用robots\n\t`<meta name=\"baiduspider\" content=\"noarchive\" />`\n\n##### 移动设备\n* viewport 优化移动页面显示\n\t*  4.7-5寸设备的viewport宽设为360px；\n\t*  5.5寸设备设为400px；\n\t*  iphone6设为375px；\n\t*  ipone6 plus设为414px。\n* 属性\n\t* width：宽度（数值 / device-width）（范围从200 到10,000，默认为980 像素）\n\t* height：高度（数值 / device-height）（范围从223 到10,000）\n\t* initial-scale：初始的缩放比例 （范围从>0 到10）\n\t* minimum-scale：允许用户缩放到的最小比例\n\t* maximum-scale：允许用户缩放到的最大比例\n\t* user-scalable：用户是否可以手动缩 (no,yes)\n\t* minimal-ui：可以在页面加载时最小化上下状态栏。（已弃用）\n\t* 如果和initial-scale=1同时使用user-scalable=no或maximum-scale=1，则用户将不能放大/缩小网页来看到全部的内容。\n* 应用\n\t* WebApp全屏\n\t`<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />`\n\t* 隐藏状态栏/设置状态栏颜色\n\t`<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\" />`\n\t* 添加到主屏后的标题\n\t`<meta name=\"apple-mobile-web-app-title\" content=\"标题\">`\n\t* 忽略数字自动识别为电话号码\n\t`<meta name=\"format-detection\" content=\"telephone=no\" />`\n\t* 忽略识别邮箱\n\t`<meta content=\"email=no\" name=\"format-detection\" />`\n\t* 添加智能 App 广告条 Smart App Banne\n\t`<meta name=\"apple-itunes-app\" content=\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\">`\n* 其他\n```javascript\n<!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n<meta name=\"HandheldFriendly\" content=\"true\">\n<!-- 微软的老式浏览器 -->\n<meta name=\"MobileOptimized\" content=\"320\">\n<!-- uc强制竖屏 -->\n<meta name=\"screen-orientation\" content=\"portrait\">\n<!-- QQ强制竖屏 -->\n<meta name=\"x5-orientation\" content=\"portrait\">\n<!-- UC强制全屏 -->\n<meta name=\"full-screen\" content=\"yes\">\n<!-- QQ强制全屏 -->\n<meta name=\"x5-fullscreen\" content=\"true\">\n<!-- UC应用模式 -->\n<meta name=\"browsermode\" content=\"application\">\n<!-- QQ应用模式 -->\n<meta name=\"x5-page-mode\" content=\"app\">\n<!-- windows phone 点击无高光 -->\n<meta name=\"msapplication-tap-highlight\" content=\"no\">\n```\n\n#### 网页应用\n* 编码\n\t`<meta charset='utf-8' />`\n* 浏览器优先选择\n\t```javascript\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\" >\n\t```\n* 内核控制：控制浏览器使用哪种内核渲染\n\t`<meta name=\"renderer\" content=\"webkit\">`\n\t可选值：webkit，ie-comp，ie-stand\n* 禁止本地缓存\n\t`<meta http-equiv=\"Pragma\" content=\"no-cache\">`\n* Windows 8 tile\n* 适配：PC-手机页面的对应\n\t`<meta name=\"mobile-agent\" content=\"format=html5; url=url\">`\n\t[wml|xhtml|html5]根据手机页面的协议语言，选择其中一种；\n\turl=”url” 后者代表当前PC页所对应的手机页URL，两者必须是一一对应关系。\n* 转码申明 （避免转码使用如下）\n\t`<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />`\n","source":"_posts/html页面中meta标签.md","raw":"title: html页面中meta标签\ndate: 2015-11-11 15:03:01\ntags: web\ntoc: true\n---\n#### 介绍\n>meta标签提供的数据不会展示页页面当中，但是对于机器来说，这些内容确是重要的，它会告诉机器怎么展示页面，还可以设置搜索引擎对页面的抓取。\n\n##### 属性\nkey | value | des\n---- | ------ | ----\nhttp-equiv | content-type / expire / refresh / set-cookie |\t把content属性关联到HTTP头部\nname | author / description / keywords / generator / revised / others |\t把 content 属性关联到一个名称\ncontent | text\t| 定义用于 content 属性值的格式\n\n<!--more-->\n\n##### SEO相关\n* name=”keywords” 网页内容关键字\n* name=”description” 网页内容描述\n* name=”robots” 搜索引擎索引方式\n\tnone 搜索引擎将忽略此网页，等价于noindex，nofollow。\n\tnoindex 搜索引擎不索引此网页。\n\tnofollow 搜索引擎不继续通过此网页的链接索引搜索其它的网页。\n\tall 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。\n\tindex 搜索引擎索引此网页。\n\tfollow 搜索引擎继续通过此网页的链接索引搜索其它的网页。\n* http-equiv=”refresh” 页面重定向和刷新,content内的数字代表时间，多少秒后刷新。如果加url,则会重定向到指定网页\n\t`<meta http-equiv=\"refresh\" content=\"0;url=http://www.baidu.com\" />`\n* name=”author” 作者\n* 针对谷歌GOOGLEBOT使用robots\n\t`<meta name=\"googlebot\" content=\"noindex, nofollow\" />`\n* 针对百度baiduspider使用robots\n\t`<meta name=\"baiduspider\" content=\"noarchive\" />`\n\n##### 移动设备\n* viewport 优化移动页面显示\n\t*  4.7-5寸设备的viewport宽设为360px；\n\t*  5.5寸设备设为400px；\n\t*  iphone6设为375px；\n\t*  ipone6 plus设为414px。\n* 属性\n\t* width：宽度（数值 / device-width）（范围从200 到10,000，默认为980 像素）\n\t* height：高度（数值 / device-height）（范围从223 到10,000）\n\t* initial-scale：初始的缩放比例 （范围从>0 到10）\n\t* minimum-scale：允许用户缩放到的最小比例\n\t* maximum-scale：允许用户缩放到的最大比例\n\t* user-scalable：用户是否可以手动缩 (no,yes)\n\t* minimal-ui：可以在页面加载时最小化上下状态栏。（已弃用）\n\t* 如果和initial-scale=1同时使用user-scalable=no或maximum-scale=1，则用户将不能放大/缩小网页来看到全部的内容。\n* 应用\n\t* WebApp全屏\n\t`<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />`\n\t* 隐藏状态栏/设置状态栏颜色\n\t`<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\" />`\n\t* 添加到主屏后的标题\n\t`<meta name=\"apple-mobile-web-app-title\" content=\"标题\">`\n\t* 忽略数字自动识别为电话号码\n\t`<meta name=\"format-detection\" content=\"telephone=no\" />`\n\t* 忽略识别邮箱\n\t`<meta content=\"email=no\" name=\"format-detection\" />`\n\t* 添加智能 App 广告条 Smart App Banne\n\t`<meta name=\"apple-itunes-app\" content=\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\">`\n* 其他\n```javascript\n<!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n<meta name=\"HandheldFriendly\" content=\"true\">\n<!-- 微软的老式浏览器 -->\n<meta name=\"MobileOptimized\" content=\"320\">\n<!-- uc强制竖屏 -->\n<meta name=\"screen-orientation\" content=\"portrait\">\n<!-- QQ强制竖屏 -->\n<meta name=\"x5-orientation\" content=\"portrait\">\n<!-- UC强制全屏 -->\n<meta name=\"full-screen\" content=\"yes\">\n<!-- QQ强制全屏 -->\n<meta name=\"x5-fullscreen\" content=\"true\">\n<!-- UC应用模式 -->\n<meta name=\"browsermode\" content=\"application\">\n<!-- QQ应用模式 -->\n<meta name=\"x5-page-mode\" content=\"app\">\n<!-- windows phone 点击无高光 -->\n<meta name=\"msapplication-tap-highlight\" content=\"no\">\n```\n\n#### 网页应用\n* 编码\n\t`<meta charset='utf-8' />`\n* 浏览器优先选择\n\t```javascript\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\" >\n\t```\n* 内核控制：控制浏览器使用哪种内核渲染\n\t`<meta name=\"renderer\" content=\"webkit\">`\n\t可选值：webkit，ie-comp，ie-stand\n* 禁止本地缓存\n\t`<meta http-equiv=\"Pragma\" content=\"no-cache\">`\n* Windows 8 tile\n* 适配：PC-手机页面的对应\n\t`<meta name=\"mobile-agent\" content=\"format=html5; url=url\">`\n\t[wml|xhtml|html5]根据手机页面的协议语言，选择其中一种；\n\turl=”url” 后者代表当前PC页所对应的手机页URL，两者必须是一一对应关系。\n* 转码申明 （避免转码使用如下）\n\t`<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />`\n","slug":"html页面中meta标签","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhng000pt0yjktkqnnoz","content":"<h4 id=\"介绍\">介绍</h4><blockquote>\n<p>meta标签提供的数据不会展示页页面当中，但是对于机器来说，这些内容确是重要的，它会告诉机器怎么展示页面，还可以设置搜索引擎对页面的抓取。</p>\n</blockquote>\n<h5 id=\"属性\">属性</h5><table>\n<thead>\n<tr>\n<th>key</th>\n<th>value</th>\n<th>des</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>http-equiv</td>\n<td>content-type / expire / refresh / set-cookie</td>\n<td>把content属性关联到HTTP头部</td>\n</tr>\n<tr>\n<td>name</td>\n<td>author / description / keywords / generator / revised / others</td>\n<td>把 content 属性关联到一个名称</td>\n</tr>\n<tr>\n<td>content</td>\n<td>text</td>\n<td>定义用于 content 属性值的格式</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<h5 id=\"SEO相关\">SEO相关</h5><ul>\n<li>name=”keywords” 网页内容关键字</li>\n<li>name=”description” 网页内容描述</li>\n<li>name=”robots” 搜索引擎索引方式<br>  none 搜索引擎将忽略此网页，等价于noindex，nofollow。<br>  noindex 搜索引擎不索引此网页。<br>  nofollow 搜索引擎不继续通过此网页的链接索引搜索其它的网页。<br>  all 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。<br>  index 搜索引擎索引此网页。<br>  follow 搜索引擎继续通过此网页的链接索引搜索其它的网页。</li>\n<li>http-equiv=”refresh” 页面重定向和刷新,content内的数字代表时间，多少秒后刷新。如果加url,则会重定向到指定网页<br>  <code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=http://www.baidu.com&quot; /&gt;</code></li>\n<li>name=”author” 作者</li>\n<li>针对谷歌GOOGLEBOT使用robots<br>  <code>&lt;meta name=&quot;googlebot&quot; content=&quot;noindex, nofollow&quot; /&gt;</code></li>\n<li>针对百度baiduspider使用robots<br>  <code>&lt;meta name=&quot;baiduspider&quot; content=&quot;noarchive&quot; /&gt;</code></li>\n</ul>\n<h5 id=\"移动设备\">移动设备</h5><ul>\n<li>viewport 优化移动页面显示<ul>\n<li>4.7-5寸设备的viewport宽设为360px；</li>\n<li>5.5寸设备设为400px；</li>\n<li>iphone6设为375px；</li>\n<li>ipone6 plus设为414px。</li>\n</ul>\n</li>\n<li>属性<ul>\n<li>width：宽度（数值 / device-width）（范围从200 到10,000，默认为980 像素）</li>\n<li>height：高度（数值 / device-height）（范围从223 到10,000）</li>\n<li>initial-scale：初始的缩放比例 （范围从&gt;0 到10）</li>\n<li>minimum-scale：允许用户缩放到的最小比例</li>\n<li>maximum-scale：允许用户缩放到的最大比例</li>\n<li>user-scalable：用户是否可以手动缩 (no,yes)</li>\n<li>minimal-ui：可以在页面加载时最小化上下状态栏。（已弃用）</li>\n<li>如果和initial-scale=1同时使用user-scalable=no或maximum-scale=1，则用户将不能放大/缩小网页来看到全部的内容。</li>\n</ul>\n</li>\n<li>应用<ul>\n<li>WebApp全屏<br><code>&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;</code></li>\n<li>隐藏状态栏/设置状态栏颜色<br><code>&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black-translucent&quot; /&gt;</code></li>\n<li>添加到主屏后的标题<br><code>&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题&quot;&gt;</code></li>\n<li>忽略数字自动识别为电话号码<br><code>&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot; /&gt;</code></li>\n<li>忽略识别邮箱<br><code>&lt;meta content=&quot;email=no&quot; name=&quot;format-detection&quot; /&gt;</code></li>\n<li>添加智能 App 广告条 Smart App Banne<br><code>&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt;</code></li>\n</ul>\n</li>\n<li>其他<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</div><div class=\"line\">&lt;meta name=\"HandheldFriendly\" content=\"true\"&gt;</div><div class=\"line\">&lt;!-- 微软的老式浏览器 --&gt;</div><div class=\"line\">&lt;meta name=\"MobileOptimized\" content=\"320\"&gt;</div><div class=\"line\">&lt;!-- uc强制竖屏 --&gt;</div><div class=\"line\">&lt;meta name=\"screen-orientation\" content=\"portrait\"&gt;</div><div class=\"line\">&lt;!-- QQ强制竖屏 --&gt;</div><div class=\"line\">&lt;meta name=\"x5-orientation\" content=\"portrait\"&gt;</div><div class=\"line\">&lt;!-- UC强制全屏 --&gt;</div><div class=\"line\">&lt;meta name=\"full-screen\" content=\"yes\"&gt;</div><div class=\"line\">&lt;!-- QQ强制全屏 --&gt;</div><div class=\"line\">&lt;meta name=\"x5-fullscreen\" content=\"true\"&gt;</div><div class=\"line\">&lt;!-- UC应用模式 --&gt;</div><div class=\"line\">&lt;meta name=\"browsermode\" content=\"application\"&gt;</div><div class=\"line\">&lt;!-- QQ应用模式 --&gt;</div><div class=\"line\">&lt;meta name=\"x5-page-mode\" content=\"app\"&gt;</div><div class=\"line\">&lt;!-- windows phone 点击无高光 --&gt;</div><div class=\"line\">&lt;meta name=\"msapplication-tap-highlight\" content=\"no\"&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"网页应用\">网页应用</h4><ul>\n<li>编码<br>  <code>&lt;meta charset=&#39;utf-8&#39; /&gt;</code></li>\n<li><p>浏览器优先选择</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta http-equiv=<span class=\"string\">\"X-UA-Compatible\"</span> content=<span class=\"string\">\"IE=edge,chrome=1\"</span> /&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=8\"</span> &gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>内核控制：控制浏览器使用哪种内核渲染<br>  <code>&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</code><br>  可选值：webkit，ie-comp，ie-stand</p>\n</li>\n<li>禁止本地缓存<br>  <code>&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot;&gt;</code></li>\n<li>Windows 8 tile</li>\n<li>适配：PC-手机页面的对应<br>  <code>&lt;meta name=&quot;mobile-agent&quot; content=&quot;format=html5; url=url&quot;&gt;</code><br>  [wml|xhtml|html5]根据手机页面的协议语言，选择其中一种；<br>  url=”url” 后者代表当前PC页所对应的手机页URL，两者必须是一一对应关系。</li>\n<li>转码申明 （避免转码使用如下）<br>  <code>&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-siteapp&quot; /&gt;</code></li>\n</ul>\n","excerpt":"<h4 id=\"介绍\">介绍</h4><blockquote>\n<p>meta标签提供的数据不会展示页页面当中，但是对于机器来说，这些内容确是重要的，它会告诉机器怎么展示页面，还可以设置搜索引擎对页面的抓取。</p>\n</blockquote>\n<h5 id=\"属性\">属性</h5><table>\n<thead>\n<tr>\n<th>key</th>\n<th>value</th>\n<th>des</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>http-equiv</td>\n<td>content-type / expire / refresh / set-cookie</td>\n<td>把content属性关联到HTTP头部</td>\n</tr>\n<tr>\n<td>name</td>\n<td>author / description / keywords / generator / revised / others</td>\n<td>把 content 属性关联到一个名称</td>\n</tr>\n<tr>\n<td>content</td>\n<td>text</td>\n<td>定义用于 content 属性值的格式</td>\n</tr>\n</tbody>\n</table>","more":"<h5 id=\"SEO相关\">SEO相关</h5><ul>\n<li>name=”keywords” 网页内容关键字</li>\n<li>name=”description” 网页内容描述</li>\n<li>name=”robots” 搜索引擎索引方式<br>  none 搜索引擎将忽略此网页，等价于noindex，nofollow。<br>  noindex 搜索引擎不索引此网页。<br>  nofollow 搜索引擎不继续通过此网页的链接索引搜索其它的网页。<br>  all 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。<br>  index 搜索引擎索引此网页。<br>  follow 搜索引擎继续通过此网页的链接索引搜索其它的网页。</li>\n<li>http-equiv=”refresh” 页面重定向和刷新,content内的数字代表时间，多少秒后刷新。如果加url,则会重定向到指定网页<br>  <code>&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0;url=http://www.baidu.com&quot; /&gt;</code></li>\n<li>name=”author” 作者</li>\n<li>针对谷歌GOOGLEBOT使用robots<br>  <code>&lt;meta name=&quot;googlebot&quot; content=&quot;noindex, nofollow&quot; /&gt;</code></li>\n<li>针对百度baiduspider使用robots<br>  <code>&lt;meta name=&quot;baiduspider&quot; content=&quot;noarchive&quot; /&gt;</code></li>\n</ul>\n<h5 id=\"移动设备\">移动设备</h5><ul>\n<li>viewport 优化移动页面显示<ul>\n<li>4.7-5寸设备的viewport宽设为360px；</li>\n<li>5.5寸设备设为400px；</li>\n<li>iphone6设为375px；</li>\n<li>ipone6 plus设为414px。</li>\n</ul>\n</li>\n<li>属性<ul>\n<li>width：宽度（数值 / device-width）（范围从200 到10,000，默认为980 像素）</li>\n<li>height：高度（数值 / device-height）（范围从223 到10,000）</li>\n<li>initial-scale：初始的缩放比例 （范围从&gt;0 到10）</li>\n<li>minimum-scale：允许用户缩放到的最小比例</li>\n<li>maximum-scale：允许用户缩放到的最大比例</li>\n<li>user-scalable：用户是否可以手动缩 (no,yes)</li>\n<li>minimal-ui：可以在页面加载时最小化上下状态栏。（已弃用）</li>\n<li>如果和initial-scale=1同时使用user-scalable=no或maximum-scale=1，则用户将不能放大/缩小网页来看到全部的内容。</li>\n</ul>\n</li>\n<li>应用<ul>\n<li>WebApp全屏<br><code>&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;</code></li>\n<li>隐藏状态栏/设置状态栏颜色<br><code>&lt;meta name=&quot;apple-mobile-web-app-status-bar-style&quot; content=&quot;black-translucent&quot; /&gt;</code></li>\n<li>添加到主屏后的标题<br><code>&lt;meta name=&quot;apple-mobile-web-app-title&quot; content=&quot;标题&quot;&gt;</code></li>\n<li>忽略数字自动识别为电话号码<br><code>&lt;meta name=&quot;format-detection&quot; content=&quot;telephone=no&quot; /&gt;</code></li>\n<li>忽略识别邮箱<br><code>&lt;meta content=&quot;email=no&quot; name=&quot;format-detection&quot; /&gt;</code></li>\n<li>添加智能 App 广告条 Smart App Banne<br><code>&lt;meta name=&quot;apple-itunes-app&quot; content=&quot;app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL&quot;&gt;</code></li>\n</ul>\n</li>\n<li>其他<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt;</div><div class=\"line\">&lt;meta name=\"HandheldFriendly\" content=\"true\"&gt;</div><div class=\"line\">&lt;!-- 微软的老式浏览器 --&gt;</div><div class=\"line\">&lt;meta name=\"MobileOptimized\" content=\"320\"&gt;</div><div class=\"line\">&lt;!-- uc强制竖屏 --&gt;</div><div class=\"line\">&lt;meta name=\"screen-orientation\" content=\"portrait\"&gt;</div><div class=\"line\">&lt;!-- QQ强制竖屏 --&gt;</div><div class=\"line\">&lt;meta name=\"x5-orientation\" content=\"portrait\"&gt;</div><div class=\"line\">&lt;!-- UC强制全屏 --&gt;</div><div class=\"line\">&lt;meta name=\"full-screen\" content=\"yes\"&gt;</div><div class=\"line\">&lt;!-- QQ强制全屏 --&gt;</div><div class=\"line\">&lt;meta name=\"x5-fullscreen\" content=\"true\"&gt;</div><div class=\"line\">&lt;!-- UC应用模式 --&gt;</div><div class=\"line\">&lt;meta name=\"browsermode\" content=\"application\"&gt;</div><div class=\"line\">&lt;!-- QQ应用模式 --&gt;</div><div class=\"line\">&lt;meta name=\"x5-page-mode\" content=\"app\"&gt;</div><div class=\"line\">&lt;!-- windows phone 点击无高光 --&gt;</div><div class=\"line\">&lt;meta name=\"msapplication-tap-highlight\" content=\"no\"&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"网页应用\">网页应用</h4><ul>\n<li>编码<br>  <code>&lt;meta charset=&#39;utf-8&#39; /&gt;</code></li>\n<li><p>浏览器优先选择</p>\n  <figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;meta http-equiv=<span class=\"string\">\"X-UA-Compatible\"</span> content=<span class=\"string\">\"IE=edge,chrome=1\"</span> /&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"IE=8\"</span> &gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>内核控制：控制浏览器使用哪种内核渲染<br>  <code>&lt;meta name=&quot;renderer&quot; content=&quot;webkit&quot;&gt;</code><br>  可选值：webkit，ie-comp，ie-stand</p>\n</li>\n<li>禁止本地缓存<br>  <code>&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot;&gt;</code></li>\n<li>Windows 8 tile</li>\n<li>适配：PC-手机页面的对应<br>  <code>&lt;meta name=&quot;mobile-agent&quot; content=&quot;format=html5; url=url&quot;&gt;</code><br>  [wml|xhtml|html5]根据手机页面的协议语言，选择其中一种；<br>  url=”url” 后者代表当前PC页所对应的手机页URL，两者必须是一一对应关系。</li>\n<li>转码申明 （避免转码使用如下）<br>  <code>&lt;meta http-equiv=&quot;Cache-Control&quot; content=&quot;no-siteapp&quot; /&gt;</code></li>\n</ul>"},{"title":"javascript中判断变量类型","date":"2015-10-22T07:03:01.000Z","toc":true,"_content":"##### 数据类型\n>* 原始类型\n\t数字\n\t字符串\n\t布尔值\n* 对象类型\n* 特殊原始值\n\tnull\n\tundefined\n\t把它们归纳成5种基本类型和1种复杂数据类型\n* 基本类型\n\tUndefined\n\tNull\n\tBoolean\n\tNumber\n\tString\n* 复杂数据类型\n\tObject(Array,Function,Date,RegExp等)\n<!--more-->\n\n##### 检测数据类型\n* typeof\n>我们来写个例子，看看typeOf检测变量类型，每种类型都返回什么结果\n```javascript\nvar number = 1,\n    string = 'asd',\n    boolean = true,\n    array = [1,2,3],\n    json = {\"a\":1};\n    func = function foo(){console.log('function');},\n    isundefined = undefined,\n    isnull = null,\n    date = new Date(),\n    reg = new RegExp('.*'),\n    error = new Error();\nconsole.log(typeof number,typeof string,typeof boolean,typeof array,typeof json,typeof func,typeof isundefined,typeof isnull,typeof date,typeof reg,typeof error);\n\n//返回结果\n//number string boolean object object function undefined object object object object\n//number string boolean function undefined都可以判断，但是其他对象类型都返回的object，这样我们就不能清晰的判断部分类型是什么\n//接着往下看\n```\n* instanceof\n>instanceof方法要求我们明确变量的类型，结果返回true false\n```javascript\nvar number = 1,\nstring = 'asd',\nboolean = true,\narray = [1,2,3],\njson = {\"a\":1};\nfunc = function foo(){console.log('function');},\nisundefined = undefined,\nisnull = null,\ndate = new Date(),\nreg = new RegExp('.*'),\nerror = new Error();\nconsole.log(number instanceof Number,string instanceof String,boolean instanceof Boolean,array instanceof Array,json instanceof Object,func instanceof Function,isundefined instanceof Object,isnull instanceof Object,date instanceof Date,reg instanceof RegExp,error instanceof Error);\n\n//返回结果\n//false false false true true true false false true true true\n//number string boolean使用字面量的方式没有检测出类型\n//如果我们使用对象的方式创建时可以的 new Number(1); new String('asd'); new Boolean(true);这样\n//还有一点就是null undefined类型也是Object\n//接着往下看\n```\n* constructor\n>constructor是对象原型上的属性，指向构造函数\n```javascript\nvar number = 1,\nstring = 'asd',\nboolean = true,\narray = [1,2,3],\njson = {\"a\":1};\nfunc = function foo(){console.log('function');},\nisundefined = undefined,\nisnull = null,\ndate = new Date(),\nreg = new RegExp('.*'),\nerror = new Error();\nconsole.log(number.constructor === Number,string.constructor === String,boolean.constructor === Boolean,array.constructor === Array,json.constructor === Object,func.constructor === Function,date.constructor ===  Date,reg.constructor === RegExp,error.constructor === Error);\n//输出结果\n//true true true true true true true true true\n不能判断undefined null\n```\n* Object.prototype.toString.call\n>输出字符串，字符串里有一个数组，第一个参数是Object，第二个参数是变量的类型\n```javascript\nvar number = 1,\nstring = 'asd',\nboolean = true,\narray = [1,2,3],\njson = {\"a\":1};\nfunc = function foo(){console.log('function');},\nisundefined = undefined,\nisnull = null,\ndate = new Date(),\nreg = new RegExp('.*'),\nerror = new Error();\nconsole.log(Object.prototype.toString.call(number),Object.prototype.toString.call( string),Object.prototype.toString.call( boolean),Object.prototype.toString.call( array),Object.prototype.toString.call( json),Object.prototype.toString.call( func),Object.prototype.toString.call( isundefined),Object.prototype.toString.call( isnull),Object.prototype.toString.call( date),Object.prototype.toString.call( reg),Object.prototype.toString.call( error));\n//输出结果\n//[object Number] [object String] [object Boolean] [object Array] [object Object] [object Function] [object Undefined] [object Null] [object Date] [object RegExp] [object Error]\n```\n* jquery中`$.type`\n>jquery封装的判断类型的方法，依赖jquery\n```javascript\nvar number = 1,\nstring = 'asd',\nboolean = true,\narray = [1,2,3],\njson = {\"a\":1};\nfunc = function foo(){console.log('function');},\nisundefined = undefined,\nisnull = null,\ndate = new Date(),\nreg = new RegExp('.*'),\nerror = new Error();\nconsole.log($.type(number),$.type( string),$.type( boolean),$.type( array),$.type( json),$.type( func),$.type( isundefined),$.type( isnull),$.type( date),$.type( reg),$.type( error));\n//输出结果\n//number string boolean array object function undefined null date regexp error\n```\n\n##### 总结\n1.Object.prototype.toString.call和$.type判断的比较精准，返回结果比较像\n2.object和function不能用typeof判断，其他类型可以\n\n","source":"_posts/javascript中判断变量类型.md","raw":"title: javascript中判断变量类型\ndate: 2015-10-22 15:03:01\ntags: javascript\ntoc: true\n---\n##### 数据类型\n>* 原始类型\n\t数字\n\t字符串\n\t布尔值\n* 对象类型\n* 特殊原始值\n\tnull\n\tundefined\n\t把它们归纳成5种基本类型和1种复杂数据类型\n* 基本类型\n\tUndefined\n\tNull\n\tBoolean\n\tNumber\n\tString\n* 复杂数据类型\n\tObject(Array,Function,Date,RegExp等)\n<!--more-->\n\n##### 检测数据类型\n* typeof\n>我们来写个例子，看看typeOf检测变量类型，每种类型都返回什么结果\n```javascript\nvar number = 1,\n    string = 'asd',\n    boolean = true,\n    array = [1,2,3],\n    json = {\"a\":1};\n    func = function foo(){console.log('function');},\n    isundefined = undefined,\n    isnull = null,\n    date = new Date(),\n    reg = new RegExp('.*'),\n    error = new Error();\nconsole.log(typeof number,typeof string,typeof boolean,typeof array,typeof json,typeof func,typeof isundefined,typeof isnull,typeof date,typeof reg,typeof error);\n\n//返回结果\n//number string boolean object object function undefined object object object object\n//number string boolean function undefined都可以判断，但是其他对象类型都返回的object，这样我们就不能清晰的判断部分类型是什么\n//接着往下看\n```\n* instanceof\n>instanceof方法要求我们明确变量的类型，结果返回true false\n```javascript\nvar number = 1,\nstring = 'asd',\nboolean = true,\narray = [1,2,3],\njson = {\"a\":1};\nfunc = function foo(){console.log('function');},\nisundefined = undefined,\nisnull = null,\ndate = new Date(),\nreg = new RegExp('.*'),\nerror = new Error();\nconsole.log(number instanceof Number,string instanceof String,boolean instanceof Boolean,array instanceof Array,json instanceof Object,func instanceof Function,isundefined instanceof Object,isnull instanceof Object,date instanceof Date,reg instanceof RegExp,error instanceof Error);\n\n//返回结果\n//false false false true true true false false true true true\n//number string boolean使用字面量的方式没有检测出类型\n//如果我们使用对象的方式创建时可以的 new Number(1); new String('asd'); new Boolean(true);这样\n//还有一点就是null undefined类型也是Object\n//接着往下看\n```\n* constructor\n>constructor是对象原型上的属性，指向构造函数\n```javascript\nvar number = 1,\nstring = 'asd',\nboolean = true,\narray = [1,2,3],\njson = {\"a\":1};\nfunc = function foo(){console.log('function');},\nisundefined = undefined,\nisnull = null,\ndate = new Date(),\nreg = new RegExp('.*'),\nerror = new Error();\nconsole.log(number.constructor === Number,string.constructor === String,boolean.constructor === Boolean,array.constructor === Array,json.constructor === Object,func.constructor === Function,date.constructor ===  Date,reg.constructor === RegExp,error.constructor === Error);\n//输出结果\n//true true true true true true true true true\n不能判断undefined null\n```\n* Object.prototype.toString.call\n>输出字符串，字符串里有一个数组，第一个参数是Object，第二个参数是变量的类型\n```javascript\nvar number = 1,\nstring = 'asd',\nboolean = true,\narray = [1,2,3],\njson = {\"a\":1};\nfunc = function foo(){console.log('function');},\nisundefined = undefined,\nisnull = null,\ndate = new Date(),\nreg = new RegExp('.*'),\nerror = new Error();\nconsole.log(Object.prototype.toString.call(number),Object.prototype.toString.call( string),Object.prototype.toString.call( boolean),Object.prototype.toString.call( array),Object.prototype.toString.call( json),Object.prototype.toString.call( func),Object.prototype.toString.call( isundefined),Object.prototype.toString.call( isnull),Object.prototype.toString.call( date),Object.prototype.toString.call( reg),Object.prototype.toString.call( error));\n//输出结果\n//[object Number] [object String] [object Boolean] [object Array] [object Object] [object Function] [object Undefined] [object Null] [object Date] [object RegExp] [object Error]\n```\n* jquery中`$.type`\n>jquery封装的判断类型的方法，依赖jquery\n```javascript\nvar number = 1,\nstring = 'asd',\nboolean = true,\narray = [1,2,3],\njson = {\"a\":1};\nfunc = function foo(){console.log('function');},\nisundefined = undefined,\nisnull = null,\ndate = new Date(),\nreg = new RegExp('.*'),\nerror = new Error();\nconsole.log($.type(number),$.type( string),$.type( boolean),$.type( array),$.type( json),$.type( func),$.type( isundefined),$.type( isnull),$.type( date),$.type( reg),$.type( error));\n//输出结果\n//number string boolean array object function undefined null date regexp error\n```\n\n##### 总结\n1.Object.prototype.toString.call和$.type判断的比较精准，返回结果比较像\n2.object和function不能用typeof判断，其他类型可以\n\n","slug":"javascript中判断变量类型","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhnj000st0yj3obw4o8f","content":"<h5 id=\"数据类型\">数据类型</h5><blockquote>\n<ul>\n<li>原始类型<br>  数字<br>  字符串<br>  布尔值</li>\n<li>对象类型</li>\n<li>特殊原始值<br>  null<br>  undefined<br>  把它们归纳成5种基本类型和1种复杂数据类型</li>\n<li>基本类型<br>  Undefined<br>  Null<br>  Boolean<br>  Number<br>  String</li>\n<li>复杂数据类型<br>  Object(Array,Function,Date,RegExp等)<a id=\"more\"></a>\n</li>\n</ul>\n</blockquote>\n<h5 id=\"检测数据类型\">检测数据类型</h5><ul>\n<li><p>typeof</p>\n<blockquote>\n<p>我们来写个例子，看看typeOf检测变量类型，每种类型都返回什么结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">1</span>,</div><div class=\"line\">    string = <span class=\"string\">'asd'</span>,</div><div class=\"line\">    boolean = <span class=\"literal\">true</span>,</div><div class=\"line\">    array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</div><div class=\"line\">    json = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\">    func = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'function'</span>);&#125;,</div><div class=\"line\">    isundefined = <span class=\"literal\">undefined</span>,</div><div class=\"line\">    isnull = <span class=\"literal\">null</span>,</div><div class=\"line\">    date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">    reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.*'</span>),</div><div class=\"line\">    error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> number,<span class=\"keyword\">typeof</span> string,<span class=\"keyword\">typeof</span> boolean,<span class=\"keyword\">typeof</span> array,<span class=\"keyword\">typeof</span> json,<span class=\"keyword\">typeof</span> func,<span class=\"keyword\">typeof</span> isundefined,<span class=\"keyword\">typeof</span> isnull,<span class=\"keyword\">typeof</span> date,<span class=\"keyword\">typeof</span> reg,<span class=\"keyword\">typeof</span> error);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//返回结果</span></div><div class=\"line\"><span class=\"comment\">//number string boolean object object function undefined object object object object</span></div><div class=\"line\"><span class=\"comment\">//number string boolean function undefined都可以判断，但是其他对象类型都返回的object，这样我们就不能清晰的判断部分类型是什么</span></div><div class=\"line\"><span class=\"comment\">//接着往下看</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>instanceof</p>\n<blockquote>\n<p>instanceof方法要求我们明确变量的类型，结果返回true false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">1</span>,</div><div class=\"line\">string = <span class=\"string\">'asd'</span>,</div><div class=\"line\">boolean = <span class=\"literal\">true</span>,</div><div class=\"line\">array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</div><div class=\"line\">json = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\">func = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'function'</span>);&#125;,</div><div class=\"line\">isundefined = <span class=\"literal\">undefined</span>,</div><div class=\"line\">isnull = <span class=\"literal\">null</span>,</div><div class=\"line\">date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.*'</span>),</div><div class=\"line\">error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(number <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Number</span>,string <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>,boolean <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Boolean</span>,array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>,json <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>,func <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>,isundefined <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>,isnull <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>,date <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>,reg <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>,error <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Error</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//返回结果</span></div><div class=\"line\"><span class=\"comment\">//false false false true true true false false true true true</span></div><div class=\"line\"><span class=\"comment\">//number string boolean使用字面量的方式没有检测出类型</span></div><div class=\"line\"><span class=\"comment\">//如果我们使用对象的方式创建时可以的 new Number(1); new String('asd'); new Boolean(true);这样</span></div><div class=\"line\"><span class=\"comment\">//还有一点就是null undefined类型也是Object</span></div><div class=\"line\"><span class=\"comment\">//接着往下看</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>constructor</p>\n<blockquote>\n<p>constructor是对象原型上的属性，指向构造函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">1</span>,</div><div class=\"line\">string = <span class=\"string\">'asd'</span>,</div><div class=\"line\">boolean = <span class=\"literal\">true</span>,</div><div class=\"line\">array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</div><div class=\"line\">json = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\">func = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'function'</span>);&#125;,</div><div class=\"line\">isundefined = <span class=\"literal\">undefined</span>,</div><div class=\"line\">isnull = <span class=\"literal\">null</span>,</div><div class=\"line\">date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.*'</span>),</div><div class=\"line\">error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(number.constructor === <span class=\"built_in\">Number</span>,string.constructor === <span class=\"built_in\">String</span>,boolean.constructor === <span class=\"built_in\">Boolean</span>,array.constructor === <span class=\"built_in\">Array</span>,json.constructor === <span class=\"built_in\">Object</span>,func.constructor === <span class=\"built_in\">Function</span>,date.constructor ===  <span class=\"built_in\">Date</span>,reg.constructor === <span class=\"built_in\">RegExp</span>,error.constructor === <span class=\"built_in\">Error</span>);</div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\"><span class=\"comment\">//true true true true true true true true true</span></div><div class=\"line\">不能判断<span class=\"literal\">undefined</span> <span class=\"literal\">null</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>Object.prototype.toString.call</p>\n<blockquote>\n<p>输出字符串，字符串里有一个数组，第一个参数是Object，第二个参数是变量的类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">1</span>,</div><div class=\"line\">string = <span class=\"string\">'asd'</span>,</div><div class=\"line\">boolean = <span class=\"literal\">true</span>,</div><div class=\"line\">array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</div><div class=\"line\">json = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\">func = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'function'</span>);&#125;,</div><div class=\"line\">isundefined = <span class=\"literal\">undefined</span>,</div><div class=\"line\">isnull = <span class=\"literal\">null</span>,</div><div class=\"line\">date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.*'</span>),</div><div class=\"line\">error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(number),<span class=\"built_in\">Object</span>.prototype.toString.call( string),<span class=\"built_in\">Object</span>.prototype.toString.call( boolean),<span class=\"built_in\">Object</span>.prototype.toString.call( array),<span class=\"built_in\">Object</span>.prototype.toString.call( json),<span class=\"built_in\">Object</span>.prototype.toString.call( func),<span class=\"built_in\">Object</span>.prototype.toString.call( isundefined),<span class=\"built_in\">Object</span>.prototype.toString.call( isnull),<span class=\"built_in\">Object</span>.prototype.toString.call( date),<span class=\"built_in\">Object</span>.prototype.toString.call( reg),<span class=\"built_in\">Object</span>.prototype.toString.call( error));</div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\"><span class=\"comment\">//[object Number] [object String] [object Boolean] [object Array] [object Object] [object Function] [object Undefined] [object Null] [object Date] [object RegExp] [object Error]</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>jquery中<code>$.type</code></p>\n<blockquote>\n<p>jquery封装的判断类型的方法，依赖jquery</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">1</span>,</div><div class=\"line\">string = <span class=\"string\">'asd'</span>,</div><div class=\"line\">boolean = <span class=\"literal\">true</span>,</div><div class=\"line\">array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</div><div class=\"line\">json = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\">func = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'function'</span>);&#125;,</div><div class=\"line\">isundefined = <span class=\"literal\">undefined</span>,</div><div class=\"line\">isnull = <span class=\"literal\">null</span>,</div><div class=\"line\">date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.*'</span>),</div><div class=\"line\">error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</div><div class=\"line\"><span class=\"built_in\">console</span>.log($.type(number),$.type( string),$.type( boolean),$.type( array),$.type( json),$.type( func),$.type( isundefined),$.type( isnull),$.type( date),$.type( reg),$.type( error));</div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\"><span class=\"comment\">//number string boolean array object function undefined null date regexp error</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"总结\">总结</h5><p>1.Object.prototype.toString.call和$.type判断的比较精准，返回结果比较像<br>2.object和function不能用typeof判断，其他类型可以</p>\n","excerpt":"<h5 id=\"数据类型\">数据类型</h5><blockquote>\n<ul>\n<li>原始类型<br>  数字<br>  字符串<br>  布尔值</li>\n<li>对象类型</li>\n<li>特殊原始值<br>  null<br>  undefined<br>  把它们归纳成5种基本类型和1种复杂数据类型</li>\n<li>基本类型<br>  Undefined<br>  Null<br>  Boolean<br>  Number<br>  String</li>\n<li>复杂数据类型<br>  Object(Array,Function,Date,RegExp等)","more":"</li>\n</ul>\n</blockquote>\n<h5 id=\"检测数据类型\">检测数据类型</h5><ul>\n<li><p>typeof</p>\n<blockquote>\n<p>我们来写个例子，看看typeOf检测变量类型，每种类型都返回什么结果</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">1</span>,</div><div class=\"line\">    string = <span class=\"string\">'asd'</span>,</div><div class=\"line\">    boolean = <span class=\"literal\">true</span>,</div><div class=\"line\">    array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</div><div class=\"line\">    json = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\">    func = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'function'</span>);&#125;,</div><div class=\"line\">    isundefined = <span class=\"literal\">undefined</span>,</div><div class=\"line\">    isnull = <span class=\"literal\">null</span>,</div><div class=\"line\">    date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">    reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.*'</span>),</div><div class=\"line\">    error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> number,<span class=\"keyword\">typeof</span> string,<span class=\"keyword\">typeof</span> boolean,<span class=\"keyword\">typeof</span> array,<span class=\"keyword\">typeof</span> json,<span class=\"keyword\">typeof</span> func,<span class=\"keyword\">typeof</span> isundefined,<span class=\"keyword\">typeof</span> isnull,<span class=\"keyword\">typeof</span> date,<span class=\"keyword\">typeof</span> reg,<span class=\"keyword\">typeof</span> error);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//返回结果</span></div><div class=\"line\"><span class=\"comment\">//number string boolean object object function undefined object object object object</span></div><div class=\"line\"><span class=\"comment\">//number string boolean function undefined都可以判断，但是其他对象类型都返回的object，这样我们就不能清晰的判断部分类型是什么</span></div><div class=\"line\"><span class=\"comment\">//接着往下看</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>instanceof</p>\n<blockquote>\n<p>instanceof方法要求我们明确变量的类型，结果返回true false</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">1</span>,</div><div class=\"line\">string = <span class=\"string\">'asd'</span>,</div><div class=\"line\">boolean = <span class=\"literal\">true</span>,</div><div class=\"line\">array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</div><div class=\"line\">json = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\">func = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'function'</span>);&#125;,</div><div class=\"line\">isundefined = <span class=\"literal\">undefined</span>,</div><div class=\"line\">isnull = <span class=\"literal\">null</span>,</div><div class=\"line\">date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.*'</span>),</div><div class=\"line\">error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(number <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Number</span>,string <span class=\"keyword\">instanceof</span> <span class=\"built_in\">String</span>,boolean <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Boolean</span>,array <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>,json <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>,func <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Function</span>,isundefined <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>,isnull <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>,date <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>,reg <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>,error <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Error</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//返回结果</span></div><div class=\"line\"><span class=\"comment\">//false false false true true true false false true true true</span></div><div class=\"line\"><span class=\"comment\">//number string boolean使用字面量的方式没有检测出类型</span></div><div class=\"line\"><span class=\"comment\">//如果我们使用对象的方式创建时可以的 new Number(1); new String('asd'); new Boolean(true);这样</span></div><div class=\"line\"><span class=\"comment\">//还有一点就是null undefined类型也是Object</span></div><div class=\"line\"><span class=\"comment\">//接着往下看</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>constructor</p>\n<blockquote>\n<p>constructor是对象原型上的属性，指向构造函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">1</span>,</div><div class=\"line\">string = <span class=\"string\">'asd'</span>,</div><div class=\"line\">boolean = <span class=\"literal\">true</span>,</div><div class=\"line\">array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</div><div class=\"line\">json = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\">func = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'function'</span>);&#125;,</div><div class=\"line\">isundefined = <span class=\"literal\">undefined</span>,</div><div class=\"line\">isnull = <span class=\"literal\">null</span>,</div><div class=\"line\">date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.*'</span>),</div><div class=\"line\">error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(number.constructor === <span class=\"built_in\">Number</span>,string.constructor === <span class=\"built_in\">String</span>,boolean.constructor === <span class=\"built_in\">Boolean</span>,array.constructor === <span class=\"built_in\">Array</span>,json.constructor === <span class=\"built_in\">Object</span>,func.constructor === <span class=\"built_in\">Function</span>,date.constructor ===  <span class=\"built_in\">Date</span>,reg.constructor === <span class=\"built_in\">RegExp</span>,error.constructor === <span class=\"built_in\">Error</span>);</div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\"><span class=\"comment\">//true true true true true true true true true</span></div><div class=\"line\">不能判断<span class=\"literal\">undefined</span> <span class=\"literal\">null</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>Object.prototype.toString.call</p>\n<blockquote>\n<p>输出字符串，字符串里有一个数组，第一个参数是Object，第二个参数是变量的类型</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">1</span>,</div><div class=\"line\">string = <span class=\"string\">'asd'</span>,</div><div class=\"line\">boolean = <span class=\"literal\">true</span>,</div><div class=\"line\">array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</div><div class=\"line\">json = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\">func = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'function'</span>);&#125;,</div><div class=\"line\">isundefined = <span class=\"literal\">undefined</span>,</div><div class=\"line\">isnull = <span class=\"literal\">null</span>,</div><div class=\"line\">date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.*'</span>),</div><div class=\"line\">error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype.toString.call(number),<span class=\"built_in\">Object</span>.prototype.toString.call( string),<span class=\"built_in\">Object</span>.prototype.toString.call( boolean),<span class=\"built_in\">Object</span>.prototype.toString.call( array),<span class=\"built_in\">Object</span>.prototype.toString.call( json),<span class=\"built_in\">Object</span>.prototype.toString.call( func),<span class=\"built_in\">Object</span>.prototype.toString.call( isundefined),<span class=\"built_in\">Object</span>.prototype.toString.call( isnull),<span class=\"built_in\">Object</span>.prototype.toString.call( date),<span class=\"built_in\">Object</span>.prototype.toString.call( reg),<span class=\"built_in\">Object</span>.prototype.toString.call( error));</div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\"><span class=\"comment\">//[object Number] [object String] [object Boolean] [object Array] [object Object] [object Function] [object Undefined] [object Null] [object Date] [object RegExp] [object Error]</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>jquery中<code>$.type</code></p>\n<blockquote>\n<p>jquery封装的判断类型的方法，依赖jquery</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> number = <span class=\"number\">1</span>,</div><div class=\"line\">string = <span class=\"string\">'asd'</span>,</div><div class=\"line\">boolean = <span class=\"literal\">true</span>,</div><div class=\"line\">array = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>],</div><div class=\"line\">json = &#123;<span class=\"string\">\"a\"</span>:<span class=\"number\">1</span>&#125;;</div><div class=\"line\">func = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;<span class=\"built_in\">console</span>.log(<span class=\"string\">'function'</span>);&#125;,</div><div class=\"line\">isundefined = <span class=\"literal\">undefined</span>,</div><div class=\"line\">isnull = <span class=\"literal\">null</span>,</div><div class=\"line\">date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</div><div class=\"line\">reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">'.*'</span>),</div><div class=\"line\">error = <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>();</div><div class=\"line\"><span class=\"built_in\">console</span>.log($.type(number),$.type( string),$.type( boolean),$.type( array),$.type( json),$.type( func),$.type( isundefined),$.type( isnull),$.type( date),$.type( reg),$.type( error));</div><div class=\"line\"><span class=\"comment\">//输出结果</span></div><div class=\"line\"><span class=\"comment\">//number string boolean array object function undefined null date regexp error</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"总结\">总结</h5><p>1.Object.prototype.toString.call和$.type判断的比较精准，返回结果比较像<br>2.object和function不能用typeof判断，其他类型可以</p>"},{"title":"javascript中变量作用域","date":"2015-10-21T07:03:01.000Z","toc":true,"_content":"##### 变量做用域\n<!--more-->\n```javascript\n// *******\n//--理解变量做用域\nvar x = 1;\n\nfunction foo() {\n    console.log(1);\n}\nfoo();\nconsole.log(x);\n//结果\n//1\n//1\n//正常输出全局变量x\n//--\n\nvar x = 1;\n\nfunction foo() {\n    var x = 2;\n    console.log(x);\n}\nfoo();\nconsole.log(x);\n//2\n//1\n//foo中输出的是局部变量的值\n//外面输出的是全局变量的x\n//--\n\nx = 1;\n\nfunction foo() {\n    x = 2;\n    console.log(x);\n    y = 3;\n    console.log(y);\n}\nfoo();\nconsole.log(x);\nconsole.log(y);\n//2\n//3\n//2\n//3\n//foo内重新赋值了全局变量x,并且定义全局变量y\n//--\n\nvar x = 1;\n\nfunction foo() {\n    console.log(x);\n    var x = 2;\n}\nfoo();\nconsole.log(x);\n//结果\n//undefined\n//1\n//变量声明 函数声明，都有一个提升的过程\n// var x = 1分解\n// var x; 会提升到作用域最顶部\n// x = 1;\n//上面的定义相当于\nvar x = 1;\n\nfunction foo() {\n    var x;\n    console.log(x);\n    x = 2;\n}\nfoo();\nconsole.log(x);\n```\n##### 没有块级做用域\n```javascript\n//--没有块级做用域, if for等块无法划分作用域\nfunction foo(num) {\n    var x = 0;\n    if (num > 5) {\n        var j = 10;\n        for (var i = 0; i < num; i++) {\n            j += i;\n        }\n        console.log(x);\n    }\n    console.log(j);\n}\nfoo(10);\n```\n##### 作用域链\n```javascript\n// *******\n// 作用域链\n// 1.当javascaript执行的时候，都会创建一个对应的执行环境，执行环境中存在着函数的调用对象，\n// 2.函数执行环境包括了调用对象，调用对象的属性就是函数的局部变量，每个函数就在这样的执行环境执行，函数外部的代码就在全局变量的执行环境\n// 3.javascript执行环境中，存在着作用域链，是由对象组成的列表或者链\n// 4.在解析一个变量的时候，会现在它最近的执行环境中查找，如果找不到就向上查找，如果最后都没找到就返回undefined\nvar x = 10;\nfunction foo(){\n    console.log(x);\n}\n//现在foo作用域内寻找，如果找不到就向上寻找\n```","source":"_posts/javascript中变量作用域.md","raw":"title: javascript中变量作用域\ndate: 2015-10-21 15:03:01\ntags: javascript\ntoc: true\n---\n##### 变量做用域\n<!--more-->\n```javascript\n// *******\n//--理解变量做用域\nvar x = 1;\n\nfunction foo() {\n    console.log(1);\n}\nfoo();\nconsole.log(x);\n//结果\n//1\n//1\n//正常输出全局变量x\n//--\n\nvar x = 1;\n\nfunction foo() {\n    var x = 2;\n    console.log(x);\n}\nfoo();\nconsole.log(x);\n//2\n//1\n//foo中输出的是局部变量的值\n//外面输出的是全局变量的x\n//--\n\nx = 1;\n\nfunction foo() {\n    x = 2;\n    console.log(x);\n    y = 3;\n    console.log(y);\n}\nfoo();\nconsole.log(x);\nconsole.log(y);\n//2\n//3\n//2\n//3\n//foo内重新赋值了全局变量x,并且定义全局变量y\n//--\n\nvar x = 1;\n\nfunction foo() {\n    console.log(x);\n    var x = 2;\n}\nfoo();\nconsole.log(x);\n//结果\n//undefined\n//1\n//变量声明 函数声明，都有一个提升的过程\n// var x = 1分解\n// var x; 会提升到作用域最顶部\n// x = 1;\n//上面的定义相当于\nvar x = 1;\n\nfunction foo() {\n    var x;\n    console.log(x);\n    x = 2;\n}\nfoo();\nconsole.log(x);\n```\n##### 没有块级做用域\n```javascript\n//--没有块级做用域, if for等块无法划分作用域\nfunction foo(num) {\n    var x = 0;\n    if (num > 5) {\n        var j = 10;\n        for (var i = 0; i < num; i++) {\n            j += i;\n        }\n        console.log(x);\n    }\n    console.log(j);\n}\nfoo(10);\n```\n##### 作用域链\n```javascript\n// *******\n// 作用域链\n// 1.当javascaript执行的时候，都会创建一个对应的执行环境，执行环境中存在着函数的调用对象，\n// 2.函数执行环境包括了调用对象，调用对象的属性就是函数的局部变量，每个函数就在这样的执行环境执行，函数外部的代码就在全局变量的执行环境\n// 3.javascript执行环境中，存在着作用域链，是由对象组成的列表或者链\n// 4.在解析一个变量的时候，会现在它最近的执行环境中查找，如果找不到就向上查找，如果最后都没找到就返回undefined\nvar x = 10;\nfunction foo(){\n    console.log(x);\n}\n//现在foo作用域内寻找，如果找不到就向上寻找\n```","slug":"javascript中变量作用域","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhnn000ut0yjk07xe7lf","content":"<h5 id=\"变量做用域\">变量做用域</h5><a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// *******</span></div><div class=\"line\"><span class=\"comment\">//--理解变量做用域</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x);</div><div class=\"line\"><span class=\"comment\">//结果</span></div><div class=\"line\"><span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"comment\">//正常输出全局变量x</span></div><div class=\"line\"><span class=\"comment\">//--</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x);</div><div class=\"line\"><span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"comment\">//foo中输出的是局部变量的值</span></div><div class=\"line\"><span class=\"comment\">//外面输出的是全局变量的x</span></div><div class=\"line\"><span class=\"comment\">//--</span></div><div class=\"line\"></div><div class=\"line\">x = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    x = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">    y = <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(y);</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(y);</div><div class=\"line\"><span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"comment\">//3</span></div><div class=\"line\"><span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"comment\">//3</span></div><div class=\"line\"><span class=\"comment\">//foo内重新赋值了全局变量x,并且定义全局变量y</span></div><div class=\"line\"><span class=\"comment\">//--</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x);</div><div class=\"line\"><span class=\"comment\">//结果</span></div><div class=\"line\"><span class=\"comment\">//undefined</span></div><div class=\"line\"><span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"comment\">//变量声明 函数声明，都有一个提升的过程</span></div><div class=\"line\"><span class=\"comment\">// var x = 1分解</span></div><div class=\"line\"><span class=\"comment\">// var x; 会提升到作用域最顶部</span></div><div class=\"line\"><span class=\"comment\">// x = 1;</span></div><div class=\"line\"><span class=\"comment\">//上面的定义相当于</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">    x = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x);</div></pre></td></tr></table></figure>\n<h5 id=\"没有块级做用域\">没有块级做用域</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//--没有块级做用域, if for等块无法划分作用域</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (num &gt; <span class=\"number\">5</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> j = <span class=\"number\">10</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; num; i++) &#123;</div><div class=\"line\">            j += i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(j);</div><div class=\"line\">&#125;</div><div class=\"line\">foo(<span class=\"number\">10</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"作用域链\">作用域链</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// *******</span></div><div class=\"line\"><span class=\"comment\">// 作用域链</span></div><div class=\"line\"><span class=\"comment\">// 1.当javascaript执行的时候，都会创建一个对应的执行环境，执行环境中存在着函数的调用对象，</span></div><div class=\"line\"><span class=\"comment\">// 2.函数执行环境包括了调用对象，调用对象的属性就是函数的局部变量，每个函数就在这样的执行环境执行，函数外部的代码就在全局变量的执行环境</span></div><div class=\"line\"><span class=\"comment\">// 3.javascript执行环境中，存在着作用域链，是由对象组成的列表或者链</span></div><div class=\"line\"><span class=\"comment\">// 4.在解析一个变量的时候，会现在它最近的执行环境中查找，如果找不到就向上查找，如果最后都没找到就返回undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//现在foo作用域内寻找，如果找不到就向上寻找</span></div></pre></td></tr></table></figure>","excerpt":"<h5 id=\"变量做用域\">变量做用域</h5>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// *******</span></div><div class=\"line\"><span class=\"comment\">//--理解变量做用域</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x);</div><div class=\"line\"><span class=\"comment\">//结果</span></div><div class=\"line\"><span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"comment\">//正常输出全局变量x</span></div><div class=\"line\"><span class=\"comment\">//--</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x);</div><div class=\"line\"><span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"comment\">//foo中输出的是局部变量的值</span></div><div class=\"line\"><span class=\"comment\">//外面输出的是全局变量的x</span></div><div class=\"line\"><span class=\"comment\">//--</span></div><div class=\"line\"></div><div class=\"line\">x = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    x = <span class=\"number\">2</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">    y = <span class=\"number\">3</span>;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(y);</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(y);</div><div class=\"line\"><span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"comment\">//3</span></div><div class=\"line\"><span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"comment\">//3</span></div><div class=\"line\"><span class=\"comment\">//foo内重新赋值了全局变量x,并且定义全局变量y</span></div><div class=\"line\"><span class=\"comment\">//--</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x);</div><div class=\"line\"><span class=\"comment\">//结果</span></div><div class=\"line\"><span class=\"comment\">//undefined</span></div><div class=\"line\"><span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"comment\">//变量声明 函数声明，都有一个提升的过程</span></div><div class=\"line\"><span class=\"comment\">// var x = 1分解</span></div><div class=\"line\"><span class=\"comment\">// var x; 会提升到作用域最顶部</span></div><div class=\"line\"><span class=\"comment\">// x = 1;</span></div><div class=\"line\"><span class=\"comment\">//上面的定义相当于</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">    x = <span class=\"number\">2</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div><div class=\"line\"><span class=\"built_in\">console</span>.log(x);</div></pre></td></tr></table></figure>\n<h5 id=\"没有块级做用域\">没有块级做用域</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//--没有块级做用域, if for等块无法划分作用域</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\">num</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span> (num &gt; <span class=\"number\">5</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> j = <span class=\"number\">10</span>;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; num; i++) &#123;</div><div class=\"line\">            j += i;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(j);</div><div class=\"line\">&#125;</div><div class=\"line\">foo(<span class=\"number\">10</span>);</div></pre></td></tr></table></figure>\n<h5 id=\"作用域链\">作用域链</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// *******</span></div><div class=\"line\"><span class=\"comment\">// 作用域链</span></div><div class=\"line\"><span class=\"comment\">// 1.当javascaript执行的时候，都会创建一个对应的执行环境，执行环境中存在着函数的调用对象，</span></div><div class=\"line\"><span class=\"comment\">// 2.函数执行环境包括了调用对象，调用对象的属性就是函数的局部变量，每个函数就在这样的执行环境执行，函数外部的代码就在全局变量的执行环境</span></div><div class=\"line\"><span class=\"comment\">// 3.javascript执行环境中，存在着作用域链，是由对象组成的列表或者链</span></div><div class=\"line\"><span class=\"comment\">// 4.在解析一个变量的时候，会现在它最近的执行环境中查找，如果找不到就向上查找，如果最后都没找到就返回undefined</span></div><div class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">10</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(x);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//现在foo作用域内寻找，如果找不到就向上寻找</span></div></pre></td></tr></table></figure>"},{"title":"javascript变量提升与函数声明","date":"2015-11-04T07:03:01.000Z","toc":true,"_content":"#### 变量提升\n* 我们在声明变量的时候，这个变量声明会在当前作用域内提升到最前面去声明\n\n#### 函数声明\n* 函数声明有两种方式，一种就是使用function，另一种就是匿名函数赋值给一个变量\n<!--more-->\n\n##### 基于以上两点，有个问题就出来了，函数声明和函数调用顺序，会有什么影响么,看个例子\n```javascript\n//函数声明\nvar test3 = function() {\n\tconsole.log('test3');\n};\ntest3();\ntest1();\ntest2();\n\nfunction test1() {\n\tconsole.log('test1');\n}\nvar test2 = function() {\n\tconsole.log('test2');\n};\n/*\nfunction声明函数和var声明函数，没有本质上的区别，调用方法都一样，但是存在一个声明和调用顺序的问题\n1.我们知道变量声明过程，var a = 123;分解 var a;被提到最前面，到了赋值体的时候才会 a = 123; a才有值\nfunction test(){console.log('test')} 这个函数声明会被提到前面去声明，所以我们发现，function声明的，在作用域允许范围内都是可用的\n而var 声明的函数，只有在声明的后面才能调用\n*/\n```","source":"_posts/javascript变量提升与函数声明.md","raw":"title: javascript变量提升与函数声明\ndate: 2015-11-04 15:03:01\ntags: javascript\ntoc: true\n---\n#### 变量提升\n* 我们在声明变量的时候，这个变量声明会在当前作用域内提升到最前面去声明\n\n#### 函数声明\n* 函数声明有两种方式，一种就是使用function，另一种就是匿名函数赋值给一个变量\n<!--more-->\n\n##### 基于以上两点，有个问题就出来了，函数声明和函数调用顺序，会有什么影响么,看个例子\n```javascript\n//函数声明\nvar test3 = function() {\n\tconsole.log('test3');\n};\ntest3();\ntest1();\ntest2();\n\nfunction test1() {\n\tconsole.log('test1');\n}\nvar test2 = function() {\n\tconsole.log('test2');\n};\n/*\nfunction声明函数和var声明函数，没有本质上的区别，调用方法都一样，但是存在一个声明和调用顺序的问题\n1.我们知道变量声明过程，var a = 123;分解 var a;被提到最前面，到了赋值体的时候才会 a = 123; a才有值\nfunction test(){console.log('test')} 这个函数声明会被提到前面去声明，所以我们发现，function声明的，在作用域允许范围内都是可用的\n而var 声明的函数，只有在声明的后面才能调用\n*/\n```","slug":"javascript变量提升与函数声明","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhnp000xt0yjh6vhcuy9","content":"<h4 id=\"变量提升\">变量提升</h4><ul>\n<li>我们在声明变量的时候，这个变量声明会在当前作用域内提升到最前面去声明</li>\n</ul>\n<h4 id=\"函数声明\">函数声明</h4><ul>\n<li>函数声明有两种方式，一种就是使用function，另一种就是匿名函数赋值给一个变量<a id=\"more\"></a>\n</li>\n</ul>\n<h5 id=\"基于以上两点，有个问题就出来了，函数声明和函数调用顺序，会有什么影响么,看个例子\">基于以上两点，有个问题就出来了，函数声明和函数调用顺序，会有什么影响么,看个例子</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//函数声明</span></div><div class=\"line\"><span class=\"keyword\">var</span> test3 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'test3'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">test3();</div><div class=\"line\">test1();</div><div class=\"line\">test2();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'test1'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> test2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'test2'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">function声明函数和var声明函数，没有本质上的区别，调用方法都一样，但是存在一个声明和调用顺序的问题</div><div class=\"line\">1.我们知道变量声明过程，var a = 123;分解 var a;被提到最前面，到了赋值体的时候才会 a = 123; a才有值</div><div class=\"line\">function test()&#123;console.log('test')&#125; 这个函数声明会被提到前面去声明，所以我们发现，function声明的，在作用域允许范围内都是可用的</div><div class=\"line\">而var 声明的函数，只有在声明的后面才能调用</div><div class=\"line\">*/</div></pre></td></tr></table></figure>","excerpt":"<h4 id=\"变量提升\">变量提升</h4><ul>\n<li>我们在声明变量的时候，这个变量声明会在当前作用域内提升到最前面去声明</li>\n</ul>\n<h4 id=\"函数声明\">函数声明</h4><ul>\n<li>函数声明有两种方式，一种就是使用function，另一种就是匿名函数赋值给一个变量","more":"</li>\n</ul>\n<h5 id=\"基于以上两点，有个问题就出来了，函数声明和函数调用顺序，会有什么影响么,看个例子\">基于以上两点，有个问题就出来了，函数声明和函数调用顺序，会有什么影响么,看个例子</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//函数声明</span></div><div class=\"line\"><span class=\"keyword\">var</span> test3 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'test3'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\">test3();</div><div class=\"line\">test1();</div><div class=\"line\">test2();</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test1</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'test1'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> test2 = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'test2'</span>);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">function声明函数和var声明函数，没有本质上的区别，调用方法都一样，但是存在一个声明和调用顺序的问题</div><div class=\"line\">1.我们知道变量声明过程，var a = 123;分解 var a;被提到最前面，到了赋值体的时候才会 a = 123; a才有值</div><div class=\"line\">function test()&#123;console.log('test')&#125; 这个函数声明会被提到前面去声明，所以我们发现，function声明的，在作用域允许范围内都是可用的</div><div class=\"line\">而var 声明的函数，只有在声明的后面才能调用</div><div class=\"line\">*/</span></div></pre></td></tr></table></figure>"},{"title":"javascript实现浏览器本地存储","date":"2015-10-02T11:08:17.000Z","toc":true,"_content":"#### 高级浏览器\n##### localStorage\n>一旦存储，除非手动删除，否则永远存储在浏览器本地。\n\n* 优点：容量大，最大可支持5M\n* 缺点：IE8以下的版本不支持，安全性也差，不适合保存敏感数据。\n* 隐私模式下localStorage，只能读取，不能写入，使用前需要检测是否支持，检测代码：\n<!--more-->\n```javascript\nfunction isSupport(){\n    var storage = window.localStorage;\n    if(!storage){\n        return false;\n    }\n    var key = 'jason';\n    try{\n        storage.setItem(key, 'jason');\n        storage.removeItem(key);\n        return false;\n    }catch (error){\n        return true;\n    }\n}\n```\n* localStorage对象可以将数据永久保存在客户端。\n\t* 存储：localStorage.setItem(key,value)\n\t\t* 如果key存在时，更新value\n\t* 获取：localStorage.getItem(key)\n\t\t* 如果key不存在返回null\n\t* 删除：localStorage.removeItem(key)\n\t\t* 一旦删除，key对应的数据将会全部删除\n\t* 全部清除：localStorage.clear()\n\t* 某些时候使用removeItem逐个删除太麻烦，可以使用clear,执行的后果是会清除所有localStorage对象保存的数据\n\t* 遍历localStorage存储的key\n\t\t* `.length` 数据总量，例：localStorage.length\n\t\t* `.key(index)` 获取key，例：var key=localStorage.key(index);\n* 存储JSON格式数据\n\t* `JSON.stringify(data)` 将一个对象转换成JSON格式的数据串,返回转换后的串\n\t* `JSON.parse(data)` 将数据解析成对象，返回解析后的对象\n\n##### IE低版本浏览器（IE8以下的版本）\n* ActiveXObject\n>ActiveXObject 对象为 Microsoft 扩展，仅在 Internet Explorer 中受支持。\nActiveXObject(“htmlfile”)创建的文档是一个完美的HTML文档，它拥有document.title,document.body等HTML DOM专有的属性，还能运行javascript。全局变量this就是我们要找的全局对象，它还拥有我们想要的一切，Array，Boolean，String，Date，Object等等。\n\n* userData\n>UserData是微软为IE专门在系统中开辟的一块存储空间\n正常情况下，这个文件夹在个人文件夹下 `Application Data\\Microsoft\\Internet Explorer\\UserData`\n线上使用时，单个文件的大小限制是128KB，一个域名下总共可以保存1024KB的文件，文件个数应该没有限制。在受限站点里这两个值分别是64KB和640KB，所以如果考虑到各种情况的话，单个文件最好能控制64KB以下,xml格式的文件\n\n* 低版本就是使用UserData进行存储，数据存储在硬盘上\n```javascript\n//javascript\no = document.createElement('input');\no.type = \"hidden\";\no.addBehavior (\"#default#userData\");\n//UserData.o.style.behavior = \"url('#default#userData')\" ;\n//上面的语句也是一样的作用\ndocument.body.appendChild(o);\n<!--html-->\n//说白了UserData就是样式里的一个Behavior，所以这样写也是一样的：\n<input type=hidden class= storeuserData />\n<style>\n.storeuserData {behavior:url(#default#userData);}\n</style>\n```\n* UserData对象有以下的属性和方法：\n\n| 属性 |\t 描述 |\n| :-------- | :--:|\n| expires |\t设置或读取文件过期时间 |\n| XMLDocument |\t读取文件的XML DOM |\n\n| 方法 |\t 描述 |\n| :-------- | :--:|\n| getAttribute\t| 读取指定属性的值 |\n| load\t| 打开文件 |\n| removeAttribute | 删除指定的属性 |\n| save\t| 保存文件 |\n| setAttribute\t| 为指定属性赋值 |\n\n* UserData文件实际上就是一个XML文件，通过文件名->属性的方式保存字符串，如以下一段代码：\n```javascript\no.setAttribute(\"code\", \"hello world!\");\no.save(\"baidu\");\n```\n* 执行后，UserData文件夹中会生成一个baidu[1].xml文件，其中的内容是：\n\t* `<ROOTSTUB code=\"hello,world!\"/>`\n* 在一个文件中可以有多个属性，也就是可以存储多种不同的数据。\n\n##### 兼容所有浏览器\n>store.js就是使用上述两种方式进行兼容使用，从而达到兼容所有浏览器的本地存储\n","source":"_posts/javascript实现浏览器本地存储.md","raw":"title: javascript实现浏览器本地存储\ndate: 2015-10-02 19:08:17\ntags: javascript\ntoc: true\n---\n#### 高级浏览器\n##### localStorage\n>一旦存储，除非手动删除，否则永远存储在浏览器本地。\n\n* 优点：容量大，最大可支持5M\n* 缺点：IE8以下的版本不支持，安全性也差，不适合保存敏感数据。\n* 隐私模式下localStorage，只能读取，不能写入，使用前需要检测是否支持，检测代码：\n<!--more-->\n```javascript\nfunction isSupport(){\n    var storage = window.localStorage;\n    if(!storage){\n        return false;\n    }\n    var key = 'jason';\n    try{\n        storage.setItem(key, 'jason');\n        storage.removeItem(key);\n        return false;\n    }catch (error){\n        return true;\n    }\n}\n```\n* localStorage对象可以将数据永久保存在客户端。\n\t* 存储：localStorage.setItem(key,value)\n\t\t* 如果key存在时，更新value\n\t* 获取：localStorage.getItem(key)\n\t\t* 如果key不存在返回null\n\t* 删除：localStorage.removeItem(key)\n\t\t* 一旦删除，key对应的数据将会全部删除\n\t* 全部清除：localStorage.clear()\n\t* 某些时候使用removeItem逐个删除太麻烦，可以使用clear,执行的后果是会清除所有localStorage对象保存的数据\n\t* 遍历localStorage存储的key\n\t\t* `.length` 数据总量，例：localStorage.length\n\t\t* `.key(index)` 获取key，例：var key=localStorage.key(index);\n* 存储JSON格式数据\n\t* `JSON.stringify(data)` 将一个对象转换成JSON格式的数据串,返回转换后的串\n\t* `JSON.parse(data)` 将数据解析成对象，返回解析后的对象\n\n##### IE低版本浏览器（IE8以下的版本）\n* ActiveXObject\n>ActiveXObject 对象为 Microsoft 扩展，仅在 Internet Explorer 中受支持。\nActiveXObject(“htmlfile”)创建的文档是一个完美的HTML文档，它拥有document.title,document.body等HTML DOM专有的属性，还能运行javascript。全局变量this就是我们要找的全局对象，它还拥有我们想要的一切，Array，Boolean，String，Date，Object等等。\n\n* userData\n>UserData是微软为IE专门在系统中开辟的一块存储空间\n正常情况下，这个文件夹在个人文件夹下 `Application Data\\Microsoft\\Internet Explorer\\UserData`\n线上使用时，单个文件的大小限制是128KB，一个域名下总共可以保存1024KB的文件，文件个数应该没有限制。在受限站点里这两个值分别是64KB和640KB，所以如果考虑到各种情况的话，单个文件最好能控制64KB以下,xml格式的文件\n\n* 低版本就是使用UserData进行存储，数据存储在硬盘上\n```javascript\n//javascript\no = document.createElement('input');\no.type = \"hidden\";\no.addBehavior (\"#default#userData\");\n//UserData.o.style.behavior = \"url('#default#userData')\" ;\n//上面的语句也是一样的作用\ndocument.body.appendChild(o);\n<!--html-->\n//说白了UserData就是样式里的一个Behavior，所以这样写也是一样的：\n<input type=hidden class= storeuserData />\n<style>\n.storeuserData {behavior:url(#default#userData);}\n</style>\n```\n* UserData对象有以下的属性和方法：\n\n| 属性 |\t 描述 |\n| :-------- | :--:|\n| expires |\t设置或读取文件过期时间 |\n| XMLDocument |\t读取文件的XML DOM |\n\n| 方法 |\t 描述 |\n| :-------- | :--:|\n| getAttribute\t| 读取指定属性的值 |\n| load\t| 打开文件 |\n| removeAttribute | 删除指定的属性 |\n| save\t| 保存文件 |\n| setAttribute\t| 为指定属性赋值 |\n\n* UserData文件实际上就是一个XML文件，通过文件名->属性的方式保存字符串，如以下一段代码：\n```javascript\no.setAttribute(\"code\", \"hello world!\");\no.save(\"baidu\");\n```\n* 执行后，UserData文件夹中会生成一个baidu[1].xml文件，其中的内容是：\n\t* `<ROOTSTUB code=\"hello,world!\"/>`\n* 在一个文件中可以有多个属性，也就是可以存储多种不同的数据。\n\n##### 兼容所有浏览器\n>store.js就是使用上述两种方式进行兼容使用，从而达到兼容所有浏览器的本地存储\n","slug":"javascript实现浏览器本地存储","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhnq000zt0yjthjxcm0t","content":"<h4 id=\"高级浏览器\">高级浏览器</h4><h5 id=\"localStorage\">localStorage</h5><blockquote>\n<p>一旦存储，除非手动删除，否则永远存储在浏览器本地。</p>\n</blockquote>\n<ul>\n<li>优点：容量大，最大可支持5M</li>\n<li>缺点：IE8以下的版本不支持，安全性也差，不适合保存敏感数据。</li>\n<li><p>隐私模式下localStorage，只能读取，不能写入，使用前需要检测是否支持，检测代码：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isSupport</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> storage = <span class=\"built_in\">window</span>.localStorage;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!storage)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"string\">'jason'</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">        storage.setItem(key, <span class=\"string\">'jason'</span>);</div><div class=\"line\">        storage.removeItem(key);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span> (error)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>localStorage对象可以将数据永久保存在客户端。</p>\n<ul>\n<li>存储：localStorage.setItem(key,value)<ul>\n<li>如果key存在时，更新value</li>\n</ul>\n</li>\n<li>获取：localStorage.getItem(key)<ul>\n<li>如果key不存在返回null</li>\n</ul>\n</li>\n<li>删除：localStorage.removeItem(key)<ul>\n<li>一旦删除，key对应的数据将会全部删除</li>\n</ul>\n</li>\n<li>全部清除：localStorage.clear()</li>\n<li>某些时候使用removeItem逐个删除太麻烦，可以使用clear,执行的后果是会清除所有localStorage对象保存的数据</li>\n<li>遍历localStorage存储的key<ul>\n<li><code>.length</code> 数据总量，例：localStorage.length</li>\n<li><code>.key(index)</code> 获取key，例：var key=localStorage.key(index);</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>存储JSON格式数据<ul>\n<li><code>JSON.stringify(data)</code> 将一个对象转换成JSON格式的数据串,返回转换后的串</li>\n<li><code>JSON.parse(data)</code> 将数据解析成对象，返回解析后的对象</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"IE低版本浏览器（IE8以下的版本）\">IE低版本浏览器（IE8以下的版本）</h5><ul>\n<li><p>ActiveXObject</p>\n<blockquote>\n<p>ActiveXObject 对象为 Microsoft 扩展，仅在 Internet Explorer 中受支持。<br>ActiveXObject(“htmlfile”)创建的文档是一个完美的HTML文档，它拥有document.title,document.body等HTML DOM专有的属性，还能运行javascript。全局变量this就是我们要找的全局对象，它还拥有我们想要的一切，Array，Boolean，String，Date，Object等等。</p>\n</blockquote>\n</li>\n<li><p>userData</p>\n<blockquote>\n<p>UserData是微软为IE专门在系统中开辟的一块存储空间<br>正常情况下，这个文件夹在个人文件夹下 <code>Application Data\\Microsoft\\Internet Explorer\\UserData</code><br>线上使用时，单个文件的大小限制是128KB，一个域名下总共可以保存1024KB的文件，文件个数应该没有限制。在受限站点里这两个值分别是64KB和640KB，所以如果考虑到各种情况的话，单个文件最好能控制64KB以下,xml格式的文件</p>\n</blockquote>\n</li>\n<li><p>低版本就是使用UserData进行存储，数据存储在硬盘上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//javascript</span></div><div class=\"line\">o = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'input'</span>);</div><div class=\"line\">o.type = <span class=\"string\">\"hidden\"</span>;</div><div class=\"line\">o.addBehavior (<span class=\"string\">\"#default#userData\"</span>);</div><div class=\"line\"><span class=\"comment\">//UserData.o.style.behavior = \"url('#default#userData')\" ;</span></div><div class=\"line\"><span class=\"comment\">//上面的语句也是一样的作用</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(o);</div><div class=\"line\">&lt;!--html--&gt;</div><div class=\"line\">//说白了UserData就是样式里的一个Behavior，所以这样写也是一样的：</div><div class=\"line\">&lt;input type=hidden class= storeuserData /&gt;</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.storeuserData &#123;behavior:url(#default#userData);&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>UserData对象有以下的属性和方法：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">expires</td>\n<td style=\"text-align:center\">设置或读取文件过期时间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">XMLDocument</td>\n<td style=\"text-align:center\">读取文件的XML DOM</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">getAttribute</td>\n<td style=\"text-align:center\">读取指定属性的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">load</td>\n<td style=\"text-align:center\">打开文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">removeAttribute</td>\n<td style=\"text-align:center\">删除指定的属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">save</td>\n<td style=\"text-align:center\">保存文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">setAttribute</td>\n<td style=\"text-align:center\">为指定属性赋值</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>UserData文件实际上就是一个XML文件，通过文件名-&gt;属性的方式保存字符串，如以下一段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">o.setAttribute(<span class=\"string\">\"code\"</span>, <span class=\"string\">\"hello world!\"</span>);</div><div class=\"line\">o.save(<span class=\"string\">\"baidu\"</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行后，UserData文件夹中会生成一个baidu[1].xml文件，其中的内容是：</p>\n<ul>\n<li><code>&lt;ROOTSTUB code=&quot;hello,world!&quot;/&gt;</code></li>\n</ul>\n</li>\n<li>在一个文件中可以有多个属性，也就是可以存储多种不同的数据。</li>\n</ul>\n<h5 id=\"兼容所有浏览器\">兼容所有浏览器</h5><blockquote>\n<p>store.js就是使用上述两种方式进行兼容使用，从而达到兼容所有浏览器的本地存储</p>\n</blockquote>\n","excerpt":"<h4 id=\"高级浏览器\">高级浏览器</h4><h5 id=\"localStorage\">localStorage</h5><blockquote>\n<p>一旦存储，除非手动删除，否则永远存储在浏览器本地。</p>\n</blockquote>\n<ul>\n<li>优点：容量大，最大可支持5M</li>\n<li>缺点：IE8以下的版本不支持，安全性也差，不适合保存敏感数据。</li>\n<li><p>隐私模式下localStorage，只能读取，不能写入，使用前需要检测是否支持，检测代码：</p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isSupport</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> storage = <span class=\"built_in\">window</span>.localStorage;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!storage)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> key = <span class=\"string\">'jason'</span>;</div><div class=\"line\">    <span class=\"keyword\">try</span>&#123;</div><div class=\"line\">        storage.setItem(key, <span class=\"string\">'jason'</span>);</div><div class=\"line\">        storage.removeItem(key);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;<span class=\"keyword\">catch</span> (error)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>localStorage对象可以将数据永久保存在客户端。</p>\n<ul>\n<li>存储：localStorage.setItem(key,value)<ul>\n<li>如果key存在时，更新value</li>\n</ul>\n</li>\n<li>获取：localStorage.getItem(key)<ul>\n<li>如果key不存在返回null</li>\n</ul>\n</li>\n<li>删除：localStorage.removeItem(key)<ul>\n<li>一旦删除，key对应的数据将会全部删除</li>\n</ul>\n</li>\n<li>全部清除：localStorage.clear()</li>\n<li>某些时候使用removeItem逐个删除太麻烦，可以使用clear,执行的后果是会清除所有localStorage对象保存的数据</li>\n<li>遍历localStorage存储的key<ul>\n<li><code>.length</code> 数据总量，例：localStorage.length</li>\n<li><code>.key(index)</code> 获取key，例：var key=localStorage.key(index);</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>存储JSON格式数据<ul>\n<li><code>JSON.stringify(data)</code> 将一个对象转换成JSON格式的数据串,返回转换后的串</li>\n<li><code>JSON.parse(data)</code> 将数据解析成对象，返回解析后的对象</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"IE低版本浏览器（IE8以下的版本）\">IE低版本浏览器（IE8以下的版本）</h5><ul>\n<li><p>ActiveXObject</p>\n<blockquote>\n<p>ActiveXObject 对象为 Microsoft 扩展，仅在 Internet Explorer 中受支持。<br>ActiveXObject(“htmlfile”)创建的文档是一个完美的HTML文档，它拥有document.title,document.body等HTML DOM专有的属性，还能运行javascript。全局变量this就是我们要找的全局对象，它还拥有我们想要的一切，Array，Boolean，String，Date，Object等等。</p>\n</blockquote>\n</li>\n<li><p>userData</p>\n<blockquote>\n<p>UserData是微软为IE专门在系统中开辟的一块存储空间<br>正常情况下，这个文件夹在个人文件夹下 <code>Application Data\\Microsoft\\Internet Explorer\\UserData</code><br>线上使用时，单个文件的大小限制是128KB，一个域名下总共可以保存1024KB的文件，文件个数应该没有限制。在受限站点里这两个值分别是64KB和640KB，所以如果考虑到各种情况的话，单个文件最好能控制64KB以下,xml格式的文件</p>\n</blockquote>\n</li>\n<li><p>低版本就是使用UserData进行存储，数据存储在硬盘上</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//javascript</span></div><div class=\"line\">o = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'input'</span>);</div><div class=\"line\">o.type = <span class=\"string\">\"hidden\"</span>;</div><div class=\"line\">o.addBehavior (<span class=\"string\">\"#default#userData\"</span>);</div><div class=\"line\"><span class=\"comment\">//UserData.o.style.behavior = \"url('#default#userData')\" ;</span></div><div class=\"line\"><span class=\"comment\">//上面的语句也是一样的作用</span></div><div class=\"line\"><span class=\"built_in\">document</span>.body.appendChild(o);</div><div class=\"line\">&lt;!--html--&gt;</div><div class=\"line\">//说白了UserData就是样式里的一个Behavior，所以这样写也是一样的：</div><div class=\"line\">&lt;input type=hidden class= storeuserData /&gt;</div><div class=\"line\">&lt;style&gt;</div><div class=\"line\">.storeuserData &#123;behavior:url(#default#userData);&#125;</div><div class=\"line\">&lt;/style&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>UserData对象有以下的属性和方法：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">expires</td>\n<td style=\"text-align:center\">设置或读取文件过期时间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">XMLDocument</td>\n<td style=\"text-align:center\">读取文件的XML DOM</td>\n</tr>\n</tbody>\n</table>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">方法</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">getAttribute</td>\n<td style=\"text-align:center\">读取指定属性的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">load</td>\n<td style=\"text-align:center\">打开文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">removeAttribute</td>\n<td style=\"text-align:center\">删除指定的属性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">save</td>\n<td style=\"text-align:center\">保存文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">setAttribute</td>\n<td style=\"text-align:center\">为指定属性赋值</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li><p>UserData文件实际上就是一个XML文件，通过文件名-&gt;属性的方式保存字符串，如以下一段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">o.setAttribute(<span class=\"string\">\"code\"</span>, <span class=\"string\">\"hello world!\"</span>);</div><div class=\"line\">o.save(<span class=\"string\">\"baidu\"</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行后，UserData文件夹中会生成一个baidu[1].xml文件，其中的内容是：</p>\n<ul>\n<li><code>&lt;ROOTSTUB code=&quot;hello,world!&quot;/&gt;</code></li>\n</ul>\n</li>\n<li>在一个文件中可以有多个属性，也就是可以存储多种不同的数据。</li>\n</ul>\n<h5 id=\"兼容所有浏览器\">兼容所有浏览器</h5><blockquote>\n<p>store.js就是使用上述两种方式进行兼容使用，从而达到兼容所有浏览器的本地存储</p>\n</blockquote>"},{"title":"javascript实现继承","date":"2015-11-03T07:03:01.000Z","toc":true,"_content":"#### 继承\n\n* 很多语言中都有继承，javascript和其他java等语言不同，他不是一门面向对象的语言，但是他的所有的东西却又都是对象，下面就实现一个继承\n<!--more-->\n```javascript\n//实现一个继承\nfunction Parent(name, age) {\n\tvar pid = '1';\n\tthis.name = name || 'amos';\n\tthis.age = age || 25;\n\tthis.showInfo = function() {\n\t\tconsole.log('my name is ' + this.name + ' ,i am ' + this.age);\n\t};\n}\nParent.prototype = {\n\tshowName: function() {\n\t\tconsole.log('name:' + this.name);\n\t},\n\tshowAge: function() {\n\t\tconsole.log('age:' + this.age);\n\t}\n}\n\nfunction Child(name, age, grade) {\n\tvar cid = '1';\n\tParent.call(this, name, age);\n\tthis.grade = grade || 100;\n\tthis.showGrade = function() {\n\t\tconsole.log('grade:' + this.grade);\n\t};\n\tthis.showPrivate = function() {\n\t\tif (typeof pid === 'undefined') {\n\t\t\tpid = 'undefined';\n\t\t}\n\t\tconsole.log('private:' + cid + ' ' + pid);\n\t}\n}\nChild.prototype = new Parent();\nChild.prototype.info = function() {\n\tconsole.log('info:' + this.name + ' ' + this.age + ' ' + this.grade);\n};\n\nfunction Other(name, age, grade) {\n\tChild.call(this, name, age, grade);\n\tthis.showOther = function() {\n\t\tconsole.log('other');\n\t}\n}\nOther.prototype = new Child();\n\nvar other = new Other('zhuo', 25, 100);\nother.showOther();\nother.showInfo();\nother.showName();\nother.showAge();\nother.showGrade();\nother.info();\nother.showPrivate();\n/*\n1.不使用call 无法传参数\n2.不使用扩展原型链的方式，无法继承原型链上面的方法\n3.无法继承私有属性 pid\n4.不能一次实现多继承\n*/\n```","source":"_posts/javascript实现继承.md","raw":"title: javascript实现继承\ndate: 2015-11-03 15:03:01\ntags: javascript\ntoc: true\n---\n#### 继承\n\n* 很多语言中都有继承，javascript和其他java等语言不同，他不是一门面向对象的语言，但是他的所有的东西却又都是对象，下面就实现一个继承\n<!--more-->\n```javascript\n//实现一个继承\nfunction Parent(name, age) {\n\tvar pid = '1';\n\tthis.name = name || 'amos';\n\tthis.age = age || 25;\n\tthis.showInfo = function() {\n\t\tconsole.log('my name is ' + this.name + ' ,i am ' + this.age);\n\t};\n}\nParent.prototype = {\n\tshowName: function() {\n\t\tconsole.log('name:' + this.name);\n\t},\n\tshowAge: function() {\n\t\tconsole.log('age:' + this.age);\n\t}\n}\n\nfunction Child(name, age, grade) {\n\tvar cid = '1';\n\tParent.call(this, name, age);\n\tthis.grade = grade || 100;\n\tthis.showGrade = function() {\n\t\tconsole.log('grade:' + this.grade);\n\t};\n\tthis.showPrivate = function() {\n\t\tif (typeof pid === 'undefined') {\n\t\t\tpid = 'undefined';\n\t\t}\n\t\tconsole.log('private:' + cid + ' ' + pid);\n\t}\n}\nChild.prototype = new Parent();\nChild.prototype.info = function() {\n\tconsole.log('info:' + this.name + ' ' + this.age + ' ' + this.grade);\n};\n\nfunction Other(name, age, grade) {\n\tChild.call(this, name, age, grade);\n\tthis.showOther = function() {\n\t\tconsole.log('other');\n\t}\n}\nOther.prototype = new Child();\n\nvar other = new Other('zhuo', 25, 100);\nother.showOther();\nother.showInfo();\nother.showName();\nother.showAge();\nother.showGrade();\nother.info();\nother.showPrivate();\n/*\n1.不使用call 无法传参数\n2.不使用扩展原型链的方式，无法继承原型链上面的方法\n3.无法继承私有属性 pid\n4.不能一次实现多继承\n*/\n```","slug":"javascript实现继承","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhns0011t0yj29bni2x6","content":"<h4 id=\"继承\">继承</h4><ul>\n<li>很多语言中都有继承，javascript和其他java等语言不同，他不是一门面向对象的语言，但是他的所有的东西却又都是对象，下面就实现一个继承<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//实现一个继承</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\">name, age</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> pid = <span class=\"string\">'1'</span>;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name || <span class=\"string\">'amos'</span>;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = age || <span class=\"number\">25</span>;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.showInfo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'my name is '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">' ,i am '</span> + <span class=\"keyword\">this</span>.age);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">Parent.prototype = &#123;</div><div class=\"line\">\t<span class=\"attr\">showName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'name:'</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">showAge</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'age:'</span> + <span class=\"keyword\">this</span>.age);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">name, age, grade</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> cid = <span class=\"string\">'1'</span>;</div><div class=\"line\">\tParent.call(<span class=\"keyword\">this</span>, name, age);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.grade = grade || <span class=\"number\">100</span>;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.showGrade = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'grade:'</span> + <span class=\"keyword\">this</span>.grade);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.showPrivate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> pid === <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">\t\t\tpid = <span class=\"string\">'undefined'</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'private:'</span> + cid + <span class=\"string\">' '</span> + pid);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();</div><div class=\"line\">Child.prototype.info = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'info:'</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.grade);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Other</span>(<span class=\"params\">name, age, grade</span>) </span>&#123;</div><div class=\"line\">\tChild.call(<span class=\"keyword\">this</span>, name, age, grade);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.showOther = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'other'</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Other.prototype = <span class=\"keyword\">new</span> Child();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> other = <span class=\"keyword\">new</span> Other(<span class=\"string\">'zhuo'</span>, <span class=\"number\">25</span>, <span class=\"number\">100</span>);</div><div class=\"line\">other.showOther();</div><div class=\"line\">other.showInfo();</div><div class=\"line\">other.showName();</div><div class=\"line\">other.showAge();</div><div class=\"line\">other.showGrade();</div><div class=\"line\">other.info();</div><div class=\"line\">other.showPrivate();</div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">1.不使用call 无法传参数</div><div class=\"line\">2.不使用扩展原型链的方式，无法继承原型链上面的方法</div><div class=\"line\">3.无法继承私有属性 pid</div><div class=\"line\">4.不能一次实现多继承</div><div class=\"line\">*/</div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"<h4 id=\"继承\">继承</h4><ul>\n<li>很多语言中都有继承，javascript和其他java等语言不同，他不是一门面向对象的语言，但是他的所有的东西却又都是对象，下面就实现一个继承","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//实现一个继承</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Parent</span>(<span class=\"params\">name, age</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> pid = <span class=\"string\">'1'</span>;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name || <span class=\"string\">'amos'</span>;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = age || <span class=\"number\">25</span>;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.showInfo = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'my name is '</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">' ,i am '</span> + <span class=\"keyword\">this</span>.age);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;</div><div class=\"line\">Parent.prototype = &#123;</div><div class=\"line\">\t<span class=\"attr\">showName</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'name:'</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">\t&#125;,</div><div class=\"line\">\t<span class=\"attr\">showAge</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'age:'</span> + <span class=\"keyword\">this</span>.age);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Child</span>(<span class=\"params\">name, age, grade</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> cid = <span class=\"string\">'1'</span>;</div><div class=\"line\">\tParent.call(<span class=\"keyword\">this</span>, name, age);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.grade = grade || <span class=\"number\">100</span>;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.showGrade = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'grade:'</span> + <span class=\"keyword\">this</span>.grade);</div><div class=\"line\">\t&#125;;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.showPrivate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> pid === <span class=\"string\">'undefined'</span>) &#123;</div><div class=\"line\">\t\t\tpid = <span class=\"string\">'undefined'</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'private:'</span> + cid + <span class=\"string\">' '</span> + pid);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Child.prototype = <span class=\"keyword\">new</span> Parent();</div><div class=\"line\">Child.prototype.info = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'info:'</span> + <span class=\"keyword\">this</span>.name + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.age + <span class=\"string\">' '</span> + <span class=\"keyword\">this</span>.grade);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Other</span>(<span class=\"params\">name, age, grade</span>) </span>&#123;</div><div class=\"line\">\tChild.call(<span class=\"keyword\">this</span>, name, age, grade);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.showOther = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'other'</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">Other.prototype = <span class=\"keyword\">new</span> Child();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> other = <span class=\"keyword\">new</span> Other(<span class=\"string\">'zhuo'</span>, <span class=\"number\">25</span>, <span class=\"number\">100</span>);</div><div class=\"line\">other.showOther();</div><div class=\"line\">other.showInfo();</div><div class=\"line\">other.showName();</div><div class=\"line\">other.showAge();</div><div class=\"line\">other.showGrade();</div><div class=\"line\">other.info();</div><div class=\"line\">other.showPrivate();</div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">1.不使用call 无法传参数</div><div class=\"line\">2.不使用扩展原型链的方式，无法继承原型链上面的方法</div><div class=\"line\">3.无法继承私有属性 pid</div><div class=\"line\">4.不能一次实现多继承</div><div class=\"line\">*/</span></div></pre></td></tr></table></figure></li>\n</ul>"},{"title":"javascript对象之navigator","date":"2015-10-18T06:49:20.000Z","toc":true,"_content":"##### 概述\n>navigator对象保存的是浏览器的信息，兼容所有浏览器，只读\n支持的属性\n<!--more-->\n* appCodeName 浏览器代码名\n* appName 浏览器名称\n* appVersion 浏览器平台版本信息\n* browserLanguage 浏览器使用的语言 仅支持IE\n* cookieEnabled 浏览器是否开启cookie支持\n* cpuClass 浏览器所在系统的CPU登记 仅支持IE\n* onLine 是否处于脱机模式 仅支持IE\n* platform 浏览器所在的操作系统平台\n* systemLanguage 浏览器所在操作系统使用的语言 仅支持IE\n* userAgent 浏览器用于HTTP请求的用户代理头的值\n* userLanguage 浏览器所在操作系统的自然语言设置 仅支持IE\n\n我们经常使用的就是userAgent\n1.通过这个可以做touch上对app的唤醒，因为不同平台app唤醒方式有差别，可以使用userAgent做区分处理\n2.pc端可以通过userAgent判断浏览器版本，做兼容处理方案\n3.userAgent可以识别设备","source":"_posts/javascript对象之navigator.md","raw":"title: javascript对象之navigator\ndate: 2015-10-18 14:49:20\ntags: javascript\ntoc: true\n---\n##### 概述\n>navigator对象保存的是浏览器的信息，兼容所有浏览器，只读\n支持的属性\n<!--more-->\n* appCodeName 浏览器代码名\n* appName 浏览器名称\n* appVersion 浏览器平台版本信息\n* browserLanguage 浏览器使用的语言 仅支持IE\n* cookieEnabled 浏览器是否开启cookie支持\n* cpuClass 浏览器所在系统的CPU登记 仅支持IE\n* onLine 是否处于脱机模式 仅支持IE\n* platform 浏览器所在的操作系统平台\n* systemLanguage 浏览器所在操作系统使用的语言 仅支持IE\n* userAgent 浏览器用于HTTP请求的用户代理头的值\n* userLanguage 浏览器所在操作系统的自然语言设置 仅支持IE\n\n我们经常使用的就是userAgent\n1.通过这个可以做touch上对app的唤醒，因为不同平台app唤醒方式有差别，可以使用userAgent做区分处理\n2.pc端可以通过userAgent判断浏览器版本，做兼容处理方案\n3.userAgent可以识别设备","slug":"javascript对象之navigator","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhnu0013t0yj1ep2ixz7","content":"<h5 id=\"概述\">概述</h5><blockquote>\n<p>navigator对象保存的是浏览器的信息，兼容所有浏览器，只读<br>支持的属性<br><a id=\"more\"></a></p>\n<ul>\n<li>appCodeName 浏览器代码名</li>\n<li>appName 浏览器名称</li>\n<li>appVersion 浏览器平台版本信息</li>\n<li>browserLanguage 浏览器使用的语言 仅支持IE</li>\n<li>cookieEnabled 浏览器是否开启cookie支持</li>\n<li>cpuClass 浏览器所在系统的CPU登记 仅支持IE</li>\n<li>onLine 是否处于脱机模式 仅支持IE</li>\n<li>platform 浏览器所在的操作系统平台</li>\n<li>systemLanguage 浏览器所在操作系统使用的语言 仅支持IE</li>\n<li>userAgent 浏览器用于HTTP请求的用户代理头的值</li>\n<li>userLanguage 浏览器所在操作系统的自然语言设置 仅支持IE</li>\n</ul>\n</blockquote>\n<p>我们经常使用的就是userAgent<br>1.通过这个可以做touch上对app的唤醒，因为不同平台app唤醒方式有差别，可以使用userAgent做区分处理<br>2.pc端可以通过userAgent判断浏览器版本，做兼容处理方案<br>3.userAgent可以识别设备</p>\n","excerpt":"<h5 id=\"概述\">概述</h5><blockquote>\n<p>navigator对象保存的是浏览器的信息，兼容所有浏览器，只读<br>支持的属性<br>","more":"</p>\n<ul>\n<li>appCodeName 浏览器代码名</li>\n<li>appName 浏览器名称</li>\n<li>appVersion 浏览器平台版本信息</li>\n<li>browserLanguage 浏览器使用的语言 仅支持IE</li>\n<li>cookieEnabled 浏览器是否开启cookie支持</li>\n<li>cpuClass 浏览器所在系统的CPU登记 仅支持IE</li>\n<li>onLine 是否处于脱机模式 仅支持IE</li>\n<li>platform 浏览器所在的操作系统平台</li>\n<li>systemLanguage 浏览器所在操作系统使用的语言 仅支持IE</li>\n<li>userAgent 浏览器用于HTTP请求的用户代理头的值</li>\n<li>userLanguage 浏览器所在操作系统的自然语言设置 仅支持IE</li>\n</ul>\n</blockquote>\n<p>我们经常使用的就是userAgent<br>1.通过这个可以做touch上对app的唤醒，因为不同平台app唤醒方式有差别，可以使用userAgent做区分处理<br>2.pc端可以通过userAgent判断浏览器版本，做兼容处理方案<br>3.userAgent可以识别设备</p>"},{"title":"javascript对象的深度拷贝","date":"2015-10-26T07:03:01.000Z","toc":true,"_content":"* 浅度复制：对于含有引用类型字段的对象来说，进行浅度复制意味着复制的对象和源对象存在这相同的引用。如果源对象的引用变量的值发生改变，那么被复制的对象的成员值也会发生变化。\n* 深度复制：复制的对象和源对象是独立的。\n<!--more-->\n* javascript中没有拷贝对象的方法，而js中传递引用数据基本都是传址方式。这就会遇到很多麻烦。比如：\n```javascript\nvar o = {\n    name: \"张三\",\n    age: 15\n}\nvar a = o;\na.age = 35;\nconsole.log(o.age); // 35\nconsole.log(a == o); // true\n```\n源数据被修改了，可实际需求不是这样的。\n\n#### JS中深度拷贝对象的方法\n##### 方法1\n```javascript\nfunction clone(src) {\n    function mixin(dest, source, copyFunc) {\n        var name, s, i, empty = {};\n        for(name in source){\n            s = source[name];\n            if(!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))){\n                dest[name] = copyFunc ? copyFunc(s) : s;\n            }\n        }\n        return dest;\n    }\n    if(!src || typeof src != \"object\" || Object.prototype.toString.call(src) === \"[object Function]\"){\n        return src;\n    }\n    if(src.nodeType && \"cloneNode\" in src){\n        return src.cloneNode(true);\n    }\n    if(src instanceof Date){\n        return new Date(src.getTime());\n    }\n    if(src instanceof RegExp){\n        return new RegExp(src);\n    }\n\n    var r, i, l;\n    if(src instanceof Array){\n        r = [];\n        for(i = 0, l = src.length; i < l; ++i){\n            if(i in src){\n                r.push(clone(src[i]));\n            }\n        }\n    } else {\n        r = src.constructor ? new src.constructor() : {};\n    }\n    return mixin(r, src, clone);\n}\n\nvar o = {\n    name: \"张三\",\n    age: 15\n}\nvar a = clone(o);\nconsole.log(a == o); // false，此时a是对象o的一个副本\n```\n##### 方法2\n```javascript\nvar a={name:'yy',age:26};\nvar b=new Object();\nb.name=a.name;\nb.age=a.age;\n```\n##### 方法3\n```javascript\nvar deepCopy= function(source) { \nvar result={};\nfor (var key in source) {\n      result[key] = typeof source[key]===’object’? deepCoyp(source[key]): source[key];\n   } \n   return result; \n}\n```\n##### 方法4\n使用jquery的extend\n","source":"_posts/javascript对象的深度拷贝.md","raw":"title: javascript对象的深度拷贝\ndate: 2015-10-26 15:03:01\ntags: javascript\ntoc: true\n---\n* 浅度复制：对于含有引用类型字段的对象来说，进行浅度复制意味着复制的对象和源对象存在这相同的引用。如果源对象的引用变量的值发生改变，那么被复制的对象的成员值也会发生变化。\n* 深度复制：复制的对象和源对象是独立的。\n<!--more-->\n* javascript中没有拷贝对象的方法，而js中传递引用数据基本都是传址方式。这就会遇到很多麻烦。比如：\n```javascript\nvar o = {\n    name: \"张三\",\n    age: 15\n}\nvar a = o;\na.age = 35;\nconsole.log(o.age); // 35\nconsole.log(a == o); // true\n```\n源数据被修改了，可实际需求不是这样的。\n\n#### JS中深度拷贝对象的方法\n##### 方法1\n```javascript\nfunction clone(src) {\n    function mixin(dest, source, copyFunc) {\n        var name, s, i, empty = {};\n        for(name in source){\n            s = source[name];\n            if(!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))){\n                dest[name] = copyFunc ? copyFunc(s) : s;\n            }\n        }\n        return dest;\n    }\n    if(!src || typeof src != \"object\" || Object.prototype.toString.call(src) === \"[object Function]\"){\n        return src;\n    }\n    if(src.nodeType && \"cloneNode\" in src){\n        return src.cloneNode(true);\n    }\n    if(src instanceof Date){\n        return new Date(src.getTime());\n    }\n    if(src instanceof RegExp){\n        return new RegExp(src);\n    }\n\n    var r, i, l;\n    if(src instanceof Array){\n        r = [];\n        for(i = 0, l = src.length; i < l; ++i){\n            if(i in src){\n                r.push(clone(src[i]));\n            }\n        }\n    } else {\n        r = src.constructor ? new src.constructor() : {};\n    }\n    return mixin(r, src, clone);\n}\n\nvar o = {\n    name: \"张三\",\n    age: 15\n}\nvar a = clone(o);\nconsole.log(a == o); // false，此时a是对象o的一个副本\n```\n##### 方法2\n```javascript\nvar a={name:'yy',age:26};\nvar b=new Object();\nb.name=a.name;\nb.age=a.age;\n```\n##### 方法3\n```javascript\nvar deepCopy= function(source) { \nvar result={};\nfor (var key in source) {\n      result[key] = typeof source[key]===’object’? deepCoyp(source[key]): source[key];\n   } \n   return result; \n}\n```\n##### 方法4\n使用jquery的extend\n","slug":"javascript对象的深度拷贝","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xho20015t0yj1q3b8kot","content":"<ul>\n<li>浅度复制：对于含有引用类型字段的对象来说，进行浅度复制意味着复制的对象和源对象存在这相同的引用。如果源对象的引用变量的值发生改变，那么被复制的对象的成员值也会发生变化。</li>\n<li>深度复制：复制的对象和源对象是独立的。<a id=\"more\"></a></li>\n<li>javascript中没有拷贝对象的方法，而js中传递引用数据基本都是传址方式。这就会遇到很多麻烦。比如：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"张三\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">15</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = o;</div><div class=\"line\">a.age = <span class=\"number\">35</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.age); <span class=\"comment\">// 35</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a == o); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>源数据被修改了，可实际需求不是这样的。</p>\n<h4 id=\"JS中深度拷贝对象的方法\">JS中深度拷贝对象的方法</h4><h5 id=\"方法1\">方法1</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">src</span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixin</span>(<span class=\"params\">dest, source, copyFunc</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> name, s, i, empty = &#123;&#125;;</div><div class=\"line\">        <span class=\"keyword\">for</span>(name <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">            s = source[name];</div><div class=\"line\">            <span class=\"keyword\">if</span>(!(name <span class=\"keyword\">in</span> dest) || (dest[name] !== s &amp;&amp; (!(name <span class=\"keyword\">in</span> empty) || empty[name] !== s)))&#123;</div><div class=\"line\">                dest[name] = copyFunc ? copyFunc(s) : s;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> dest;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!src || <span class=\"keyword\">typeof</span> src != <span class=\"string\">\"object\"</span> || <span class=\"built_in\">Object</span>.prototype.toString.call(src) === <span class=\"string\">\"[object Function]\"</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> src;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(src.nodeType &amp;&amp; <span class=\"string\">\"cloneNode\"</span> <span class=\"keyword\">in</span> src)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> src.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(src <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(src.getTime());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(src <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(src);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> r, i, l;</div><div class=\"line\">    <span class=\"keyword\">if</span>(src <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</div><div class=\"line\">        r = [];</div><div class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>, l = src.length; i &lt; l; ++i)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(i <span class=\"keyword\">in</span> src)&#123;</div><div class=\"line\">                r.push(clone(src[i]));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        r = src.constructor ? <span class=\"keyword\">new</span> src.constructor() : &#123;&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> mixin(r, src, clone);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"张三\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">15</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = clone(o);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a == o); <span class=\"comment\">// false，此时a是对象o的一个副本</span></div></pre></td></tr></table></figure>\n<h5 id=\"方法2\">方法2</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=&#123;<span class=\"attr\">name</span>:<span class=\"string\">'yy'</span>,<span class=\"attr\">age</span>:<span class=\"number\">26</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> b=<span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">b.name=a.name;</div><div class=\"line\">b.age=a.age;</div></pre></td></tr></table></figure>\n<h5 id=\"方法3\">方法3</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> deepCopy= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123; </div><div class=\"line\"><span class=\"keyword\">var</span> result=&#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) &#123;</div><div class=\"line\">      result[key] = <span class=\"keyword\">typeof</span> source[key]===’object’? deepCoyp(source[key]): source[key];</div><div class=\"line\">   &#125; </div><div class=\"line\">   <span class=\"keyword\">return</span> result; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"方法4\">方法4</h5><p>使用jquery的extend</p>\n","excerpt":"<ul>\n<li>浅度复制：对于含有引用类型字段的对象来说，进行浅度复制意味着复制的对象和源对象存在这相同的引用。如果源对象的引用变量的值发生改变，那么被复制的对象的成员值也会发生变化。</li>\n<li>深度复制：复制的对象和源对象是独立的。","more":"</li>\n<li>javascript中没有拷贝对象的方法，而js中传递引用数据基本都是传址方式。这就会遇到很多麻烦。比如：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"张三\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">15</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = o;</div><div class=\"line\">a.age = <span class=\"number\">35</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(o.age); <span class=\"comment\">// 35</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(a == o); <span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>源数据被修改了，可实际需求不是这样的。</p>\n<h4 id=\"JS中深度拷贝对象的方法\">JS中深度拷贝对象的方法</h4><h5 id=\"方法1\">方法1</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">clone</span>(<span class=\"params\">src</span>) </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mixin</span>(<span class=\"params\">dest, source, copyFunc</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> name, s, i, empty = &#123;&#125;;</div><div class=\"line\">        <span class=\"keyword\">for</span>(name <span class=\"keyword\">in</span> source)&#123;</div><div class=\"line\">            s = source[name];</div><div class=\"line\">            <span class=\"keyword\">if</span>(!(name <span class=\"keyword\">in</span> dest) || (dest[name] !== s &amp;&amp; (!(name <span class=\"keyword\">in</span> empty) || empty[name] !== s)))&#123;</div><div class=\"line\">                dest[name] = copyFunc ? copyFunc(s) : s;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> dest;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(!src || <span class=\"keyword\">typeof</span> src != <span class=\"string\">\"object\"</span> || <span class=\"built_in\">Object</span>.prototype.toString.call(src) === <span class=\"string\">\"[object Function]\"</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> src;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(src.nodeType &amp;&amp; <span class=\"string\">\"cloneNode\"</span> <span class=\"keyword\">in</span> src)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> src.cloneNode(<span class=\"literal\">true</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(src <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(src.getTime());</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span>(src <span class=\"keyword\">instanceof</span> <span class=\"built_in\">RegExp</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(src);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">var</span> r, i, l;</div><div class=\"line\">    <span class=\"keyword\">if</span>(src <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Array</span>)&#123;</div><div class=\"line\">        r = [];</div><div class=\"line\">        <span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>, l = src.length; i &lt; l; ++i)&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span>(i <span class=\"keyword\">in</span> src)&#123;</div><div class=\"line\">                r.push(clone(src[i]));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        r = src.constructor ? <span class=\"keyword\">new</span> src.constructor() : &#123;&#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> mixin(r, src, clone);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> o = &#123;</div><div class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">\"张三\"</span>,</div><div class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">15</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> a = clone(o);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(a == o); <span class=\"comment\">// false，此时a是对象o的一个副本</span></div></pre></td></tr></table></figure>\n<h5 id=\"方法2\">方法2</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a=&#123;<span class=\"attr\">name</span>:<span class=\"string\">'yy'</span>,<span class=\"attr\">age</span>:<span class=\"number\">26</span>&#125;;</div><div class=\"line\"><span class=\"keyword\">var</span> b=<span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">b.name=a.name;</div><div class=\"line\">b.age=a.age;</div></pre></td></tr></table></figure>\n<h5 id=\"方法3\">方法3</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> deepCopy= <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">source</span>) </span>&#123; </div><div class=\"line\"><span class=\"keyword\">var</span> result=&#123;&#125;;</div><div class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> source) &#123;</div><div class=\"line\">      result[key] = <span class=\"keyword\">typeof</span> source[key]===’object’? deepCoyp(source[key]): source[key];</div><div class=\"line\">   &#125; </div><div class=\"line\">   <span class=\"keyword\">return</span> result; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"方法4\">方法4</h5><p>使用jquery的extend</p>"},{"title":"javascript数组","date":"2015-10-03T11:16:37.000Z","toc":true,"_content":"#### 数组操作的方法\n* shift：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.shift(); //a：[2,3,4,5] b：1\n```\n<!--more-->\n* unshift：将参数添加到原数组开头，并返回数组的长度\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.unshift(-2,-1); //a：[-2,-1,1,2,3,4,5] b：7 \n//注：在IE6.0下测试返回值总为undefined，FF2.0下测试返回值为7，所以这个方法的返回值不可靠，需要用返回值时可用splice代替本方法来使用。\n```\n* pop：删除原数组最后一项，并返回删除元素的值；如果数组为空则返回undefined\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.pop(); //a：[1,2,3,4] b：5\n```\n* push：将参数添加到原数组末尾，并返回数组的长度\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.push(6,7); //a：[1,2,3,4,5,6,7] b：7\n```\n* concat：返回一个新数组，是将参数添加到原数组中构成的\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.concat(6,7); //a：[1,2,3,4,5] b：[1,2,3,4,5,6,7]\n```\n* splice(start,deleteCount,val1,val2,…)：从start位置开始删除deleteCount项，并从该位置起插入val1,val2,…\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.splice(2,2,7,8,9); //a：[1,2,7,8,9,5] b：[3,4] \nvar b = a.splice(0,1); //同shift \na.splice(0,0,-2,-1); var b = a.length; //同unshift \nvar b = a.splice(a.length-1,1); //同pop \na.splice(a.length,0,6,7); var b = a.length; //同push\n```\n* reverse：将数组反序\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.reverse(); //a：[5,4,3,2,1] b：[5,4,3,2,1]\n```\n* sort(orderfunction)：按指定的参数对数组进行排序\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.sort(); //a：[1,2,3,4,5] b：[1,2,3,4,5]\n```\n* slice(start,end)：返回从原数组中指定开始下标到结束下标之间的项组成的新数组\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.slice(2,5); //a：[1,2,3,4,5] b：[3,4,5]\n```\n* join(separator)：将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.join(\"|\"); //a：[1,2,3,4,5] b：\"1|2|3|4|5\"\n```\n* toSource()\n返回该对象的源代码;\n* toString()\n把数组转换为字符串，并返回结果;\n* toLocaleString()\n把数组转换为本地数组，并返回结果;\n* valueOf()\n返回数组对象的原始值;","source":"_posts/javascript数组.md","raw":"title: javascript数组\ndate: 2015-10-03 19:16:37\ntags: javascript\ntoc: true\n---\n#### 数组操作的方法\n* shift：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.shift(); //a：[2,3,4,5] b：1\n```\n<!--more-->\n* unshift：将参数添加到原数组开头，并返回数组的长度\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.unshift(-2,-1); //a：[-2,-1,1,2,3,4,5] b：7 \n//注：在IE6.0下测试返回值总为undefined，FF2.0下测试返回值为7，所以这个方法的返回值不可靠，需要用返回值时可用splice代替本方法来使用。\n```\n* pop：删除原数组最后一项，并返回删除元素的值；如果数组为空则返回undefined\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.pop(); //a：[1,2,3,4] b：5\n```\n* push：将参数添加到原数组末尾，并返回数组的长度\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.push(6,7); //a：[1,2,3,4,5,6,7] b：7\n```\n* concat：返回一个新数组，是将参数添加到原数组中构成的\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.concat(6,7); //a：[1,2,3,4,5] b：[1,2,3,4,5,6,7]\n```\n* splice(start,deleteCount,val1,val2,…)：从start位置开始删除deleteCount项，并从该位置起插入val1,val2,…\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.splice(2,2,7,8,9); //a：[1,2,7,8,9,5] b：[3,4] \nvar b = a.splice(0,1); //同shift \na.splice(0,0,-2,-1); var b = a.length; //同unshift \nvar b = a.splice(a.length-1,1); //同pop \na.splice(a.length,0,6,7); var b = a.length; //同push\n```\n* reverse：将数组反序\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.reverse(); //a：[5,4,3,2,1] b：[5,4,3,2,1]\n```\n* sort(orderfunction)：按指定的参数对数组进行排序\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.sort(); //a：[1,2,3,4,5] b：[1,2,3,4,5]\n```\n* slice(start,end)：返回从原数组中指定开始下标到结束下标之间的项组成的新数组\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.slice(2,5); //a：[1,2,3,4,5] b：[3,4,5]\n```\n* join(separator)：将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.join(\"|\"); //a：[1,2,3,4,5] b：\"1|2|3|4|5\"\n```\n* toSource()\n返回该对象的源代码;\n* toString()\n把数组转换为字符串，并返回结果;\n* toLocaleString()\n把数组转换为本地数组，并返回结果;\n* valueOf()\n返回数组对象的原始值;","slug":"javascript数组","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xho40017t0yj1oc61um0","content":"<h4 id=\"数组操作的方法\">数组操作的方法</h4><ul>\n<li>shift：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]; </div><div class=\"line\"><span class=\"keyword\">var</span> b = a.shift(); <span class=\"comment\">//a：[2,3,4,5] b：1</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<ul>\n<li><p>unshift：将参数添加到原数组开头，并返回数组的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]; </div><div class=\"line\"><span class=\"keyword\">var</span> b = a.unshift(<span class=\"number\">-2</span>,<span class=\"number\">-1</span>); <span class=\"comment\">//a：[-2,-1,1,2,3,4,5] b：7 </span></div><div class=\"line\"><span class=\"comment\">//注：在IE6.0下测试返回值总为undefined，FF2.0下测试返回值为7，所以这个方法的返回值不可靠，需要用返回值时可用splice代替本方法来使用。</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>pop：删除原数组最后一项，并返回删除元素的值；如果数组为空则返回undefined</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]; </div><div class=\"line\"><span class=\"keyword\">var</span> b = a.pop(); <span class=\"comment\">//a：[1,2,3,4] b：5</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>push：将参数添加到原数组末尾，并返回数组的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]; </div><div class=\"line\"><span class=\"keyword\">var</span> b = a.push(<span class=\"number\">6</span>,<span class=\"number\">7</span>); <span class=\"comment\">//a：[1,2,3,4,5,6,7] b：7</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>concat：返回一个新数组，是将参数添加到原数组中构成的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]; </div><div class=\"line\"><span class=\"keyword\">var</span> b = a.concat(<span class=\"number\">6</span>,<span class=\"number\">7</span>); <span class=\"comment\">//a：[1,2,3,4,5] b：[1,2,3,4,5,6,7]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>splice(start,deleteCount,val1,val2,…)：从start位置开始删除deleteCount项，并从该位置起插入val1,val2,…</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.splice(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>); <span class=\"comment\">//a：[1,2,7,8,9,5] b：[3,4] </span></div><div class=\"line\"><span class=\"keyword\">var</span> b = a.splice(<span class=\"number\">0</span>,<span class=\"number\">1</span>); <span class=\"comment\">//同shift </span></div><div class=\"line\">a.splice(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-2</span>,<span class=\"number\">-1</span>); <span class=\"keyword\">var</span> b = a.length; <span class=\"comment\">//同unshift </span></div><div class=\"line\"><span class=\"keyword\">var</span> b = a.splice(a.length<span class=\"number\">-1</span>,<span class=\"number\">1</span>); <span class=\"comment\">//同pop </span></div><div class=\"line\">a.splice(a.length,<span class=\"number\">0</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>); <span class=\"keyword\">var</span> b = a.length; <span class=\"comment\">//同push</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>reverse：将数组反序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.reverse(); <span class=\"comment\">//a：[5,4,3,2,1] b：[5,4,3,2,1]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>sort(orderfunction)：按指定的参数对数组进行排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.sort(); <span class=\"comment\">//a：[1,2,3,4,5] b：[1,2,3,4,5]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>slice(start,end)：返回从原数组中指定开始下标到结束下标之间的项组成的新数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.slice(<span class=\"number\">2</span>,<span class=\"number\">5</span>); <span class=\"comment\">//a：[1,2,3,4,5] b：[3,4,5]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>join(separator)：将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.join(<span class=\"string\">\"|\"</span>); <span class=\"comment\">//a：[1,2,3,4,5] b：\"1|2|3|4|5\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>toSource()<br>返回该对象的源代码;</p>\n</li>\n<li>toString()<br>把数组转换为字符串，并返回结果;</li>\n<li>toLocaleString()<br>把数组转换为本地数组，并返回结果;</li>\n<li>valueOf()<br>返回数组对象的原始值;</li>\n</ul>\n","excerpt":"<h4 id=\"数组操作的方法\">数组操作的方法</h4><ul>\n<li>shift：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]; </div><div class=\"line\"><span class=\"keyword\">var</span> b = a.shift(); <span class=\"comment\">//a：[2,3,4,5] b：1</span></div></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<ul>\n<li><p>unshift：将参数添加到原数组开头，并返回数组的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]; </div><div class=\"line\"><span class=\"keyword\">var</span> b = a.unshift(<span class=\"number\">-2</span>,<span class=\"number\">-1</span>); <span class=\"comment\">//a：[-2,-1,1,2,3,4,5] b：7 </span></div><div class=\"line\"><span class=\"comment\">//注：在IE6.0下测试返回值总为undefined，FF2.0下测试返回值为7，所以这个方法的返回值不可靠，需要用返回值时可用splice代替本方法来使用。</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>pop：删除原数组最后一项，并返回删除元素的值；如果数组为空则返回undefined</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]; </div><div class=\"line\"><span class=\"keyword\">var</span> b = a.pop(); <span class=\"comment\">//a：[1,2,3,4] b：5</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>push：将参数添加到原数组末尾，并返回数组的长度</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]; </div><div class=\"line\"><span class=\"keyword\">var</span> b = a.push(<span class=\"number\">6</span>,<span class=\"number\">7</span>); <span class=\"comment\">//a：[1,2,3,4,5,6,7] b：7</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>concat：返回一个新数组，是将参数添加到原数组中构成的</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]; </div><div class=\"line\"><span class=\"keyword\">var</span> b = a.concat(<span class=\"number\">6</span>,<span class=\"number\">7</span>); <span class=\"comment\">//a：[1,2,3,4,5] b：[1,2,3,4,5,6,7]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>splice(start,deleteCount,val1,val2,…)：从start位置开始删除deleteCount项，并从该位置起插入val1,val2,…</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.splice(<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>); <span class=\"comment\">//a：[1,2,7,8,9,5] b：[3,4] </span></div><div class=\"line\"><span class=\"keyword\">var</span> b = a.splice(<span class=\"number\">0</span>,<span class=\"number\">1</span>); <span class=\"comment\">//同shift </span></div><div class=\"line\">a.splice(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-2</span>,<span class=\"number\">-1</span>); <span class=\"keyword\">var</span> b = a.length; <span class=\"comment\">//同unshift </span></div><div class=\"line\"><span class=\"keyword\">var</span> b = a.splice(a.length<span class=\"number\">-1</span>,<span class=\"number\">1</span>); <span class=\"comment\">//同pop </span></div><div class=\"line\">a.splice(a.length,<span class=\"number\">0</span>,<span class=\"number\">6</span>,<span class=\"number\">7</span>); <span class=\"keyword\">var</span> b = a.length; <span class=\"comment\">//同push</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>reverse：将数组反序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.reverse(); <span class=\"comment\">//a：[5,4,3,2,1] b：[5,4,3,2,1]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>sort(orderfunction)：按指定的参数对数组进行排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.sort(); <span class=\"comment\">//a：[1,2,3,4,5] b：[1,2,3,4,5]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>slice(start,end)：返回从原数组中指定开始下标到结束下标之间的项组成的新数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.slice(<span class=\"number\">2</span>,<span class=\"number\">5</span>); <span class=\"comment\">//a：[1,2,3,4,5] b：[3,4,5]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>join(separator)：将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> b = a.join(<span class=\"string\">\"|\"</span>); <span class=\"comment\">//a：[1,2,3,4,5] b：\"1|2|3|4|5\"</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>toSource()<br>返回该对象的源代码;</p>\n</li>\n<li>toString()<br>把数组转换为字符串，并返回结果;</li>\n<li>toLocaleString()<br>把数组转换为本地数组，并返回结果;</li>\n<li>valueOf()<br>返回数组对象的原始值;</li>\n</ul>"},{"title":"javascript数组排序","date":"2015-10-30T07:03:01.000Z","toc":true,"_content":"##### 自己写逻辑代码进行处理\n>* 遍历数组，做必要的类型转换\n* 选择一种排序方式，快排，冒泡，选择等等完成排序\n<!--more-->\n\n##### 使用sort方法\n* sort方法默认生序排序，不会做数据类型转换，按照ascii字母顺序排序\n* sort方法会改变数组本身，不会生成新数组\n* 自定义规则排序，给sort传处理函数\n```javascript\nvar arr = ['2','7','6','11','18','8','9'];\narr.sort(function(x,y){\n\tfx = parseInt(x,10);\n\tfy = parseInt(y,10);\n\treturn fx>fy?1:-1;\n});\n//[\"2\", \"6\", \"7\", \"8\", \"9\", \"11\", \"18\"]\n```\n* 比较对象，可以写一个函数对对象进行比较\n```javascript\nvar compare = function(key){\n    return function(x, y){\n        var fx, fy;\n        if (typeof x === \"object\" && typeof y === \"object\" && x && y) {\n            fx = x[key];\n            fy = y[key];\n            if (fx === fy) {\n                return 0;\n            }\n            if (typeof fx === typeof fy) {\n                return fx > fy ? 1 : -1;\n            }\n            return typeof fx > typeof fy ? 1 : -1;\n        }\n        else {\n            throw (\"error..\");\n        }\n    }\n}\n```\n* 扩展，如果第一个指定的建相同，按照第二个进行排序\n```javascript\nvar compare = function(key,handler){\n    return function(x, y){\n        var fx, fy;\n        if (typeof x === \"object\" && typeof y === \"object\" && x && y) {\n            fx = x[key];\n            fy = y[key];\n            if (fx === fy) {\n                return typeof handler === 'function' ? handler(x,y):0;\n            }\n            if (typeof fx === typeof fy) {\n                return fx > fy ? 1 : -1;\n            }\n            return typeof fx > typeof fy ? 1 : -1;\n        }\n        else {\n            throw (\"error..\");\n        }\n    }\n}\n```","source":"_posts/javascript数组排序.md","raw":"title: javascript数组排序\ndate: 2015-10-30 15:03:01\ntags: javascript\ntoc: true\n---\n##### 自己写逻辑代码进行处理\n>* 遍历数组，做必要的类型转换\n* 选择一种排序方式，快排，冒泡，选择等等完成排序\n<!--more-->\n\n##### 使用sort方法\n* sort方法默认生序排序，不会做数据类型转换，按照ascii字母顺序排序\n* sort方法会改变数组本身，不会生成新数组\n* 自定义规则排序，给sort传处理函数\n```javascript\nvar arr = ['2','7','6','11','18','8','9'];\narr.sort(function(x,y){\n\tfx = parseInt(x,10);\n\tfy = parseInt(y,10);\n\treturn fx>fy?1:-1;\n});\n//[\"2\", \"6\", \"7\", \"8\", \"9\", \"11\", \"18\"]\n```\n* 比较对象，可以写一个函数对对象进行比较\n```javascript\nvar compare = function(key){\n    return function(x, y){\n        var fx, fy;\n        if (typeof x === \"object\" && typeof y === \"object\" && x && y) {\n            fx = x[key];\n            fy = y[key];\n            if (fx === fy) {\n                return 0;\n            }\n            if (typeof fx === typeof fy) {\n                return fx > fy ? 1 : -1;\n            }\n            return typeof fx > typeof fy ? 1 : -1;\n        }\n        else {\n            throw (\"error..\");\n        }\n    }\n}\n```\n* 扩展，如果第一个指定的建相同，按照第二个进行排序\n```javascript\nvar compare = function(key,handler){\n    return function(x, y){\n        var fx, fy;\n        if (typeof x === \"object\" && typeof y === \"object\" && x && y) {\n            fx = x[key];\n            fy = y[key];\n            if (fx === fy) {\n                return typeof handler === 'function' ? handler(x,y):0;\n            }\n            if (typeof fx === typeof fy) {\n                return fx > fy ? 1 : -1;\n            }\n            return typeof fx > typeof fy ? 1 : -1;\n        }\n        else {\n            throw (\"error..\");\n        }\n    }\n}\n```","slug":"javascript数组排序","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xho50019t0yj9tzuzacu","content":"<h5 id=\"自己写逻辑代码进行处理\">自己写逻辑代码进行处理</h5><blockquote>\n<ul>\n<li>遍历数组，做必要的类型转换</li>\n<li>选择一种排序方式，快排，冒泡，选择等等完成排序<a id=\"more\"></a>\n</li>\n</ul>\n</blockquote>\n<h5 id=\"使用sort方法\">使用sort方法</h5><ul>\n<li>sort方法默认生序排序，不会做数据类型转换，按照ascii字母顺序排序</li>\n<li>sort方法会改变数组本身，不会生成新数组</li>\n<li><p>自定义规则排序，给sort传处理函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'2'</span>,<span class=\"string\">'7'</span>,<span class=\"string\">'6'</span>,<span class=\"string\">'11'</span>,<span class=\"string\">'18'</span>,<span class=\"string\">'8'</span>,<span class=\"string\">'9'</span>];</div><div class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;</div><div class=\"line\">\tfx = <span class=\"built_in\">parseInt</span>(x,<span class=\"number\">10</span>);</div><div class=\"line\">\tfy = <span class=\"built_in\">parseInt</span>(y,<span class=\"number\">10</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> fx&gt;fy?<span class=\"number\">1</span>:<span class=\"number\">-1</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//[\"2\", \"6\", \"7\", \"8\", \"9\", \"11\", \"18\"]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>比较对象，可以写一个函数对对象进行比较</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> compare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> fx, fy;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> y === <span class=\"string\">\"object\"</span> &amp;&amp; x &amp;&amp; y) &#123;</div><div class=\"line\">            fx = x[key];</div><div class=\"line\">            fy = y[key];</div><div class=\"line\">            <span class=\"keyword\">if</span> (fx === fy) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fx === <span class=\"keyword\">typeof</span> fy) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> fx &gt; fy ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> fx &gt; <span class=\"keyword\">typeof</span> fy ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> (<span class=\"string\">\"error..\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>扩展，如果第一个指定的建相同，按照第二个进行排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> compare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,handler</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> fx, fy;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> y === <span class=\"string\">\"object\"</span> &amp;&amp; x &amp;&amp; y) &#123;</div><div class=\"line\">            fx = x[key];</div><div class=\"line\">            fy = y[key];</div><div class=\"line\">            <span class=\"keyword\">if</span> (fx === fy) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> handler === <span class=\"string\">'function'</span> ? handler(x,y):<span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fx === <span class=\"keyword\">typeof</span> fy) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> fx &gt; fy ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> fx &gt; <span class=\"keyword\">typeof</span> fy ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> (<span class=\"string\">\"error..\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"<h5 id=\"自己写逻辑代码进行处理\">自己写逻辑代码进行处理</h5><blockquote>\n<ul>\n<li>遍历数组，做必要的类型转换</li>\n<li>选择一种排序方式，快排，冒泡，选择等等完成排序","more":"</li>\n</ul>\n</blockquote>\n<h5 id=\"使用sort方法\">使用sort方法</h5><ul>\n<li>sort方法默认生序排序，不会做数据类型转换，按照ascii字母顺序排序</li>\n<li>sort方法会改变数组本身，不会生成新数组</li>\n<li><p>自定义规则排序，给sort传处理函数</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'2'</span>,<span class=\"string\">'7'</span>,<span class=\"string\">'6'</span>,<span class=\"string\">'11'</span>,<span class=\"string\">'18'</span>,<span class=\"string\">'8'</span>,<span class=\"string\">'9'</span>];</div><div class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x,y</span>)</span>&#123;</div><div class=\"line\">\tfx = <span class=\"built_in\">parseInt</span>(x,<span class=\"number\">10</span>);</div><div class=\"line\">\tfy = <span class=\"built_in\">parseInt</span>(y,<span class=\"number\">10</span>);</div><div class=\"line\">\t<span class=\"keyword\">return</span> fx&gt;fy?<span class=\"number\">1</span>:<span class=\"number\">-1</span>;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">//[\"2\", \"6\", \"7\", \"8\", \"9\", \"11\", \"18\"]</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>比较对象，可以写一个函数对对象进行比较</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> compare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> fx, fy;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> y === <span class=\"string\">\"object\"</span> &amp;&amp; x &amp;&amp; y) &#123;</div><div class=\"line\">            fx = x[key];</div><div class=\"line\">            fy = y[key];</div><div class=\"line\">            <span class=\"keyword\">if</span> (fx === fy) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fx === <span class=\"keyword\">typeof</span> fy) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> fx &gt; fy ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> fx &gt; <span class=\"keyword\">typeof</span> fy ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> (<span class=\"string\">\"error..\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>扩展，如果第一个指定的建相同，按照第二个进行排序</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> compare = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">key,handler</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x, y</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> fx, fy;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> x === <span class=\"string\">\"object\"</span> &amp;&amp; <span class=\"keyword\">typeof</span> y === <span class=\"string\">\"object\"</span> &amp;&amp; x &amp;&amp; y) &#123;</div><div class=\"line\">            fx = x[key];</div><div class=\"line\">            fy = y[key];</div><div class=\"line\">            <span class=\"keyword\">if</span> (fx === fy) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> handler === <span class=\"string\">'function'</span> ? handler(x,y):<span class=\"number\">0</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> fx === <span class=\"keyword\">typeof</span> fy) &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> fx &gt; fy ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">typeof</span> fx &gt; <span class=\"keyword\">typeof</span> fy ? <span class=\"number\">1</span> : <span class=\"number\">-1</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> (<span class=\"string\">\"error..\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></li>\n</ul>"},{"title":"javascript数组的深度拷贝","date":"2015-10-27T07:03:01.000Z","toc":true,"_content":"##### 方法一 slice方法\n```javascript\nvar arr = [\"One\",\"Two\",\"Three\"];\nvar arrtoo = arr.slice(0);\n```\n<!--more-->\n\n##### 方法二 concat方法\n```javascript\nvar arr = [\"One\",\"Two\",\"Three\"];\nvar arrtooo = arr.concat();\n```\n##### 方法三\n通过函数遍历赋值","source":"_posts/javascript数组的深度拷贝.md","raw":"title: javascript数组的深度拷贝\ndate: 2015-10-27 15:03:01\ntags: javascript\ntoc: true\n---\n##### 方法一 slice方法\n```javascript\nvar arr = [\"One\",\"Two\",\"Three\"];\nvar arrtoo = arr.slice(0);\n```\n<!--more-->\n\n##### 方法二 concat方法\n```javascript\nvar arr = [\"One\",\"Two\",\"Three\"];\nvar arrtooo = arr.concat();\n```\n##### 方法三\n通过函数遍历赋值","slug":"javascript数组的深度拷贝","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xho7001bt0yjjw10qu37","content":"<h5 id=\"方法一_slice方法\">方法一 slice方法</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">\"One\"</span>,<span class=\"string\">\"Two\"</span>,<span class=\"string\">\"Three\"</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arrtoo = arr.slice(<span class=\"number\">0</span>);</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h5 id=\"方法二_concat方法\">方法二 concat方法</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">\"One\"</span>,<span class=\"string\">\"Two\"</span>,<span class=\"string\">\"Three\"</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arrtooo = arr.concat();</div></pre></td></tr></table></figure>\n<h5 id=\"方法三\">方法三</h5><p>通过函数遍历赋值</p>\n","excerpt":"<h5 id=\"方法一_slice方法\">方法一 slice方法</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">\"One\"</span>,<span class=\"string\">\"Two\"</span>,<span class=\"string\">\"Three\"</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arrtoo = arr.slice(<span class=\"number\">0</span>);</div></pre></td></tr></table></figure>","more":"<h5 id=\"方法二_concat方法\">方法二 concat方法</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">\"One\"</span>,<span class=\"string\">\"Two\"</span>,<span class=\"string\">\"Three\"</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> arrtooo = arr.concat();</div></pre></td></tr></table></figure>\n<h5 id=\"方法三\">方法三</h5><p>通过函数遍历赋值</p>"},{"title":"javascript脚本执行对页面加载的影响","date":"2015-10-24T07:03:01.000Z","toc":true,"_content":"#### javascript加载会对页面加载产生什么影响呢？\n##### 我们在代码中添加几种脚本\n>* header中行内 无defer async，async，defer这三种\n* header中外部 无defer async，async，defer这三种\n* body中同上面，并且body中增加动态添加脚本，动态添加分为两类，直接在脚本中append，另一种是ajax异步去apped.\n脚本中都执行了一段计算的代码，执行起来耗时几秒\n<!--more-->\n\n##### 执行结果分析\n>* safri:\n\tasync defer分析同上一篇wiki说明，以后不再说这个\n\theader中任何脚本执行都会阻塞DOMContentLoaded\n\tbody内只有async的外部脚本不会阻塞DOMContentLoaded\n\t所有脚本都会阻塞loaded\n* firefox:\n\t应该说所有脚本都阻塞了DOMContentLoaded，因为body dy script这个动态添加的脚本是在ready后添加执行的，ready之后添加的脚本会阻塞loaded执行\n* chrome:\n\t和safri表现相同\n* IE7:\n\t脚本执行阻塞了document ready,也阻塞了loaded\n* IE8:\n\t动态脚本不会阻塞document ready, loaded\n* IE9:\n\t脚本加载阻塞DOMContentLoaded，也阻塞了loaded\n\n##### 动态加载的外部脚本\n* 不是动态添加的脚本，都会阻塞页DOMContentLoaded，在document ready后添加，会阻塞loaded，在window.onload后添加，是不会阻塞页面加载的\n\n##### 分析\n* 我们打开浏览器 chrome或者firefox,发现对于js脚本http请求之间还会有一段间隔时间，那么这个时间是怎么回事呢，我们发现它是脚本的执行时间，浏览器是单线程执行的，那么它无疑会阻塞我们的页面加载\n* 虽然不同的浏览器都可以并行的下载多个脚本（chrome 2个 firefox 4个，增加静态资源服务器还可以翻倍，ie8以上版本，js可以和图片一样并行加载），但是脚本的执行必须都是单线程的，这是浏览器限制。而且有的时候并行下载数量增加，并不一定会给性能带来好处，反而会影响页面性能，阻塞页面加载，雅虎工程师给出的建议是，2个是最佳的。\n* 我们发现无论脚本在什么时间段去创建都会阻塞window.onload。\n* 那么我们把脚本分成两类，一类是页面UI操作相关的，需要先执行。另一类是逻辑相关的我们把它们放在window.onload后，再去动态的添加脚本，也就是动态的创建script标签，去添加到页面上（动态添加这个脚本的好处还有，脚本可以跨域），那么就不会阻塞页面加载了,还有一种方式，使用setTimeout去加载动态的脚本，也可以达到无阻塞效果。\n* 动态加载带来了一个问题，它打破了常规执行的顺序执行，那么有依赖的代码怎么办，可能就会报一些undefined的错误了，解决办法还是有的，可以监听脚本的onload，ie下的onreadystatechange事件，再去执行有依赖的代码，或者是添加一个轮询方法，检测到变量存在的时候再去执行有依赖的代码。\n* 对于这些问题，requireJS 或者 seaJS都做好了依赖处理，并且脚本也都是动态的添加的，即解决了脚本阻塞的问题也解决了代码依赖的问题。\n* 至于动态的脚本放在header还是body中，这都无所谓了，因为阻塞的过程已经过去了，添加到哪里都不会产生影响。\n\n##### 无阻塞脚本的解决方案\n1. XHR Eval\n通过XHR动态读取脚本，使用Eval让它生效，但是现在已经不推荐使用Eval了，这个我们就不多分析了\n2. XHR Injection\n```javascript\nvar xhrObj = new XMLHttpRequest();\nxhrObj.onreadystatechange = function(){\n    if(xhrObj.readyState == 4){\n        var scriptElem = document.createElement(\"script\");\n        document.getElementsByTagName(\"head\")[0].appendChild(scriptElem);\n        scriptElem.text = xhrObj.responseText;\n    }\n};\nxhrObj.open(\"GET\", \"deal.js\", true);\nxhrObj.send(\"\");\n```\n* Script in Iframe\n\tiframe中创建script标签，不建议使用iframe，并且脚本不能跨域，不推荐使用，了解一下就行\n* Script DOM Element\n```javascript\nvar scriptElem = document.createElement(\"script\");\nscriptElem.src = \"http://domain.com/deal.js\";\ndocument.getElementByTagName(\"head\")[0].appendChild(scriptElem);\n```\n* Script Defer\n\tdeler的兼容性并不好，而且defer只会延迟执行脚本，但是最终还是会在DOMContentLoaded之前执行的\n* document.write Script Tag\n```javascript\ndocument.write(\"<script type='text/javascript' src='deal.js'></script>\");\n```\n只有在IE下能实现并行下载,了解就行\n动态的创建script的dom节点是最好的解决方案\n\n##### 动态脚本加载时机\n>动态脚本，动态创建script到底在什么时候加是最好的呢？\n如果放在onload之后，我们知道在DOMContentLoaded之后到onload之间，会有图片，iframe等资源加载时间，它们阻塞了window.onload,那么js对页面的交互时间也被推迟了，这不是我们想要了\n所以我们把它放在DOMContentLoaded之后,DOMContentLoaded兼容解决方案，看前面的知识","source":"_posts/javascript脚本执行对页面加载的影响.md","raw":"title: javascript脚本执行对页面加载的影响\ndate: 2015-10-24 15:03:01\ntags: javascript\ntoc: true\n---\n#### javascript加载会对页面加载产生什么影响呢？\n##### 我们在代码中添加几种脚本\n>* header中行内 无defer async，async，defer这三种\n* header中外部 无defer async，async，defer这三种\n* body中同上面，并且body中增加动态添加脚本，动态添加分为两类，直接在脚本中append，另一种是ajax异步去apped.\n脚本中都执行了一段计算的代码，执行起来耗时几秒\n<!--more-->\n\n##### 执行结果分析\n>* safri:\n\tasync defer分析同上一篇wiki说明，以后不再说这个\n\theader中任何脚本执行都会阻塞DOMContentLoaded\n\tbody内只有async的外部脚本不会阻塞DOMContentLoaded\n\t所有脚本都会阻塞loaded\n* firefox:\n\t应该说所有脚本都阻塞了DOMContentLoaded，因为body dy script这个动态添加的脚本是在ready后添加执行的，ready之后添加的脚本会阻塞loaded执行\n* chrome:\n\t和safri表现相同\n* IE7:\n\t脚本执行阻塞了document ready,也阻塞了loaded\n* IE8:\n\t动态脚本不会阻塞document ready, loaded\n* IE9:\n\t脚本加载阻塞DOMContentLoaded，也阻塞了loaded\n\n##### 动态加载的外部脚本\n* 不是动态添加的脚本，都会阻塞页DOMContentLoaded，在document ready后添加，会阻塞loaded，在window.onload后添加，是不会阻塞页面加载的\n\n##### 分析\n* 我们打开浏览器 chrome或者firefox,发现对于js脚本http请求之间还会有一段间隔时间，那么这个时间是怎么回事呢，我们发现它是脚本的执行时间，浏览器是单线程执行的，那么它无疑会阻塞我们的页面加载\n* 虽然不同的浏览器都可以并行的下载多个脚本（chrome 2个 firefox 4个，增加静态资源服务器还可以翻倍，ie8以上版本，js可以和图片一样并行加载），但是脚本的执行必须都是单线程的，这是浏览器限制。而且有的时候并行下载数量增加，并不一定会给性能带来好处，反而会影响页面性能，阻塞页面加载，雅虎工程师给出的建议是，2个是最佳的。\n* 我们发现无论脚本在什么时间段去创建都会阻塞window.onload。\n* 那么我们把脚本分成两类，一类是页面UI操作相关的，需要先执行。另一类是逻辑相关的我们把它们放在window.onload后，再去动态的添加脚本，也就是动态的创建script标签，去添加到页面上（动态添加这个脚本的好处还有，脚本可以跨域），那么就不会阻塞页面加载了,还有一种方式，使用setTimeout去加载动态的脚本，也可以达到无阻塞效果。\n* 动态加载带来了一个问题，它打破了常规执行的顺序执行，那么有依赖的代码怎么办，可能就会报一些undefined的错误了，解决办法还是有的，可以监听脚本的onload，ie下的onreadystatechange事件，再去执行有依赖的代码，或者是添加一个轮询方法，检测到变量存在的时候再去执行有依赖的代码。\n* 对于这些问题，requireJS 或者 seaJS都做好了依赖处理，并且脚本也都是动态的添加的，即解决了脚本阻塞的问题也解决了代码依赖的问题。\n* 至于动态的脚本放在header还是body中，这都无所谓了，因为阻塞的过程已经过去了，添加到哪里都不会产生影响。\n\n##### 无阻塞脚本的解决方案\n1. XHR Eval\n通过XHR动态读取脚本，使用Eval让它生效，但是现在已经不推荐使用Eval了，这个我们就不多分析了\n2. XHR Injection\n```javascript\nvar xhrObj = new XMLHttpRequest();\nxhrObj.onreadystatechange = function(){\n    if(xhrObj.readyState == 4){\n        var scriptElem = document.createElement(\"script\");\n        document.getElementsByTagName(\"head\")[0].appendChild(scriptElem);\n        scriptElem.text = xhrObj.responseText;\n    }\n};\nxhrObj.open(\"GET\", \"deal.js\", true);\nxhrObj.send(\"\");\n```\n* Script in Iframe\n\tiframe中创建script标签，不建议使用iframe，并且脚本不能跨域，不推荐使用，了解一下就行\n* Script DOM Element\n```javascript\nvar scriptElem = document.createElement(\"script\");\nscriptElem.src = \"http://domain.com/deal.js\";\ndocument.getElementByTagName(\"head\")[0].appendChild(scriptElem);\n```\n* Script Defer\n\tdeler的兼容性并不好，而且defer只会延迟执行脚本，但是最终还是会在DOMContentLoaded之前执行的\n* document.write Script Tag\n```javascript\ndocument.write(\"<script type='text/javascript' src='deal.js'></script>\");\n```\n只有在IE下能实现并行下载,了解就行\n动态的创建script的dom节点是最好的解决方案\n\n##### 动态脚本加载时机\n>动态脚本，动态创建script到底在什么时候加是最好的呢？\n如果放在onload之后，我们知道在DOMContentLoaded之后到onload之间，会有图片，iframe等资源加载时间，它们阻塞了window.onload,那么js对页面的交互时间也被推迟了，这不是我们想要了\n所以我们把它放在DOMContentLoaded之后,DOMContentLoaded兼容解决方案，看前面的知识","slug":"javascript脚本执行对页面加载的影响","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xho9001dt0yj1xlfdzab","content":"<h4 id=\"javascript加载会对页面加载产生什么影响呢？\">javascript加载会对页面加载产生什么影响呢？</h4><h5 id=\"我们在代码中添加几种脚本\">我们在代码中添加几种脚本</h5><blockquote>\n<ul>\n<li>header中行内 无defer async，async，defer这三种</li>\n<li>header中外部 无defer async，async，defer这三种</li>\n<li>body中同上面，并且body中增加动态添加脚本，动态添加分为两类，直接在脚本中append，另一种是ajax异步去apped.<br>脚本中都执行了一段计算的代码，执行起来耗时几秒<a id=\"more\"></a>\n</li>\n</ul>\n</blockquote>\n<h5 id=\"执行结果分析\">执行结果分析</h5><blockquote>\n<ul>\n<li>safri:<br>  async defer分析同上一篇wiki说明，以后不再说这个<br>  header中任何脚本执行都会阻塞DOMContentLoaded<br>  body内只有async的外部脚本不会阻塞DOMContentLoaded<br>  所有脚本都会阻塞loaded</li>\n<li>firefox:<br>  应该说所有脚本都阻塞了DOMContentLoaded，因为body dy script这个动态添加的脚本是在ready后添加执行的，ready之后添加的脚本会阻塞loaded执行</li>\n<li>chrome:<br>  和safri表现相同</li>\n<li>IE7:<br>  脚本执行阻塞了document ready,也阻塞了loaded</li>\n<li>IE8:<br>  动态脚本不会阻塞document ready, loaded</li>\n<li>IE9:<br>  脚本加载阻塞DOMContentLoaded，也阻塞了loaded</li>\n</ul>\n</blockquote>\n<h5 id=\"动态加载的外部脚本\">动态加载的外部脚本</h5><ul>\n<li>不是动态添加的脚本，都会阻塞页DOMContentLoaded，在document ready后添加，会阻塞loaded，在window.onload后添加，是不会阻塞页面加载的</li>\n</ul>\n<h5 id=\"分析\">分析</h5><ul>\n<li>我们打开浏览器 chrome或者firefox,发现对于js脚本http请求之间还会有一段间隔时间，那么这个时间是怎么回事呢，我们发现它是脚本的执行时间，浏览器是单线程执行的，那么它无疑会阻塞我们的页面加载</li>\n<li>虽然不同的浏览器都可以并行的下载多个脚本（chrome 2个 firefox 4个，增加静态资源服务器还可以翻倍，ie8以上版本，js可以和图片一样并行加载），但是脚本的执行必须都是单线程的，这是浏览器限制。而且有的时候并行下载数量增加，并不一定会给性能带来好处，反而会影响页面性能，阻塞页面加载，雅虎工程师给出的建议是，2个是最佳的。</li>\n<li>我们发现无论脚本在什么时间段去创建都会阻塞window.onload。</li>\n<li>那么我们把脚本分成两类，一类是页面UI操作相关的，需要先执行。另一类是逻辑相关的我们把它们放在window.onload后，再去动态的添加脚本，也就是动态的创建script标签，去添加到页面上（动态添加这个脚本的好处还有，脚本可以跨域），那么就不会阻塞页面加载了,还有一种方式，使用setTimeout去加载动态的脚本，也可以达到无阻塞效果。</li>\n<li>动态加载带来了一个问题，它打破了常规执行的顺序执行，那么有依赖的代码怎么办，可能就会报一些undefined的错误了，解决办法还是有的，可以监听脚本的onload，ie下的onreadystatechange事件，再去执行有依赖的代码，或者是添加一个轮询方法，检测到变量存在的时候再去执行有依赖的代码。</li>\n<li>对于这些问题，requireJS 或者 seaJS都做好了依赖处理，并且脚本也都是动态的添加的，即解决了脚本阻塞的问题也解决了代码依赖的问题。</li>\n<li>至于动态的脚本放在header还是body中，这都无所谓了，因为阻塞的过程已经过去了，添加到哪里都不会产生影响。</li>\n</ul>\n<h5 id=\"无阻塞脚本的解决方案\">无阻塞脚本的解决方案</h5><ol>\n<li>XHR Eval<br>通过XHR动态读取脚本，使用Eval让它生效，但是现在已经不推荐使用Eval了，这个我们就不多分析了</li>\n<li>XHR Injection<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhrObj = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">xhrObj.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(xhrObj.readyState == <span class=\"number\">4</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> scriptElem = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>].appendChild(scriptElem);</div><div class=\"line\">        scriptElem.text = xhrObj.responseText;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">xhrObj.open(<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"deal.js\"</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">xhrObj.send(<span class=\"string\">\"\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>Script in Iframe<br>  iframe中创建script标签，不建议使用iframe，并且脚本不能跨域，不推荐使用，了解一下就行</li>\n<li><p>Script DOM Element</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scriptElem = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">scriptElem.src = <span class=\"string\">\"http://domain.com/deal.js\"</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>].appendChild(scriptElem);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Script Defer<br>  deler的兼容性并不好，而且defer只会延迟执行脚本，但是最终还是会在DOMContentLoaded之前执行的</p>\n</li>\n<li>document.write Script Tag<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;script type='text/javascript' src='deal.js'&gt;&lt;/script&gt;\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>只有在IE下能实现并行下载,了解就行<br>动态的创建script的dom节点是最好的解决方案</p>\n<h5 id=\"动态脚本加载时机\">动态脚本加载时机</h5><blockquote>\n<p>动态脚本，动态创建script到底在什么时候加是最好的呢？<br>如果放在onload之后，我们知道在DOMContentLoaded之后到onload之间，会有图片，iframe等资源加载时间，它们阻塞了window.onload,那么js对页面的交互时间也被推迟了，这不是我们想要了<br>所以我们把它放在DOMContentLoaded之后,DOMContentLoaded兼容解决方案，看前面的知识</p>\n</blockquote>\n","excerpt":"<h4 id=\"javascript加载会对页面加载产生什么影响呢？\">javascript加载会对页面加载产生什么影响呢？</h4><h5 id=\"我们在代码中添加几种脚本\">我们在代码中添加几种脚本</h5><blockquote>\n<ul>\n<li>header中行内 无defer async，async，defer这三种</li>\n<li>header中外部 无defer async，async，defer这三种</li>\n<li>body中同上面，并且body中增加动态添加脚本，动态添加分为两类，直接在脚本中append，另一种是ajax异步去apped.<br>脚本中都执行了一段计算的代码，执行起来耗时几秒","more":"</li>\n</ul>\n</blockquote>\n<h5 id=\"执行结果分析\">执行结果分析</h5><blockquote>\n<ul>\n<li>safri:<br>  async defer分析同上一篇wiki说明，以后不再说这个<br>  header中任何脚本执行都会阻塞DOMContentLoaded<br>  body内只有async的外部脚本不会阻塞DOMContentLoaded<br>  所有脚本都会阻塞loaded</li>\n<li>firefox:<br>  应该说所有脚本都阻塞了DOMContentLoaded，因为body dy script这个动态添加的脚本是在ready后添加执行的，ready之后添加的脚本会阻塞loaded执行</li>\n<li>chrome:<br>  和safri表现相同</li>\n<li>IE7:<br>  脚本执行阻塞了document ready,也阻塞了loaded</li>\n<li>IE8:<br>  动态脚本不会阻塞document ready, loaded</li>\n<li>IE9:<br>  脚本加载阻塞DOMContentLoaded，也阻塞了loaded</li>\n</ul>\n</blockquote>\n<h5 id=\"动态加载的外部脚本\">动态加载的外部脚本</h5><ul>\n<li>不是动态添加的脚本，都会阻塞页DOMContentLoaded，在document ready后添加，会阻塞loaded，在window.onload后添加，是不会阻塞页面加载的</li>\n</ul>\n<h5 id=\"分析\">分析</h5><ul>\n<li>我们打开浏览器 chrome或者firefox,发现对于js脚本http请求之间还会有一段间隔时间，那么这个时间是怎么回事呢，我们发现它是脚本的执行时间，浏览器是单线程执行的，那么它无疑会阻塞我们的页面加载</li>\n<li>虽然不同的浏览器都可以并行的下载多个脚本（chrome 2个 firefox 4个，增加静态资源服务器还可以翻倍，ie8以上版本，js可以和图片一样并行加载），但是脚本的执行必须都是单线程的，这是浏览器限制。而且有的时候并行下载数量增加，并不一定会给性能带来好处，反而会影响页面性能，阻塞页面加载，雅虎工程师给出的建议是，2个是最佳的。</li>\n<li>我们发现无论脚本在什么时间段去创建都会阻塞window.onload。</li>\n<li>那么我们把脚本分成两类，一类是页面UI操作相关的，需要先执行。另一类是逻辑相关的我们把它们放在window.onload后，再去动态的添加脚本，也就是动态的创建script标签，去添加到页面上（动态添加这个脚本的好处还有，脚本可以跨域），那么就不会阻塞页面加载了,还有一种方式，使用setTimeout去加载动态的脚本，也可以达到无阻塞效果。</li>\n<li>动态加载带来了一个问题，它打破了常规执行的顺序执行，那么有依赖的代码怎么办，可能就会报一些undefined的错误了，解决办法还是有的，可以监听脚本的onload，ie下的onreadystatechange事件，再去执行有依赖的代码，或者是添加一个轮询方法，检测到变量存在的时候再去执行有依赖的代码。</li>\n<li>对于这些问题，requireJS 或者 seaJS都做好了依赖处理，并且脚本也都是动态的添加的，即解决了脚本阻塞的问题也解决了代码依赖的问题。</li>\n<li>至于动态的脚本放在header还是body中，这都无所谓了，因为阻塞的过程已经过去了，添加到哪里都不会产生影响。</li>\n</ul>\n<h5 id=\"无阻塞脚本的解决方案\">无阻塞脚本的解决方案</h5><ol>\n<li>XHR Eval<br>通过XHR动态读取脚本，使用Eval让它生效，但是现在已经不推荐使用Eval了，这个我们就不多分析了</li>\n<li>XHR Injection<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> xhrObj = <span class=\"keyword\">new</span> XMLHttpRequest();</div><div class=\"line\">xhrObj.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(xhrObj.readyState == <span class=\"number\">4</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> scriptElem = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">        <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>].appendChild(scriptElem);</div><div class=\"line\">        scriptElem.text = xhrObj.responseText;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\">xhrObj.open(<span class=\"string\">\"GET\"</span>, <span class=\"string\">\"deal.js\"</span>, <span class=\"literal\">true</span>);</div><div class=\"line\">xhrObj.send(<span class=\"string\">\"\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li>Script in Iframe<br>  iframe中创建script标签，不建议使用iframe，并且脚本不能跨域，不推荐使用，了解一下就行</li>\n<li><p>Script DOM Element</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> scriptElem = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">scriptElem.src = <span class=\"string\">\"http://domain.com/deal.js\"</span>;</div><div class=\"line\"><span class=\"built_in\">document</span>.getElementByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>].appendChild(scriptElem);</div></pre></td></tr></table></figure>\n</li>\n<li><p>Script Defer<br>  deler的兼容性并不好，而且defer只会延迟执行脚本，但是最终还是会在DOMContentLoaded之前执行的</p>\n</li>\n<li>document.write Script Tag<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">\"&lt;script type='text/javascript' src='deal.js'&gt;&lt;/script&gt;\"</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>只有在IE下能实现并行下载,了解就行<br>动态的创建script的dom节点是最好的解决方案</p>\n<h5 id=\"动态脚本加载时机\">动态脚本加载时机</h5><blockquote>\n<p>动态脚本，动态创建script到底在什么时候加是最好的呢？<br>如果放在onload之后，我们知道在DOMContentLoaded之后到onload之间，会有图片，iframe等资源加载时间，它们阻塞了window.onload,那么js对页面的交互时间也被推迟了，这不是我们想要了<br>所以我们把它放在DOMContentLoaded之后,DOMContentLoaded兼容解决方案，看前面的知识</p>\n</blockquote>"},{"title":"javascript跳出循环","date":"2015-10-17T06:46:49.000Z","toc":true,"_content":"##### break\n>for， while， switch的case分支，使用 break 跳出当前循环；\n<!--more-->\n```javascript\nfor(var i = 0;i<10;i++){\n    for(var j = 0;j<10;j++){\n        if(j>5){\n            break;\n        }\n        console.log(i+''+j); \n    }\n}\n\nvar sum = 0;\nwhile(1){\n    sum++;\n    if(sum>10){\n        break;\n    }\n}\n\nswitch(1){\n    case 1:\n        console.log(1);\n        break;\n    default:\n        console.log('default');\n}\n```\n##### 跳出for多重循环\n```javascript\nloop_i:\nfor(i=0; i<10; i++){\n    loop_j:\n    for(j=0; j<10; j++){\n        if(j>5){break;}\n        if(i===5){break loop_j;}\n        if(i===8){break loop_i;}\n        console.log('loop:'+i+''+j);\n    }\n}\nconsole.log('end:'+i+''+j);\ncontinue\n```\n##### 结束当前循环，继续下一次循环\n```javascript\nfor(var i = 0;i<10;i++){\n    for(var j = 0;j<10;j++){\n        if(j === 5){\n            continue;\n        }\n        console.log(i+''+j); \n    }\n}\n```\n##### return\n>跳出数组forEach循环,跳出jquery each循环(return只能出现在函数里面)\n```javascript\nvar arr = [1,2,3,4,5,6];\narr.forEach(function(item,index){\n    if(index > 3){\n        return false;\n    }\n    console.log(item);\n});\n\nvar arr = [1,2,3,4,5,6];\n$.each(arr,function(k,v){\n    if(k > 3){\n        return false;\n    }\n    console.log(v);\n});\n```","source":"_posts/javascript跳出循环.md","raw":"title: javascript跳出循环\ndate: 2015-10-17 14:46:49\ntags: javascript\ntoc: true\n---\n##### break\n>for， while， switch的case分支，使用 break 跳出当前循环；\n<!--more-->\n```javascript\nfor(var i = 0;i<10;i++){\n    for(var j = 0;j<10;j++){\n        if(j>5){\n            break;\n        }\n        console.log(i+''+j); \n    }\n}\n\nvar sum = 0;\nwhile(1){\n    sum++;\n    if(sum>10){\n        break;\n    }\n}\n\nswitch(1){\n    case 1:\n        console.log(1);\n        break;\n    default:\n        console.log('default');\n}\n```\n##### 跳出for多重循环\n```javascript\nloop_i:\nfor(i=0; i<10; i++){\n    loop_j:\n    for(j=0; j<10; j++){\n        if(j>5){break;}\n        if(i===5){break loop_j;}\n        if(i===8){break loop_i;}\n        console.log('loop:'+i+''+j);\n    }\n}\nconsole.log('end:'+i+''+j);\ncontinue\n```\n##### 结束当前循环，继续下一次循环\n```javascript\nfor(var i = 0;i<10;i++){\n    for(var j = 0;j<10;j++){\n        if(j === 5){\n            continue;\n        }\n        console.log(i+''+j); \n    }\n}\n```\n##### return\n>跳出数组forEach循环,跳出jquery each循环(return只能出现在函数里面)\n```javascript\nvar arr = [1,2,3,4,5,6];\narr.forEach(function(item,index){\n    if(index > 3){\n        return false;\n    }\n    console.log(item);\n});\n\nvar arr = [1,2,3,4,5,6];\n$.each(arr,function(k,v){\n    if(k > 3){\n        return false;\n    }\n    console.log(v);\n});\n```","slug":"javascript跳出循环","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhoa001ft0yjit3j5t65","content":"<h5 id=\"break\">break</h5><blockquote>\n<p>for， while， switch的case分支，使用 break 跳出当前循环；<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;j&lt;<span class=\"number\">10</span>;j++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(j&gt;<span class=\"number\">5</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i+<span class=\"string\">''</span>+j); </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</div><div class=\"line\">    sum++;</div><div class=\"line\">    <span class=\"keyword\">if</span>(sum&gt;<span class=\"number\">10</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">switch</span>(<span class=\"number\">1</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'default'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"跳出for多重循环\">跳出for多重循环</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">loop_i:</div><div class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++)&#123;</div><div class=\"line\">    <span class=\"attr\">loop_j</span>:</div><div class=\"line\">    <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">10</span>; j++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(j&gt;<span class=\"number\">5</span>)&#123;<span class=\"keyword\">break</span>;&#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(i===<span class=\"number\">5</span>)&#123;<span class=\"keyword\">break</span> loop_j;&#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(i===<span class=\"number\">8</span>)&#123;<span class=\"keyword\">break</span> loop_i;&#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'loop:'</span>+i+<span class=\"string\">''</span>+j);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end:'</span>+i+<span class=\"string\">''</span>+j);</div><div class=\"line\"><span class=\"keyword\">continue</span></div></pre></td></tr></table></figure>\n<h5 id=\"结束当前循环，继续下一次循环\">结束当前循环，继续下一次循环</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;j&lt;<span class=\"number\">10</span>;j++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(j === <span class=\"number\">5</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i+<span class=\"string\">''</span>+j); </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"return\">return</h5><blockquote>\n<p>跳出数组forEach循环,跳出jquery each循环(return只能出现在函数里面)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(index &gt; <span class=\"number\">3</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(item);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</div><div class=\"line\">$.each(arr,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k,v</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(k &gt; <span class=\"number\">3</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(v);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n</blockquote>\n","excerpt":"<h5 id=\"break\">break</h5><blockquote>\n<p>for， while， switch的case分支，使用 break 跳出当前循环；<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;j&lt;<span class=\"number\">10</span>;j++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(j&gt;<span class=\"number\">5</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i+<span class=\"string\">''</span>+j); </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">while</span>(<span class=\"number\">1</span>)&#123;</div><div class=\"line\">    sum++;</div><div class=\"line\">    <span class=\"keyword\">if</span>(sum&gt;<span class=\"number\">10</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">switch</span>(<span class=\"number\">1</span>)&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">break</span>;</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'default'</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"跳出for多重循环\">跳出for多重循环</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">loop_i:</div><div class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">10</span>; i++)&#123;</div><div class=\"line\">    <span class=\"attr\">loop_j</span>:</div><div class=\"line\">    <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>; j&lt;<span class=\"number\">10</span>; j++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(j&gt;<span class=\"number\">5</span>)&#123;<span class=\"keyword\">break</span>;&#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(i===<span class=\"number\">5</span>)&#123;<span class=\"keyword\">break</span> loop_j;&#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(i===<span class=\"number\">8</span>)&#123;<span class=\"keyword\">break</span> loop_i;&#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'loop:'</span>+i+<span class=\"string\">''</span>+j);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end:'</span>+i+<span class=\"string\">''</span>+j);</div><div class=\"line\"><span class=\"keyword\">continue</span></div></pre></td></tr></table></figure>\n<h5 id=\"结束当前循环，继续下一次循环\">结束当前循环，继续下一次循环</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;j&lt;<span class=\"number\">10</span>;j++)&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(j === <span class=\"number\">5</span>)&#123;</div><div class=\"line\">            <span class=\"keyword\">continue</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(i+<span class=\"string\">''</span>+j); </div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"return\">return</h5><blockquote>\n<p>跳出数组forEach循环,跳出jquery each循环(return只能出现在函数里面)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</div><div class=\"line\">arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(index &gt; <span class=\"number\">3</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(item);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>];</div><div class=\"line\">$.each(arr,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k,v</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(k &gt; <span class=\"number\">3</span>)&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(v);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n</blockquote>"},{"title":"javascript面向对象相关","date":"2015-11-21T07:03:01.000Z","toc":true,"_content":"#### 判断属性属于实力对象还是原型\n```javascript\nfunction check(name,obj){\n\treturn !(obj.hasOwnProperty) && (name in obj)\n}\n```\n\n<!--more-->\n\n#### for in循环\n>for in循环能够返回对象所有可枚举属性，无论实例中的，还是原型中的。即便是实例中重写了原型中不可枚举的属性，也会访问到。但是在IE8及以下存在bug,这样的属性不会被返回\n\n####继承\n```javascript\nfunction object(o){\n\tfunction F(){};\n\tF.prototype = o;\n\treturn new F();\n}\nfunction inheritPrototype(subType,superType){\n\tvar prototype = object(superType.prototype);\n\tprototype.constructor = subType;\n\tsubType.prototype = prototype;\n}\nfunction SuperType(name){\n\tthis.name = name;\n\tthis.color = [\"red\",\"blue\"];\n}\nSuperType.prototype.sayName = function(){\n\talert(this.name);\n};\nfunction SubType(name,age){\n\tSuperType.call(this,name);\n\tthis.age = age;\n}\ninheritPrototype(SubType,SuperType);\nSubType.prototype.sayAge = function(){\n\talert(this.age);\n};\n```\n>只调用了一次SuperType的构造函数，并且避免了在SubType.prototype上面创建不必要的属性，同时原型链还能保持不变。\n\n#### 单例模式\n```javascript\nvar singleton = function(){\n\tvar private = 0;\n\tfunction privateFunc(){\n\t\treturn false;\n\t}\n\treturn {\n\t\tpublic:true,\n\t\tpublicFunc:function(){\n\t\t\tprivate++;\n\t\t\treturn privateFunc();\n\t\t}\n\t}\n}();\n```","source":"_posts/javascript面向对象相关.md","raw":"title: javascript面向对象相关\ndate: 2015-11-21 15:03:01\ntags: javascript\ntoc: true\n---\n#### 判断属性属于实力对象还是原型\n```javascript\nfunction check(name,obj){\n\treturn !(obj.hasOwnProperty) && (name in obj)\n}\n```\n\n<!--more-->\n\n#### for in循环\n>for in循环能够返回对象所有可枚举属性，无论实例中的，还是原型中的。即便是实例中重写了原型中不可枚举的属性，也会访问到。但是在IE8及以下存在bug,这样的属性不会被返回\n\n####继承\n```javascript\nfunction object(o){\n\tfunction F(){};\n\tF.prototype = o;\n\treturn new F();\n}\nfunction inheritPrototype(subType,superType){\n\tvar prototype = object(superType.prototype);\n\tprototype.constructor = subType;\n\tsubType.prototype = prototype;\n}\nfunction SuperType(name){\n\tthis.name = name;\n\tthis.color = [\"red\",\"blue\"];\n}\nSuperType.prototype.sayName = function(){\n\talert(this.name);\n};\nfunction SubType(name,age){\n\tSuperType.call(this,name);\n\tthis.age = age;\n}\ninheritPrototype(SubType,SuperType);\nSubType.prototype.sayAge = function(){\n\talert(this.age);\n};\n```\n>只调用了一次SuperType的构造函数，并且避免了在SubType.prototype上面创建不必要的属性，同时原型链还能保持不变。\n\n#### 单例模式\n```javascript\nvar singleton = function(){\n\tvar private = 0;\n\tfunction privateFunc(){\n\t\treturn false;\n\t}\n\treturn {\n\t\tpublic:true,\n\t\tpublicFunc:function(){\n\t\t\tprivate++;\n\t\t\treturn privateFunc();\n\t\t}\n\t}\n}();\n```","slug":"javascript面向对象相关","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhob001ht0yj4u783k5o","content":"<h4 id=\"判断属性属于实力对象还是原型\">判断属性属于实力对象还是原型</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\">name,obj</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> !(obj.hasOwnProperty) &amp;&amp; (name <span class=\"keyword\">in</span> obj)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"for_in循环\">for in循环</h4><blockquote>\n<p>for in循环能够返回对象所有可枚举属性，无论实例中的，还是原型中的。即便是实例中重写了原型中不可枚举的属性，也会访问到。但是在IE8及以下存在bug,这样的属性不会被返回</p>\n</blockquote>\n<p>####继承<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">\tF.prototype = o;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType,superType</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> prototype = object(superType.prototype);</div><div class=\"line\">\tprototype.constructor = subType;</div><div class=\"line\">\tsubType.prototype = prototype;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.color = [<span class=\"string\">\"red\"</span>,<span class=\"string\">\"blue\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\">SuperType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\talert(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name,age</span>)</span>&#123;</div><div class=\"line\">\tSuperType.call(<span class=\"keyword\">this</span>,name);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\">inheritPrototype(SubType,SuperType);</div><div class=\"line\">SubType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\talert(<span class=\"keyword\">this</span>.age);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>只调用了一次SuperType的构造函数，并且避免了在SubType.prototype上面创建不必要的属性，同时原型链还能保持不变。</p>\n</blockquote>\n<h4 id=\"单例模式\">单例模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> singleton = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> private = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunc</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t<span class=\"attr\">public</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">\t\t<span class=\"attr\">publicFunc</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t\tprivate++;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> privateFunc();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;();</div></pre></td></tr></table></figure>","excerpt":"<h4 id=\"判断属性属于实力对象还是原型\">判断属性属于实力对象还是原型</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\">name,obj</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">return</span> !(obj.hasOwnProperty) &amp;&amp; (name <span class=\"keyword\">in</span> obj)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<h4 id=\"for_in循环\">for in循环</h4><blockquote>\n<p>for in循环能够返回对象所有可枚举属性，无论实例中的，还是原型中的。即便是实例中重写了原型中不可枚举的属性，也会访问到。但是在IE8及以下存在bug,这样的属性不会被返回</p>\n</blockquote>\n<p>####继承<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;;</div><div class=\"line\">\tF.prototype = o;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType,superType</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> prototype = object(superType.prototype);</div><div class=\"line\">\tprototype.constructor = subType;</div><div class=\"line\">\tsubType.prototype = prototype;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.color = [<span class=\"string\">\"red\"</span>,<span class=\"string\">\"blue\"</span>];</div><div class=\"line\">&#125;</div><div class=\"line\">SuperType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\talert(<span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name,age</span>)</span>&#123;</div><div class=\"line\">\tSuperType.call(<span class=\"keyword\">this</span>,name);</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">&#125;</div><div class=\"line\">inheritPrototype(SubType,SuperType);</div><div class=\"line\">SubType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\talert(<span class=\"keyword\">this</span>.age);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>只调用了一次SuperType的构造函数，并且避免了在SubType.prototype上面创建不必要的属性，同时原型链还能保持不变。</p>\n</blockquote>\n<h4 id=\"单例模式\">单例模式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> singleton = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> private = <span class=\"number\">0</span>;</div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">privateFunc</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t<span class=\"attr\">public</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">\t\t<span class=\"attr\">publicFunc</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t\tprivate++;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> privateFunc();</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;();</div></pre></td></tr></table></figure>"},{"title":"linux下创建服务","date":"2017-02-07T05:42:57.000Z","toc":true,"_content":"#### 概述\n我们通过在 /etc/init.d/ 目录下创建bash脚本，实现自定义服务，通过service命令，能够调用服务中的方法，通常一个服务存在 start stop restart status方法。\n<!--more-->\n\n#### 例如\ntest\n```bash\n#!/bin/bash\n# chkconfig: 2345 20 81\n# description: test\ncase \"$1\" in\n  start)\n  echo -n \"starting test:\"\n  echo \"OK\"\n  ;;\n  stop)\n  echo -n \"shutdown test:\"\n  echo \"OK\"\n  ;;\n  status)\n  echo \"test instance is running...\"\n  ;;\n  restart)\n  $0 stop\n  $0 start\n  ;;\n  *)\n  echo \"Usage:`basename $0` start|stop|status|restart\"\nesac\nexit $?\n```\n我们在 /etc/init.d/ 下面添加 test 脚本，然后给文件权限 sudo chmod -R 755, 之后我们就能够通过 \n* sudo service start \n* sudo service stop \n* sudo service restart \n* sudo service status \n* sudo service \n这些命令去调用我们的服务了\n\n#### 加入开机启动 chkconfig\n```bash\nusage:   chkconfig [--list] [--type <type>] [name]\n         chkconfig --add <name>\n         chkconfig --del <name>\n         chkconfig --override <name>\n         chkconfig [--level <levels>] [--type <type>] <name> <on|off|reset|resetpriorities>\n```\nsudo chkconfig --add test\nsudo chkconfig test on\n","source":"_posts/linux下创建服务.md","raw":"title: linux下创建服务\ndate: 2017-02-07 13:42:57\ntags: linux\ntoc: true\n---\n#### 概述\n我们通过在 /etc/init.d/ 目录下创建bash脚本，实现自定义服务，通过service命令，能够调用服务中的方法，通常一个服务存在 start stop restart status方法。\n<!--more-->\n\n#### 例如\ntest\n```bash\n#!/bin/bash\n# chkconfig: 2345 20 81\n# description: test\ncase \"$1\" in\n  start)\n  echo -n \"starting test:\"\n  echo \"OK\"\n  ;;\n  stop)\n  echo -n \"shutdown test:\"\n  echo \"OK\"\n  ;;\n  status)\n  echo \"test instance is running...\"\n  ;;\n  restart)\n  $0 stop\n  $0 start\n  ;;\n  *)\n  echo \"Usage:`basename $0` start|stop|status|restart\"\nesac\nexit $?\n```\n我们在 /etc/init.d/ 下面添加 test 脚本，然后给文件权限 sudo chmod -R 755, 之后我们就能够通过 \n* sudo service start \n* sudo service stop \n* sudo service restart \n* sudo service status \n* sudo service \n这些命令去调用我们的服务了\n\n#### 加入开机启动 chkconfig\n```bash\nusage:   chkconfig [--list] [--type <type>] [name]\n         chkconfig --add <name>\n         chkconfig --del <name>\n         chkconfig --override <name>\n         chkconfig [--level <levels>] [--type <type>] <name> <on|off|reset|resetpriorities>\n```\nsudo chkconfig --add test\nsudo chkconfig test on\n","slug":"linux下创建服务","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhod001jt0yjhblm7ryg","content":"<h4 id=\"概述\">概述</h4><p>我们通过在 /etc/init.d/ 目录下创建bash脚本，实现自定义服务，通过service命令，能够调用服务中的方法，通常一个服务存在 start stop restart status方法。<br><a id=\"more\"></a></p>\n<h4 id=\"例如\">例如</h4><p>test<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># chkconfig: 2345 20 81</span></div><div class=\"line\"><span class=\"comment\"># description: test</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></div><div class=\"line\">  start)</div><div class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"starting test:\"</span></div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"OK\"</span></div><div class=\"line\">  ;;</div><div class=\"line\">  stop)</div><div class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"shutdown test:\"</span></div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"OK\"</span></div><div class=\"line\">  ;;</div><div class=\"line\">  status)</div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"test instance is running...\"</span></div><div class=\"line\">  ;;</div><div class=\"line\">  restart)</div><div class=\"line\">  <span class=\"variable\">$0</span> stop</div><div class=\"line\">  <span class=\"variable\">$0</span> start</div><div class=\"line\">  ;;</div><div class=\"line\">  *)</div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"Usage:`basename <span class=\"variable\">$0</span>` start|stop|status|restart\"</span></div><div class=\"line\"><span class=\"keyword\">esac</span></div><div class=\"line\"><span class=\"built_in\">exit</span> $?</div></pre></td></tr></table></figure></p>\n<p>我们在 /etc/init.d/ 下面添加 test 脚本，然后给文件权限 sudo chmod -R 755, 之后我们就能够通过 </p>\n<ul>\n<li>sudo service start </li>\n<li>sudo service stop </li>\n<li>sudo service restart </li>\n<li>sudo service status </li>\n<li>sudo service<br>这些命令去调用我们的服务了</li>\n</ul>\n<h4 id=\"加入开机启动_chkconfig\">加入开机启动 chkconfig</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">usage:   chkconfig [--list] [--type &lt;<span class=\"built_in\">type</span>&gt;] [name]</div><div class=\"line\">         chkconfig --add &lt;name&gt;</div><div class=\"line\">         chkconfig --del &lt;name&gt;</div><div class=\"line\">         chkconfig --override &lt;name&gt;</div><div class=\"line\">         chkconfig [--level &lt;levels&gt;] [--type &lt;<span class=\"built_in\">type</span>&gt;] &lt;name&gt; &lt;on|off|reset|resetpriorities&gt;</div></pre></td></tr></table></figure>\n<p>sudo chkconfig –add test<br>sudo chkconfig test on</p>\n","excerpt":"<h4 id=\"概述\">概述</h4><p>我们通过在 /etc/init.d/ 目录下创建bash脚本，实现自定义服务，通过service命令，能够调用服务中的方法，通常一个服务存在 start stop restart status方法。<br>","more":"</p>\n<h4 id=\"例如\">例如</h4><p>test<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"><span class=\"comment\"># chkconfig: 2345 20 81</span></div><div class=\"line\"><span class=\"comment\"># description: test</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> <span class=\"keyword\">in</span></div><div class=\"line\">  start)</div><div class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"starting test:\"</span></div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"OK\"</span></div><div class=\"line\">  ;;</div><div class=\"line\">  stop)</div><div class=\"line\">  <span class=\"built_in\">echo</span> -n <span class=\"string\">\"shutdown test:\"</span></div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"OK\"</span></div><div class=\"line\">  ;;</div><div class=\"line\">  status)</div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"test instance is running...\"</span></div><div class=\"line\">  ;;</div><div class=\"line\">  restart)</div><div class=\"line\">  <span class=\"variable\">$0</span> stop</div><div class=\"line\">  <span class=\"variable\">$0</span> start</div><div class=\"line\">  ;;</div><div class=\"line\">  *)</div><div class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">\"Usage:`basename <span class=\"variable\">$0</span>` start|stop|status|restart\"</span></div><div class=\"line\"><span class=\"keyword\">esac</span></div><div class=\"line\"><span class=\"built_in\">exit</span> $?</div></pre></td></tr></table></figure></p>\n<p>我们在 /etc/init.d/ 下面添加 test 脚本，然后给文件权限 sudo chmod -R 755, 之后我们就能够通过 </p>\n<ul>\n<li>sudo service start </li>\n<li>sudo service stop </li>\n<li>sudo service restart </li>\n<li>sudo service status </li>\n<li>sudo service<br>这些命令去调用我们的服务了</li>\n</ul>\n<h4 id=\"加入开机启动_chkconfig\">加入开机启动 chkconfig</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">usage:   chkconfig [--list] [--type &lt;<span class=\"built_in\">type</span>&gt;] [name]</div><div class=\"line\">         chkconfig --add &lt;name&gt;</div><div class=\"line\">         chkconfig --del &lt;name&gt;</div><div class=\"line\">         chkconfig --override &lt;name&gt;</div><div class=\"line\">         chkconfig [--level &lt;levels&gt;] [--type &lt;<span class=\"built_in\">type</span>&gt;] &lt;name&gt; &lt;on|off|reset|resetpriorities&gt;</div></pre></td></tr></table></figure>\n<p>sudo chkconfig –add test<br>sudo chkconfig test on</p>"},{"title":"linux常用命令","date":"2015-10-28T07:03:01.000Z","toc":true,"_content":"#### 常用命令总结\n##### 修改环境变量\n```javascript\nsudo vim ~/.bashrc \n//加入类似环境变量\nexport PATH=${PATH}:/home/me/mongodb/mongodb-linux-x86_64-3.0.4/bin\n```\n<!--more-->\n\n##### 修改文件权限\n```javascript\nsudo chmod -R  777 /data/db\n```\n##### 软链接\n```javascript\nln -s \"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\" /usr/local/bin/subl\n```\n##### scp\n```javascript\nscp /data/a.txt user@1.1.1.1:/home\n```\n##### mongod\n```javascript\nmongod --dbpath /data/db  --fork --logpath=/data/db/work.log\n```\n##### nginx\n```javascript\n//启动ng\nsudo /usr/local/nginx/sbin/nginx\n//重启\n/usr/local/nginx/sbin/nginx -s reload\n//配置\n/usr/local/nginx/conf/nginx.conf\n配置转发\nupstream monitor_server {\n    server 111.111.111.111:80;\n        server 111.111.111.112:80;\n}\n \nserver\n{\n    listen 80;\n    server_name www.test.com;\n    location / {\n        proxy_redirect off;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://monitor_server;\n    }\n    access_log logs/www.test.com_access.log;\n}\n```\n##### cp\n```javascript\ncp -Rf /home/user1/* /root/temp/\n```\n##### 查看进程\n```javascript\nps -ef | grep node\n```\n##### 结束进程\n```javascript\nkill -9 [pid]\n```\n##### rsync\n```javascript\nrsync -av /User/* user@1.1.1.1:~/data\n```\n##### tail\n* 从指定点开始将文件写到标准输出\n* 经常使用 -f 查看日志\n##### node\n* 使用supervisor开启服务，不需要每次变更文件都重启\n* 使用forever执行文件，可以让node脚本一直运行","source":"_posts/linux常用命令.md","raw":"title: linux常用命令\ndate: 2015-10-28 15:03:01\ntags: linux\ntoc: true\n---\n#### 常用命令总结\n##### 修改环境变量\n```javascript\nsudo vim ~/.bashrc \n//加入类似环境变量\nexport PATH=${PATH}:/home/me/mongodb/mongodb-linux-x86_64-3.0.4/bin\n```\n<!--more-->\n\n##### 修改文件权限\n```javascript\nsudo chmod -R  777 /data/db\n```\n##### 软链接\n```javascript\nln -s \"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\" /usr/local/bin/subl\n```\n##### scp\n```javascript\nscp /data/a.txt user@1.1.1.1:/home\n```\n##### mongod\n```javascript\nmongod --dbpath /data/db  --fork --logpath=/data/db/work.log\n```\n##### nginx\n```javascript\n//启动ng\nsudo /usr/local/nginx/sbin/nginx\n//重启\n/usr/local/nginx/sbin/nginx -s reload\n//配置\n/usr/local/nginx/conf/nginx.conf\n配置转发\nupstream monitor_server {\n    server 111.111.111.111:80;\n        server 111.111.111.112:80;\n}\n \nserver\n{\n    listen 80;\n    server_name www.test.com;\n    location / {\n        proxy_redirect off;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://monitor_server;\n    }\n    access_log logs/www.test.com_access.log;\n}\n```\n##### cp\n```javascript\ncp -Rf /home/user1/* /root/temp/\n```\n##### 查看进程\n```javascript\nps -ef | grep node\n```\n##### 结束进程\n```javascript\nkill -9 [pid]\n```\n##### rsync\n```javascript\nrsync -av /User/* user@1.1.1.1:~/data\n```\n##### tail\n* 从指定点开始将文件写到标准输出\n* 经常使用 -f 查看日志\n##### node\n* 使用supervisor开启服务，不需要每次变更文件都重启\n* 使用forever执行文件，可以让node脚本一直运行","slug":"linux常用命令","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhog001lt0yjp8h8hbfm","content":"<h4 id=\"常用命令总结\">常用命令总结</h4><h5 id=\"修改环境变量\">修改环境变量</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim ~/.bashrc </div><div class=\"line\">//加入类似环境变量</div><div class=\"line\">export PATH=$&#123;PATH&#125;:/home/me/mongodb/mongodb-linux-x86_64-3.0.4/bin</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h5 id=\"修改文件权限\">修改文件权限</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod -R  <span class=\"number\">777</span> /data/db</div></pre></td></tr></table></figure>\n<h5 id=\"软链接\">软链接</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln -s <span class=\"string\">\"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\"</span> /usr/local/bin/subl</div></pre></td></tr></table></figure>\n<h5 id=\"scp\">scp</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp /data/a.txt user@<span class=\"number\">1.1</span><span class=\"number\">.1</span><span class=\"number\">.1</span>:<span class=\"regexp\">/home</span></div></pre></td></tr></table></figure>\n<h5 id=\"mongod\">mongod</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongod --dbpath /data/db  --fork --logpath=<span class=\"regexp\">/data/</span>db/work.log</div></pre></td></tr></table></figure>\n<h5 id=\"nginx\">nginx</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//启动ng</span></div><div class=\"line\">sudo /usr/local/nginx/sbin/nginx</div><div class=\"line\"><span class=\"comment\">//重启</span></div><div class=\"line\">/usr/local/nginx/sbin/nginx -s reload</div><div class=\"line\"><span class=\"comment\">//配置</span></div><div class=\"line\">/usr/local/nginx/conf/nginx.conf</div><div class=\"line\">配置转发</div><div class=\"line\">upstream monitor_server &#123;</div><div class=\"line\">    server <span class=\"number\">111.111</span><span class=\"number\">.111</span><span class=\"number\">.111</span>:<span class=\"number\">80</span>;</div><div class=\"line\">        server <span class=\"number\">111.111</span><span class=\"number\">.111</span><span class=\"number\">.112</span>:<span class=\"number\">80</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">server</div><div class=\"line\">&#123;</div><div class=\"line\">    listen <span class=\"number\">80</span>;</div><div class=\"line\">    server_name www.test.com;</div><div class=\"line\">    location / &#123;</div><div class=\"line\">        proxy_redirect off;</div><div class=\"line\">        proxy_set_header Host $host;</div><div class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</div><div class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class=\"line\">        proxy_pass http:<span class=\"comment\">//monitor_server;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    access_log logs/www.test.com_access.log;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"cp\">cp</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp -Rf /home/user1<span class=\"comment\">/* /root/temp/</span></div></pre></td></tr></table></figure>\n<h5 id=\"查看进程\">查看进程</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -ef | grep node</div></pre></td></tr></table></figure>\n<h5 id=\"结束进程\">结束进程</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill <span class=\"number\">-9</span> [pid]</div></pre></td></tr></table></figure>\n<h5 id=\"rsync\">rsync</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rsync -av /User<span class=\"comment\">/* user@1.1.1.1:~/data</span></div></pre></td></tr></table></figure>\n<h5 id=\"tail\">tail</h5><ul>\n<li>从指定点开始将文件写到标准输出</li>\n<li>经常使用 -f 查看日志<h5 id=\"node\">node</h5></li>\n<li>使用supervisor开启服务，不需要每次变更文件都重启</li>\n<li>使用forever执行文件，可以让node脚本一直运行</li>\n</ul>\n","excerpt":"<h4 id=\"常用命令总结\">常用命令总结</h4><h5 id=\"修改环境变量\">修改环境变量</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo vim ~/.bashrc </div><div class=\"line\">//加入类似环境变量</div><div class=\"line\">export PATH=$&#123;PATH&#125;:/home/me/mongodb/mongodb-linux-x86_64-3.0.4/bin</div></pre></td></tr></table></figure>","more":"<h5 id=\"修改文件权限\">修改文件权限</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod -R  <span class=\"number\">777</span> /data/db</div></pre></td></tr></table></figure>\n<h5 id=\"软链接\">软链接</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ln -s <span class=\"string\">\"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\"</span> /usr/local/bin/subl</div></pre></td></tr></table></figure>\n<h5 id=\"scp\">scp</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">scp /data/a.txt user@<span class=\"number\">1.1</span><span class=\"number\">.1</span><span class=\"number\">.1</span>:<span class=\"regexp\">/home</span></div></pre></td></tr></table></figure>\n<h5 id=\"mongod\">mongod</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongod --dbpath /data/db  --fork --logpath=<span class=\"regexp\">/data/</span>db/work.log</div></pre></td></tr></table></figure>\n<h5 id=\"nginx\">nginx</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//启动ng</span></div><div class=\"line\">sudo /usr/local/nginx/sbin/nginx</div><div class=\"line\"><span class=\"comment\">//重启</span></div><div class=\"line\">/usr/local/nginx/sbin/nginx -s reload</div><div class=\"line\"><span class=\"comment\">//配置</span></div><div class=\"line\">/usr/local/nginx/conf/nginx.conf</div><div class=\"line\">配置转发</div><div class=\"line\">upstream monitor_server &#123;</div><div class=\"line\">    server <span class=\"number\">111.111</span><span class=\"number\">.111</span><span class=\"number\">.111</span>:<span class=\"number\">80</span>;</div><div class=\"line\">        server <span class=\"number\">111.111</span><span class=\"number\">.111</span><span class=\"number\">.112</span>:<span class=\"number\">80</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"> </div><div class=\"line\">server</div><div class=\"line\">&#123;</div><div class=\"line\">    listen <span class=\"number\">80</span>;</div><div class=\"line\">    server_name www.test.com;</div><div class=\"line\">    location / &#123;</div><div class=\"line\">        proxy_redirect off;</div><div class=\"line\">        proxy_set_header Host $host;</div><div class=\"line\">        proxy_set_header X-Real-IP $remote_addr;</div><div class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class=\"line\">        proxy_pass http:<span class=\"comment\">//monitor_server;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    access_log logs/www.test.com_access.log;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"cp\">cp</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp -Rf /home/user1<span class=\"comment\">/* /root/temp/</span></div></pre></td></tr></table></figure>\n<h5 id=\"查看进程\">查看进程</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -ef | grep node</div></pre></td></tr></table></figure>\n<h5 id=\"结束进程\">结束进程</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">kill <span class=\"number\">-9</span> [pid]</div></pre></td></tr></table></figure>\n<h5 id=\"rsync\">rsync</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">rsync -av /User<span class=\"comment\">/* user@1.1.1.1:~/data</span></div></pre></td></tr></table></figure>\n<h5 id=\"tail\">tail</h5><ul>\n<li>从指定点开始将文件写到标准输出</li>\n<li>经常使用 -f 查看日志<h5 id=\"node\">node</h5></li>\n<li>使用supervisor开启服务，不需要每次变更文件都重启</li>\n<li>使用forever执行文件，可以让node脚本一直运行</li>\n</ul>"},{"title":"markdown语法","date":"2015-10-20T07:03:01.000Z","toc":true,"_content":"##### 段落\n>空行会把上下文分成段落，如果想插入\n标签，在行尾加上两个以上的空格，然后再回车\n<!--more-->\n\n##### 标题\n>1-6个`#`表示对应的1-6级标题\n或者利用在文本下面添加=或者－表示一级标题或者二级标题\n\n##### 区块\n>在文本前面添加`>`表示一个区块\n区块可以有级别，根据级别添加不同数量的`>`就可以\n区块内可以使用任意markdown语法\n\n##### 列表\n>使用`*`后面加上一个空格\n使用`+`后面加上一个空格\n使用`-`后面加上一个空格\n使用`1`数字，后面加上一个空格\n\n##### 代码块\n>使用四个空格或者一个tab就代表代码块\n\n##### 分割线\n>用三个或以上的星号,减号,底线,星号之间可以存在空格\n\n##### 链接\n>行内式 参考式\n* 行内式：\n`[`括起来`]`\n链接测试链接 行内.\n链接 没有title.\n* 参考式：\n链接\ntitle(可以用单引号、双引号或是括号包着)\n\n##### 强调\n>`* *` `_ _`包着表示强调\n`** **` `__ __`包着表示强调\n如果在文字前面加入普通的`*`需要使用`\\`转义\n\n##### 代码\n>行内代码使用 \\` \\` 包起来\n如果要在行内使用反引号 \\` 可以使用多个反引号包起这段代码\n多行代码 可以使用三个 \\` 开始 再加上 代码类型 例如javascript 再以三个 \\` 结束\n\n##### 图片\n>行内式：`![图片描述](/images/bg/img1.jpg \"title\")`\n参考式：`![图片描述][id]`\n\n##### 自动链接\n>`http://123.com/`\n`\\`转义\n\n##### 需要转义的字符\n```javascript\n\\   反斜线\n`   反引号\n*   星号\n_   底线\n{}  花括号\n[]  方括号\n()  括号\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   惊叹号\n```\n","source":"_posts/markdown语法.md","raw":"title: markdown语法\ndate: 2015-10-20 15:03:01\ntags: javascript\ntoc: true\n---\n##### 段落\n>空行会把上下文分成段落，如果想插入\n标签，在行尾加上两个以上的空格，然后再回车\n<!--more-->\n\n##### 标题\n>1-6个`#`表示对应的1-6级标题\n或者利用在文本下面添加=或者－表示一级标题或者二级标题\n\n##### 区块\n>在文本前面添加`>`表示一个区块\n区块可以有级别，根据级别添加不同数量的`>`就可以\n区块内可以使用任意markdown语法\n\n##### 列表\n>使用`*`后面加上一个空格\n使用`+`后面加上一个空格\n使用`-`后面加上一个空格\n使用`1`数字，后面加上一个空格\n\n##### 代码块\n>使用四个空格或者一个tab就代表代码块\n\n##### 分割线\n>用三个或以上的星号,减号,底线,星号之间可以存在空格\n\n##### 链接\n>行内式 参考式\n* 行内式：\n`[`括起来`]`\n链接测试链接 行内.\n链接 没有title.\n* 参考式：\n链接\ntitle(可以用单引号、双引号或是括号包着)\n\n##### 强调\n>`* *` `_ _`包着表示强调\n`** **` `__ __`包着表示强调\n如果在文字前面加入普通的`*`需要使用`\\`转义\n\n##### 代码\n>行内代码使用 \\` \\` 包起来\n如果要在行内使用反引号 \\` 可以使用多个反引号包起这段代码\n多行代码 可以使用三个 \\` 开始 再加上 代码类型 例如javascript 再以三个 \\` 结束\n\n##### 图片\n>行内式：`![图片描述](/images/bg/img1.jpg \"title\")`\n参考式：`![图片描述][id]`\n\n##### 自动链接\n>`http://123.com/`\n`\\`转义\n\n##### 需要转义的字符\n```javascript\n\\   反斜线\n`   反引号\n*   星号\n_   底线\n{}  花括号\n[]  方括号\n()  括号\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   惊叹号\n```\n","slug":"markdown语法","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhoi001ot0yjj3dirv1h","content":"<h5 id=\"段落\">段落</h5><blockquote>\n<p>空行会把上下文分成段落，如果想插入<br>标签，在行尾加上两个以上的空格，然后再回车<br><a id=\"more\"></a></p>\n</blockquote>\n<h5 id=\"标题\">标题</h5><blockquote>\n<p>1-6个<code>#</code>表示对应的1-6级标题<br>或者利用在文本下面添加=或者－表示一级标题或者二级标题</p>\n</blockquote>\n<h5 id=\"区块\">区块</h5><blockquote>\n<p>在文本前面添加<code>&gt;</code>表示一个区块<br>区块可以有级别，根据级别添加不同数量的<code>&gt;</code>就可以<br>区块内可以使用任意markdown语法</p>\n</blockquote>\n<h5 id=\"列表\">列表</h5><blockquote>\n<p>使用<code>*</code>后面加上一个空格<br>使用<code>+</code>后面加上一个空格<br>使用<code>-</code>后面加上一个空格<br>使用<code>1</code>数字，后面加上一个空格</p>\n</blockquote>\n<h5 id=\"代码块\">代码块</h5><blockquote>\n<p>使用四个空格或者一个tab就代表代码块</p>\n</blockquote>\n<h5 id=\"分割线\">分割线</h5><blockquote>\n<p>用三个或以上的星号,减号,底线,星号之间可以存在空格</p>\n</blockquote>\n<h5 id=\"链接\">链接</h5><blockquote>\n<p>行内式 参考式</p>\n<ul>\n<li>行内式：<br><code>[</code>括起来<code>]</code><br>链接测试链接 行内.<br>链接 没有title.</li>\n<li>参考式：<br>链接<br>title(可以用单引号、双引号或是括号包着)</li>\n</ul>\n</blockquote>\n<h5 id=\"强调\">强调</h5><blockquote>\n<p><code>* *</code> <code>_ _</code>包着表示强调<br><code>** **</code> <code>__ __</code>包着表示强调<br>如果在文字前面加入普通的<code>*</code>需要使用<code>\\</code>转义</p>\n</blockquote>\n<h5 id=\"代码\">代码</h5><blockquote>\n<p>行内代码使用 ` ` 包起来<br>如果要在行内使用反引号 ` 可以使用多个反引号包起这段代码<br>多行代码 可以使用三个 ` 开始 再加上 代码类型 例如javascript 再以三个 ` 结束</p>\n</blockquote>\n<h5 id=\"图片\">图片</h5><blockquote>\n<p>行内式：<code>![图片描述](/images/bg/img1.jpg &quot;title&quot;)</code><br>参考式：<code>![图片描述][id]</code></p>\n</blockquote>\n<h5 id=\"自动链接\">自动链接</h5><blockquote>\n<p><code>http://123.com/</code><br><code>\\</code>转义</p>\n</blockquote>\n<h5 id=\"需要转义的字符\">需要转义的字符</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\   反斜线</div><div class=\"line\"><span class=\"string\">`   反引号</span></div><div class=\"line\">*   星号</div><div class=\"line\">_   底线</div><div class=\"line\">&#123;&#125;  花括号</div><div class=\"line\">[]  方括号</div><div class=\"line\">()  括号</div><div class=\"line\">#   井字号</div><div class=\"line\">+   加号</div><div class=\"line\">-   减号</div><div class=\"line\">.   英文句点</div><div class=\"line\">!   惊叹号</div></pre></td></tr></table></figure>\n","excerpt":"<h5 id=\"段落\">段落</h5><blockquote>\n<p>空行会把上下文分成段落，如果想插入<br>标签，在行尾加上两个以上的空格，然后再回车<br>","more":"</p>\n</blockquote>\n<h5 id=\"标题\">标题</h5><blockquote>\n<p>1-6个<code>#</code>表示对应的1-6级标题<br>或者利用在文本下面添加=或者－表示一级标题或者二级标题</p>\n</blockquote>\n<h5 id=\"区块\">区块</h5><blockquote>\n<p>在文本前面添加<code>&gt;</code>表示一个区块<br>区块可以有级别，根据级别添加不同数量的<code>&gt;</code>就可以<br>区块内可以使用任意markdown语法</p>\n</blockquote>\n<h5 id=\"列表\">列表</h5><blockquote>\n<p>使用<code>*</code>后面加上一个空格<br>使用<code>+</code>后面加上一个空格<br>使用<code>-</code>后面加上一个空格<br>使用<code>1</code>数字，后面加上一个空格</p>\n</blockquote>\n<h5 id=\"代码块\">代码块</h5><blockquote>\n<p>使用四个空格或者一个tab就代表代码块</p>\n</blockquote>\n<h5 id=\"分割线\">分割线</h5><blockquote>\n<p>用三个或以上的星号,减号,底线,星号之间可以存在空格</p>\n</blockquote>\n<h5 id=\"链接\">链接</h5><blockquote>\n<p>行内式 参考式</p>\n<ul>\n<li>行内式：<br><code>[</code>括起来<code>]</code><br>链接测试链接 行内.<br>链接 没有title.</li>\n<li>参考式：<br>链接<br>title(可以用单引号、双引号或是括号包着)</li>\n</ul>\n</blockquote>\n<h5 id=\"强调\">强调</h5><blockquote>\n<p><code>* *</code> <code>_ _</code>包着表示强调<br><code>** **</code> <code>__ __</code>包着表示强调<br>如果在文字前面加入普通的<code>*</code>需要使用<code>\\</code>转义</p>\n</blockquote>\n<h5 id=\"代码\">代码</h5><blockquote>\n<p>行内代码使用 ` ` 包起来<br>如果要在行内使用反引号 ` 可以使用多个反引号包起这段代码<br>多行代码 可以使用三个 ` 开始 再加上 代码类型 例如javascript 再以三个 ` 结束</p>\n</blockquote>\n<h5 id=\"图片\">图片</h5><blockquote>\n<p>行内式：<code>![图片描述](/images/bg/img1.jpg &quot;title&quot;)</code><br>参考式：<code>![图片描述][id]</code></p>\n</blockquote>\n<h5 id=\"自动链接\">自动链接</h5><blockquote>\n<p><code>http://123.com/</code><br><code>\\</code>转义</p>\n</blockquote>\n<h5 id=\"需要转义的字符\">需要转义的字符</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">\\   反斜线</div><div class=\"line\"><span class=\"string\">`   反引号</div><div class=\"line\">*   星号</div><div class=\"line\">_   底线</div><div class=\"line\">&#123;&#125;  花括号</div><div class=\"line\">[]  方括号</div><div class=\"line\">()  括号</div><div class=\"line\">#   井字号</div><div class=\"line\">+   加号</div><div class=\"line\">-   减号</div><div class=\"line\">.   英文句点</div><div class=\"line\">!   惊叹号</span></div></pre></td></tr></table></figure>"},{"title":"mongodb","date":"2016-10-31T11:57:13.000Z","toc":true,"_content":"#### 环境\n* centeros\n\n#### 下载\n```javascript\nwget http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.10.tgz\n```\n\n#### 解压\n```javascript\nsudo tar -zxvf mongodb-linux-x86_64-3.2.10.tgz \n```\n\n<!--more-->\n#### 加入PATH\n```javascript\ncd mongodb-linux-x86_64-3.2.10\nexport PATH=/home/q/mongodb-linux-x86_64-3.2.10/bin:$PATH\n```\n\n#### 创建基础文件\n```javascript\nsudo mkdir -p data/db\nsudo mkdir logs\nsudo vim ./bin/mongodb.conf\n\n#加入内容\nport=27017\ndbpath=/home/q/mongodb-linux-x86_64-3.2.10/data/db\nlogpath=/home/q/mongodb-linux-x86_64-3.2.10/logs/db.logs\nlogappend=true\n```\n\n#### 启动服务\n```javascript\nsudo mongod -config /home/q/mongodb-linux-x86_64-3.2.10/bin/mongodb.conf  --fork --auth\n```\n\n#### 连接数据库\n```javascript\nmongo\n```\n\n#### 添加用户\n```javascript\nuse admin\ndb.createUser(\n  {\n    user:\"superuser\",\n    pwd:\"pwd\",\n    roles:[\"root\"]\n  }\n)\n```\n\n#### 认证\n```javascript\nuse admin\ndb.auth('superuser','pwd')\n```\n\n#### 添加用户\n```javascript\ndb.createUser(\n   {\n     user: \"zhuo.wu\",\n     pwd: \"zhuo.wu\",\n     roles: [ \"readWrite\", \"dbAdmin\" ]\n   }\n)\n```\n\n#### 查看用户\n```javascript\nshow users\n```\n\n#### 创建数据库\n```javascript\nuse testDB\n```\n\n#### 创建集合\n```javascript\ndb.test.insert({'k':'123'})\nshow dbs\ndb.test.find()\n```\n\n#### 删除集合\n```javascript\ndb.test.drop()\n```\n\n#### 删除数据库\n```javascript\ndb.dropDatabase()\n```\n\n#### 数据库备份\n```javascript\nsudo mongodump -u=superuser -p=pwd\n#mongodump -h dbhost -d dbname -o dbdirectory\n```\n\n#### 数据库恢复\n```javascript\nsudo mongodump -u=superuser -p=pwd\n#mongorestore -h dbhost -d dbname --directoryperdb dbdirectory\n```\n\n#### 定时备份数据库\n* 备份目录\n```javascript\nsudo mkdir -p /home/mongo/temp && sudo chmod -R 777 /home/mongo/temp\nsudo mkdir -p /home/mongo/all && sudo chmod -R 777 /home/mongo/all\n```\n\n* 备份脚本\nsudo vim /home/schedule/mongo.sh\n```javascript\n#!/bin/sh\nuser=superuser\npasswprd=pwd\ndeldays=2\nbackdate=`date +%Y-%m-%d`\nbackname=\"mg_$backdate.tar.gz\"\nmongodump=/home/q/mongodb-linux-x86_64-3.2.10/bin/mongodump\ntemp=/home/mongo/temp\nall=/home/mongo/all\ncd $temp\nrm -rf $temp/*\nmkdir -p $temp/$backdate\n$mongodump -u $user -p $passwprd -o $temp/$backdate\ntar -zcvf $all/$backname $temp/$backdate\nfind $all/ -mtime +$deldays -delete\n```\n\n* 修改权限\n```javascript\nsudo chmod -R 777 /home/schedule/mongo.sh\n```\n\n* 定时任务\nsudo vim /etc/crontab\n```javascript\n40 18 * * * root /home/schedule/mongo.sh\n```\n\n* 重启定时任务\n```javascript\nsudo /etc/rc.d/init.d/crond restart\n```\n\n* 开机启动\n```javascript\nsudo chkconfig crond on\n```\n\n* 启动服务\n```javascript\nsudo service crond start\n```\n\n\n#### 关闭数据库\n```javascript\nuse admin\ndb.auth('superuser','pwd')\ndb.shutdownServer()\n#or\ndb.adminCommand({shutdown : 1, force : true})\n#or\ndb.shutdownServer({force : true})\n```\n\n#### 常见问题\n* 数据库非正常关闭lock\n```javascript\nsudo rm -rf /home/q/mongodb-linux-x86_64-3.2.10/data/db/mongod.lock\nsudo mongod --dbpath /home/q/mongodb-linux-x86_64-3.2.10/data/db --repair\nsudo ./mongod --dbpath /home/q/mongodb-linux-x86_64-3.2.10/data/db\n```\n\n#### 推荐数据库软件\n* Mac: Toad (app store)","source":"_posts/mongodb.md","raw":"title: mongodb\ndate: 2016-10-31 19:57:13\ntags: linux\ntoc: true\n---\n#### 环境\n* centeros\n\n#### 下载\n```javascript\nwget http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.10.tgz\n```\n\n#### 解压\n```javascript\nsudo tar -zxvf mongodb-linux-x86_64-3.2.10.tgz \n```\n\n<!--more-->\n#### 加入PATH\n```javascript\ncd mongodb-linux-x86_64-3.2.10\nexport PATH=/home/q/mongodb-linux-x86_64-3.2.10/bin:$PATH\n```\n\n#### 创建基础文件\n```javascript\nsudo mkdir -p data/db\nsudo mkdir logs\nsudo vim ./bin/mongodb.conf\n\n#加入内容\nport=27017\ndbpath=/home/q/mongodb-linux-x86_64-3.2.10/data/db\nlogpath=/home/q/mongodb-linux-x86_64-3.2.10/logs/db.logs\nlogappend=true\n```\n\n#### 启动服务\n```javascript\nsudo mongod -config /home/q/mongodb-linux-x86_64-3.2.10/bin/mongodb.conf  --fork --auth\n```\n\n#### 连接数据库\n```javascript\nmongo\n```\n\n#### 添加用户\n```javascript\nuse admin\ndb.createUser(\n  {\n    user:\"superuser\",\n    pwd:\"pwd\",\n    roles:[\"root\"]\n  }\n)\n```\n\n#### 认证\n```javascript\nuse admin\ndb.auth('superuser','pwd')\n```\n\n#### 添加用户\n```javascript\ndb.createUser(\n   {\n     user: \"zhuo.wu\",\n     pwd: \"zhuo.wu\",\n     roles: [ \"readWrite\", \"dbAdmin\" ]\n   }\n)\n```\n\n#### 查看用户\n```javascript\nshow users\n```\n\n#### 创建数据库\n```javascript\nuse testDB\n```\n\n#### 创建集合\n```javascript\ndb.test.insert({'k':'123'})\nshow dbs\ndb.test.find()\n```\n\n#### 删除集合\n```javascript\ndb.test.drop()\n```\n\n#### 删除数据库\n```javascript\ndb.dropDatabase()\n```\n\n#### 数据库备份\n```javascript\nsudo mongodump -u=superuser -p=pwd\n#mongodump -h dbhost -d dbname -o dbdirectory\n```\n\n#### 数据库恢复\n```javascript\nsudo mongodump -u=superuser -p=pwd\n#mongorestore -h dbhost -d dbname --directoryperdb dbdirectory\n```\n\n#### 定时备份数据库\n* 备份目录\n```javascript\nsudo mkdir -p /home/mongo/temp && sudo chmod -R 777 /home/mongo/temp\nsudo mkdir -p /home/mongo/all && sudo chmod -R 777 /home/mongo/all\n```\n\n* 备份脚本\nsudo vim /home/schedule/mongo.sh\n```javascript\n#!/bin/sh\nuser=superuser\npasswprd=pwd\ndeldays=2\nbackdate=`date +%Y-%m-%d`\nbackname=\"mg_$backdate.tar.gz\"\nmongodump=/home/q/mongodb-linux-x86_64-3.2.10/bin/mongodump\ntemp=/home/mongo/temp\nall=/home/mongo/all\ncd $temp\nrm -rf $temp/*\nmkdir -p $temp/$backdate\n$mongodump -u $user -p $passwprd -o $temp/$backdate\ntar -zcvf $all/$backname $temp/$backdate\nfind $all/ -mtime +$deldays -delete\n```\n\n* 修改权限\n```javascript\nsudo chmod -R 777 /home/schedule/mongo.sh\n```\n\n* 定时任务\nsudo vim /etc/crontab\n```javascript\n40 18 * * * root /home/schedule/mongo.sh\n```\n\n* 重启定时任务\n```javascript\nsudo /etc/rc.d/init.d/crond restart\n```\n\n* 开机启动\n```javascript\nsudo chkconfig crond on\n```\n\n* 启动服务\n```javascript\nsudo service crond start\n```\n\n\n#### 关闭数据库\n```javascript\nuse admin\ndb.auth('superuser','pwd')\ndb.shutdownServer()\n#or\ndb.adminCommand({shutdown : 1, force : true})\n#or\ndb.shutdownServer({force : true})\n```\n\n#### 常见问题\n* 数据库非正常关闭lock\n```javascript\nsudo rm -rf /home/q/mongodb-linux-x86_64-3.2.10/data/db/mongod.lock\nsudo mongod --dbpath /home/q/mongodb-linux-x86_64-3.2.10/data/db --repair\nsudo ./mongod --dbpath /home/q/mongodb-linux-x86_64-3.2.10/data/db\n```\n\n#### 推荐数据库软件\n* Mac: Toad (app store)","slug":"mongodb","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhoj001qt0yjdcz6kqu7","content":"<h4 id=\"环境\">环境</h4><ul>\n<li>centeros</li>\n</ul>\n<h4 id=\"下载\">下载</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http:<span class=\"comment\">//fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.10.tgz</span></div></pre></td></tr></table></figure>\n<h4 id=\"解压\">解压</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo tar -zxvf mongodb-linux-x86_64<span class=\"number\">-3.2</span><span class=\"number\">.10</span>.tgz</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"加入PATH\">加入PATH</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd mongodb-linux-x86_64<span class=\"number\">-3.2</span><span class=\"number\">.10</span></div><div class=\"line\"><span class=\"keyword\">export</span> PATH=<span class=\"regexp\">/home/</span>q/mongodb-linux-x86_64<span class=\"number\">-3.2</span><span class=\"number\">.10</span>/bin:$PATH</div></pre></td></tr></table></figure>\n<h4 id=\"创建基础文件\">创建基础文件</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mkdir -p data/db</div><div class=\"line\">sudo mkdir logs</div><div class=\"line\">sudo vim ./bin/mongodb.conf</div><div class=\"line\"></div><div class=\"line\">#加入内容</div><div class=\"line\">port=27017</div><div class=\"line\">dbpath=/home/q/mongodb-linux-x86_64-3.2.10/data/db</div><div class=\"line\">logpath=/home/q/mongodb-linux-x86_64-3.2.10/logs/db.logs</div><div class=\"line\">logappend=true</div></pre></td></tr></table></figure>\n<h4 id=\"启动服务\">启动服务</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mongod -config /home/q/mongodb-linux-x86_64<span class=\"number\">-3.2</span><span class=\"number\">.10</span>/bin/mongodb.conf  --fork --auth</div></pre></td></tr></table></figure>\n<h4 id=\"连接数据库\">连接数据库</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongo</div></pre></td></tr></table></figure>\n<h4 id=\"添加用户\">添加用户</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">use admin</div><div class=\"line\">db.createUser(</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">user</span>:<span class=\"string\">\"superuser\"</span>,</div><div class=\"line\">    <span class=\"attr\">pwd</span>:<span class=\"string\">\"pwd\"</span>,</div><div class=\"line\">    <span class=\"attr\">roles</span>:[<span class=\"string\">\"root\"</span>]</div><div class=\"line\">  &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h4 id=\"认证\">认证</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">use admin</div><div class=\"line\">db.auth(<span class=\"string\">'superuser'</span>,<span class=\"string\">'pwd'</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"添加用户-1\">添加用户</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.createUser(</div><div class=\"line\">   &#123;</div><div class=\"line\">     <span class=\"attr\">user</span>: <span class=\"string\">\"zhuo.wu\"</span>,</div><div class=\"line\">     <span class=\"attr\">pwd</span>: <span class=\"string\">\"zhuo.wu\"</span>,</div><div class=\"line\">     <span class=\"attr\">roles</span>: [ <span class=\"string\">\"readWrite\"</span>, <span class=\"string\">\"dbAdmin\"</span> ]</div><div class=\"line\">   &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h4 id=\"查看用户\">查看用户</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show users</div></pre></td></tr></table></figure>\n<h4 id=\"创建数据库\">创建数据库</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">use testDB</div></pre></td></tr></table></figure>\n<h4 id=\"创建集合\">创建集合</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.test.insert(&#123;<span class=\"string\">'k'</span>:<span class=\"string\">'123'</span>&#125;)</div><div class=\"line\">show dbs</div><div class=\"line\">db.test.find()</div></pre></td></tr></table></figure>\n<h4 id=\"删除集合\">删除集合</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.test.drop()</div></pre></td></tr></table></figure>\n<h4 id=\"删除数据库\">删除数据库</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.dropDatabase()</div></pre></td></tr></table></figure>\n<h4 id=\"数据库备份\">数据库备份</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mongodump -u=superuser -p=pwd</div><div class=\"line\">#mongodump -h dbhost -d dbname -o dbdirectory</div></pre></td></tr></table></figure>\n<h4 id=\"数据库恢复\">数据库恢复</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mongodump -u=superuser -p=pwd</div><div class=\"line\">#mongorestore -h dbhost -d dbname --directoryperdb dbdirectory</div></pre></td></tr></table></figure>\n<h4 id=\"定时备份数据库\">定时备份数据库</h4><ul>\n<li><p>备份目录</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mkdir -p /home/mongo/temp &amp;&amp; sudo chmod -R <span class=\"number\">777</span> /home/mongo/temp</div><div class=\"line\">sudo mkdir -p /home/mongo/all &amp;&amp; sudo chmod -R <span class=\"number\">777</span> /home/mongo/all</div></pre></td></tr></table></figure>\n</li>\n<li><p>备份脚本<br>sudo vim /home/schedule/mongo.sh</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">user=superuser</div><div class=\"line\">passwprd=pwd</div><div class=\"line\">deldays=<span class=\"number\">2</span></div><div class=\"line\">backdate=<span class=\"string\">`date +%Y-%m-%d`</span></div><div class=\"line\">backname=<span class=\"string\">\"mg_$backdate.tar.gz\"</span></div><div class=\"line\">mongodump=<span class=\"regexp\">/home/</span>q/mongodb-linux-x86_64<span class=\"number\">-3.2</span><span class=\"number\">.10</span>/bin/mongodump</div><div class=\"line\">temp=<span class=\"regexp\">/home/m</span>ongo/temp</div><div class=\"line\">all=<span class=\"regexp\">/home/m</span>ongo/all</div><div class=\"line\">cd $temp</div><div class=\"line\">rm -rf $temp<span class=\"comment\">/*</span></div><div class=\"line\">mkdir -p $temp/$backdate</div><div class=\"line\">$mongodump -u $user -p $passwprd -o $temp/$backdate</div><div class=\"line\">tar -zcvf $all/$backname $temp/$backdate</div><div class=\"line\">find $all/ -mtime +$deldays -delete</div></pre></td></tr></table></figure>\n</li>\n<li><p>修改权限</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod -R <span class=\"number\">777</span> /home/schedule/mongo.sh</div></pre></td></tr></table></figure>\n</li>\n<li><p>定时任务<br>sudo vim /etc/crontab</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">40</span> <span class=\"number\">18</span> * * * root /home/schedule/mongo.sh</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启定时任务</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/rc.d/init.d/crond restart</div></pre></td></tr></table></figure>\n</li>\n<li><p>开机启动</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chkconfig crond on</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service crond start</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"关闭数据库\">关闭数据库</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">use admin</div><div class=\"line\">db.auth('superuser','pwd')</div><div class=\"line\">db.shutdownServer()</div><div class=\"line\">#or</div><div class=\"line\">db.adminCommand(&#123;shutdown : 1, force : true&#125;)</div><div class=\"line\">#or</div><div class=\"line\">db.shutdownServer(&#123;force : true&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"常见问题\">常见问题</h4><ul>\n<li>数据库非正常关闭lock<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo rm -rf /home/q/mongodb-linux-x86_64<span class=\"number\">-3.2</span><span class=\"number\">.10</span>/data/db/mongod.lock</div><div class=\"line\">sudo mongod --dbpath /home/q/mongodb-linux-x86_64<span class=\"number\">-3.2</span><span class=\"number\">.10</span>/data/db --repair</div><div class=\"line\">sudo ./mongod --dbpath /home/q/mongodb-linux-x86_64<span class=\"number\">-3.2</span><span class=\"number\">.10</span>/data/db</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"推荐数据库软件\">推荐数据库软件</h4><ul>\n<li>Mac: Toad (app store)</li>\n</ul>\n","excerpt":"<h4 id=\"环境\">环境</h4><ul>\n<li>centeros</li>\n</ul>\n<h4 id=\"下载\">下载</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http:<span class=\"comment\">//fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.10.tgz</span></div></pre></td></tr></table></figure>\n<h4 id=\"解压\">解压</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo tar -zxvf mongodb-linux-x86_64<span class=\"number\">-3.2</span><span class=\"number\">.10</span>.tgz</div></pre></td></tr></table></figure>","more":"<h4 id=\"加入PATH\">加入PATH</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd mongodb-linux-x86_64<span class=\"number\">-3.2</span><span class=\"number\">.10</span></div><div class=\"line\"><span class=\"keyword\">export</span> PATH=<span class=\"regexp\">/home/</span>q/mongodb-linux-x86_64<span class=\"number\">-3.2</span><span class=\"number\">.10</span>/bin:$PATH</div></pre></td></tr></table></figure>\n<h4 id=\"创建基础文件\">创建基础文件</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mkdir -p data/db</div><div class=\"line\">sudo mkdir logs</div><div class=\"line\">sudo vim ./bin/mongodb.conf</div><div class=\"line\"></div><div class=\"line\">#加入内容</div><div class=\"line\">port=27017</div><div class=\"line\">dbpath=/home/q/mongodb-linux-x86_64-3.2.10/data/db</div><div class=\"line\">logpath=/home/q/mongodb-linux-x86_64-3.2.10/logs/db.logs</div><div class=\"line\">logappend=true</div></pre></td></tr></table></figure>\n<h4 id=\"启动服务\">启动服务</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mongod -config /home/q/mongodb-linux-x86_64<span class=\"number\">-3.2</span><span class=\"number\">.10</span>/bin/mongodb.conf  --fork --auth</div></pre></td></tr></table></figure>\n<h4 id=\"连接数据库\">连接数据库</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongo</div></pre></td></tr></table></figure>\n<h4 id=\"添加用户\">添加用户</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">use admin</div><div class=\"line\">db.createUser(</div><div class=\"line\">  &#123;</div><div class=\"line\">    <span class=\"attr\">user</span>:<span class=\"string\">\"superuser\"</span>,</div><div class=\"line\">    <span class=\"attr\">pwd</span>:<span class=\"string\">\"pwd\"</span>,</div><div class=\"line\">    <span class=\"attr\">roles</span>:[<span class=\"string\">\"root\"</span>]</div><div class=\"line\">  &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h4 id=\"认证\">认证</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">use admin</div><div class=\"line\">db.auth(<span class=\"string\">'superuser'</span>,<span class=\"string\">'pwd'</span>)</div></pre></td></tr></table></figure>\n<h4 id=\"添加用户-1\">添加用户</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.createUser(</div><div class=\"line\">   &#123;</div><div class=\"line\">     <span class=\"attr\">user</span>: <span class=\"string\">\"zhuo.wu\"</span>,</div><div class=\"line\">     <span class=\"attr\">pwd</span>: <span class=\"string\">\"zhuo.wu\"</span>,</div><div class=\"line\">     <span class=\"attr\">roles</span>: [ <span class=\"string\">\"readWrite\"</span>, <span class=\"string\">\"dbAdmin\"</span> ]</div><div class=\"line\">   &#125;</div><div class=\"line\">)</div></pre></td></tr></table></figure>\n<h4 id=\"查看用户\">查看用户</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show users</div></pre></td></tr></table></figure>\n<h4 id=\"创建数据库\">创建数据库</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">use testDB</div></pre></td></tr></table></figure>\n<h4 id=\"创建集合\">创建集合</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.test.insert(&#123;<span class=\"string\">'k'</span>:<span class=\"string\">'123'</span>&#125;)</div><div class=\"line\">show dbs</div><div class=\"line\">db.test.find()</div></pre></td></tr></table></figure>\n<h4 id=\"删除集合\">删除集合</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.test.drop()</div></pre></td></tr></table></figure>\n<h4 id=\"删除数据库\">删除数据库</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">db.dropDatabase()</div></pre></td></tr></table></figure>\n<h4 id=\"数据库备份\">数据库备份</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mongodump -u=superuser -p=pwd</div><div class=\"line\">#mongodump -h dbhost -d dbname -o dbdirectory</div></pre></td></tr></table></figure>\n<h4 id=\"数据库恢复\">数据库恢复</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mongodump -u=superuser -p=pwd</div><div class=\"line\">#mongorestore -h dbhost -d dbname --directoryperdb dbdirectory</div></pre></td></tr></table></figure>\n<h4 id=\"定时备份数据库\">定时备份数据库</h4><ul>\n<li><p>备份目录</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo mkdir -p /home/mongo/temp &amp;&amp; sudo chmod -R <span class=\"number\">777</span> /home/mongo/temp</div><div class=\"line\">sudo mkdir -p /home/mongo/all &amp;&amp; sudo chmod -R <span class=\"number\">777</span> /home/mongo/all</div></pre></td></tr></table></figure>\n</li>\n<li><p>备份脚本<br>sudo vim /home/schedule/mongo.sh</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">user=superuser</div><div class=\"line\">passwprd=pwd</div><div class=\"line\">deldays=<span class=\"number\">2</span></div><div class=\"line\">backdate=<span class=\"string\">`date +%Y-%m-%d`</span></div><div class=\"line\">backname=<span class=\"string\">\"mg_$backdate.tar.gz\"</span></div><div class=\"line\">mongodump=<span class=\"regexp\">/home/</span>q/mongodb-linux-x86_64<span class=\"number\">-3.2</span><span class=\"number\">.10</span>/bin/mongodump</div><div class=\"line\">temp=<span class=\"regexp\">/home/m</span>ongo/temp</div><div class=\"line\">all=<span class=\"regexp\">/home/m</span>ongo/all</div><div class=\"line\">cd $temp</div><div class=\"line\">rm -rf $temp<span class=\"comment\">/*</div><div class=\"line\">mkdir -p $temp/$backdate</div><div class=\"line\">$mongodump -u $user -p $passwprd -o $temp/$backdate</div><div class=\"line\">tar -zcvf $all/$backname $temp/$backdate</div><div class=\"line\">find $all/ -mtime +$deldays -delete</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>修改权限</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chmod -R <span class=\"number\">777</span> /home/schedule/mongo.sh</div></pre></td></tr></table></figure>\n</li>\n<li><p>定时任务<br>sudo vim /etc/crontab</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">40</span> <span class=\"number\">18</span> * * * root /home/schedule/mongo.sh</div></pre></td></tr></table></figure>\n</li>\n<li><p>重启定时任务</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo /etc/rc.d/init.d/crond restart</div></pre></td></tr></table></figure>\n</li>\n<li><p>开机启动</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo chkconfig crond on</div></pre></td></tr></table></figure>\n</li>\n<li><p>启动服务</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo service crond start</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"关闭数据库\">关闭数据库</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">use admin</div><div class=\"line\">db.auth('superuser','pwd')</div><div class=\"line\">db.shutdownServer()</div><div class=\"line\">#or</div><div class=\"line\">db.adminCommand(&#123;shutdown : 1, force : true&#125;)</div><div class=\"line\">#or</div><div class=\"line\">db.shutdownServer(&#123;force : true&#125;)</div></pre></td></tr></table></figure>\n<h4 id=\"常见问题\">常见问题</h4><ul>\n<li>数据库非正常关闭lock<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo rm -rf /home/q/mongodb-linux-x86_64<span class=\"number\">-3.2</span><span class=\"number\">.10</span>/data/db/mongod.lock</div><div class=\"line\">sudo mongod --dbpath /home/q/mongodb-linux-x86_64<span class=\"number\">-3.2</span><span class=\"number\">.10</span>/data/db --repair</div><div class=\"line\">sudo ./mongod --dbpath /home/q/mongodb-linux-x86_64<span class=\"number\">-3.2</span><span class=\"number\">.10</span>/data/db</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"推荐数据库软件\">推荐数据库软件</h4><ul>\n<li>Mac: Toad (app store)</li>\n</ul>"},{"title":"nginx配置https","date":"2015-11-21T07:03:01.000Z","toc":true,"_content":"#### 安装\n##### 系统：centos\n* wget下载\n* tar 解压\n* sudo ./configure —with-http_rewrite_module —with-pcre=../pcre-8.36 —with-* http_stub_status_module —with-http_ssl_module —with-http_realip_module 安装这些模块，如果安装失败，请wget下载缺失的包，解压安装后，再重新执行，等号后面添加模块路径\n* sudo make\n* sudo make install\n<!--more-->\n\n##### 配置转发\n```javascript\nupstream  test{\n     server **.**.**.**:****;\n}\n\nserver {\n        listen **.**.**.**:8888;\n        server_name test.test.com;\n        charset utf8;\n        gzip                    off;\n        gzip_http_version       1.1;\n        gzip_buffers            256 64k;\n        gzip_comp_level         5;\n        gzip_min_length         1000;\n        gzip_types              application/x-javascript text/javascript text/plain text/xml text/css image/jpeg image/jpg image/png image/gif application/x-shockwave-flash image/x-icon;\n\n    \n         proxy_set_header  Host  $host;\n         proxy_set_header  X-Real-IP  $remote_addr;\n         proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n\n\n        location ~ /test/ {\n                proxy_pass http://test;\n        }\n}\n```\n\n##### 支持https\n```javascript\nupstream  test{\n     server **.**.**.**:****;\n}\n\nserver {\n        listen **.**.**.**:443 ssl;\n        server_name test.test.com;\n        charset utf8;\n        gzip                    off;\n        gzip_http_version       1.1;\n        gzip_buffers            256 64k;\n        gzip_comp_level         5;\n        gzip_min_length         1000;\n        gzip_types              application/x-javascript text/javascript text/plain text/xml text/css image/jpeg image/jpg image/png image/gif application/x-shockwave-flash image/x-icon;\n\n        ssl on;\n        ssl_certificate             /home/q/nginx/conf/server.crt;\n        ssl_certificate_key         /home/q/nginx/conf/server.key;\n        ssl_session_timeout         5m;\n        ssl_protocols               SSLv3 TLSv1;\n        ssl_ciphers                 ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n        ssl_prefer_server_ciphers   on;\n\n         proxy_set_header  Host  $host;\n         proxy_set_header  X-Real-IP  $remote_addr;\n         proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n\n\n        location ~ /test/ {\n                proxy_pass http://test;\n        }\n}\n```\n##### 证书\n* 两种方式\n\t* 生成证书\n\t\t```javascript\n\t\t#cd /home/q/nginx/conf\n\t\t#openssl genrsa -des3 -out server.key 1024\n\t\t#openssl req -new -key server.key -out server.csr\n\t\t#openssl rsa -in server.key -out server_nopwd.key\n\t\t#openssl x509 -req -days 365 -in server.csr -signkey server_nopwd.key -out server.crt\n\t\t```\n\t\t中途需要输入密码，自己设定即可\n\t* copy\n\t\t直接copy别的机器上面已经存在的证书\n\n##### 浏览器\n* 方法一：如果提示安全提示，点击高级》继续浏览\n* 方法二：把生成的server.crt文件导入到系统的证书管理器就行了，具体方法：不介绍了","source":"_posts/nginx配置https.md","raw":"title: nginx配置https\ndate: 2015-11-21 15:03:01\ntags: web\ntoc: true\n---\n#### 安装\n##### 系统：centos\n* wget下载\n* tar 解压\n* sudo ./configure —with-http_rewrite_module —with-pcre=../pcre-8.36 —with-* http_stub_status_module —with-http_ssl_module —with-http_realip_module 安装这些模块，如果安装失败，请wget下载缺失的包，解压安装后，再重新执行，等号后面添加模块路径\n* sudo make\n* sudo make install\n<!--more-->\n\n##### 配置转发\n```javascript\nupstream  test{\n     server **.**.**.**:****;\n}\n\nserver {\n        listen **.**.**.**:8888;\n        server_name test.test.com;\n        charset utf8;\n        gzip                    off;\n        gzip_http_version       1.1;\n        gzip_buffers            256 64k;\n        gzip_comp_level         5;\n        gzip_min_length         1000;\n        gzip_types              application/x-javascript text/javascript text/plain text/xml text/css image/jpeg image/jpg image/png image/gif application/x-shockwave-flash image/x-icon;\n\n    \n         proxy_set_header  Host  $host;\n         proxy_set_header  X-Real-IP  $remote_addr;\n         proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n\n\n        location ~ /test/ {\n                proxy_pass http://test;\n        }\n}\n```\n\n##### 支持https\n```javascript\nupstream  test{\n     server **.**.**.**:****;\n}\n\nserver {\n        listen **.**.**.**:443 ssl;\n        server_name test.test.com;\n        charset utf8;\n        gzip                    off;\n        gzip_http_version       1.1;\n        gzip_buffers            256 64k;\n        gzip_comp_level         5;\n        gzip_min_length         1000;\n        gzip_types              application/x-javascript text/javascript text/plain text/xml text/css image/jpeg image/jpg image/png image/gif application/x-shockwave-flash image/x-icon;\n\n        ssl on;\n        ssl_certificate             /home/q/nginx/conf/server.crt;\n        ssl_certificate_key         /home/q/nginx/conf/server.key;\n        ssl_session_timeout         5m;\n        ssl_protocols               SSLv3 TLSv1;\n        ssl_ciphers                 ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n        ssl_prefer_server_ciphers   on;\n\n         proxy_set_header  Host  $host;\n         proxy_set_header  X-Real-IP  $remote_addr;\n         proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n\n\n        location ~ /test/ {\n                proxy_pass http://test;\n        }\n}\n```\n##### 证书\n* 两种方式\n\t* 生成证书\n\t\t```javascript\n\t\t#cd /home/q/nginx/conf\n\t\t#openssl genrsa -des3 -out server.key 1024\n\t\t#openssl req -new -key server.key -out server.csr\n\t\t#openssl rsa -in server.key -out server_nopwd.key\n\t\t#openssl x509 -req -days 365 -in server.csr -signkey server_nopwd.key -out server.crt\n\t\t```\n\t\t中途需要输入密码，自己设定即可\n\t* copy\n\t\t直接copy别的机器上面已经存在的证书\n\n##### 浏览器\n* 方法一：如果提示安全提示，点击高级》继续浏览\n* 方法二：把生成的server.crt文件导入到系统的证书管理器就行了，具体方法：不介绍了","slug":"nginx配置https","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhoo001st0yjj33f0l84","content":"<h4 id=\"安装\">安装</h4><h5 id=\"系统：centos\">系统：centos</h5><ul>\n<li>wget下载</li>\n<li>tar 解压</li>\n<li>sudo ./configure —with-http_rewrite_module —with-pcre=../pcre-8.36 —with-* http_stub_status_module —with-http_ssl_module —with-http_realip_module 安装这些模块，如果安装失败，请wget下载缺失的包，解压安装后，再重新执行，等号后面添加模块路径</li>\n<li>sudo make</li>\n<li>sudo make install<a id=\"more\"></a>\n</li>\n</ul>\n<h5 id=\"配置转发\">配置转发</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">upstream  test&#123;</div><div class=\"line\">     server **.**.**.**:****;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">        listen **.**.**.**:<span class=\"number\">8888</span>;</div><div class=\"line\">        server_name test.test.com;</div><div class=\"line\">        charset utf8;</div><div class=\"line\">        gzip                    off;</div><div class=\"line\">        gzip_http_version       <span class=\"number\">1.1</span>;</div><div class=\"line\">        gzip_buffers            <span class=\"number\">256</span> <span class=\"number\">64</span>k;</div><div class=\"line\">        gzip_comp_level         <span class=\"number\">5</span>;</div><div class=\"line\">        gzip_min_length         <span class=\"number\">1000</span>;</div><div class=\"line\">        gzip_types              application/x-javascript text/javascript text/plain text/xml text/css image/jpeg image/jpg image/png image/gif application/x-shockwave-flash image/x-icon;</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">         proxy_set_header  Host  $host;</div><div class=\"line\">         proxy_set_header  X-Real-IP  $remote_addr;</div><div class=\"line\">         proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        location ~ <span class=\"regexp\">/test/</span> &#123;</div><div class=\"line\">                proxy_pass http:<span class=\"comment\">//test;</span></div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"支持https\">支持https</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">upstream  test&#123;</div><div class=\"line\">     server **.**.**.**:****;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">        listen **.**.**.**:<span class=\"number\">443</span> ssl;</div><div class=\"line\">        server_name test.test.com;</div><div class=\"line\">        charset utf8;</div><div class=\"line\">        gzip                    off;</div><div class=\"line\">        gzip_http_version       <span class=\"number\">1.1</span>;</div><div class=\"line\">        gzip_buffers            <span class=\"number\">256</span> <span class=\"number\">64</span>k;</div><div class=\"line\">        gzip_comp_level         <span class=\"number\">5</span>;</div><div class=\"line\">        gzip_min_length         <span class=\"number\">1000</span>;</div><div class=\"line\">        gzip_types              application/x-javascript text/javascript text/plain text/xml text/css image/jpeg image/jpg image/png image/gif application/x-shockwave-flash image/x-icon;</div><div class=\"line\"></div><div class=\"line\">        ssl on;</div><div class=\"line\">        ssl_certificate             /home/q/nginx/conf/server.crt;</div><div class=\"line\">        ssl_certificate_key         /home/q/nginx/conf/server.key;</div><div class=\"line\">        ssl_session_timeout         <span class=\"number\">5</span>m;</div><div class=\"line\">        ssl_protocols               SSLv3 TLSv1;</div><div class=\"line\">        ssl_ciphers                 ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</div><div class=\"line\">        ssl_prefer_server_ciphers   on;</div><div class=\"line\"></div><div class=\"line\">         proxy_set_header  Host  $host;</div><div class=\"line\">         proxy_set_header  X-Real-IP  $remote_addr;</div><div class=\"line\">         proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        location ~ <span class=\"regexp\">/test/</span> &#123;</div><div class=\"line\">                proxy_pass http:<span class=\"comment\">//test;</span></div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"证书\">证书</h5><ul>\n<li><p>两种方式</p>\n<ul>\n<li><p>生成证书</p>\n  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#cd /home/q/nginx/conf</div><div class=\"line\">#openssl genrsa -des3 -out server.key 1024</div><div class=\"line\">#openssl req -new -key server.key -out server.csr</div><div class=\"line\">#openssl rsa -in server.key -out server_nopwd.key</div><div class=\"line\">#openssl x509 -req -days 365 -in server.csr -signkey server_nopwd.key -out server.crt</div></pre></td></tr></table></figure>\n<p>  中途需要输入密码，自己设定即可</p>\n</li>\n<li>copy<br>  直接copy别的机器上面已经存在的证书</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"浏览器\">浏览器</h5><ul>\n<li>方法一：如果提示安全提示，点击高级》继续浏览</li>\n<li>方法二：把生成的server.crt文件导入到系统的证书管理器就行了，具体方法：不介绍了</li>\n</ul>\n","excerpt":"<h4 id=\"安装\">安装</h4><h5 id=\"系统：centos\">系统：centos</h5><ul>\n<li>wget下载</li>\n<li>tar 解压</li>\n<li>sudo ./configure —with-http_rewrite_module —with-pcre=../pcre-8.36 —with-* http_stub_status_module —with-http_ssl_module —with-http_realip_module 安装这些模块，如果安装失败，请wget下载缺失的包，解压安装后，再重新执行，等号后面添加模块路径</li>\n<li>sudo make</li>\n<li>sudo make install","more":"</li>\n</ul>\n<h5 id=\"配置转发\">配置转发</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">upstream  test&#123;</div><div class=\"line\">     server **.**.**.**:****;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">        listen **.**.**.**:<span class=\"number\">8888</span>;</div><div class=\"line\">        server_name test.test.com;</div><div class=\"line\">        charset utf8;</div><div class=\"line\">        gzip                    off;</div><div class=\"line\">        gzip_http_version       <span class=\"number\">1.1</span>;</div><div class=\"line\">        gzip_buffers            <span class=\"number\">256</span> <span class=\"number\">64</span>k;</div><div class=\"line\">        gzip_comp_level         <span class=\"number\">5</span>;</div><div class=\"line\">        gzip_min_length         <span class=\"number\">1000</span>;</div><div class=\"line\">        gzip_types              application/x-javascript text/javascript text/plain text/xml text/css image/jpeg image/jpg image/png image/gif application/x-shockwave-flash image/x-icon;</div><div class=\"line\"></div><div class=\"line\">    </div><div class=\"line\">         proxy_set_header  Host  $host;</div><div class=\"line\">         proxy_set_header  X-Real-IP  $remote_addr;</div><div class=\"line\">         proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        location ~ <span class=\"regexp\">/test/</span> &#123;</div><div class=\"line\">                proxy_pass http:<span class=\"comment\">//test;</span></div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"支持https\">支持https</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">upstream  test&#123;</div><div class=\"line\">     server **.**.**.**:****;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">server &#123;</div><div class=\"line\">        listen **.**.**.**:<span class=\"number\">443</span> ssl;</div><div class=\"line\">        server_name test.test.com;</div><div class=\"line\">        charset utf8;</div><div class=\"line\">        gzip                    off;</div><div class=\"line\">        gzip_http_version       <span class=\"number\">1.1</span>;</div><div class=\"line\">        gzip_buffers            <span class=\"number\">256</span> <span class=\"number\">64</span>k;</div><div class=\"line\">        gzip_comp_level         <span class=\"number\">5</span>;</div><div class=\"line\">        gzip_min_length         <span class=\"number\">1000</span>;</div><div class=\"line\">        gzip_types              application/x-javascript text/javascript text/plain text/xml text/css image/jpeg image/jpg image/png image/gif application/x-shockwave-flash image/x-icon;</div><div class=\"line\"></div><div class=\"line\">        ssl on;</div><div class=\"line\">        ssl_certificate             /home/q/nginx/conf/server.crt;</div><div class=\"line\">        ssl_certificate_key         /home/q/nginx/conf/server.key;</div><div class=\"line\">        ssl_session_timeout         <span class=\"number\">5</span>m;</div><div class=\"line\">        ssl_protocols               SSLv3 TLSv1;</div><div class=\"line\">        ssl_ciphers                 ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;</div><div class=\"line\">        ssl_prefer_server_ciphers   on;</div><div class=\"line\"></div><div class=\"line\">         proxy_set_header  Host  $host;</div><div class=\"line\">         proxy_set_header  X-Real-IP  $remote_addr;</div><div class=\"line\">         proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">        location ~ <span class=\"regexp\">/test/</span> &#123;</div><div class=\"line\">                proxy_pass http:<span class=\"comment\">//test;</span></div><div class=\"line\">        &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"证书\">证书</h5><ul>\n<li><p>两种方式</p>\n<ul>\n<li><p>生成证书</p>\n  <figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#cd /home/q/nginx/conf</div><div class=\"line\">#openssl genrsa -des3 -out server.key 1024</div><div class=\"line\">#openssl req -new -key server.key -out server.csr</div><div class=\"line\">#openssl rsa -in server.key -out server_nopwd.key</div><div class=\"line\">#openssl x509 -req -days 365 -in server.csr -signkey server_nopwd.key -out server.crt</div></pre></td></tr></table></figure>\n<p>  中途需要输入密码，自己设定即可</p>\n</li>\n<li>copy<br>  直接copy别的机器上面已经存在的证书</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"浏览器\">浏览器</h5><ul>\n<li>方法一：如果提示安全提示，点击高级》继续浏览</li>\n<li>方法二：把生成的server.crt文件导入到系统的证书管理器就行了，具体方法：不介绍了</li>\n</ul>"},{"title":"nodejs+mongodb","date":"2016-10-31T12:53:27.000Z","toc":true,"_content":"这篇文章中，我们使用nodejs搭建简易服务器，然后开发一个登录过程中使用的增删改查接口，数据库使用mongoDB,操作数据库模块选用mongoose。\n\n#### 创建nodejs工程\n>npm init \n>创建package.json文件\n\n<!--more-->\n\n```json\n{\n  \"name\": \"nodeblog\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"^4.14.0\",\n    \"mongoose\": \"^4.6.5\",\n    \"url\": \"^0.11.0\"\n  }\n}\n```\n>dependencies中显示的是安装的依赖包，下面有安装过程，先不用考虑\n\n#### 使用express\n>sudo npm install express --save\n>快速构建web应用模块 资料: http://www.expressjs.com.cn/4x/api.html\n\n#### app.js\n```javascript\nvar express = require('express');\nvar app = express();\napp.get('/', function(req, res){\n  res.send('hello world');\n});\napp.listen(3000);\nconsole.log('nodejs server start, listen port 3000');\n```\n>浏览器打开 http://127.0.0.1:3000/ 页面显示 hello world\n\n#### 使用mongoose\n>sudo npm install mongoose --save\n>数据库操作模块\n\n#### 安装其他模块\n>sudo npm install url --save\n>辅助解析url参数\n\n#### nodejs操作数据库\n>app.js 程序主文件\n```javascript\nvar express = require('express');\nvar app = express();\nvar routes = require('./routes/index');\napp.use('/', routes);\napp.listen(3000);\nconsole.log('nodejs server start, listen port 3000');\n```\n\n>routes/index.js 路由文件\n```javascript\nvar express = require('express');\nvar router = express.Router();\nvar login = require('../main/login');\nrouter.get(['/login'], function(req, res, next) {\n    login(req, res, next);\n});\nmodule.exports = router;\n```\n\n>main/config.js 数据库配置文件\n```javascript\nvar config = {\n\tdbHost: '127.0.0.1',\n\tdbPort: '27017',\n\tdbAdmin: 'superuser',\n\tdbPassword: 'pwd'\n};\nmodule.exports = config;\n```\n\n>main/loginSchema.js 数据库表结构\n```javascript\nvar mongoose = require('mongoose');\nvar loginSchema = new mongoose.Schema({\n\tusername: String,\n\tuserpassword: String\n});\nmodule.exports = loginSchema;\n```\n\n>main/login.js 登录增删改查逻辑文件\n```javascript\nvar url = require('url'),\n    mongoose = require('mongoose'),\n    loginSchema = require('./loginSchema'),\n    config = require('./config');\nvar opt = {\n        user: config.dbAdmin,\n        pass: config.dbPassword,\n        auth: {\n            authdb: 'admin'\n        }\n    },\n    db = mongoose.createConnection(config.dbHost, 'userinfo', config.dbPort, opt),\n    pageModule = db.model(\"user\", loginSchema);\nvar result,\n    dbSuccess = {\n    \tret:true,\n    \tdata:{}\n    }, \n    dbError = {\n    \tret:false,\n    \tdata:'fail'\n    };\n/**\n *  存储数据\n */\nfunction saveData(req, res, next, pageData) {\n    var pageDataModule = new pageModule(JSON.parse(pageData));\n    pageDataModule.save(function(err) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        dbSuccess.data = '操作成功';\n        result = JSON.stringify(dbSuccess);\n        res.end(result);\n    });\n}\n/**\n *  删除数据\n */\nfunction deleteData(req, res, next,query) {\n    var query = query ? JSON.parse(query) : {};\n    pageModule.remove(query).exec(function(err, data) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        dbSuccess.data = '操作成功';\n        result = JSON.stringify(dbSuccess);\n        res.end(result);\n    });\n}\n/**\n *  更新数据\n */\nfunction updateData(req, res, next,query, pageData) {\n    var query = query ? JSON.parse(query) : {};\n    pageData = JSON.parse(pageData);\n    pageModule.findOneAndUpdate(query, pageData).exec(function(err, data) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        dbSuccess.data = '操作成功';\n        result = JSON.stringify(dbSuccess);\n        res.end(result);\n    });\n}\n/**\n *  查询数据\n */\nfunction queryData(req, res, next,query) {\n    var query = query ? JSON.parse(query) : {};\n    pageModule.find(query).exec(function(err, data) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        if(data && data.length){\n            dbSuccess.data = data;\n            result = JSON.stringify(dbSuccess);\n            res.end(result);\n        }else{\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n    });\n}\n/**\n *  增删改查入口\n */\nfunction login(req, res, next){\n\tvar queryObj = url.parse(decodeURIComponent(req.url), true).query,\n\t    type = queryObj.type,\n\t    query = queryObj.query,\n\t    pageData = queryObj.pageData;\n\tswitch(type){\n\t\tcase 'add':\n\t\t\tsaveData(req, res, next,pageData);\n\t\t\tbreak;\n\t\tcase 'delete':\n\t\t\tdeleteData(req, res, next,query);\n\t\t\tbreak;\n\t\tcase 'update':\n\t\t\tupdateData(req, res, next,query, pageData)\n\t\t\tbreak;\n\t\tcase 'find':\n\t\t\tqueryData(req, res, next,query)\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n}\nmodule.exports = login;\n```\n\n#### 测试url\n1.http://127.0.0.1:3000/login?type=add&pageData={\"username\":\"wz\",\"userpassword\":\"wz\"}\n2.http://127.0.0.1:3000/login?type=find\n3.http://127.0.0.1:3000/login?type=update&query={\"username\":\"wz\"}&pageData={\"username\":\"ww\",\"userpassword\":\"wz\"}\n4.http://127.0.0.1:3000/login?type=delete&query={\"username\":\"ww\"}\n>提供的测试url分别做了：1 向数据库中插入一条数据，2 在数据库中查找users表中所有数据，3 修改第一步中添加的数据，4 删除第三步中修改的数据。都以json格式返回给客户端。","source":"_posts/nodejs-mongodb.md","raw":"title: nodejs+mongodb\ndate: 2016-10-31 20:53:27\ntags: nodejs\ntoc: true\n---\n这篇文章中，我们使用nodejs搭建简易服务器，然后开发一个登录过程中使用的增删改查接口，数据库使用mongoDB,操作数据库模块选用mongoose。\n\n#### 创建nodejs工程\n>npm init \n>创建package.json文件\n\n<!--more-->\n\n```json\n{\n  \"name\": \"nodeblog\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"^4.14.0\",\n    \"mongoose\": \"^4.6.5\",\n    \"url\": \"^0.11.0\"\n  }\n}\n```\n>dependencies中显示的是安装的依赖包，下面有安装过程，先不用考虑\n\n#### 使用express\n>sudo npm install express --save\n>快速构建web应用模块 资料: http://www.expressjs.com.cn/4x/api.html\n\n#### app.js\n```javascript\nvar express = require('express');\nvar app = express();\napp.get('/', function(req, res){\n  res.send('hello world');\n});\napp.listen(3000);\nconsole.log('nodejs server start, listen port 3000');\n```\n>浏览器打开 http://127.0.0.1:3000/ 页面显示 hello world\n\n#### 使用mongoose\n>sudo npm install mongoose --save\n>数据库操作模块\n\n#### 安装其他模块\n>sudo npm install url --save\n>辅助解析url参数\n\n#### nodejs操作数据库\n>app.js 程序主文件\n```javascript\nvar express = require('express');\nvar app = express();\nvar routes = require('./routes/index');\napp.use('/', routes);\napp.listen(3000);\nconsole.log('nodejs server start, listen port 3000');\n```\n\n>routes/index.js 路由文件\n```javascript\nvar express = require('express');\nvar router = express.Router();\nvar login = require('../main/login');\nrouter.get(['/login'], function(req, res, next) {\n    login(req, res, next);\n});\nmodule.exports = router;\n```\n\n>main/config.js 数据库配置文件\n```javascript\nvar config = {\n\tdbHost: '127.0.0.1',\n\tdbPort: '27017',\n\tdbAdmin: 'superuser',\n\tdbPassword: 'pwd'\n};\nmodule.exports = config;\n```\n\n>main/loginSchema.js 数据库表结构\n```javascript\nvar mongoose = require('mongoose');\nvar loginSchema = new mongoose.Schema({\n\tusername: String,\n\tuserpassword: String\n});\nmodule.exports = loginSchema;\n```\n\n>main/login.js 登录增删改查逻辑文件\n```javascript\nvar url = require('url'),\n    mongoose = require('mongoose'),\n    loginSchema = require('./loginSchema'),\n    config = require('./config');\nvar opt = {\n        user: config.dbAdmin,\n        pass: config.dbPassword,\n        auth: {\n            authdb: 'admin'\n        }\n    },\n    db = mongoose.createConnection(config.dbHost, 'userinfo', config.dbPort, opt),\n    pageModule = db.model(\"user\", loginSchema);\nvar result,\n    dbSuccess = {\n    \tret:true,\n    \tdata:{}\n    }, \n    dbError = {\n    \tret:false,\n    \tdata:'fail'\n    };\n/**\n *  存储数据\n */\nfunction saveData(req, res, next, pageData) {\n    var pageDataModule = new pageModule(JSON.parse(pageData));\n    pageDataModule.save(function(err) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        dbSuccess.data = '操作成功';\n        result = JSON.stringify(dbSuccess);\n        res.end(result);\n    });\n}\n/**\n *  删除数据\n */\nfunction deleteData(req, res, next,query) {\n    var query = query ? JSON.parse(query) : {};\n    pageModule.remove(query).exec(function(err, data) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        dbSuccess.data = '操作成功';\n        result = JSON.stringify(dbSuccess);\n        res.end(result);\n    });\n}\n/**\n *  更新数据\n */\nfunction updateData(req, res, next,query, pageData) {\n    var query = query ? JSON.parse(query) : {};\n    pageData = JSON.parse(pageData);\n    pageModule.findOneAndUpdate(query, pageData).exec(function(err, data) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        dbSuccess.data = '操作成功';\n        result = JSON.stringify(dbSuccess);\n        res.end(result);\n    });\n}\n/**\n *  查询数据\n */\nfunction queryData(req, res, next,query) {\n    var query = query ? JSON.parse(query) : {};\n    pageModule.find(query).exec(function(err, data) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        if(data && data.length){\n            dbSuccess.data = data;\n            result = JSON.stringify(dbSuccess);\n            res.end(result);\n        }else{\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n    });\n}\n/**\n *  增删改查入口\n */\nfunction login(req, res, next){\n\tvar queryObj = url.parse(decodeURIComponent(req.url), true).query,\n\t    type = queryObj.type,\n\t    query = queryObj.query,\n\t    pageData = queryObj.pageData;\n\tswitch(type){\n\t\tcase 'add':\n\t\t\tsaveData(req, res, next,pageData);\n\t\t\tbreak;\n\t\tcase 'delete':\n\t\t\tdeleteData(req, res, next,query);\n\t\t\tbreak;\n\t\tcase 'update':\n\t\t\tupdateData(req, res, next,query, pageData)\n\t\t\tbreak;\n\t\tcase 'find':\n\t\t\tqueryData(req, res, next,query)\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n}\nmodule.exports = login;\n```\n\n#### 测试url\n1.http://127.0.0.1:3000/login?type=add&pageData={\"username\":\"wz\",\"userpassword\":\"wz\"}\n2.http://127.0.0.1:3000/login?type=find\n3.http://127.0.0.1:3000/login?type=update&query={\"username\":\"wz\"}&pageData={\"username\":\"ww\",\"userpassword\":\"wz\"}\n4.http://127.0.0.1:3000/login?type=delete&query={\"username\":\"ww\"}\n>提供的测试url分别做了：1 向数据库中插入一条数据，2 在数据库中查找users表中所有数据，3 修改第一步中添加的数据，4 删除第三步中修改的数据。都以json格式返回给客户端。","slug":"nodejs-mongodb","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhot001vt0yjh29m7q6j","content":"<p>这篇文章中，我们使用nodejs搭建简易服务器，然后开发一个登录过程中使用的增删改查接口，数据库使用mongoDB,操作数据库模块选用mongoose。</p>\n<h4 id=\"创建nodejs工程\">创建nodejs工程</h4><blockquote>\n<p>npm init<br>创建package.json文件</p>\n</blockquote>\n<a id=\"more\"></a>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"nodeblog\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"express\"</span>: <span class=\"string\">\"^4.14.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"mongoose\"</span>: <span class=\"string\">\"^4.6.5\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"^0.11.0\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>dependencies中显示的是安装的依赖包，下面有安装过程，先不用考虑</p>\n</blockquote>\n<h4 id=\"使用express\">使用express</h4><blockquote>\n<p>sudo npm install express –save<br>快速构建web应用模块 资料: <a href=\"http://www.expressjs.com.cn/4x/api.html\" target=\"_blank\" rel=\"external\">http://www.expressjs.com.cn/4x/api.html</a></p>\n</blockquote>\n<h4 id=\"app-js\">app.js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'hello world'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'nodejs server start, listen port 3000'</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>浏览器打开 <a href=\"http://127.0.0.1:3000/\" target=\"_blank\" rel=\"external\">http://127.0.0.1:3000/</a> 页面显示 hello world</p>\n</blockquote>\n<h4 id=\"使用mongoose\">使用mongoose</h4><blockquote>\n<p>sudo npm install mongoose –save<br>数据库操作模块</p>\n</blockquote>\n<h4 id=\"安装其他模块\">安装其他模块</h4><blockquote>\n<p>sudo npm install url –save<br>辅助解析url参数</p>\n</blockquote>\n<h4 id=\"nodejs操作数据库\">nodejs操作数据库</h4><blockquote>\n<p>app.js 程序主文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> routes = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/index'</span>);</div><div class=\"line\">app.use(<span class=\"string\">'/'</span>, routes);</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'nodejs server start, listen port 3000'</span>);</div></pre></td></tr></table></figure></p>\n<p>routes/index.js 路由文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"><span class=\"keyword\">var</span> login = <span class=\"built_in\">require</span>(<span class=\"string\">'../main/login'</span>);</div><div class=\"line\">router.get([<span class=\"string\">'/login'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    login(req, res, next);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure></p>\n<p>main/config.js 数据库配置文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> config = &#123;</div><div class=\"line\">\t<span class=\"attr\">dbHost</span>: <span class=\"string\">'127.0.0.1'</span>,</div><div class=\"line\">\t<span class=\"attr\">dbPort</span>: <span class=\"string\">'27017'</span>,</div><div class=\"line\">\t<span class=\"attr\">dbAdmin</span>: <span class=\"string\">'superuser'</span>,</div><div class=\"line\">\t<span class=\"attr\">dbPassword</span>: <span class=\"string\">'pwd'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure></p>\n<p>main/loginSchema.js 数据库表结构<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> loginSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</div><div class=\"line\">\t<span class=\"attr\">username</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">\t<span class=\"attr\">userpassword</span>: <span class=\"built_in\">String</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = loginSchema;</div></pre></td></tr></table></figure></p>\n<p>main/login.js 登录增删改查逻辑文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>),</div><div class=\"line\">    mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>),</div><div class=\"line\">    loginSchema = <span class=\"built_in\">require</span>(<span class=\"string\">'./loginSchema'</span>),</div><div class=\"line\">    config = <span class=\"built_in\">require</span>(<span class=\"string\">'./config'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> opt = &#123;</div><div class=\"line\">        <span class=\"attr\">user</span>: config.dbAdmin,</div><div class=\"line\">        <span class=\"attr\">pass</span>: config.dbPassword,</div><div class=\"line\">        <span class=\"attr\">auth</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">authdb</span>: <span class=\"string\">'admin'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    db = mongoose.createConnection(config.dbHost, <span class=\"string\">'userinfo'</span>, config.dbPort, opt),</div><div class=\"line\">    pageModule = db.model(<span class=\"string\">\"user\"</span>, loginSchema);</div><div class=\"line\"><span class=\"keyword\">var</span> result,</div><div class=\"line\">    dbSuccess = &#123;</div><div class=\"line\">    \t<span class=\"attr\">ret</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">    \t<span class=\"attr\">data</span>:&#123;&#125;</div><div class=\"line\">    &#125;, </div><div class=\"line\">    dbError = &#123;</div><div class=\"line\">    \t<span class=\"attr\">ret</span>:<span class=\"literal\">false</span>,</div><div class=\"line\">    \t<span class=\"attr\">data</span>:<span class=\"string\">'fail'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  存储数据</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveData</span>(<span class=\"params\">req, res, next, pageData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pageDataModule = <span class=\"keyword\">new</span> pageModule(<span class=\"built_in\">JSON</span>.parse(pageData));</div><div class=\"line\">    pageDataModule.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json;charset=UTF-8\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbError);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">        dbSuccess.data = <span class=\"string\">'操作成功'</span>;</div><div class=\"line\">        result = <span class=\"built_in\">JSON</span>.stringify(dbSuccess);</div><div class=\"line\">        res.end(result);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  删除数据</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteData</span>(<span class=\"params\">req, res, next,query</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> query = query ? <span class=\"built_in\">JSON</span>.parse(query) : &#123;&#125;;</div><div class=\"line\">    pageModule.remove(query).exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json;charset=UTF-8\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbError);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">        dbSuccess.data = <span class=\"string\">'操作成功'</span>;</div><div class=\"line\">        result = <span class=\"built_in\">JSON</span>.stringify(dbSuccess);</div><div class=\"line\">        res.end(result);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  更新数据</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateData</span>(<span class=\"params\">req, res, next,query, pageData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> query = query ? <span class=\"built_in\">JSON</span>.parse(query) : &#123;&#125;;</div><div class=\"line\">    pageData = <span class=\"built_in\">JSON</span>.parse(pageData);</div><div class=\"line\">    pageModule.findOneAndUpdate(query, pageData).exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json;charset=UTF-8\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbError);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">        dbSuccess.data = <span class=\"string\">'操作成功'</span>;</div><div class=\"line\">        result = <span class=\"built_in\">JSON</span>.stringify(dbSuccess);</div><div class=\"line\">        res.end(result);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  查询数据</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queryData</span>(<span class=\"params\">req, res, next,query</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> query = query ? <span class=\"built_in\">JSON</span>.parse(query) : &#123;&#125;;</div><div class=\"line\">    pageModule.find(query).exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json;charset=UTF-8\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbError);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(data &amp;&amp; data.length)&#123;</div><div class=\"line\">            dbSuccess.data = data;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbSuccess);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbError);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> *  增删改查入口</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">login</span>(<span class=\"params\">req, res, next</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> queryObj = url.parse(<span class=\"built_in\">decodeURIComponent</span>(req.url), <span class=\"literal\">true</span>).query,</div><div class=\"line\">\t    type = queryObj.type,</div><div class=\"line\">\t    query = queryObj.query,</div><div class=\"line\">\t    pageData = queryObj.pageData;</div><div class=\"line\">\t<span class=\"keyword\">switch</span>(type)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'add'</span>:</div><div class=\"line\">\t\t\tsaveData(req, res, next,pageData);</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'delete'</span>:</div><div class=\"line\">\t\t\tdeleteData(req, res, next,query);</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'update'</span>:</div><div class=\"line\">\t\t\tupdateData(req, res, next,query, pageData)</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'find'</span>:</div><div class=\"line\">\t\t\tqueryData(req, res, next,query)</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = login;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"测试url\">测试url</h4><p>1.<a href=\"http://127.0.0.1:3000/login?type=add&amp;pageData={&quot;username&quot;:&quot;wz&quot;,&quot;userpassword&quot;:&quot;wz&quot;}\" target=\"_blank\" rel=\"external\">http://127.0.0.1:3000/login?type=add&amp;pageData={&quot;username&quot;:&quot;wz&quot;,&quot;userpassword&quot;:&quot;wz&quot;}</a><br>2.<a href=\"http://127.0.0.1:3000/login?type=find\" target=\"_blank\" rel=\"external\">http://127.0.0.1:3000/login?type=find</a><br>3.<a href=\"http://127.0.0.1:3000/login?type=update&amp;query={&quot;username&quot;:&quot;wz&quot;}&amp;pageData={&quot;username&quot;:&quot;ww&quot;,&quot;userpassword&quot;:&quot;wz&quot;}\" target=\"_blank\" rel=\"external\">http://127.0.0.1:3000/login?type=update&amp;query={&quot;username&quot;:&quot;wz&quot;}&amp;pageData={&quot;username&quot;:&quot;ww&quot;,&quot;userpassword&quot;:&quot;wz&quot;}</a><br>4.<a href=\"http://127.0.0.1:3000/login?type=delete&amp;query={&quot;username&quot;:&quot;ww&quot;}\" target=\"_blank\" rel=\"external\">http://127.0.0.1:3000/login?type=delete&amp;query={&quot;username&quot;:&quot;ww&quot;}</a></p>\n<blockquote>\n<p>提供的测试url分别做了：1 向数据库中插入一条数据，2 在数据库中查找users表中所有数据，3 修改第一步中添加的数据，4 删除第三步中修改的数据。都以json格式返回给客户端。</p>\n</blockquote>\n","excerpt":"<p>这篇文章中，我们使用nodejs搭建简易服务器，然后开发一个登录过程中使用的增删改查接口，数据库使用mongoDB,操作数据库模块选用mongoose。</p>\n<h4 id=\"创建nodejs工程\">创建nodejs工程</h4><blockquote>\n<p>npm init<br>创建package.json文件</p>\n</blockquote>","more":"<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"nodeblog\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">\"author\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</div><div class=\"line\">  <span class=\"attr\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">\"express\"</span>: <span class=\"string\">\"^4.14.0\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"mongoose\"</span>: <span class=\"string\">\"^4.6.5\"</span>,</div><div class=\"line\">    <span class=\"attr\">\"url\"</span>: <span class=\"string\">\"^0.11.0\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>dependencies中显示的是安装的依赖包，下面有安装过程，先不用考虑</p>\n</blockquote>\n<h4 id=\"使用express\">使用express</h4><blockquote>\n<p>sudo npm install express –save<br>快速构建web应用模块 资料: <a href=\"http://www.expressjs.com.cn/4x/api.html\">http://www.expressjs.com.cn/4x/api.html</a></p>\n</blockquote>\n<h4 id=\"app-js\">app.js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\">app.get(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'hello world'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'nodejs server start, listen port 3000'</span>);</div></pre></td></tr></table></figure>\n<blockquote>\n<p>浏览器打开 <a href=\"http://127.0.0.1:3000/\">http://127.0.0.1:3000/</a> 页面显示 hello world</p>\n</blockquote>\n<h4 id=\"使用mongoose\">使用mongoose</h4><blockquote>\n<p>sudo npm install mongoose –save<br>数据库操作模块</p>\n</blockquote>\n<h4 id=\"安装其他模块\">安装其他模块</h4><blockquote>\n<p>sudo npm install url –save<br>辅助解析url参数</p>\n</blockquote>\n<h4 id=\"nodejs操作数据库\">nodejs操作数据库</h4><blockquote>\n<p>app.js 程序主文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> app = express();</div><div class=\"line\"><span class=\"keyword\">var</span> routes = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/index'</span>);</div><div class=\"line\">app.use(<span class=\"string\">'/'</span>, routes);</div><div class=\"line\">app.listen(<span class=\"number\">3000</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'nodejs server start, listen port 3000'</span>);</div></pre></td></tr></table></figure></p>\n<p>routes/index.js 路由文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"><span class=\"keyword\">var</span> login = <span class=\"built_in\">require</span>(<span class=\"string\">'../main/login'</span>);</div><div class=\"line\">router.get([<span class=\"string\">'/login'</span>], <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    login(req, res, next);</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure></p>\n<p>main/config.js 数据库配置文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> config = &#123;</div><div class=\"line\">\t<span class=\"attr\">dbHost</span>: <span class=\"string\">'127.0.0.1'</span>,</div><div class=\"line\">\t<span class=\"attr\">dbPort</span>: <span class=\"string\">'27017'</span>,</div><div class=\"line\">\t<span class=\"attr\">dbAdmin</span>: <span class=\"string\">'superuser'</span>,</div><div class=\"line\">\t<span class=\"attr\">dbPassword</span>: <span class=\"string\">'pwd'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = config;</div></pre></td></tr></table></figure></p>\n<p>main/loginSchema.js 数据库表结构<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> loginSchema = <span class=\"keyword\">new</span> mongoose.Schema(&#123;</div><div class=\"line\">\t<span class=\"attr\">username</span>: <span class=\"built_in\">String</span>,</div><div class=\"line\">\t<span class=\"attr\">userpassword</span>: <span class=\"built_in\">String</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = loginSchema;</div></pre></td></tr></table></figure></p>\n<p>main/login.js 登录增删改查逻辑文件<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>),</div><div class=\"line\">    mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>),</div><div class=\"line\">    loginSchema = <span class=\"built_in\">require</span>(<span class=\"string\">'./loginSchema'</span>),</div><div class=\"line\">    config = <span class=\"built_in\">require</span>(<span class=\"string\">'./config'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> opt = &#123;</div><div class=\"line\">        <span class=\"attr\">user</span>: config.dbAdmin,</div><div class=\"line\">        <span class=\"attr\">pass</span>: config.dbPassword,</div><div class=\"line\">        <span class=\"attr\">auth</span>: &#123;</div><div class=\"line\">            <span class=\"attr\">authdb</span>: <span class=\"string\">'admin'</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    db = mongoose.createConnection(config.dbHost, <span class=\"string\">'userinfo'</span>, config.dbPort, opt),</div><div class=\"line\">    pageModule = db.model(<span class=\"string\">\"user\"</span>, loginSchema);</div><div class=\"line\"><span class=\"keyword\">var</span> result,</div><div class=\"line\">    dbSuccess = &#123;</div><div class=\"line\">    \t<span class=\"attr\">ret</span>:<span class=\"literal\">true</span>,</div><div class=\"line\">    \t<span class=\"attr\">data</span>:&#123;&#125;</div><div class=\"line\">    &#125;, </div><div class=\"line\">    dbError = &#123;</div><div class=\"line\">    \t<span class=\"attr\">ret</span>:<span class=\"literal\">false</span>,</div><div class=\"line\">    \t<span class=\"attr\">data</span>:<span class=\"string\">'fail'</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  存储数据</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">saveData</span>(<span class=\"params\">req, res, next, pageData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> pageDataModule = <span class=\"keyword\">new</span> pageModule(<span class=\"built_in\">JSON</span>.parse(pageData));</div><div class=\"line\">    pageDataModule.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json;charset=UTF-8\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbError);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">        dbSuccess.data = <span class=\"string\">'操作成功'</span>;</div><div class=\"line\">        result = <span class=\"built_in\">JSON</span>.stringify(dbSuccess);</div><div class=\"line\">        res.end(result);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  删除数据</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deleteData</span>(<span class=\"params\">req, res, next,query</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> query = query ? <span class=\"built_in\">JSON</span>.parse(query) : &#123;&#125;;</div><div class=\"line\">    pageModule.remove(query).exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json;charset=UTF-8\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbError);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">        dbSuccess.data = <span class=\"string\">'操作成功'</span>;</div><div class=\"line\">        result = <span class=\"built_in\">JSON</span>.stringify(dbSuccess);</div><div class=\"line\">        res.end(result);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  更新数据</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updateData</span>(<span class=\"params\">req, res, next,query, pageData</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> query = query ? <span class=\"built_in\">JSON</span>.parse(query) : &#123;&#125;;</div><div class=\"line\">    pageData = <span class=\"built_in\">JSON</span>.parse(pageData);</div><div class=\"line\">    pageModule.findOneAndUpdate(query, pageData).exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json;charset=UTF-8\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbError);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">        dbSuccess.data = <span class=\"string\">'操作成功'</span>;</div><div class=\"line\">        result = <span class=\"built_in\">JSON</span>.stringify(dbSuccess);</div><div class=\"line\">        res.end(result);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  查询数据</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queryData</span>(<span class=\"params\">req, res, next,query</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> query = query ? <span class=\"built_in\">JSON</span>.parse(query) : &#123;&#125;;</div><div class=\"line\">    pageModule.find(query).exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json;charset=UTF-8\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbError);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(data &amp;&amp; data.length)&#123;</div><div class=\"line\">            dbSuccess.data = data;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbSuccess);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbError);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> *  增删改查入口</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">login</span>(<span class=\"params\">req, res, next</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> queryObj = url.parse(<span class=\"built_in\">decodeURIComponent</span>(req.url), <span class=\"literal\">true</span>).query,</div><div class=\"line\">\t    type = queryObj.type,</div><div class=\"line\">\t    query = queryObj.query,</div><div class=\"line\">\t    pageData = queryObj.pageData;</div><div class=\"line\">\t<span class=\"keyword\">switch</span>(type)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'add'</span>:</div><div class=\"line\">\t\t\tsaveData(req, res, next,pageData);</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'delete'</span>:</div><div class=\"line\">\t\t\tdeleteData(req, res, next,query);</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'update'</span>:</div><div class=\"line\">\t\t\tupdateData(req, res, next,query, pageData)</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">case</span> <span class=\"string\">'find'</span>:</div><div class=\"line\">\t\t\tqueryData(req, res, next,query)</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">default</span>:</div><div class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = login;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"测试url\">测试url</h4><p>1.<a href=\"http://127.0.0.1:3000/login?type=add&amp;pageData={&quot;username&quot;:&quot;wz&quot;,&quot;userpassword&quot;:&quot;wz&quot;}\">http://127.0.0.1:3000/login?type=add&amp;pageData={&quot;username&quot;:&quot;wz&quot;,&quot;userpassword&quot;:&quot;wz&quot;}</a><br>2.<a href=\"http://127.0.0.1:3000/login?type=find\">http://127.0.0.1:3000/login?type=find</a><br>3.<a href=\"http://127.0.0.1:3000/login?type=update&amp;query={&quot;username&quot;:&quot;wz&quot;}&amp;pageData={&quot;username&quot;:&quot;ww&quot;,&quot;userpassword&quot;:&quot;wz&quot;}\">http://127.0.0.1:3000/login?type=update&amp;query={&quot;username&quot;:&quot;wz&quot;}&amp;pageData={&quot;username&quot;:&quot;ww&quot;,&quot;userpassword&quot;:&quot;wz&quot;}</a><br>4.<a href=\"http://127.0.0.1:3000/login?type=delete&amp;query={&quot;username&quot;:&quot;ww&quot;}\">http://127.0.0.1:3000/login?type=delete&amp;query={&quot;username&quot;:&quot;ww&quot;}</a></p>\n<blockquote>\n<p>提供的测试url分别做了：1 向数据库中插入一条数据，2 在数据库中查找users表中所有数据，3 修改第一步中添加的数据，4 删除第三步中修改的数据。都以json格式返回给客户端。</p>\n</blockquote>"},{"title":"nodejs中fs模块","date":"2015-11-05T07:03:01.000Z","toc":true,"_content":"#### 文件操作模块File System\n* 使用的时候只需要 `var fs = require(‘fs’);`\n#### 常用方法\n##### rename\n* `fs.rename(oldPath, newPath, callback)`\n传入原路径，新路径，回调方法，回调中主要用来检测err异常信息\n```javascript\nvar fs = require('fs');\nfs.rename('jq-1.7.1.js','src/jq-1.7.2.js', function(err){\n if(err){\n    console.log('rename error');\n    throw err;\n }\n console.log('rename success');\n})\n//新路径中src必须存在，否则会报异常\n```\n<!--more-->\n\n##### chmod\n* `fs.chmod(path, mode, callback)`\n修改文件权限，传入文件路径，权限类型，回调函数。\n```javascript\nvar fs = require('fs');\nfs.chmod('jq-1.7.2.js',0777,function(err){\nif(err){\n    console.log('chmod error');\n    throw err;\n }\n console.log('chmod success');\n})\n```\n##### stat\n* `fs.stat(path, callback)`\n获取文件信息，传入文件路径，回调函数，回调中两个参数，异常以及文件信息数组\n```javascript\nvar fs = require('fs');\nfs.stat('jq-1.7.2.js', function(err, stats){\n if(err){\n  console.log('stat error');\n  throw err;\n }else{\n  console.log('stat success');\n  console.log(stats);\n }\n})\nstats.isFile() —— 如果是个标准文件，而不是目录，socket，符号链接或者设备返回true\nstats.isDiretory() —— 如果是目录则返回tue\nstats.isBlockDevice() —— 如果是块设备则返回true\nstats.isChracterDevice() —— 如果是字符设备返回true\nstats.isSymbolickLink() —— 如果是文件链接返回true\nstats.isFifo() —— 如果是个FIFO返回true\nstats.isSocket() —— 如果是个socket返回true\n```\n##### realpath\n* `fs.realpath(path, cache, callback)`\n获取真实路径\n传入参数有文件路径，文件路径中关键字的映射路径，回调，回调中包含异常err以及resolvedPath真实地址\n```javascript\nvar cache = {'/www':'/home/q/www'};\nfs.realpath('/www/project', cache, function (err, resolvedPath) {\n  if (err) {\n    console.log('realpath error');\n    throw err;\n  }\n  console.log('realpath success');\n  console.log(resolvedPath);\n});\n```\n##### rmdir\n* `fs.rmdir(path, callback)`\n删除目录，path要删除的目录，callback回调err\n```javascript\nvar fs = require('fs');\nfs.rmdir('src', function(err){\n if(err){\n  console.log('rmdir err');\n  throw err;\n }\n\n  console.log(\"rmdir success\");\n});\n```\n##### mkdir\n* `fs.mkdir(path, mode, callback)`\n创建目录，path要创建的目录，mode文件权限，callback回调err\n```javascript\nvar fs = require('fs');\nfs.mkdir('src', 0777, function(err){\n if(err){\n  console.log('mkdir err');\n  throw err;\n }\n\n  console.log(\"mkdir success\");\n});\n```\n##### readdir\n* fs.readdir(path, callback)\n读取目录中内容，path要读取的路径，callback回调，err files,files参数保存了目录中所有文件名的数组\n```javascript\nvar fs = require('fs');\nfs.readdir('src', function(err,files){\n if(err){\n  console.log('readdir err');\n  throw err;\n }\n  console.log(\"readdir success\");\n  console.log(files);\n});\n```\n##### open\n* `fs.open(path, flags, mode, callback)`\n打开文件，处理文件之前，需要打开文件\n文件路径，打开方式(r，r+，w，w+，a或者a+)，回调函数 err fd\n```javascript\nvar fs = require('fs');\nfs.open('/src/test', 'r', function(err, fd) {\n    if(err){\n        console.log('open err');\n        throw err;\n    }\n    console.log(fd);\n});\n```\n##### close\n* `fs.close(fd, callback)`\n任何读写操作之后都要关闭文件\n```javascript\nvar fs = require('fs');\nfs.open('/src/test', 'r', function(err, fd) {\n    if(err){\n        console.log('open err');\n        throw err;\n    }\n    console.log(fd);\n    fs.close(fd,function(err){\n        throw err;\n    });\n});\n```\n##### write\n* `fs.write(fd, buffer, offset, length, position, callback)`\n将buffer写入文件\nfd文件描述符,buffer缓冲区,offset-buffer写入的偏移量, length指定文件写入字节数长度, position指定文件写入的起始位置，callback（err, bytesWritten, buffer）bytesWritten指定多少字节数将被写入到文件 ,buffer返回缓冲区对象\n```javascript\nvar fs = require('fs');\nfs.open('src/test.js', 'a', function(err, fd) {\n\tif (err) {\n\t\tconsole.log('open err');\n\t\tthrow err;\n\t}\n\tvar buf = new Buffer(8);\n\tfs.write(fd, buf, 0, 8, 0, function(err, bytesWritten, buffer) {\n\t\tif (err) {\n\t\t\tconsole.log('write err');\n\t\t\tthrow err;\n\t\t}\n\t\tconsole.log(bytesWritten);\n\t\tconsole.log(buffer);\n\n\t\tfs.close(fd, function(err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('close err');\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('close');\n\t\t})\n\t})\n});\n```\n##### write\n* `fs.write(fd, data, position, encoding, callback)`\n将data写入文件\nfd文件描述符,data写入数据，encoding文件编码，callback(err, written, string) written指定多少字符数将被写入到文件，string返回的Buffer\n```javascript\nvar fs = require('fs');\nfs.open('src/test.js', 'a', function(err, fd) {\n\tif (err) {\n\t\tconsole.log('open err');\n\t\tthrow err;\n\t}\n\tvar data = 'test';\n\tfs.write(fd, data, 0, 'utf-8', function(err, written, string) {\n\t\tif (err) {\n\t\t\tconsole.log('write err');\n\t\t\tthrow err;\n\t\t}\n\t\tconsole.log(written);\n\t\tconsole.log(string);\n\n\t\tfs.close(fd, function(err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('close err');\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('close');\n\t\t})\n\t})\n})\n```\n##### read\n* `fs.read(fd, buffer, offset, length, position, callback)`\n根据指定的文件描述符fd来读取文件数据并写入buffer指向的缓冲区对象\nfd 文件描述符，buffer缓冲区，数据将被写入，offset，buffer写入偏移量，length文件指定读取长度，position指定文件读取开始位置，传null表示开始位置，callback回调函数，err，bytesRead读的字节数, buffer缓冲区对象\n```javascript\nvar fs = require('fs');\nfs.open('/src/test', 'r', function(err, fd) {\n    if(err){\n        console.log('open err');\n        throw err;\n    }\n    var buf = new Buffer(8); \n    fs.read(fd, buf, 0, 8, null, function(err,bytesRead,buffer){ \n      if(err){ \n       console.log('read err'); \n       throw err;\n       return; \n      } \n      console.log('bytesRead' +bytesRead); \n      console.log(buffer); \n      fs.close(fd,function(err){\n        throw err;\n      });\n     }) \n});\n```\n##### readFile\n* `fs.readFile(filename, options, callback)`\n以异步的方式读取文件内容。\nfilename 文件路径，option对象，包含 encoding，编码格式，该项是可选的，callback err data\n```javascript\nvar fs = require('fs'); \nfs.readFile('src/test.txt','utf-8', function(err,data){ \n if(err){ \n  console.log('readFile err');\n  throw err; \n }\n  console.log(data);\n})\n```\n##### writeFile\n* `fs.writeFile(filename, data, options, callback)`\n以异步的方式写入文件，文件已存在将被覆盖。\nfilename文件名称，data将要写入的内容，可以使字符串或buffer数据。\noption数组对象，包含：encoding mode flag\ncallback回调err。\n```javascript\nfs.writeFile('src/test.txt', 'test', function (err) {\n  if (err) {\n     console.log('write err');\n     throw err;\n  }\n  console.log('writeFile success');\n});\n```\n##### appendFile\n* `fs.appendFile(filename, data, options, callback)`\n以异步的方式将data插入到文件里，文件不存在会创建一个新文件\n参数解释同上\n```javascript\nfs.appendFile('src/test.txt', 'test', function (err) {\n  if (err) {\n     console.log('write err');\n     throw err;\n  }\n  console.log('writeFile success');\n});\n```\n##### exists\n* `fs.exists(path, callback)`\n检测某个路径下是否存在文件\npath文件路径，callback回调exists true false\n```javascript \nvar fs = require('fs'); \nfs.exists('/src/test', function (exists) { \n\tif(exists){ \n\t\tconsole.log('exists'); \n\t}else{ \n\t\tconsole.log('not exists');\n\t} \n});\n```\n##### 所有方法都有对应的同步操作方式，方法名后面加上Sync,参数中没有callback","source":"_posts/nodejs中fs模块.md","raw":"title: nodejs中fs模块\ndate: 2015-11-05 15:03:01\ntags: nodejs\ntoc: true\n---\n#### 文件操作模块File System\n* 使用的时候只需要 `var fs = require(‘fs’);`\n#### 常用方法\n##### rename\n* `fs.rename(oldPath, newPath, callback)`\n传入原路径，新路径，回调方法，回调中主要用来检测err异常信息\n```javascript\nvar fs = require('fs');\nfs.rename('jq-1.7.1.js','src/jq-1.7.2.js', function(err){\n if(err){\n    console.log('rename error');\n    throw err;\n }\n console.log('rename success');\n})\n//新路径中src必须存在，否则会报异常\n```\n<!--more-->\n\n##### chmod\n* `fs.chmod(path, mode, callback)`\n修改文件权限，传入文件路径，权限类型，回调函数。\n```javascript\nvar fs = require('fs');\nfs.chmod('jq-1.7.2.js',0777,function(err){\nif(err){\n    console.log('chmod error');\n    throw err;\n }\n console.log('chmod success');\n})\n```\n##### stat\n* `fs.stat(path, callback)`\n获取文件信息，传入文件路径，回调函数，回调中两个参数，异常以及文件信息数组\n```javascript\nvar fs = require('fs');\nfs.stat('jq-1.7.2.js', function(err, stats){\n if(err){\n  console.log('stat error');\n  throw err;\n }else{\n  console.log('stat success');\n  console.log(stats);\n }\n})\nstats.isFile() —— 如果是个标准文件，而不是目录，socket，符号链接或者设备返回true\nstats.isDiretory() —— 如果是目录则返回tue\nstats.isBlockDevice() —— 如果是块设备则返回true\nstats.isChracterDevice() —— 如果是字符设备返回true\nstats.isSymbolickLink() —— 如果是文件链接返回true\nstats.isFifo() —— 如果是个FIFO返回true\nstats.isSocket() —— 如果是个socket返回true\n```\n##### realpath\n* `fs.realpath(path, cache, callback)`\n获取真实路径\n传入参数有文件路径，文件路径中关键字的映射路径，回调，回调中包含异常err以及resolvedPath真实地址\n```javascript\nvar cache = {'/www':'/home/q/www'};\nfs.realpath('/www/project', cache, function (err, resolvedPath) {\n  if (err) {\n    console.log('realpath error');\n    throw err;\n  }\n  console.log('realpath success');\n  console.log(resolvedPath);\n});\n```\n##### rmdir\n* `fs.rmdir(path, callback)`\n删除目录，path要删除的目录，callback回调err\n```javascript\nvar fs = require('fs');\nfs.rmdir('src', function(err){\n if(err){\n  console.log('rmdir err');\n  throw err;\n }\n\n  console.log(\"rmdir success\");\n});\n```\n##### mkdir\n* `fs.mkdir(path, mode, callback)`\n创建目录，path要创建的目录，mode文件权限，callback回调err\n```javascript\nvar fs = require('fs');\nfs.mkdir('src', 0777, function(err){\n if(err){\n  console.log('mkdir err');\n  throw err;\n }\n\n  console.log(\"mkdir success\");\n});\n```\n##### readdir\n* fs.readdir(path, callback)\n读取目录中内容，path要读取的路径，callback回调，err files,files参数保存了目录中所有文件名的数组\n```javascript\nvar fs = require('fs');\nfs.readdir('src', function(err,files){\n if(err){\n  console.log('readdir err');\n  throw err;\n }\n  console.log(\"readdir success\");\n  console.log(files);\n});\n```\n##### open\n* `fs.open(path, flags, mode, callback)`\n打开文件，处理文件之前，需要打开文件\n文件路径，打开方式(r，r+，w，w+，a或者a+)，回调函数 err fd\n```javascript\nvar fs = require('fs');\nfs.open('/src/test', 'r', function(err, fd) {\n    if(err){\n        console.log('open err');\n        throw err;\n    }\n    console.log(fd);\n});\n```\n##### close\n* `fs.close(fd, callback)`\n任何读写操作之后都要关闭文件\n```javascript\nvar fs = require('fs');\nfs.open('/src/test', 'r', function(err, fd) {\n    if(err){\n        console.log('open err');\n        throw err;\n    }\n    console.log(fd);\n    fs.close(fd,function(err){\n        throw err;\n    });\n});\n```\n##### write\n* `fs.write(fd, buffer, offset, length, position, callback)`\n将buffer写入文件\nfd文件描述符,buffer缓冲区,offset-buffer写入的偏移量, length指定文件写入字节数长度, position指定文件写入的起始位置，callback（err, bytesWritten, buffer）bytesWritten指定多少字节数将被写入到文件 ,buffer返回缓冲区对象\n```javascript\nvar fs = require('fs');\nfs.open('src/test.js', 'a', function(err, fd) {\n\tif (err) {\n\t\tconsole.log('open err');\n\t\tthrow err;\n\t}\n\tvar buf = new Buffer(8);\n\tfs.write(fd, buf, 0, 8, 0, function(err, bytesWritten, buffer) {\n\t\tif (err) {\n\t\t\tconsole.log('write err');\n\t\t\tthrow err;\n\t\t}\n\t\tconsole.log(bytesWritten);\n\t\tconsole.log(buffer);\n\n\t\tfs.close(fd, function(err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('close err');\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('close');\n\t\t})\n\t})\n});\n```\n##### write\n* `fs.write(fd, data, position, encoding, callback)`\n将data写入文件\nfd文件描述符,data写入数据，encoding文件编码，callback(err, written, string) written指定多少字符数将被写入到文件，string返回的Buffer\n```javascript\nvar fs = require('fs');\nfs.open('src/test.js', 'a', function(err, fd) {\n\tif (err) {\n\t\tconsole.log('open err');\n\t\tthrow err;\n\t}\n\tvar data = 'test';\n\tfs.write(fd, data, 0, 'utf-8', function(err, written, string) {\n\t\tif (err) {\n\t\t\tconsole.log('write err');\n\t\t\tthrow err;\n\t\t}\n\t\tconsole.log(written);\n\t\tconsole.log(string);\n\n\t\tfs.close(fd, function(err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('close err');\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('close');\n\t\t})\n\t})\n})\n```\n##### read\n* `fs.read(fd, buffer, offset, length, position, callback)`\n根据指定的文件描述符fd来读取文件数据并写入buffer指向的缓冲区对象\nfd 文件描述符，buffer缓冲区，数据将被写入，offset，buffer写入偏移量，length文件指定读取长度，position指定文件读取开始位置，传null表示开始位置，callback回调函数，err，bytesRead读的字节数, buffer缓冲区对象\n```javascript\nvar fs = require('fs');\nfs.open('/src/test', 'r', function(err, fd) {\n    if(err){\n        console.log('open err');\n        throw err;\n    }\n    var buf = new Buffer(8); \n    fs.read(fd, buf, 0, 8, null, function(err,bytesRead,buffer){ \n      if(err){ \n       console.log('read err'); \n       throw err;\n       return; \n      } \n      console.log('bytesRead' +bytesRead); \n      console.log(buffer); \n      fs.close(fd,function(err){\n        throw err;\n      });\n     }) \n});\n```\n##### readFile\n* `fs.readFile(filename, options, callback)`\n以异步的方式读取文件内容。\nfilename 文件路径，option对象，包含 encoding，编码格式，该项是可选的，callback err data\n```javascript\nvar fs = require('fs'); \nfs.readFile('src/test.txt','utf-8', function(err,data){ \n if(err){ \n  console.log('readFile err');\n  throw err; \n }\n  console.log(data);\n})\n```\n##### writeFile\n* `fs.writeFile(filename, data, options, callback)`\n以异步的方式写入文件，文件已存在将被覆盖。\nfilename文件名称，data将要写入的内容，可以使字符串或buffer数据。\noption数组对象，包含：encoding mode flag\ncallback回调err。\n```javascript\nfs.writeFile('src/test.txt', 'test', function (err) {\n  if (err) {\n     console.log('write err');\n     throw err;\n  }\n  console.log('writeFile success');\n});\n```\n##### appendFile\n* `fs.appendFile(filename, data, options, callback)`\n以异步的方式将data插入到文件里，文件不存在会创建一个新文件\n参数解释同上\n```javascript\nfs.appendFile('src/test.txt', 'test', function (err) {\n  if (err) {\n     console.log('write err');\n     throw err;\n  }\n  console.log('writeFile success');\n});\n```\n##### exists\n* `fs.exists(path, callback)`\n检测某个路径下是否存在文件\npath文件路径，callback回调exists true false\n```javascript \nvar fs = require('fs'); \nfs.exists('/src/test', function (exists) { \n\tif(exists){ \n\t\tconsole.log('exists'); \n\t}else{ \n\t\tconsole.log('not exists');\n\t} \n});\n```\n##### 所有方法都有对应的同步操作方式，方法名后面加上Sync,参数中没有callback","slug":"nodejs中fs模块","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhov001xt0yjajwzldnk","content":"<h4 id=\"文件操作模块File_System\">文件操作模块File System</h4><ul>\n<li>使用的时候只需要 <code>var fs = require(‘fs’);</code><h4 id=\"常用方法\">常用方法</h4><h5 id=\"rename\">rename</h5></li>\n<li><code>fs.rename(oldPath, newPath, callback)</code><br>传入原路径，新路径，回调方法，回调中主要用来检测err异常信息<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.rename(<span class=\"string\">'jq-1.7.1.js'</span>,<span class=\"string\">'src/jq-1.7.2.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'rename error'</span>);</div><div class=\"line\">    <span class=\"keyword\">throw</span> err;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'rename success'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//新路径中src必须存在，否则会报异常</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h5 id=\"chmod\">chmod</h5><ul>\n<li><code>fs.chmod(path, mode, callback)</code><br>修改文件权限，传入文件路径，权限类型，回调函数。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.chmod(<span class=\"string\">'jq-1.7.2.js'</span>,<span class=\"number\">0777</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\"><span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'chmod error'</span>);</div><div class=\"line\">    <span class=\"keyword\">throw</span> err;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'chmod success'</span>);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"stat\">stat</h5><ul>\n<li><code>fs.stat(path, callback)</code><br>获取文件信息，传入文件路径，回调函数，回调中两个参数，异常以及文件信息数组<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.stat(<span class=\"string\">'jq-1.7.2.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, stats</span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'stat error'</span>);</div><div class=\"line\">  <span class=\"keyword\">throw</span> err;</div><div class=\"line\"> &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'stat success'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(stats);</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">stats.isFile() —— 如果是个标准文件，而不是目录，socket，符号链接或者设备返回<span class=\"literal\">true</span></div><div class=\"line\">stats.isDiretory() —— 如果是目录则返回tue</div><div class=\"line\">stats.isBlockDevice() —— 如果是块设备则返回<span class=\"literal\">true</span></div><div class=\"line\">stats.isChracterDevice() —— 如果是字符设备返回<span class=\"literal\">true</span></div><div class=\"line\">stats.isSymbolickLink() —— 如果是文件链接返回<span class=\"literal\">true</span></div><div class=\"line\">stats.isFifo() —— 如果是个FIFO返回<span class=\"literal\">true</span></div><div class=\"line\">stats.isSocket() —— 如果是个socket返回<span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"realpath\">realpath</h5><ul>\n<li><code>fs.realpath(path, cache, callback)</code><br>获取真实路径<br>传入参数有文件路径，文件路径中关键字的映射路径，回调，回调中包含异常err以及resolvedPath真实地址<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cache = &#123;<span class=\"string\">'/www'</span>:<span class=\"string\">'/home/q/www'</span>&#125;;</div><div class=\"line\">fs.realpath(<span class=\"string\">'/www/project'</span>, cache, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, resolvedPath</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'realpath error'</span>);</div><div class=\"line\">    <span class=\"keyword\">throw</span> err;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'realpath success'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(resolvedPath);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"rmdir\">rmdir</h5><ul>\n<li><code>fs.rmdir(path, callback)</code><br>删除目录，path要删除的目录，callback回调err<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.rmdir(<span class=\"string\">'src'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'rmdir err'</span>);</div><div class=\"line\">  <span class=\"keyword\">throw</span> err;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rmdir success\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"mkdir\">mkdir</h5><ul>\n<li><code>fs.mkdir(path, mode, callback)</code><br>创建目录，path要创建的目录，mode文件权限，callback回调err<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.mkdir(<span class=\"string\">'src'</span>, <span class=\"number\">0777</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'mkdir err'</span>);</div><div class=\"line\">  <span class=\"keyword\">throw</span> err;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"mkdir success\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"readdir\">readdir</h5><ul>\n<li>fs.readdir(path, callback)<br>读取目录中内容，path要读取的路径，callback回调，err files,files参数保存了目录中所有文件名的数组<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.readdir(<span class=\"string\">'src'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,files</span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'readdir err'</span>);</div><div class=\"line\">  <span class=\"keyword\">throw</span> err;</div><div class=\"line\"> &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"readdir success\"</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(files);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"open\">open</h5><ul>\n<li><code>fs.open(path, flags, mode, callback)</code><br>打开文件，处理文件之前，需要打开文件<br>文件路径，打开方式(r，r+，w，w+，a或者a+)，回调函数 err fd<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.open(<span class=\"string\">'/src/test'</span>, <span class=\"string\">'r'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, fd</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'open err'</span>);</div><div class=\"line\">        <span class=\"keyword\">throw</span> err;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(fd);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"close\">close</h5><ul>\n<li><code>fs.close(fd, callback)</code><br>任何读写操作之后都要关闭文件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.open(<span class=\"string\">'/src/test'</span>, <span class=\"string\">'r'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, fd</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'open err'</span>);</div><div class=\"line\">        <span class=\"keyword\">throw</span> err;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(fd);</div><div class=\"line\">    fs.close(fd,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> err;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"write\">write</h5><ul>\n<li><code>fs.write(fd, buffer, offset, length, position, callback)</code><br>将buffer写入文件<br>fd文件描述符,buffer缓冲区,offset-buffer写入的偏移量, length指定文件写入字节数长度, position指定文件写入的起始位置，callback（err, bytesWritten, buffer）bytesWritten指定多少字节数将被写入到文件 ,buffer返回缓冲区对象<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.open(<span class=\"string\">'src/test.js'</span>, <span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, fd</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'open err'</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">8</span>);</div><div class=\"line\">\tfs.write(fd, buf, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, bytesWritten, buffer</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'write err'</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> err;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(bytesWritten);</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(buffer);</div><div class=\"line\"></div><div class=\"line\">\t\tfs.close(fd, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'close err'</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> err;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'close'</span>);</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"write-1\">write</h5><ul>\n<li><code>fs.write(fd, data, position, encoding, callback)</code><br>将data写入文件<br>fd文件描述符,data写入数据，encoding文件编码，callback(err, written, string) written指定多少字符数将被写入到文件，string返回的Buffer<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.open(<span class=\"string\">'src/test.js'</span>, <span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, fd</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'open err'</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">var</span> data = <span class=\"string\">'test'</span>;</div><div class=\"line\">\tfs.write(fd, data, <span class=\"number\">0</span>, <span class=\"string\">'utf-8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, written, string</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'write err'</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> err;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(written);</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(string);</div><div class=\"line\"></div><div class=\"line\">\t\tfs.close(fd, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'close err'</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> err;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'close'</span>);</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"read\">read</h5><ul>\n<li><code>fs.read(fd, buffer, offset, length, position, callback)</code><br>根据指定的文件描述符fd来读取文件数据并写入buffer指向的缓冲区对象<br>fd 文件描述符，buffer缓冲区，数据将被写入，offset，buffer写入偏移量，length文件指定读取长度，position指定文件读取开始位置，传null表示开始位置，callback回调函数，err，bytesRead读的字节数, buffer缓冲区对象<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.open(<span class=\"string\">'/src/test'</span>, <span class=\"string\">'r'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, fd</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'open err'</span>);</div><div class=\"line\">        <span class=\"keyword\">throw</span> err;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">8</span>); </div><div class=\"line\">    fs.read(fd, buf, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,bytesRead,buffer</span>)</span>&#123; </div><div class=\"line\">      <span class=\"keyword\">if</span>(err)&#123; </div><div class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'read err'</span>); </div><div class=\"line\">       <span class=\"keyword\">throw</span> err;</div><div class=\"line\">       <span class=\"keyword\">return</span>; </div><div class=\"line\">      &#125; </div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'bytesRead'</span> +bytesRead); </div><div class=\"line\">      <span class=\"built_in\">console</span>.log(buffer); </div><div class=\"line\">      fs.close(fd,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> err;</div><div class=\"line\">      &#125;);</div><div class=\"line\">     &#125;) </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"readFile\">readFile</h5><ul>\n<li><code>fs.readFile(filename, options, callback)</code><br>以异步的方式读取文件内容。<br>filename 文件路径，option对象，包含 encoding，编码格式，该项是可选的，callback err data<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>); </div><div class=\"line\">fs.readFile(<span class=\"string\">'src/test.txt'</span>,<span class=\"string\">'utf-8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123; </div><div class=\"line\"> <span class=\"keyword\">if</span>(err)&#123; </div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'readFile err'</span>);</div><div class=\"line\">  <span class=\"keyword\">throw</span> err; </div><div class=\"line\"> &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"writeFile\">writeFile</h5><ul>\n<li><code>fs.writeFile(filename, data, options, callback)</code><br>以异步的方式写入文件，文件已存在将被覆盖。<br>filename文件名称，data将要写入的内容，可以使字符串或buffer数据。<br>option数组对象，包含：encoding mode flag<br>callback回调err。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.writeFile(<span class=\"string\">'src/test.txt'</span>, <span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'write err'</span>);</div><div class=\"line\">     <span class=\"keyword\">throw</span> err;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'writeFile success'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"appendFile\">appendFile</h5><ul>\n<li><code>fs.appendFile(filename, data, options, callback)</code><br>以异步的方式将data插入到文件里，文件不存在会创建一个新文件<br>参数解释同上<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.appendFile(<span class=\"string\">'src/test.txt'</span>, <span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'write err'</span>);</div><div class=\"line\">     <span class=\"keyword\">throw</span> err;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'writeFile success'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"exists\">exists</h5><ul>\n<li><code>fs.exists(path, callback)</code><br>检测某个路径下是否存在文件<br>path文件路径，callback回调exists true false<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>); </div><div class=\"line\">fs.exists(<span class=\"string\">'/src/test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">exists</span>) </span>&#123; </div><div class=\"line\">\t<span class=\"keyword\">if</span>(exists)&#123; </div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'exists'</span>); </div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123; </div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'not exists'</span>);</div><div class=\"line\">\t&#125; </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"所有方法都有对应的同步操作方式，方法名后面加上Sync,参数中没有callback\">所有方法都有对应的同步操作方式，方法名后面加上Sync,参数中没有callback</h5>","excerpt":"<h4 id=\"文件操作模块File_System\">文件操作模块File System</h4><ul>\n<li>使用的时候只需要 <code>var fs = require(‘fs’);</code><h4 id=\"常用方法\">常用方法</h4><h5 id=\"rename\">rename</h5></li>\n<li><code>fs.rename(oldPath, newPath, callback)</code><br>传入原路径，新路径，回调方法，回调中主要用来检测err异常信息<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.rename(<span class=\"string\">'jq-1.7.1.js'</span>,<span class=\"string\">'src/jq-1.7.2.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'rename error'</span>);</div><div class=\"line\">    <span class=\"keyword\">throw</span> err;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'rename success'</span>);</div><div class=\"line\">&#125;)</div><div class=\"line\"><span class=\"comment\">//新路径中src必须存在，否则会报异常</span></div></pre></td></tr></table></figure>\n</li>\n</ul>","more":"<h5 id=\"chmod\">chmod</h5><ul>\n<li><code>fs.chmod(path, mode, callback)</code><br>修改文件权限，传入文件路径，权限类型，回调函数。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.chmod(<span class=\"string\">'jq-1.7.2.js'</span>,<span class=\"number\">0777</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\"><span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'chmod error'</span>);</div><div class=\"line\">    <span class=\"keyword\">throw</span> err;</div><div class=\"line\"> &#125;</div><div class=\"line\"> <span class=\"built_in\">console</span>.log(<span class=\"string\">'chmod success'</span>);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"stat\">stat</h5><ul>\n<li><code>fs.stat(path, callback)</code><br>获取文件信息，传入文件路径，回调函数，回调中两个参数，异常以及文件信息数组<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.stat(<span class=\"string\">'jq-1.7.2.js'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, stats</span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'stat error'</span>);</div><div class=\"line\">  <span class=\"keyword\">throw</span> err;</div><div class=\"line\"> &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'stat success'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(stats);</div><div class=\"line\"> &#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">stats.isFile() —— 如果是个标准文件，而不是目录，socket，符号链接或者设备返回<span class=\"literal\">true</span></div><div class=\"line\">stats.isDiretory() —— 如果是目录则返回tue</div><div class=\"line\">stats.isBlockDevice() —— 如果是块设备则返回<span class=\"literal\">true</span></div><div class=\"line\">stats.isChracterDevice() —— 如果是字符设备返回<span class=\"literal\">true</span></div><div class=\"line\">stats.isSymbolickLink() —— 如果是文件链接返回<span class=\"literal\">true</span></div><div class=\"line\">stats.isFifo() —— 如果是个FIFO返回<span class=\"literal\">true</span></div><div class=\"line\">stats.isSocket() —— 如果是个socket返回<span class=\"literal\">true</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"realpath\">realpath</h5><ul>\n<li><code>fs.realpath(path, cache, callback)</code><br>获取真实路径<br>传入参数有文件路径，文件路径中关键字的映射路径，回调，回调中包含异常err以及resolvedPath真实地址<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> cache = &#123;<span class=\"string\">'/www'</span>:<span class=\"string\">'/home/q/www'</span>&#125;;</div><div class=\"line\">fs.realpath(<span class=\"string\">'/www/project'</span>, cache, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, resolvedPath</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'realpath error'</span>);</div><div class=\"line\">    <span class=\"keyword\">throw</span> err;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'realpath success'</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(resolvedPath);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"rmdir\">rmdir</h5><ul>\n<li><code>fs.rmdir(path, callback)</code><br>删除目录，path要删除的目录，callback回调err<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.rmdir(<span class=\"string\">'src'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'rmdir err'</span>);</div><div class=\"line\">  <span class=\"keyword\">throw</span> err;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"rmdir success\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"mkdir\">mkdir</h5><ul>\n<li><code>fs.mkdir(path, mode, callback)</code><br>创建目录，path要创建的目录，mode文件权限，callback回调err<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.mkdir(<span class=\"string\">'src'</span>, <span class=\"number\">0777</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'mkdir err'</span>);</div><div class=\"line\">  <span class=\"keyword\">throw</span> err;</div><div class=\"line\"> &#125;</div><div class=\"line\"></div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"mkdir success\"</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"readdir\">readdir</h5><ul>\n<li>fs.readdir(path, callback)<br>读取目录中内容，path要读取的路径，callback回调，err files,files参数保存了目录中所有文件名的数组<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.readdir(<span class=\"string\">'src'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,files</span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'readdir err'</span>);</div><div class=\"line\">  <span class=\"keyword\">throw</span> err;</div><div class=\"line\"> &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">\"readdir success\"</span>);</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(files);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"open\">open</h5><ul>\n<li><code>fs.open(path, flags, mode, callback)</code><br>打开文件，处理文件之前，需要打开文件<br>文件路径，打开方式(r，r+，w，w+，a或者a+)，回调函数 err fd<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.open(<span class=\"string\">'/src/test'</span>, <span class=\"string\">'r'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, fd</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'open err'</span>);</div><div class=\"line\">        <span class=\"keyword\">throw</span> err;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(fd);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"close\">close</h5><ul>\n<li><code>fs.close(fd, callback)</code><br>任何读写操作之后都要关闭文件<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.open(<span class=\"string\">'/src/test'</span>, <span class=\"string\">'r'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, fd</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'open err'</span>);</div><div class=\"line\">        <span class=\"keyword\">throw</span> err;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(fd);</div><div class=\"line\">    fs.close(fd,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> err;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"write\">write</h5><ul>\n<li><code>fs.write(fd, buffer, offset, length, position, callback)</code><br>将buffer写入文件<br>fd文件描述符,buffer缓冲区,offset-buffer写入的偏移量, length指定文件写入字节数长度, position指定文件写入的起始位置，callback（err, bytesWritten, buffer）bytesWritten指定多少字节数将被写入到文件 ,buffer返回缓冲区对象<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.open(<span class=\"string\">'src/test.js'</span>, <span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, fd</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'open err'</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">8</span>);</div><div class=\"line\">\tfs.write(fd, buf, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"number\">0</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, bytesWritten, buffer</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'write err'</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> err;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(bytesWritten);</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(buffer);</div><div class=\"line\"></div><div class=\"line\">\t\tfs.close(fd, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'close err'</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> err;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'close'</span>);</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"write-1\">write</h5><ul>\n<li><code>fs.write(fd, data, position, encoding, callback)</code><br>将data写入文件<br>fd文件描述符,data写入数据，encoding文件编码，callback(err, written, string) written指定多少字符数将被写入到文件，string返回的Buffer<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.open(<span class=\"string\">'src/test.js'</span>, <span class=\"string\">'a'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, fd</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'open err'</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">throw</span> err;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">var</span> data = <span class=\"string\">'test'</span>;</div><div class=\"line\">\tfs.write(fd, data, <span class=\"number\">0</span>, <span class=\"string\">'utf-8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, written, string</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'write err'</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">throw</span> err;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(written);</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(string);</div><div class=\"line\"></div><div class=\"line\">\t\tfs.close(fd, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'close err'</span>);</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> err;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'close'</span>);</div><div class=\"line\">\t\t&#125;)</div><div class=\"line\">\t&#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"read\">read</h5><ul>\n<li><code>fs.read(fd, buffer, offset, length, position, callback)</code><br>根据指定的文件描述符fd来读取文件数据并写入buffer指向的缓冲区对象<br>fd 文件描述符，buffer缓冲区，数据将被写入，offset，buffer写入偏移量，length文件指定读取长度，position指定文件读取开始位置，传null表示开始位置，callback回调函数，err，bytesRead读的字节数, buffer缓冲区对象<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.open(<span class=\"string\">'/src/test'</span>, <span class=\"string\">'r'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, fd</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'open err'</span>);</div><div class=\"line\">        <span class=\"keyword\">throw</span> err;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">8</span>); </div><div class=\"line\">    fs.read(fd, buf, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,bytesRead,buffer</span>)</span>&#123; </div><div class=\"line\">      <span class=\"keyword\">if</span>(err)&#123; </div><div class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">'read err'</span>); </div><div class=\"line\">       <span class=\"keyword\">throw</span> err;</div><div class=\"line\">       <span class=\"keyword\">return</span>; </div><div class=\"line\">      &#125; </div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">'bytesRead'</span> +bytesRead); </div><div class=\"line\">      <span class=\"built_in\">console</span>.log(buffer); </div><div class=\"line\">      fs.close(fd,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> err;</div><div class=\"line\">      &#125;);</div><div class=\"line\">     &#125;) </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"readFile\">readFile</h5><ul>\n<li><code>fs.readFile(filename, options, callback)</code><br>以异步的方式读取文件内容。<br>filename 文件路径，option对象，包含 encoding，编码格式，该项是可选的，callback err data<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>); </div><div class=\"line\">fs.readFile(<span class=\"string\">'src/test.txt'</span>,<span class=\"string\">'utf-8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err,data</span>)</span>&#123; </div><div class=\"line\"> <span class=\"keyword\">if</span>(err)&#123; </div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'readFile err'</span>);</div><div class=\"line\">  <span class=\"keyword\">throw</span> err; </div><div class=\"line\"> &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"writeFile\">writeFile</h5><ul>\n<li><code>fs.writeFile(filename, data, options, callback)</code><br>以异步的方式写入文件，文件已存在将被覆盖。<br>filename文件名称，data将要写入的内容，可以使字符串或buffer数据。<br>option数组对象，包含：encoding mode flag<br>callback回调err。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.writeFile(<span class=\"string\">'src/test.txt'</span>, <span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'write err'</span>);</div><div class=\"line\">     <span class=\"keyword\">throw</span> err;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'writeFile success'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"appendFile\">appendFile</h5><ul>\n<li><code>fs.appendFile(filename, data, options, callback)</code><br>以异步的方式将data插入到文件里，文件不存在会创建一个新文件<br>参数解释同上<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">fs.appendFile(<span class=\"string\">'src/test.txt'</span>, <span class=\"string\">'test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">     <span class=\"built_in\">console</span>.log(<span class=\"string\">'write err'</span>);</div><div class=\"line\">     <span class=\"keyword\">throw</span> err;</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">'writeFile success'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"exists\">exists</h5><ul>\n<li><code>fs.exists(path, callback)</code><br>检测某个路径下是否存在文件<br>path文件路径，callback回调exists true false<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>); </div><div class=\"line\">fs.exists(<span class=\"string\">'/src/test'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">exists</span>) </span>&#123; </div><div class=\"line\">\t<span class=\"keyword\">if</span>(exists)&#123; </div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'exists'</span>); </div><div class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123; </div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'not exists'</span>);</div><div class=\"line\">\t&#125; </div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"所有方法都有对应的同步操作方式，方法名后面加上Sync,参数中没有callback\">所有方法都有对应的同步操作方式，方法名后面加上Sync,参数中没有callback</h5>"},{"title":"nodejs利用session做登录控制","date":"2016-11-02T12:53:28.000Z","toc":true,"_content":"#### background\n\n&nbsp; &nbsp;&nbsp;&nbsp;登录的场景在我们日常应用中有很多，登录的实现过程大家都很清楚，无非就是拿着用户名密去数据库中查询，如果查到了就表示这个人是系统用户，可以登录并且使用系统。那么当用户访问系统页面的时候，我们怎么判断他是不是登录过了呢，这个时候就引出了session。\n&nbsp; &nbsp;&nbsp;&nbsp;session翻译成会话，session的生命周期和浏览器的生命周期一致，session从创建的一刻起开始生效，浏览器关闭session销毁。session是客户端与服务器之间保持状态的解决方案。这种会话的匹配是通过cookie来实现的。\n\n<!--more-->\n\n#### express-session\n\n&nbsp; &nbsp;&nbsp;&nbsp;express-session是基于express框架的专门处理session的中间件，安装 `sudo npm install express-session --save` , session的解析过程需要用到cookieParser, 安装 `sudo npm install cookieParser --save` , 我们在使用的时候，只需要把express-session加入到中间件中，这样所有的路由就都能使用它了，我们可以在req.session中设置和读取session的值。\n\n##### 应用\n\n改造上一节中的例子，这里只介绍一些增加项\napp.js (引用session，加入中间件)\n```javascript\n...\nvar session = require('express-session');\nvar cookieParser = require('cookie-parser');\n...\n...\napp.use(cookieParser());\napp.use(session({\n  resave: false,\n  saveUninitialized: true,\n  name: 'user',\n  cookie: { maxAge: 80000 },\n  secret: 'wz'\n}));\n...\n...\n\n```\n\nroutes/index.js (路由中检查登录session是否存在)\n```javascript\nfunction restrict(req, res, next) {\n  if (req.session.user) {\n    next();\n  } else {\n    res.redirect('/login.page');\n  }\n}\nrouter.get('/index.page',restrict, function(req, res){\n  res.send('success');\n});\nrouter.get('/login.page', function(req, res){\n  res.send('login');\n});\nrouter.get('/login', function(req, res, next){\n    login(req, res, next);\n});\nrouter.get('/logout', function(req, res){\n  req.session.destroy(function(){\n    res.redirect('/login.page');\n  });\n});\n```\n\nmain/login.js (只增加了注释部分的代码)\n```javascript\nfunction queryData(req, res, next,query) {\n    var query = query ? JSON.parse(query) : {};\n    pageModule.find(query).exec(function(err, data) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        if(data && data.length){\n            //只增加了登录成功后，创建一个session的过程\n            req.session.user = data[0].username;\n            dbSuccess.data = data;\n            result = JSON.stringify(dbSuccess);\n            res.end(result);\n        }else{\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n    });\n}\n```\n\n#### 测试过程\n```javascript\n1. http://127.0.0.1:3000/index.page\n2. http://127.0.0.1:3000/login?type=find\n3. http://127.0.0.1:3000/index.page\n```\n分别输入三个url，观察现象，第一个url输入的时候，因为不存在session,所以会跳转到登录页面，\n第二个url为模拟登录过程，创建了一个session，第三个url访问主页，此时存在session,所以可以看到首页内容。\n\n#### express-session常用参数\n* cookie Object类型，设置cookie的一些属性\n* domain cookie作用域\n* expires cookie失效时间\n* httpOnly 禁止客户端访问\n* maxAge 实效时长\n* path cookie路径\n* name 这是session id的值\n* resave 允许重新设置session\n* saveUninitialized 是否session可以修改\n* secret cookie密钥\n* store session存储方式 mongodb等\n\n#### express-session常用方法\n* Session.regenerate() 创建session\n* Session.destroy() 销毁session\n* Session.reload() 重载session\n* Session.save() 保存session","source":"_posts/nodejs利用session做登录控制.md","raw":"title: nodejs利用session做登录控制\ndate: 2016-11-02 20:53:28\ntags: nodejs\ntoc: true\n---\n#### background\n\n&nbsp; &nbsp;&nbsp;&nbsp;登录的场景在我们日常应用中有很多，登录的实现过程大家都很清楚，无非就是拿着用户名密去数据库中查询，如果查到了就表示这个人是系统用户，可以登录并且使用系统。那么当用户访问系统页面的时候，我们怎么判断他是不是登录过了呢，这个时候就引出了session。\n&nbsp; &nbsp;&nbsp;&nbsp;session翻译成会话，session的生命周期和浏览器的生命周期一致，session从创建的一刻起开始生效，浏览器关闭session销毁。session是客户端与服务器之间保持状态的解决方案。这种会话的匹配是通过cookie来实现的。\n\n<!--more-->\n\n#### express-session\n\n&nbsp; &nbsp;&nbsp;&nbsp;express-session是基于express框架的专门处理session的中间件，安装 `sudo npm install express-session --save` , session的解析过程需要用到cookieParser, 安装 `sudo npm install cookieParser --save` , 我们在使用的时候，只需要把express-session加入到中间件中，这样所有的路由就都能使用它了，我们可以在req.session中设置和读取session的值。\n\n##### 应用\n\n改造上一节中的例子，这里只介绍一些增加项\napp.js (引用session，加入中间件)\n```javascript\n...\nvar session = require('express-session');\nvar cookieParser = require('cookie-parser');\n...\n...\napp.use(cookieParser());\napp.use(session({\n  resave: false,\n  saveUninitialized: true,\n  name: 'user',\n  cookie: { maxAge: 80000 },\n  secret: 'wz'\n}));\n...\n...\n\n```\n\nroutes/index.js (路由中检查登录session是否存在)\n```javascript\nfunction restrict(req, res, next) {\n  if (req.session.user) {\n    next();\n  } else {\n    res.redirect('/login.page');\n  }\n}\nrouter.get('/index.page',restrict, function(req, res){\n  res.send('success');\n});\nrouter.get('/login.page', function(req, res){\n  res.send('login');\n});\nrouter.get('/login', function(req, res, next){\n    login(req, res, next);\n});\nrouter.get('/logout', function(req, res){\n  req.session.destroy(function(){\n    res.redirect('/login.page');\n  });\n});\n```\n\nmain/login.js (只增加了注释部分的代码)\n```javascript\nfunction queryData(req, res, next,query) {\n    var query = query ? JSON.parse(query) : {};\n    pageModule.find(query).exec(function(err, data) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        if(data && data.length){\n            //只增加了登录成功后，创建一个session的过程\n            req.session.user = data[0].username;\n            dbSuccess.data = data;\n            result = JSON.stringify(dbSuccess);\n            res.end(result);\n        }else{\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n    });\n}\n```\n\n#### 测试过程\n```javascript\n1. http://127.0.0.1:3000/index.page\n2. http://127.0.0.1:3000/login?type=find\n3. http://127.0.0.1:3000/index.page\n```\n分别输入三个url，观察现象，第一个url输入的时候，因为不存在session,所以会跳转到登录页面，\n第二个url为模拟登录过程，创建了一个session，第三个url访问主页，此时存在session,所以可以看到首页内容。\n\n#### express-session常用参数\n* cookie Object类型，设置cookie的一些属性\n* domain cookie作用域\n* expires cookie失效时间\n* httpOnly 禁止客户端访问\n* maxAge 实效时长\n* path cookie路径\n* name 这是session id的值\n* resave 允许重新设置session\n* saveUninitialized 是否session可以修改\n* secret cookie密钥\n* store session存储方式 mongodb等\n\n#### express-session常用方法\n* Session.regenerate() 创建session\n* Session.destroy() 销毁session\n* Session.reload() 重载session\n* Session.save() 保存session","slug":"nodejs利用session做登录控制","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhox001zt0yjophxjqfs","content":"<h4 id=\"background\">background</h4><p>&nbsp; &nbsp;&nbsp;&nbsp;登录的场景在我们日常应用中有很多，登录的实现过程大家都很清楚，无非就是拿着用户名密去数据库中查询，如果查到了就表示这个人是系统用户，可以登录并且使用系统。那么当用户访问系统页面的时候，我们怎么判断他是不是登录过了呢，这个时候就引出了session。<br>&nbsp; &nbsp;&nbsp;&nbsp;session翻译成会话，session的生命周期和浏览器的生命周期一致，session从创建的一刻起开始生效，浏览器关闭session销毁。session是客户端与服务器之间保持状态的解决方案。这种会话的匹配是通过cookie来实现的。</p>\n<a id=\"more\"></a>\n<h4 id=\"express-session\">express-session</h4><p>&nbsp; &nbsp;&nbsp;&nbsp;express-session是基于express框架的专门处理session的中间件，安装 <code>sudo npm install express-session --save</code> , session的解析过程需要用到cookieParser, 安装 <code>sudo npm install cookieParser --save</code> , 我们在使用的时候，只需要把express-session加入到中间件中，这样所有的路由就都能使用它了，我们可以在req.session中设置和读取session的值。</p>\n<h5 id=\"应用\">应用</h5><p>改造上一节中的例子，这里只介绍一些增加项<br>app.js (引用session，加入中间件)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">var session = <span class=\"built_in\">require</span>(<span class=\"string\">'express-session'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>);</div><div class=\"line\">...</div><div class=\"line\">...</div><div class=\"line\">app.use(cookieParser());</div><div class=\"line\">app.use(session(&#123;</div><div class=\"line\">  <span class=\"attr\">resave</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">saveUninitialized</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'user'</span>,</div><div class=\"line\">  <span class=\"attr\">cookie</span>: &#123; <span class=\"attr\">maxAge</span>: <span class=\"number\">80000</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">secret</span>: <span class=\"string\">'wz'</span></div><div class=\"line\">&#125;));</div><div class=\"line\">...</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>routes/index.js (路由中检查登录session是否存在)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">restrict</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (req.session.user) &#123;</div><div class=\"line\">    next();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    res.redirect(<span class=\"string\">'/login.page'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">router.get(<span class=\"string\">'/index.page'</span>,restrict, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'success'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">router.get(<span class=\"string\">'/login.page'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'login'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">router.get(<span class=\"string\">'/login'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>)</span>&#123;</div><div class=\"line\">    login(req, res, next);</div><div class=\"line\">&#125;);</div><div class=\"line\">router.get(<span class=\"string\">'/logout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  req.session.destroy(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    res.redirect(<span class=\"string\">'/login.page'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>main/login.js (只增加了注释部分的代码)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queryData</span>(<span class=\"params\">req, res, next,query</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> query = query ? <span class=\"built_in\">JSON</span>.parse(query) : &#123;&#125;;</div><div class=\"line\">    pageModule.find(query).exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json;charset=UTF-8\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbError);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(data &amp;&amp; data.length)&#123;</div><div class=\"line\">            <span class=\"comment\">//只增加了登录成功后，创建一个session的过程</span></div><div class=\"line\">            req.session.user = data[<span class=\"number\">0</span>].username;</div><div class=\"line\">            dbSuccess.data = data;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbSuccess);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbError);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"测试过程\">测试过程</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1.</span> http:<span class=\"comment\">//127.0.0.1:3000/index.page</span></div><div class=\"line\"><span class=\"number\">2.</span> http:<span class=\"comment\">//127.0.0.1:3000/login?type=find</span></div><div class=\"line\"><span class=\"number\">3.</span> http:<span class=\"comment\">//127.0.0.1:3000/index.page</span></div></pre></td></tr></table></figure>\n<p>分别输入三个url，观察现象，第一个url输入的时候，因为不存在session,所以会跳转到登录页面，<br>第二个url为模拟登录过程，创建了一个session，第三个url访问主页，此时存在session,所以可以看到首页内容。</p>\n<h4 id=\"express-session常用参数\">express-session常用参数</h4><ul>\n<li>cookie Object类型，设置cookie的一些属性</li>\n<li>domain cookie作用域</li>\n<li>expires cookie失效时间</li>\n<li>httpOnly 禁止客户端访问</li>\n<li>maxAge 实效时长</li>\n<li>path cookie路径</li>\n<li>name 这是session id的值</li>\n<li>resave 允许重新设置session</li>\n<li>saveUninitialized 是否session可以修改</li>\n<li>secret cookie密钥</li>\n<li>store session存储方式 mongodb等</li>\n</ul>\n<h4 id=\"express-session常用方法\">express-session常用方法</h4><ul>\n<li>Session.regenerate() 创建session</li>\n<li>Session.destroy() 销毁session</li>\n<li>Session.reload() 重载session</li>\n<li>Session.save() 保存session</li>\n</ul>\n","excerpt":"<h4 id=\"background\">background</h4><p>&nbsp; &nbsp;&nbsp;&nbsp;登录的场景在我们日常应用中有很多，登录的实现过程大家都很清楚，无非就是拿着用户名密去数据库中查询，如果查到了就表示这个人是系统用户，可以登录并且使用系统。那么当用户访问系统页面的时候，我们怎么判断他是不是登录过了呢，这个时候就引出了session。<br>&nbsp; &nbsp;&nbsp;&nbsp;session翻译成会话，session的生命周期和浏览器的生命周期一致，session从创建的一刻起开始生效，浏览器关闭session销毁。session是客户端与服务器之间保持状态的解决方案。这种会话的匹配是通过cookie来实现的。</p>","more":"<h4 id=\"express-session\">express-session</h4><p>&nbsp; &nbsp;&nbsp;&nbsp;express-session是基于express框架的专门处理session的中间件，安装 <code>sudo npm install express-session --save</code> , session的解析过程需要用到cookieParser, 安装 <code>sudo npm install cookieParser --save</code> , 我们在使用的时候，只需要把express-session加入到中间件中，这样所有的路由就都能使用它了，我们可以在req.session中设置和读取session的值。</p>\n<h5 id=\"应用\">应用</h5><p>改造上一节中的例子，这里只介绍一些增加项<br>app.js (引用session，加入中间件)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">var session = <span class=\"built_in\">require</span>(<span class=\"string\">'express-session'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> cookieParser = <span class=\"built_in\">require</span>(<span class=\"string\">'cookie-parser'</span>);</div><div class=\"line\">...</div><div class=\"line\">...</div><div class=\"line\">app.use(cookieParser());</div><div class=\"line\">app.use(session(&#123;</div><div class=\"line\">  <span class=\"attr\">resave</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">  <span class=\"attr\">saveUninitialized</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">'user'</span>,</div><div class=\"line\">  <span class=\"attr\">cookie</span>: &#123; <span class=\"attr\">maxAge</span>: <span class=\"number\">80000</span> &#125;,</div><div class=\"line\">  <span class=\"attr\">secret</span>: <span class=\"string\">'wz'</span></div><div class=\"line\">&#125;));</div><div class=\"line\">...</div><div class=\"line\">...</div></pre></td></tr></table></figure></p>\n<p>routes/index.js (路由中检查登录session是否存在)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">restrict</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">if</span> (req.session.user) &#123;</div><div class=\"line\">    next();</div><div class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    res.redirect(<span class=\"string\">'/login.page'</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">router.get(<span class=\"string\">'/index.page'</span>,restrict, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'success'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">router.get(<span class=\"string\">'/login.page'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  res.send(<span class=\"string\">'login'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">router.get(<span class=\"string\">'/login'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>)</span>&#123;</div><div class=\"line\">    login(req, res, next);</div><div class=\"line\">&#125;);</div><div class=\"line\">router.get(<span class=\"string\">'/logout'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>)</span>&#123;</div><div class=\"line\">  req.session.destroy(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    res.redirect(<span class=\"string\">'/login.page'</span>);</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>main/login.js (只增加了注释部分的代码)<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queryData</span>(<span class=\"params\">req, res, next,query</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> query = query ? <span class=\"built_in\">JSON</span>.parse(query) : &#123;&#125;;</div><div class=\"line\">    pageModule.find(query).exec(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">        res.writeHead(<span class=\"number\">200</span>, &#123;</div><div class=\"line\">            <span class=\"string\">\"Content-Type\"</span>: <span class=\"string\">\"application/json;charset=UTF-8\"</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">if</span>(err)&#123;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbError);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">if</span>(data &amp;&amp; data.length)&#123;</div><div class=\"line\">            <span class=\"comment\">//只增加了登录成功后，创建一个session的过程</span></div><div class=\"line\">            req.session.user = data[<span class=\"number\">0</span>].username;</div><div class=\"line\">            dbSuccess.data = data;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbSuccess);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">            result = <span class=\"built_in\">JSON</span>.stringify(dbError);</div><div class=\"line\">            res.end(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"测试过程\">测试过程</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">1.</span> http:<span class=\"comment\">//127.0.0.1:3000/index.page</span></div><div class=\"line\"><span class=\"number\">2.</span> http:<span class=\"comment\">//127.0.0.1:3000/login?type=find</span></div><div class=\"line\"><span class=\"number\">3.</span> http:<span class=\"comment\">//127.0.0.1:3000/index.page</span></div></pre></td></tr></table></figure>\n<p>分别输入三个url，观察现象，第一个url输入的时候，因为不存在session,所以会跳转到登录页面，<br>第二个url为模拟登录过程，创建了一个session，第三个url访问主页，此时存在session,所以可以看到首页内容。</p>\n<h4 id=\"express-session常用参数\">express-session常用参数</h4><ul>\n<li>cookie Object类型，设置cookie的一些属性</li>\n<li>domain cookie作用域</li>\n<li>expires cookie失效时间</li>\n<li>httpOnly 禁止客户端访问</li>\n<li>maxAge 实效时长</li>\n<li>path cookie路径</li>\n<li>name 这是session id的值</li>\n<li>resave 允许重新设置session</li>\n<li>saveUninitialized 是否session可以修改</li>\n<li>secret cookie密钥</li>\n<li>store session存储方式 mongodb等</li>\n</ul>\n<h4 id=\"express-session常用方法\">express-session常用方法</h4><ul>\n<li>Session.regenerate() 创建session</li>\n<li>Session.destroy() 销毁session</li>\n<li>Session.reload() 重载session</li>\n<li>Session.save() 保存session</li>\n</ul>"},{"title":"nodejs开发控制台工具","date":"2016-04-14T02:41:56.000Z","toc":true,"_content":"#### 环境要求\n* nodejs\n\n#### 基本文件结构\n* package.json \n\t* 使用npm init生成\n\t* 安装依赖模块使用 npm install 模块名\n* 一个主文件 index.js\n\n<!--more-->\n\n#### 例子：\n* package.json\n```javascript\n{\n  \"name\": \"node-translate\",\n  \"version\": \"1.0.0\",\n  \"description\": \"translate\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"bin\": {\n    \"trans\": \"./index.js\"\n  },\n  \"author\": \"黑卓\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"color\": \"^0.11.1\",\n    \"colors\": \"^1.1.2\",\n    \"commander\": \"^2.9.0\",\n    \"request\": \"^2.70.0\"\n  }\n}\n```\n* index.js\n```javascript\n#! /usr/bin/env node\n\n/*\n * @Author: 黑卓\n * @Date:   2016-04-07 15:47:33\n * @Last Modified by:   黑卓\n * @Last Modified time: 2016-04-07 17:56:40\n */\n\n'use strict';\n\nvar request = require('request');\nvar colors = require('colors');\n\nvar program = require('commander');\nprogram.version('0.0.1').parse(process.argv);\n\n(function() {\n\n\tvar param = process.argv[2];\n\n\tvar word = param ? param : '';\n\n\tif (!word) {\n\t\tconsole.log('请输入要查询的单词'.underline.red);\n\t\treturn false;\n\t}\n\n\tconsole.log('');\n\tconsole.log('要翻译的单词 : '.green + ' : ' + word.underline.red);\n\tconsole.log('');\n\n\tvar option = {\n\t\tfrom: 'zh',\n\t\tto: 'en',\n\t\tquery: encodeURIComponent(word)\n\t};\n\n\tif (/^[A-Za-z ]+$/.test(word.trim())) {\n\t\toption.from = 'en';\n\t\toption.to = 'zh';\n\t}\n\n\tvar url = 'http://test.com'; // 这里换成了假url\n\n\tvar paramArray = [];\n\tfor (var item in option) {\n\t\tvar pStr = item + '=' + option[item];\n\t\tparamArray.push(pStr);\n\t}\n\n\turl += '?' + paramArray.join('&');\n\n\trequest(url, function(error, response, data) {\n\t\tif (!error && response.statusCode == 200) {\n\t\t\tdata = JSON.parse(data);\n\t\t\tif (data && data.result) {\n\t\t\t\tconsole.log('翻译结果 : '.green + data.result.dst.underline.red || '没有查询到结果'.underline.red);\n\t\t\t} else {\n\t\t\t\tconsole.log('没有查询到结果'.underline.red);\n\t\t\t}\n\t\t\tconsole.log('');\n\t\t}\n\t});\n}());\n```\n#### 链接到全局\nnpm link\n\n#### 自行发布\n\n#### request\nrequest模块让http请求变的简单,https://www.npmjs.com/package/request\n\n#### colors\n终端着色colors插件,https://www.npmjs.com/package/colors\n\n#### program\nnodejs命令行参数处理模块commander,https://www.npmjs.com/package/commander\n","source":"_posts/nodejs开发控制台工具.md","raw":"title: nodejs开发控制台工具\ndate: 2016-04-14 10:41:56\ntags: nodejs\ntoc: true\n---\n#### 环境要求\n* nodejs\n\n#### 基本文件结构\n* package.json \n\t* 使用npm init生成\n\t* 安装依赖模块使用 npm install 模块名\n* 一个主文件 index.js\n\n<!--more-->\n\n#### 例子：\n* package.json\n```javascript\n{\n  \"name\": \"node-translate\",\n  \"version\": \"1.0.0\",\n  \"description\": \"translate\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"bin\": {\n    \"trans\": \"./index.js\"\n  },\n  \"author\": \"黑卓\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"color\": \"^0.11.1\",\n    \"colors\": \"^1.1.2\",\n    \"commander\": \"^2.9.0\",\n    \"request\": \"^2.70.0\"\n  }\n}\n```\n* index.js\n```javascript\n#! /usr/bin/env node\n\n/*\n * @Author: 黑卓\n * @Date:   2016-04-07 15:47:33\n * @Last Modified by:   黑卓\n * @Last Modified time: 2016-04-07 17:56:40\n */\n\n'use strict';\n\nvar request = require('request');\nvar colors = require('colors');\n\nvar program = require('commander');\nprogram.version('0.0.1').parse(process.argv);\n\n(function() {\n\n\tvar param = process.argv[2];\n\n\tvar word = param ? param : '';\n\n\tif (!word) {\n\t\tconsole.log('请输入要查询的单词'.underline.red);\n\t\treturn false;\n\t}\n\n\tconsole.log('');\n\tconsole.log('要翻译的单词 : '.green + ' : ' + word.underline.red);\n\tconsole.log('');\n\n\tvar option = {\n\t\tfrom: 'zh',\n\t\tto: 'en',\n\t\tquery: encodeURIComponent(word)\n\t};\n\n\tif (/^[A-Za-z ]+$/.test(word.trim())) {\n\t\toption.from = 'en';\n\t\toption.to = 'zh';\n\t}\n\n\tvar url = 'http://test.com'; // 这里换成了假url\n\n\tvar paramArray = [];\n\tfor (var item in option) {\n\t\tvar pStr = item + '=' + option[item];\n\t\tparamArray.push(pStr);\n\t}\n\n\turl += '?' + paramArray.join('&');\n\n\trequest(url, function(error, response, data) {\n\t\tif (!error && response.statusCode == 200) {\n\t\t\tdata = JSON.parse(data);\n\t\t\tif (data && data.result) {\n\t\t\t\tconsole.log('翻译结果 : '.green + data.result.dst.underline.red || '没有查询到结果'.underline.red);\n\t\t\t} else {\n\t\t\t\tconsole.log('没有查询到结果'.underline.red);\n\t\t\t}\n\t\t\tconsole.log('');\n\t\t}\n\t});\n}());\n```\n#### 链接到全局\nnpm link\n\n#### 自行发布\n\n#### request\nrequest模块让http请求变的简单,https://www.npmjs.com/package/request\n\n#### colors\n终端着色colors插件,https://www.npmjs.com/package/colors\n\n#### program\nnodejs命令行参数处理模块commander,https://www.npmjs.com/package/commander\n","slug":"nodejs开发控制台工具","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhoz0021t0yj5hhiy1pq","content":"<h4 id=\"环境要求\">环境要求</h4><ul>\n<li>nodejs</li>\n</ul>\n<h4 id=\"基本文件结构\">基本文件结构</h4><ul>\n<li>package.json <ul>\n<li>使用npm init生成</li>\n<li>安装依赖模块使用 npm install 模块名</li>\n</ul>\n</li>\n<li>一个主文件 index.js</li>\n</ul>\n<a id=\"more\"></a>\n<h4 id=\"例子：\">例子：</h4><ul>\n<li><p>package.json</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"node-translate\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"translate\"</span>,</div><div class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"bin\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"trans\"</span>: <span class=\"string\">\"./index.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"黑卓\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"color\"</span>: <span class=\"string\">\"^0.11.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"colors\"</span>: <span class=\"string\">\"^1.1.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"commander\"</span>: <span class=\"string\">\"^2.9.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"request\"</span>: <span class=\"string\">\"^2.70.0\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>index.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#! /usr/bin/env node</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * @Author: 黑卓</div><div class=\"line\"> * @Date:   2016-04-07 15:47:33</div><div class=\"line\"> * @Last Modified by:   黑卓</div><div class=\"line\"> * @Last Modified time: 2016-04-07 17:56:40</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">'use strict';</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> colors = <span class=\"built_in\">require</span>(<span class=\"string\">'colors'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);</div><div class=\"line\">program.version(<span class=\"string\">'0.0.1'</span>).parse(process.argv);</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> param = process.argv[<span class=\"number\">2</span>];</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> word = param ? param : <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!word) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'请输入要查询的单词'</span>.underline.red);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">''</span>);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'要翻译的单词 : '</span>.green + <span class=\"string\">' : '</span> + word.underline.red);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">''</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> option = &#123;</div><div class=\"line\">\t\t<span class=\"attr\">from</span>: <span class=\"string\">'zh'</span>,</div><div class=\"line\">\t\t<span class=\"attr\">to</span>: <span class=\"string\">'en'</span>,</div><div class=\"line\">\t\t<span class=\"attr\">query</span>: <span class=\"built_in\">encodeURIComponent</span>(word)</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"regexp\">/^[A-Za-z ]+$/</span>.test(word.trim())) &#123;</div><div class=\"line\">\t\toption.from = <span class=\"string\">'en'</span>;</div><div class=\"line\">\t\toption.to = <span class=\"string\">'zh'</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> url = <span class=\"string\">'http://test.com'</span>; <span class=\"comment\">// 这里换成了假url</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> paramArray = [];</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> option) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> pStr = item + <span class=\"string\">'='</span> + option[item];</div><div class=\"line\">\t\tparamArray.push(pStr);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\turl += <span class=\"string\">'?'</span> + paramArray.join(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\"></div><div class=\"line\">\trequest(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, response, data</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!error &amp;&amp; response.statusCode == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">\t\t\tdata = <span class=\"built_in\">JSON</span>.parse(data);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (data &amp;&amp; data.result) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'翻译结果 : '</span>.green + data.result.dst.underline.red || <span class=\"string\">'没有查询到结果'</span>.underline.red);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'没有查询到结果'</span>.underline.red);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">''</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"链接到全局\">链接到全局</h4><p>npm link</p>\n<h4 id=\"自行发布\">自行发布</h4><h4 id=\"request\">request</h4><p>request模块让http请求变的简单,<a href=\"https://www.npmjs.com/package/request\" target=\"_blank\" rel=\"external\">https://www.npmjs.com/package/request</a></p>\n<h4 id=\"colors\">colors</h4><p>终端着色colors插件,<a href=\"https://www.npmjs.com/package/colors\" target=\"_blank\" rel=\"external\">https://www.npmjs.com/package/colors</a></p>\n<h4 id=\"program\">program</h4><p>nodejs命令行参数处理模块commander,<a href=\"https://www.npmjs.com/package/commander\" target=\"_blank\" rel=\"external\">https://www.npmjs.com/package/commander</a></p>\n","excerpt":"<h4 id=\"环境要求\">环境要求</h4><ul>\n<li>nodejs</li>\n</ul>\n<h4 id=\"基本文件结构\">基本文件结构</h4><ul>\n<li>package.json <ul>\n<li>使用npm init生成</li>\n<li>安装依赖模块使用 npm install 模块名</li>\n</ul>\n</li>\n<li>一个主文件 index.js</li>\n</ul>","more":"<h4 id=\"例子：\">例子：</h4><ul>\n<li><p>package.json</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"node-translate\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"translate\"</span>,</div><div class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"bin\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"trans\"</span>: <span class=\"string\">\"./index.js\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"黑卓\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</div><div class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"color\"</span>: <span class=\"string\">\"^0.11.1\"</span>,</div><div class=\"line\">    <span class=\"string\">\"colors\"</span>: <span class=\"string\">\"^1.1.2\"</span>,</div><div class=\"line\">    <span class=\"string\">\"commander\"</span>: <span class=\"string\">\"^2.9.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"request\"</span>: <span class=\"string\">\"^2.70.0\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>index.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#! /usr/bin/env node</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * @Author: 黑卓</div><div class=\"line\"> * @Date:   2016-04-07 15:47:33</div><div class=\"line\"> * @Last Modified by:   黑卓</div><div class=\"line\"> * @Last Modified time: 2016-04-07 17:56:40</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\"></div><div class=\"line\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> request = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> colors = <span class=\"built_in\">require</span>(<span class=\"string\">'colors'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>);</div><div class=\"line\">program.version(<span class=\"string\">'0.0.1'</span>).parse(process.argv);</div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> param = process.argv[<span class=\"number\">2</span>];</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> word = param ? param : <span class=\"string\">''</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (!word) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'请输入要查询的单词'</span>.underline.red);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">''</span>);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'要翻译的单词 : '</span>.green + <span class=\"string\">' : '</span> + word.underline.red);</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">''</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> option = &#123;</div><div class=\"line\">\t\t<span class=\"attr\">from</span>: <span class=\"string\">'zh'</span>,</div><div class=\"line\">\t\t<span class=\"attr\">to</span>: <span class=\"string\">'en'</span>,</div><div class=\"line\">\t\t<span class=\"attr\">query</span>: <span class=\"built_in\">encodeURIComponent</span>(word)</div><div class=\"line\">\t&#125;;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"regexp\">/^[A-Za-z ]+$/</span>.test(word.trim())) &#123;</div><div class=\"line\">\t\toption.from = <span class=\"string\">'en'</span>;</div><div class=\"line\">\t\toption.to = <span class=\"string\">'zh'</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> url = <span class=\"string\">'http://test.com'</span>; <span class=\"comment\">// 这里换成了假url</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">var</span> paramArray = [];</div><div class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> item <span class=\"keyword\">in</span> option) &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> pStr = item + <span class=\"string\">'='</span> + option[item];</div><div class=\"line\">\t\tparamArray.push(pStr);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\turl += <span class=\"string\">'?'</span> + paramArray.join(<span class=\"string\">'&amp;'</span>);</div><div class=\"line\"></div><div class=\"line\">\trequest(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error, response, data</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (!error &amp;&amp; response.statusCode == <span class=\"number\">200</span>) &#123;</div><div class=\"line\">\t\t\tdata = <span class=\"built_in\">JSON</span>.parse(data);</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (data &amp;&amp; data.result) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'翻译结果 : '</span>.green + data.result.dst.underline.red || <span class=\"string\">'没有查询到结果'</span>.underline.red);</div><div class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'没有查询到结果'</span>.underline.red);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">''</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;());</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"链接到全局\">链接到全局</h4><p>npm link</p>\n<h4 id=\"自行发布\">自行发布</h4><h4 id=\"request\">request</h4><p>request模块让http请求变的简单,<a href=\"https://www.npmjs.com/package/request\">https://www.npmjs.com/package/request</a></p>\n<h4 id=\"colors\">colors</h4><p>终端着色colors插件,<a href=\"https://www.npmjs.com/package/colors\">https://www.npmjs.com/package/colors</a></p>\n<h4 id=\"program\">program</h4><p>nodejs命令行参数处理模块commander,<a href=\"https://www.npmjs.com/package/commander\">https://www.npmjs.com/package/commander</a></p>"},{"title":"nodejs网页抓取","date":"2015-11-06T07:03:01.000Z","toc":true,"_content":"#### cheerio\n>html页面抓取使用的module,可以像jquery一样去操作\n\n#### 读取网页源码\n>使用http.request或者http.get去下载网页源码，使用cheerio去抓取我们需要的内容。\n<!--more-->\n\n#### 保存图片\n>抓取到的图片地址\n```javascript\nvar http = require(\"http\");\nvar fs = require(\"fs\");\nvar url = \"http://123.png\";\nhttp.get(url, function(res) {\n\tvar imgBinary = \"\";\n\tres.setEncoding(\"binary\");\n\tres.on(\"data\", function(chunk) {\n\t\timgBinary += chunk;\n\t});\n\tres.on(\"end\", function() {\n\t\tfs.writeFile(\"./logonew.png\", imgBinary, \"binary\", function(err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log(\"download fail\");\n\t\t\t}\n\t\t\tconsole.log(\"download success\");\n\t\t});\n\t});\n});\n```","source":"_posts/nodejs网页抓取.md","raw":"title: nodejs网页抓取\ndate: 2015-11-06 15:03:01\ntags: nodejs\ntoc: true\n---\n#### cheerio\n>html页面抓取使用的module,可以像jquery一样去操作\n\n#### 读取网页源码\n>使用http.request或者http.get去下载网页源码，使用cheerio去抓取我们需要的内容。\n<!--more-->\n\n#### 保存图片\n>抓取到的图片地址\n```javascript\nvar http = require(\"http\");\nvar fs = require(\"fs\");\nvar url = \"http://123.png\";\nhttp.get(url, function(res) {\n\tvar imgBinary = \"\";\n\tres.setEncoding(\"binary\");\n\tres.on(\"data\", function(chunk) {\n\t\timgBinary += chunk;\n\t});\n\tres.on(\"end\", function() {\n\t\tfs.writeFile(\"./logonew.png\", imgBinary, \"binary\", function(err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log(\"download fail\");\n\t\t\t}\n\t\t\tconsole.log(\"download success\");\n\t\t});\n\t});\n});\n```","slug":"nodejs网页抓取","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhp30023t0yj2u28wmd0","content":"<h4 id=\"cheerio\">cheerio</h4><blockquote>\n<p>html页面抓取使用的module,可以像jquery一样去操作</p>\n</blockquote>\n<h4 id=\"读取网页源码\">读取网页源码</h4><blockquote>\n<p>使用http.request或者http.get去下载网页源码，使用cheerio去抓取我们需要的内容。<br><a id=\"more\"></a></p>\n</blockquote>\n<h4 id=\"保存图片\">保存图片</h4><blockquote>\n<p>抓取到的图片地址<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"http://123.png\"</span>;</div><div class=\"line\">http.get(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> imgBinary = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\tres.setEncoding(<span class=\"string\">\"binary\"</span>);</div><div class=\"line\">\tres.on(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">\t\timgBinary += chunk;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tres.on(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tfs.writeFile(<span class=\"string\">\"./logonew.png\"</span>, imgBinary, <span class=\"string\">\"binary\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"download fail\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"download success\"</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n</blockquote>\n","excerpt":"<h4 id=\"cheerio\">cheerio</h4><blockquote>\n<p>html页面抓取使用的module,可以像jquery一样去操作</p>\n</blockquote>\n<h4 id=\"读取网页源码\">读取网页源码</h4><blockquote>\n<p>使用http.request或者http.get去下载网页源码，使用cheerio去抓取我们需要的内容。<br>","more":"</p>\n</blockquote>\n<h4 id=\"保存图片\">保存图片</h4><blockquote>\n<p>抓取到的图片地址<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">\"http\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">\"fs\"</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"string\">\"http://123.png\"</span>;</div><div class=\"line\">http.get(url, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> imgBinary = <span class=\"string\">\"\"</span>;</div><div class=\"line\">\tres.setEncoding(<span class=\"string\">\"binary\"</span>);</div><div class=\"line\">\tres.on(<span class=\"string\">\"data\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>&#123;</div><div class=\"line\">\t\timgBinary += chunk;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tres.on(<span class=\"string\">\"end\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\tfs.writeFile(<span class=\"string\">\"./logonew.png\"</span>, imgBinary, <span class=\"string\">\"binary\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"download fail\"</span>);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"download success\"</span>);</div><div class=\"line\">\t\t&#125;);</div><div class=\"line\">\t&#125;);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n</blockquote>"},{"title":"nodejs读取指定路径下文件夹文件","date":"2015-11-07T07:03:01.000Z","toc":true,"_content":"#### 扫描文件以及文件夹\n```javascript\nfunction scanFolder(path){\n    var files = [],\n        folders = [],\n        walk = function(path, files, folders){\n            files = fs.readdirSync(path);\n            files.forEach(function(item) {  \n                var curPath = path + '/' + item,\n                    stats = fs.statSync(curPath);\n\n                if (stats.isDirectory()) {  \n                    walk(curPath, files, folders); \n                    folders.push(curPath); \n                } else {  \n                    files.push(curPath); \n                }  \n            });  \n        };  \n\n    walk(path, files, folders);\n\n    console.log('扫描' + path +'成功');\n\n    return {\n        'files': files,\n        'folders': folders\n    }\n}\n```\n<!--more-->\n\n#### 获取每个文件大小\n```javascript\nvar filesList = [];\nstates = fs.statSync(path+'/'+file); \nif(!states.isDirectory()){ \n   var fileObj = new Object();\n   fileObj.size = states.size;//文件大小(字节)\n   fileObj.name = file;//文件名\n   fileObj.path = path+'/'+file; //绝对路径\n   filesList.push(fileObj);\n }\n```","source":"_posts/nodejs读取指定路径下文件夹文件.md","raw":"title: nodejs读取指定路径下文件夹文件\ndate: 2015-11-07 15:03:01\ntags: nodejs\ntoc: true\n---\n#### 扫描文件以及文件夹\n```javascript\nfunction scanFolder(path){\n    var files = [],\n        folders = [],\n        walk = function(path, files, folders){\n            files = fs.readdirSync(path);\n            files.forEach(function(item) {  \n                var curPath = path + '/' + item,\n                    stats = fs.statSync(curPath);\n\n                if (stats.isDirectory()) {  \n                    walk(curPath, files, folders); \n                    folders.push(curPath); \n                } else {  \n                    files.push(curPath); \n                }  \n            });  \n        };  \n\n    walk(path, files, folders);\n\n    console.log('扫描' + path +'成功');\n\n    return {\n        'files': files,\n        'folders': folders\n    }\n}\n```\n<!--more-->\n\n#### 获取每个文件大小\n```javascript\nvar filesList = [];\nstates = fs.statSync(path+'/'+file); \nif(!states.isDirectory()){ \n   var fileObj = new Object();\n   fileObj.size = states.size;//文件大小(字节)\n   fileObj.name = file;//文件名\n   fileObj.path = path+'/'+file; //绝对路径\n   filesList.push(fileObj);\n }\n```","slug":"nodejs读取指定路径下文件夹文件","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhp40025t0yjsc3ar996","content":"<h4 id=\"扫描文件以及文件夹\">扫描文件以及文件夹</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scanFolder</span>(<span class=\"params\">path</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> files = [],</div><div class=\"line\">        folders = [],</div><div class=\"line\">        walk = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path, files, folders</span>)</span>&#123;</div><div class=\"line\">            files = fs.readdirSync(path);</div><div class=\"line\">            files.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">var</span> curPath = path + <span class=\"string\">'/'</span> + item,</div><div class=\"line\">                    stats = fs.statSync(curPath);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (stats.isDirectory()) &#123;  </div><div class=\"line\">                    walk(curPath, files, folders); </div><div class=\"line\">                    folders.push(curPath); </div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">                    files.push(curPath); </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;);  </div><div class=\"line\">        &#125;;  </div><div class=\"line\"></div><div class=\"line\">    walk(path, files, folders);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'扫描'</span> + path +<span class=\"string\">'成功'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"string\">'files'</span>: files,</div><div class=\"line\">        <span class=\"string\">'folders'</span>: folders</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"获取每个文件大小\">获取每个文件大小</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> filesList = [];</div><div class=\"line\">states = fs.statSync(path+<span class=\"string\">'/'</span>+file); </div><div class=\"line\"><span class=\"keyword\">if</span>(!states.isDirectory())&#123; </div><div class=\"line\">   <span class=\"keyword\">var</span> fileObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">   fileObj.size = states.size;<span class=\"comment\">//文件大小(字节)</span></div><div class=\"line\">   fileObj.name = file;<span class=\"comment\">//文件名</span></div><div class=\"line\">   fileObj.path = path+<span class=\"string\">'/'</span>+file; <span class=\"comment\">//绝对路径</span></div><div class=\"line\">   filesList.push(fileObj);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>","excerpt":"<h4 id=\"扫描文件以及文件夹\">扫描文件以及文件夹</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">scanFolder</span>(<span class=\"params\">path</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> files = [],</div><div class=\"line\">        folders = [],</div><div class=\"line\">        walk = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path, files, folders</span>)</span>&#123;</div><div class=\"line\">            files = fs.readdirSync(path);</div><div class=\"line\">            files.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item</span>) </span>&#123;  </div><div class=\"line\">                <span class=\"keyword\">var</span> curPath = path + <span class=\"string\">'/'</span> + item,</div><div class=\"line\">                    stats = fs.statSync(curPath);</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">if</span> (stats.isDirectory()) &#123;  </div><div class=\"line\">                    walk(curPath, files, folders); </div><div class=\"line\">                    folders.push(curPath); </div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;  </div><div class=\"line\">                    files.push(curPath); </div><div class=\"line\">                &#125;  </div><div class=\"line\">            &#125;);  </div><div class=\"line\">        &#125;;  </div><div class=\"line\"></div><div class=\"line\">    walk(path, files, folders);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'扫描'</span> + path +<span class=\"string\">'成功'</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"string\">'files'</span>: files,</div><div class=\"line\">        <span class=\"string\">'folders'</span>: folders</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<h4 id=\"获取每个文件大小\">获取每个文件大小</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> filesList = [];</div><div class=\"line\">states = fs.statSync(path+<span class=\"string\">'/'</span>+file); </div><div class=\"line\"><span class=\"keyword\">if</span>(!states.isDirectory())&#123; </div><div class=\"line\">   <span class=\"keyword\">var</span> fileObj = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</div><div class=\"line\">   fileObj.size = states.size;<span class=\"comment\">//文件大小(字节)</span></div><div class=\"line\">   fileObj.name = file;<span class=\"comment\">//文件名</span></div><div class=\"line\">   fileObj.path = path+<span class=\"string\">'/'</span>+file; <span class=\"comment\">//绝对路径</span></div><div class=\"line\">   filesList.push(fileObj);</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure>"},{"title":"nodejs调用phantom","date":"2015-11-08T07:03:01.000Z","toc":true,"_content":"#### phantomjs\n>phantomjs能够截图，查看网页请求信息，对页面进行dom操作等等\n利用phantomjs能够做很多事，例如通过截图对比查看页面是否疵了，网络请求监测网页性能，dom抓取等等\n<!--more-->\n\n#### 安装\n* centos\n```javascript\nsudo yum install gcc gcc-c++ make git openssl-devel freetype-devel fontconfig-devel \ngit clone git://github.com/ariya/phantomjs.git \ncd phantomjs \ngit checkout 1.9 \n./build.sh\n```\n\n#### 截图\n```javascript\n//snapshot.js\nvar page = require('webpage').create();\npage.viewportSize = { width: 320, height: 640 };\npage.open('http://www.test.com', function (status) {\n    if (status !== 'success') {\n        console.log('err!');\n    } else {\n        page.render('1.png');\n    }\n    phantom.exit();\n});\n```\n\n#### dom抓取\n```javascript\nvar page = require('webpage').create();\nfname = system.args[1];\npage.open(\"http://www.test.com\", function () {\n    if (status !== 'success') {\n        console.log('err!');\n        phantom.exit(1);\n        return;\n    }\n    var html;\n    page.evaluate(function () {\n        document.querySelector('#kw').value = 'javascript';\n        document.querySelector('#su').click();\n        html = document.querySelector('.content_left').innerHTML;\n    });\n    //fs.write('/user/test.html',html,'w');\n    phantom.exit();\n});\n```\n\n#### nodejs调用phantomjs\n需要调用的地方，开一个子线程去做\n```javascript\nvar childProcess = require('child_process');\nvar spawn = childProcess.spawn;\nvar Exec = spawn('phantomjs', '/home/user/test.js');\n\n\nExec.stdout.on('data', function(data) {\n\tconsole.log('Exec stdout : ' + data);\n});\n\nExec.stderr.on('data', function(data) {\n\tconsole.log('Exec stderr : ' + data);\n});\n\nExec.on('close', function(data) {\n\tconsole.log('exec close : ' + data);\n});\n```","source":"_posts/nodejs调用phantom.md","raw":"title: nodejs调用phantom\ndate: 2015-11-08 15:03:01\ntags: nodejs\ntoc: true\n---\n#### phantomjs\n>phantomjs能够截图，查看网页请求信息，对页面进行dom操作等等\n利用phantomjs能够做很多事，例如通过截图对比查看页面是否疵了，网络请求监测网页性能，dom抓取等等\n<!--more-->\n\n#### 安装\n* centos\n```javascript\nsudo yum install gcc gcc-c++ make git openssl-devel freetype-devel fontconfig-devel \ngit clone git://github.com/ariya/phantomjs.git \ncd phantomjs \ngit checkout 1.9 \n./build.sh\n```\n\n#### 截图\n```javascript\n//snapshot.js\nvar page = require('webpage').create();\npage.viewportSize = { width: 320, height: 640 };\npage.open('http://www.test.com', function (status) {\n    if (status !== 'success') {\n        console.log('err!');\n    } else {\n        page.render('1.png');\n    }\n    phantom.exit();\n});\n```\n\n#### dom抓取\n```javascript\nvar page = require('webpage').create();\nfname = system.args[1];\npage.open(\"http://www.test.com\", function () {\n    if (status !== 'success') {\n        console.log('err!');\n        phantom.exit(1);\n        return;\n    }\n    var html;\n    page.evaluate(function () {\n        document.querySelector('#kw').value = 'javascript';\n        document.querySelector('#su').click();\n        html = document.querySelector('.content_left').innerHTML;\n    });\n    //fs.write('/user/test.html',html,'w');\n    phantom.exit();\n});\n```\n\n#### nodejs调用phantomjs\n需要调用的地方，开一个子线程去做\n```javascript\nvar childProcess = require('child_process');\nvar spawn = childProcess.spawn;\nvar Exec = spawn('phantomjs', '/home/user/test.js');\n\n\nExec.stdout.on('data', function(data) {\n\tconsole.log('Exec stdout : ' + data);\n});\n\nExec.stderr.on('data', function(data) {\n\tconsole.log('Exec stderr : ' + data);\n});\n\nExec.on('close', function(data) {\n\tconsole.log('exec close : ' + data);\n});\n```","slug":"nodejs调用phantom","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhp80027t0yj8u16ctcj","content":"<h4 id=\"phantomjs\">phantomjs</h4><blockquote>\n<p>phantomjs能够截图，查看网页请求信息，对页面进行dom操作等等<br>利用phantomjs能够做很多事，例如通过截图对比查看页面是否疵了，网络请求监测网页性能，dom抓取等等<br><a id=\"more\"></a></p>\n</blockquote>\n<h4 id=\"安装\">安装</h4><ul>\n<li>centos<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install gcc gcc-c++ make git openssl-devel freetype-devel fontconfig-devel </div><div class=\"line\">git clone git:<span class=\"comment\">//github.com/ariya/phantomjs.git </span></div><div class=\"line\">cd phantomjs </div><div class=\"line\">git checkout <span class=\"number\">1.9</span> </div><div class=\"line\">./build.sh</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"截图\">截图</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//snapshot.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> page = <span class=\"built_in\">require</span>(<span class=\"string\">'webpage'</span>).create();</div><div class=\"line\">page.viewportSize = &#123; <span class=\"attr\">width</span>: <span class=\"number\">320</span>, <span class=\"attr\">height</span>: <span class=\"number\">640</span> &#125;;</div><div class=\"line\">page.open(<span class=\"string\">'http://www.test.com'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (status !== <span class=\"string\">'success'</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'err!'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        page.render(<span class=\"string\">'1.png'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    phantom.exit();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"dom抓取\">dom抓取</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> page = <span class=\"built_in\">require</span>(<span class=\"string\">'webpage'</span>).create();</div><div class=\"line\">fname = system.args[<span class=\"number\">1</span>];</div><div class=\"line\">page.open(<span class=\"string\">\"http://www.test.com\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (status !== <span class=\"string\">'success'</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'err!'</span>);</div><div class=\"line\">        phantom.exit(<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> html;</div><div class=\"line\">    page.evaluate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#kw'</span>).value = <span class=\"string\">'javascript'</span>;</div><div class=\"line\">        <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#su'</span>).click();</div><div class=\"line\">        html = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.content_left'</span>).innerHTML;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">//fs.write('/user/test.html',html,'w');</span></div><div class=\"line\">    phantom.exit();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"nodejs调用phantomjs\">nodejs调用phantomjs</h4><p>需要调用的地方，开一个子线程去做<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> childProcess = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> spawn = childProcess.spawn;</div><div class=\"line\"><span class=\"keyword\">var</span> Exec = spawn(<span class=\"string\">'phantomjs'</span>, <span class=\"string\">'/home/user/test.js'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Exec.stdout.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Exec stdout : '</span> + data);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Exec.stderr.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Exec stderr : '</span> + data);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Exec.on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'exec close : '</span> + data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n","excerpt":"<h4 id=\"phantomjs\">phantomjs</h4><blockquote>\n<p>phantomjs能够截图，查看网页请求信息，对页面进行dom操作等等<br>利用phantomjs能够做很多事，例如通过截图对比查看页面是否疵了，网络请求监测网页性能，dom抓取等等<br>","more":"</p>\n</blockquote>\n<h4 id=\"安装\">安装</h4><ul>\n<li>centos<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo yum install gcc gcc-c++ make git openssl-devel freetype-devel fontconfig-devel </div><div class=\"line\">git clone git:<span class=\"comment\">//github.com/ariya/phantomjs.git </span></div><div class=\"line\">cd phantomjs </div><div class=\"line\">git checkout <span class=\"number\">1.9</span> </div><div class=\"line\">./build.sh</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"截图\">截图</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//snapshot.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> page = <span class=\"built_in\">require</span>(<span class=\"string\">'webpage'</span>).create();</div><div class=\"line\">page.viewportSize = &#123; <span class=\"attr\">width</span>: <span class=\"number\">320</span>, <span class=\"attr\">height</span>: <span class=\"number\">640</span> &#125;;</div><div class=\"line\">page.open(<span class=\"string\">'http://www.test.com'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">status</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (status !== <span class=\"string\">'success'</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'err!'</span>);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        page.render(<span class=\"string\">'1.png'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    phantom.exit();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"dom抓取\">dom抓取</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> page = <span class=\"built_in\">require</span>(<span class=\"string\">'webpage'</span>).create();</div><div class=\"line\">fname = system.args[<span class=\"number\">1</span>];</div><div class=\"line\">page.open(<span class=\"string\">\"http://www.test.com\"</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (status !== <span class=\"string\">'success'</span>) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'err!'</span>);</div><div class=\"line\">        phantom.exit(<span class=\"number\">1</span>);</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> html;</div><div class=\"line\">    page.evaluate(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#kw'</span>).value = <span class=\"string\">'javascript'</span>;</div><div class=\"line\">        <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#su'</span>).click();</div><div class=\"line\">        html = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'.content_left'</span>).innerHTML;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">//fs.write('/user/test.html',html,'w');</span></div><div class=\"line\">    phantom.exit();</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"nodejs调用phantomjs\">nodejs调用phantomjs</h4><p>需要调用的地方，开一个子线程去做<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> childProcess = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> spawn = childProcess.spawn;</div><div class=\"line\"><span class=\"keyword\">var</span> Exec = spawn(<span class=\"string\">'phantomjs'</span>, <span class=\"string\">'/home/user/test.js'</span>);</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">Exec.stdout.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Exec stdout : '</span> + data);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Exec.stderr.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Exec stderr : '</span> + data);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Exec.on(<span class=\"string\">'close'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'exec close : '</span> + data);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>"},{"title":"npm包开发","date":"2016-04-14T02:41:29.000Z","toc":true,"_content":"#### 环境要求\n* nodejs\n\n#### 基本文件结构\n* package.json \n\t* 使用npm init生成\n\t* 安装依赖模块使用 npm install 模块名\n* 一个主文件 index.js\n* 一个lib文件夹\n\t* 存放源文件\n<!--more-->\n\n#### 例子\n* package.json\n```javascript\n\n{\n  \"name\": \"node-tools\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n```\n\n* index.js\n```javascript\n/*\n* @Author: amos\n* @Date:   2016-04-08 13:57:37\n* @Last Modified by:   amos\n* @Last Modified time: 2016-04-08 13:58:26\n*/\n\n'use strict';\n\nmodule.exports = require(./lib/index);\n```\n\n* `lib/index.js`\n```javascript\n/*\n * @Author: amos\n * @Date:   2016-04-08 13:58:47\n * @Last Modified by:   amos\n * @Last Modified time: 2016-04-08 14:19:04\n */\n\n'use strict';\n\nvar Tools = (function() {\n\t//==================================\n\t// 检测iOS版本\n\tfunction gtIOS() {\n\t\tvar userAgent = window.navigator.userAgent;\n\t\tvar ios = userAgent.match(/(iPad|iPhone|iPod)/s + OS / s([/d_/.] + ) / );\n\t\treturn ios && ios[2] && parseInt(ios[2].replace(/_/g, '.'), 10);\n\t}\n\t//==================================\n\n\t//==================================\n\t// 检测支持css属性\n\tfunction isSupportCss(key, value) {\n\t\tvar prefixTestList = ['', '-webkit-', '-ms-', '-moz-', '-o-'];\n\t\tvar cssText = '';\n\t\tfor (var i = 0; i < prefixTestList.length; i++) {\n\t\t\tcssText += key + ':' + prefixTestList[i] + value + ';';\n\t\t}\n\t\t// 创建一个dom来检查\n\t\tvar div = document.createElement('div');\n\t\tvar body = document.body;\n\t\tdiv.style.cssText = 'display:none;' + cssText;\n\t\tbody.appendChild(div);\n\t\tvar reg = new RegExp(value, i);\n\t\tvar isSupport = reg.test(window.getComputedStyle(div)[key]);\n\t\tbody.removeChild(div);\n\t\tdiv = null;\n\t\treturn isSupport;\n\t}\n\t//==================================\n\n\t//==================================\n\t// 防止内容区域滚到底后引起页面整体的滚动\n\tvar content = document.querySelector('main');\n\tvar startY;\n\n\tcontent.addEventListener('touchstart', function(e) {\n\t\tstartY = e.touches[0].clientY;\n\t});\n\n\tcontent.addEventListener('touchmove', function(e) {\n\t\t// 高位表示向上滚动\n\t\t// 底位表示向下滚动\n\t\t// 1容许 0禁止\n\t\tvar status = '11';\n\t\tvar ele = this;\n\n\t\tvar currentY = e.touches[0].clientY;\n\n\t\tif (ele.scrollTop === 0) {\n\t\t\t// 如果内容小于容器则同时禁止上下滚动\n\t\t\tstatus = ele.offsetHeight >= ele.scrollHeight ? '00' : '01';\n\t\t} else if (ele.scrollTop + ele.offsetHeight >= ele.scrollHeight) {\n\t\t\t// 已经滚到底部了只能向上滚动\n\t\t\tstatus = '10';\n\t\t}\n\n\t\tif (status != '11') {\n\t\t\t// 判断当前的滚动方向\n\t\t\tvar direction = currentY - startY > 0 ? '10' : '01';\n\t\t\t// 操作方向和当前允许状态求与运算，运算结果为0，就说明不允许该方向滚动，则禁止默认事件，阻止滚动\n\t\t\tif (!(parseInt(status, 2) & parseInt(direction, 2))) {\n\t\t\t\tstopEvent(e);\n\t\t\t}\n\t\t}\n\t});\n\t//==================================\n\n\n\treturn {\n\t\tgtIOS: gtIOS,\n\t\tisSupportCss: isSupportCss\n\t};\n}());\n\n\nmodule.exports = Tools;\n```\n\n#### 发布应用\n\t* npm发布\n\t* 通过require的方式引用，直接使用","source":"_posts/npm包开发.md","raw":"title: npm包开发\ndate: 2016-04-14 10:41:29\ntags: nodejs\ntoc: true\n---\n#### 环境要求\n* nodejs\n\n#### 基本文件结构\n* package.json \n\t* 使用npm init生成\n\t* 安装依赖模块使用 npm install 模块名\n* 一个主文件 index.js\n* 一个lib文件夹\n\t* 存放源文件\n<!--more-->\n\n#### 例子\n* package.json\n```javascript\n\n{\n  \"name\": \"node-tools\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n```\n\n* index.js\n```javascript\n/*\n* @Author: amos\n* @Date:   2016-04-08 13:57:37\n* @Last Modified by:   amos\n* @Last Modified time: 2016-04-08 13:58:26\n*/\n\n'use strict';\n\nmodule.exports = require(./lib/index);\n```\n\n* `lib/index.js`\n```javascript\n/*\n * @Author: amos\n * @Date:   2016-04-08 13:58:47\n * @Last Modified by:   amos\n * @Last Modified time: 2016-04-08 14:19:04\n */\n\n'use strict';\n\nvar Tools = (function() {\n\t//==================================\n\t// 检测iOS版本\n\tfunction gtIOS() {\n\t\tvar userAgent = window.navigator.userAgent;\n\t\tvar ios = userAgent.match(/(iPad|iPhone|iPod)/s + OS / s([/d_/.] + ) / );\n\t\treturn ios && ios[2] && parseInt(ios[2].replace(/_/g, '.'), 10);\n\t}\n\t//==================================\n\n\t//==================================\n\t// 检测支持css属性\n\tfunction isSupportCss(key, value) {\n\t\tvar prefixTestList = ['', '-webkit-', '-ms-', '-moz-', '-o-'];\n\t\tvar cssText = '';\n\t\tfor (var i = 0; i < prefixTestList.length; i++) {\n\t\t\tcssText += key + ':' + prefixTestList[i] + value + ';';\n\t\t}\n\t\t// 创建一个dom来检查\n\t\tvar div = document.createElement('div');\n\t\tvar body = document.body;\n\t\tdiv.style.cssText = 'display:none;' + cssText;\n\t\tbody.appendChild(div);\n\t\tvar reg = new RegExp(value, i);\n\t\tvar isSupport = reg.test(window.getComputedStyle(div)[key]);\n\t\tbody.removeChild(div);\n\t\tdiv = null;\n\t\treturn isSupport;\n\t}\n\t//==================================\n\n\t//==================================\n\t// 防止内容区域滚到底后引起页面整体的滚动\n\tvar content = document.querySelector('main');\n\tvar startY;\n\n\tcontent.addEventListener('touchstart', function(e) {\n\t\tstartY = e.touches[0].clientY;\n\t});\n\n\tcontent.addEventListener('touchmove', function(e) {\n\t\t// 高位表示向上滚动\n\t\t// 底位表示向下滚动\n\t\t// 1容许 0禁止\n\t\tvar status = '11';\n\t\tvar ele = this;\n\n\t\tvar currentY = e.touches[0].clientY;\n\n\t\tif (ele.scrollTop === 0) {\n\t\t\t// 如果内容小于容器则同时禁止上下滚动\n\t\t\tstatus = ele.offsetHeight >= ele.scrollHeight ? '00' : '01';\n\t\t} else if (ele.scrollTop + ele.offsetHeight >= ele.scrollHeight) {\n\t\t\t// 已经滚到底部了只能向上滚动\n\t\t\tstatus = '10';\n\t\t}\n\n\t\tif (status != '11') {\n\t\t\t// 判断当前的滚动方向\n\t\t\tvar direction = currentY - startY > 0 ? '10' : '01';\n\t\t\t// 操作方向和当前允许状态求与运算，运算结果为0，就说明不允许该方向滚动，则禁止默认事件，阻止滚动\n\t\t\tif (!(parseInt(status, 2) & parseInt(direction, 2))) {\n\t\t\t\tstopEvent(e);\n\t\t\t}\n\t\t}\n\t});\n\t//==================================\n\n\n\treturn {\n\t\tgtIOS: gtIOS,\n\t\tisSupportCss: isSupportCss\n\t};\n}());\n\n\nmodule.exports = Tools;\n```\n\n#### 发布应用\n\t* npm发布\n\t* 通过require的方式引用，直接使用","slug":"npm包开发","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhpa0029t0yjfudhnccl","content":"<h4 id=\"环境要求\">环境要求</h4><ul>\n<li>nodejs</li>\n</ul>\n<h4 id=\"基本文件结构\">基本文件结构</h4><ul>\n<li>package.json <ul>\n<li>使用npm init生成</li>\n<li>安装依赖模块使用 npm install 模块名</li>\n</ul>\n</li>\n<li>一个主文件 index.js</li>\n<li>一个lib文件夹<ul>\n<li>存放源文件<a id=\"more\"></a>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"例子\">例子</h4><ul>\n<li><p>package.json</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"node-tools\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>index.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\">* @Author: amos</div><div class=\"line\">* @Date:   2016-04-08 13:57:37</div><div class=\"line\">* @Last Modified by:   amos</div><div class=\"line\">* @Last Modified time: 2016-04-08 13:58:26</div><div class=\"line\">*/</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">'use strict';</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">require</span>(./lib/index);</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>lib/index.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</span></div><div class=\"line\"> * @Author: amos</div><div class=\"line\"> * @Date:   2016-04-08 13:58:47</div><div class=\"line\"> * @Last Modified by:   amos</div><div class=\"line\"> * @Last Modified time: 2016-04-08 14:19:04</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\"></span></div><div class=\"line\">'use strict';</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Tools = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//==================================</span></div><div class=\"line\">\t<span class=\"comment\">// 检测iOS版本</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gtIOS</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> userAgent = <span class=\"built_in\">window</span>.navigator.userAgent;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> ios = userAgent.match(<span class=\"regexp\">/(iPad|iPhone|iPod)/</span>s + OS / s([<span class=\"regexp\">/d_/</span>.] + ) / );</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ios &amp;&amp; ios[<span class=\"number\">2</span>] &amp;&amp; <span class=\"built_in\">parseInt</span>(ios[<span class=\"number\">2</span>].replace(<span class=\"regexp\">/_/g</span>, <span class=\"string\">'.'</span>), <span class=\"number\">10</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//==================================</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//==================================</span></div><div class=\"line\">\t<span class=\"comment\">// 检测支持css属性</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isSupportCss</span>(<span class=\"params\">key, value</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> prefixTestList = [<span class=\"string\">''</span>, <span class=\"string\">'-webkit-'</span>, <span class=\"string\">'-ms-'</span>, <span class=\"string\">'-moz-'</span>, <span class=\"string\">'-o-'</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> cssText = <span class=\"string\">''</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; prefixTestList.length; i++) &#123;</div><div class=\"line\">\t\t\tcssText += key + <span class=\"string\">':'</span> + prefixTestList[i] + value + <span class=\"string\">';'</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 创建一个dom来检查</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> body = <span class=\"built_in\">document</span>.body;</div><div class=\"line\">\t\tdiv.style.cssText = <span class=\"string\">'display:none;'</span> + cssText;</div><div class=\"line\">\t\tbody.appendChild(div);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(value, i);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> isSupport = reg.test(<span class=\"built_in\">window</span>.getComputedStyle(div)[key]);</div><div class=\"line\">\t\tbody.removeChild(div);</div><div class=\"line\">\t\tdiv = <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> isSupport;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//==================================</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//==================================</span></div><div class=\"line\">\t<span class=\"comment\">// 防止内容区域滚到底后引起页面整体的滚动</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> content = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'main'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> startY;</div><div class=\"line\"></div><div class=\"line\">\tcontent.addEventListener(<span class=\"string\">'touchstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t\tstartY = e.touches[<span class=\"number\">0</span>].clientY;</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\tcontent.addEventListener(<span class=\"string\">'touchmove'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 高位表示向上滚动</span></div><div class=\"line\">\t\t<span class=\"comment\">// 底位表示向下滚动</span></div><div class=\"line\">\t\t<span class=\"comment\">// 1容许 0禁止</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> status = <span class=\"string\">'11'</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> ele = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> currentY = e.touches[<span class=\"number\">0</span>].clientY;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (ele.scrollTop === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果内容小于容器则同时禁止上下滚动</span></div><div class=\"line\">\t\t\tstatus = ele.offsetHeight &gt;= ele.scrollHeight ? <span class=\"string\">'00'</span> : <span class=\"string\">'01'</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ele.scrollTop + ele.offsetHeight &gt;= ele.scrollHeight) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 已经滚到底部了只能向上滚动</span></div><div class=\"line\">\t\t\tstatus = <span class=\"string\">'10'</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (status != <span class=\"string\">'11'</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 判断当前的滚动方向</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> direction = currentY - startY &gt; <span class=\"number\">0</span> ? <span class=\"string\">'10'</span> : <span class=\"string\">'01'</span>;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 操作方向和当前允许状态求与运算，运算结果为0，就说明不允许该方向滚动，则禁止默认事件，阻止滚动</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(<span class=\"built_in\">parseInt</span>(status, <span class=\"number\">2</span>) &amp; <span class=\"built_in\">parseInt</span>(direction, <span class=\"number\">2</span>))) &#123;</div><div class=\"line\">\t\t\t\tstopEvent(e);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">//==================================</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t<span class=\"attr\">gtIOS</span>: gtIOS,</div><div class=\"line\">\t\t<span class=\"attr\">isSupportCss</span>: isSupportCss</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;());</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Tools;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"发布应用\">发布应用</h4><pre><code><span class=\"bullet\">* </span>npm发布\n<span class=\"bullet\">* </span>通过require的方式引用，直接使用\n</code></pre>","excerpt":"<h4 id=\"环境要求\">环境要求</h4><ul>\n<li>nodejs</li>\n</ul>\n<h4 id=\"基本文件结构\">基本文件结构</h4><ul>\n<li>package.json <ul>\n<li>使用npm init生成</li>\n<li>安装依赖模块使用 npm install 模块名</li>\n</ul>\n</li>\n<li>一个主文件 index.js</li>\n<li>一个lib文件夹<ul>\n<li>存放源文件","more":"</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"例子\">例子</h4><ul>\n<li><p>package.json</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"node-tools\"</span>,</div><div class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</div><div class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>index.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\">* @Author: amos</div><div class=\"line\">* @Date:   2016-04-08 13:57:37</div><div class=\"line\">* @Last Modified by:   amos</div><div class=\"line\">* @Last Modified time: 2016-04-08 13:58:26</div><div class=\"line\">*/</span></div><div class=\"line\"><span class=\"meta\"></div><div class=\"line\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">require</span>(./lib/index);</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>lib/index.js</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/*</div><div class=\"line\"> * @Author: amos</div><div class=\"line\"> * @Date:   2016-04-08 13:58:47</div><div class=\"line\"> * @Last Modified by:   amos</div><div class=\"line\"> * @Last Modified time: 2016-04-08 14:19:04</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\"></div><div class=\"line\">'use strict'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> Tools = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//==================================</span></div><div class=\"line\">\t<span class=\"comment\">// 检测iOS版本</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">gtIOS</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> userAgent = <span class=\"built_in\">window</span>.navigator.userAgent;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> ios = userAgent.match(<span class=\"regexp\">/(iPad|iPhone|iPod)/</span>s + OS / s([<span class=\"regexp\">/d_/</span>.] + ) / );</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> ios &amp;&amp; ios[<span class=\"number\">2</span>] &amp;&amp; <span class=\"built_in\">parseInt</span>(ios[<span class=\"number\">2</span>].replace(<span class=\"regexp\">/_/g</span>, <span class=\"string\">'.'</span>), <span class=\"number\">10</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//==================================</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//==================================</span></div><div class=\"line\">\t<span class=\"comment\">// 检测支持css属性</span></div><div class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isSupportCss</span>(<span class=\"params\">key, value</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> prefixTestList = [<span class=\"string\">''</span>, <span class=\"string\">'-webkit-'</span>, <span class=\"string\">'-ms-'</span>, <span class=\"string\">'-moz-'</span>, <span class=\"string\">'-o-'</span>];</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> cssText = <span class=\"string\">''</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; prefixTestList.length; i++) &#123;</div><div class=\"line\">\t\t\tcssText += key + <span class=\"string\">':'</span> + prefixTestList[i] + value + <span class=\"string\">';'</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"comment\">// 创建一个dom来检查</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> div = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'div'</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> body = <span class=\"built_in\">document</span>.body;</div><div class=\"line\">\t\tdiv.style.cssText = <span class=\"string\">'display:none;'</span> + cssText;</div><div class=\"line\">\t\tbody.appendChild(div);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> reg = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(value, i);</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> isSupport = reg.test(<span class=\"built_in\">window</span>.getComputedStyle(div)[key]);</div><div class=\"line\">\t\tbody.removeChild(div);</div><div class=\"line\">\t\tdiv = <span class=\"literal\">null</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> isSupport;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"comment\">//==================================</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//==================================</span></div><div class=\"line\">\t<span class=\"comment\">// 防止内容区域滚到底后引起页面整体的滚动</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> content = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'main'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> startY;</div><div class=\"line\"></div><div class=\"line\">\tcontent.addEventListener(<span class=\"string\">'touchstart'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t\tstartY = e.touches[<span class=\"number\">0</span>].clientY;</div><div class=\"line\">\t&#125;);</div><div class=\"line\"></div><div class=\"line\">\tcontent.addEventListener(<span class=\"string\">'touchmove'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t\t<span class=\"comment\">// 高位表示向上滚动</span></div><div class=\"line\">\t\t<span class=\"comment\">// 底位表示向下滚动</span></div><div class=\"line\">\t\t<span class=\"comment\">// 1容许 0禁止</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> status = <span class=\"string\">'11'</span>;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> ele = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> currentY = e.touches[<span class=\"number\">0</span>].clientY;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (ele.scrollTop === <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 如果内容小于容器则同时禁止上下滚动</span></div><div class=\"line\">\t\t\tstatus = ele.offsetHeight &gt;= ele.scrollHeight ? <span class=\"string\">'00'</span> : <span class=\"string\">'01'</span>;</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (ele.scrollTop + ele.offsetHeight &gt;= ele.scrollHeight) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 已经滚到底部了只能向上滚动</span></div><div class=\"line\">\t\t\tstatus = <span class=\"string\">'10'</span>;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (status != <span class=\"string\">'11'</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 判断当前的滚动方向</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> direction = currentY - startY &gt; <span class=\"number\">0</span> ? <span class=\"string\">'10'</span> : <span class=\"string\">'01'</span>;</div><div class=\"line\">\t\t\t<span class=\"comment\">// 操作方向和当前允许状态求与运算，运算结果为0，就说明不允许该方向滚动，则禁止默认事件，阻止滚动</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!(<span class=\"built_in\">parseInt</span>(status, <span class=\"number\">2</span>) &amp; <span class=\"built_in\">parseInt</span>(direction, <span class=\"number\">2</span>))) &#123;</div><div class=\"line\">\t\t\t\tstopEvent(e);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\t<span class=\"comment\">//==================================</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> &#123;</div><div class=\"line\">\t\t<span class=\"attr\">gtIOS</span>: gtIOS,</div><div class=\"line\">\t\t<span class=\"attr\">isSupportCss</span>: isSupportCss</div><div class=\"line\">\t&#125;;</div><div class=\"line\">&#125;());</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Tools;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"发布应用\">发布应用</h4><pre><code><span class=\"bullet\">* </span>npm发布\n<span class=\"bullet\">* </span>通过require的方式引用，直接使用\n</code></pre>"},{"title":"reactjs应用","date":"2016-04-14T02:42:32.000Z","toc":true,"_content":"#### reactjs\n官方文档 http://reactjs.cn/react/docs/getting-started.html\n##### 引用reactjs框架\n* 实时转换工具 `npm install -g react-tools` 启动命令 `jsx --watch src/ build/` （或者页面引入jsx编译工具）\n* 引入fetch https://github.com/github/fetch （引入Promise）\n* jsx http://reactjs.cn/react/docs/jsx-in-depth.html\n<!--more-->\n\n##### 过程\n* 通过 React.createClass 定义组件\n* 组件包含的属性，方法(http://reactjs.cn/react/docs/component-specs.html)\n\t* render\n\t* getInitialState\n\t* getDefaultProps\n\t* propTypes\n\t* mixins\n\t* statics\n\t* displayName\n* 生命周期方法(http://reactjs.cn/react/docs/component-specs.html)\n\t* componentWillMount\n\t* componentDidMount\n\t* componentWillReceiveProps\n\t* shouldComponentUpdate\n\t* componentWillUpdate\n\t* componentDidUpdate\n\t* componentWillUnmount\n* 组件生命周期\n>了解组件的生命周期很重要，这在我们哪个阶段去调用什么方法是有帮助的，下面就一起来看一下：\n\n1. getInitialState\n\t* 在组件类创建的时候只调用一次，返回值是 this.state 的初始值\n2. componentWillMount\n\t* 初始化渲染之前只调用一次，如果在这个阶段setState，更新将会通知render\n3. render\n\t* 会根据this.props或者this.state渲染组件\n4. componentDidMount\n\t* 在初始化渲染之后只调用一次，可以操作dom和浏览器交互，通过this.DOMNode()获取DOM节点\n5. componentWillReceiveProps\n\t* 组件接收到新的props都会调用，初始化的时候不会调用这个方法，可以在这里面更新this.state\n6. componentWillUpdate\n\t* 在接收到新的props或者state之前的时候调用，初始化渲染的时候不会调用，里面做更新前的准备工作，不能在里面setState\n7. shouldComponentUpdate\n\t* 在接收到新的props或者state的时候，渲染之前调用，在初始化的时候不会调用，如果确定新的props和state不会导致组件更新，可以返回false,默认返回true\n\t```javascript\n\tshouldComponentUpdate: function(nextProps, nextState) {\n\t  return nextProps.id !== this.props.id;\n\t}\n\t```\n\t* 这个方法可以提升程序性能，一些依赖父级props，组件本身会发送请求的情况，可以判断传入props是否是更新后的，然后再去执行接下来的动作。\n8. componentDidUpdate\n\t* 组件更新到DOM中被调用，初始化的时候不会调用，对dom的操作可以放在这里面执行\n9. componentWillUnmount\n\t* 组件从dom中移除的时候调用，这个方法中清除一些定时操作等\n","source":"_posts/reactjs应用.md","raw":"title: reactjs应用\ndate: 2016-04-14 10:42:32\ntags: web\ntoc: true\n---\n#### reactjs\n官方文档 http://reactjs.cn/react/docs/getting-started.html\n##### 引用reactjs框架\n* 实时转换工具 `npm install -g react-tools` 启动命令 `jsx --watch src/ build/` （或者页面引入jsx编译工具）\n* 引入fetch https://github.com/github/fetch （引入Promise）\n* jsx http://reactjs.cn/react/docs/jsx-in-depth.html\n<!--more-->\n\n##### 过程\n* 通过 React.createClass 定义组件\n* 组件包含的属性，方法(http://reactjs.cn/react/docs/component-specs.html)\n\t* render\n\t* getInitialState\n\t* getDefaultProps\n\t* propTypes\n\t* mixins\n\t* statics\n\t* displayName\n* 生命周期方法(http://reactjs.cn/react/docs/component-specs.html)\n\t* componentWillMount\n\t* componentDidMount\n\t* componentWillReceiveProps\n\t* shouldComponentUpdate\n\t* componentWillUpdate\n\t* componentDidUpdate\n\t* componentWillUnmount\n* 组件生命周期\n>了解组件的生命周期很重要，这在我们哪个阶段去调用什么方法是有帮助的，下面就一起来看一下：\n\n1. getInitialState\n\t* 在组件类创建的时候只调用一次，返回值是 this.state 的初始值\n2. componentWillMount\n\t* 初始化渲染之前只调用一次，如果在这个阶段setState，更新将会通知render\n3. render\n\t* 会根据this.props或者this.state渲染组件\n4. componentDidMount\n\t* 在初始化渲染之后只调用一次，可以操作dom和浏览器交互，通过this.DOMNode()获取DOM节点\n5. componentWillReceiveProps\n\t* 组件接收到新的props都会调用，初始化的时候不会调用这个方法，可以在这里面更新this.state\n6. componentWillUpdate\n\t* 在接收到新的props或者state之前的时候调用，初始化渲染的时候不会调用，里面做更新前的准备工作，不能在里面setState\n7. shouldComponentUpdate\n\t* 在接收到新的props或者state的时候，渲染之前调用，在初始化的时候不会调用，如果确定新的props和state不会导致组件更新，可以返回false,默认返回true\n\t```javascript\n\tshouldComponentUpdate: function(nextProps, nextState) {\n\t  return nextProps.id !== this.props.id;\n\t}\n\t```\n\t* 这个方法可以提升程序性能，一些依赖父级props，组件本身会发送请求的情况，可以判断传入props是否是更新后的，然后再去执行接下来的动作。\n8. componentDidUpdate\n\t* 组件更新到DOM中被调用，初始化的时候不会调用，对dom的操作可以放在这里面执行\n9. componentWillUnmount\n\t* 组件从dom中移除的时候调用，这个方法中清除一些定时操作等\n","slug":"reactjs应用","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhpb002bt0yjq04t64sg","content":"<h4 id=\"reactjs\">reactjs</h4><p>官方文档 <a href=\"http://reactjs.cn/react/docs/getting-started.html\" target=\"_blank\" rel=\"external\">http://reactjs.cn/react/docs/getting-started.html</a></p>\n<h5 id=\"引用reactjs框架\">引用reactjs框架</h5><ul>\n<li>实时转换工具 <code>npm install -g react-tools</code> 启动命令 <code>jsx --watch src/ build/</code> （或者页面引入jsx编译工具）</li>\n<li>引入fetch <a href=\"https://github.com/github/fetch\" target=\"_blank\" rel=\"external\">https://github.com/github/fetch</a> （引入Promise）</li>\n<li>jsx <a href=\"http://reactjs.cn/react/docs/jsx-in-depth.html\" target=\"_blank\" rel=\"external\">http://reactjs.cn/react/docs/jsx-in-depth.html</a><a id=\"more\"></a>\n</li>\n</ul>\n<h5 id=\"过程\">过程</h5><ul>\n<li>通过 React.createClass 定义组件</li>\n<li>组件包含的属性，方法(<a href=\"http://reactjs.cn/react/docs/component-specs.html\" target=\"_blank\" rel=\"external\">http://reactjs.cn/react/docs/component-specs.html</a>)<ul>\n<li>render</li>\n<li>getInitialState</li>\n<li>getDefaultProps</li>\n<li>propTypes</li>\n<li>mixins</li>\n<li>statics</li>\n<li>displayName</li>\n</ul>\n</li>\n<li>生命周期方法(<a href=\"http://reactjs.cn/react/docs/component-specs.html\" target=\"_blank\" rel=\"external\">http://reactjs.cn/react/docs/component-specs.html</a>)<ul>\n<li>componentWillMount</li>\n<li>componentDidMount</li>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>componentDidUpdate</li>\n<li>componentWillUnmount</li>\n</ul>\n</li>\n<li>组件生命周期<blockquote>\n<p>了解组件的生命周期很重要，这在我们哪个阶段去调用什么方法是有帮助的，下面就一起来看一下：</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>getInitialState<ul>\n<li>在组件类创建的时候只调用一次，返回值是 this.state 的初始值</li>\n</ul>\n</li>\n<li>componentWillMount<ul>\n<li>初始化渲染之前只调用一次，如果在这个阶段setState，更新将会通知render</li>\n</ul>\n</li>\n<li>render<ul>\n<li>会根据this.props或者this.state渲染组件</li>\n</ul>\n</li>\n<li>componentDidMount<ul>\n<li>在初始化渲染之后只调用一次，可以操作dom和浏览器交互，通过this.DOMNode()获取DOM节点</li>\n</ul>\n</li>\n<li>componentWillReceiveProps<ul>\n<li>组件接收到新的props都会调用，初始化的时候不会调用这个方法，可以在这里面更新this.state</li>\n</ul>\n</li>\n<li>componentWillUpdate<ul>\n<li>在接收到新的props或者state之前的时候调用，初始化渲染的时候不会调用，里面做更新前的准备工作，不能在里面setState</li>\n</ul>\n</li>\n<li><p>shouldComponentUpdate</p>\n<ul>\n<li><p>在接收到新的props或者state的时候，渲染之前调用，在初始化的时候不会调用，如果确定新的props和state不会导致组件更新，可以返回false,默认返回true</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">shouldComponentUpdate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextProps, nextState</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> nextProps.id !== <span class=\"keyword\">this</span>.props.id;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>这个方法可以提升程序性能，一些依赖父级props，组件本身会发送请求的情况，可以判断传入props是否是更新后的，然后再去执行接下来的动作。</p>\n</li>\n</ul>\n</li>\n<li>componentDidUpdate<ul>\n<li>组件更新到DOM中被调用，初始化的时候不会调用，对dom的操作可以放在这里面执行</li>\n</ul>\n</li>\n<li>componentWillUnmount<ul>\n<li>组件从dom中移除的时候调用，这个方法中清除一些定时操作等</li>\n</ul>\n</li>\n</ol>\n","excerpt":"<h4 id=\"reactjs\">reactjs</h4><p>官方文档 <a href=\"http://reactjs.cn/react/docs/getting-started.html\">http://reactjs.cn/react/docs/getting-started.html</a></p>\n<h5 id=\"引用reactjs框架\">引用reactjs框架</h5><ul>\n<li>实时转换工具 <code>npm install -g react-tools</code> 启动命令 <code>jsx --watch src/ build/</code> （或者页面引入jsx编译工具）</li>\n<li>引入fetch <a href=\"https://github.com/github/fetch\">https://github.com/github/fetch</a> （引入Promise）</li>\n<li>jsx <a href=\"http://reactjs.cn/react/docs/jsx-in-depth.html\">http://reactjs.cn/react/docs/jsx-in-depth.html</a>","more":"</li>\n</ul>\n<h5 id=\"过程\">过程</h5><ul>\n<li>通过 React.createClass 定义组件</li>\n<li>组件包含的属性，方法(<a href=\"http://reactjs.cn/react/docs/component-specs.html\">http://reactjs.cn/react/docs/component-specs.html</a>)<ul>\n<li>render</li>\n<li>getInitialState</li>\n<li>getDefaultProps</li>\n<li>propTypes</li>\n<li>mixins</li>\n<li>statics</li>\n<li>displayName</li>\n</ul>\n</li>\n<li>生命周期方法(<a href=\"http://reactjs.cn/react/docs/component-specs.html\">http://reactjs.cn/react/docs/component-specs.html</a>)<ul>\n<li>componentWillMount</li>\n<li>componentDidMount</li>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>componentDidUpdate</li>\n<li>componentWillUnmount</li>\n</ul>\n</li>\n<li>组件生命周期<blockquote>\n<p>了解组件的生命周期很重要，这在我们哪个阶段去调用什么方法是有帮助的，下面就一起来看一下：</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>getInitialState<ul>\n<li>在组件类创建的时候只调用一次，返回值是 this.state 的初始值</li>\n</ul>\n</li>\n<li>componentWillMount<ul>\n<li>初始化渲染之前只调用一次，如果在这个阶段setState，更新将会通知render</li>\n</ul>\n</li>\n<li>render<ul>\n<li>会根据this.props或者this.state渲染组件</li>\n</ul>\n</li>\n<li>componentDidMount<ul>\n<li>在初始化渲染之后只调用一次，可以操作dom和浏览器交互，通过this.DOMNode()获取DOM节点</li>\n</ul>\n</li>\n<li>componentWillReceiveProps<ul>\n<li>组件接收到新的props都会调用，初始化的时候不会调用这个方法，可以在这里面更新this.state</li>\n</ul>\n</li>\n<li>componentWillUpdate<ul>\n<li>在接收到新的props或者state之前的时候调用，初始化渲染的时候不会调用，里面做更新前的准备工作，不能在里面setState</li>\n</ul>\n</li>\n<li><p>shouldComponentUpdate</p>\n<ul>\n<li><p>在接收到新的props或者state的时候，渲染之前调用，在初始化的时候不会调用，如果确定新的props和state不会导致组件更新，可以返回false,默认返回true</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">shouldComponentUpdate: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">nextProps, nextState</span>) </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">return</span> nextProps.id !== <span class=\"keyword\">this</span>.props.id;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>这个方法可以提升程序性能，一些依赖父级props，组件本身会发送请求的情况，可以判断传入props是否是更新后的，然后再去执行接下来的动作。</p>\n</li>\n</ul>\n</li>\n<li>componentDidUpdate<ul>\n<li>组件更新到DOM中被调用，初始化的时候不会调用，对dom的操作可以放在这里面执行</li>\n</ul>\n</li>\n<li>componentWillUnmount<ul>\n<li>组件从dom中移除的时候调用，这个方法中清除一些定时操作等</li>\n</ul>\n</li>\n</ol>"},{"title":"shell基础","date":"2015-11-23T07:03:01.000Z","toc":true,"_content":"#### shell分类\n* Bourne Shell（/usr/bin/sh或/bin/sh）\n* Bourne Again Shell（/bin/bash）\n* C Shell（/usr/bin/csh）\n* K Shell（/usr/bin/ksh）\n* Shell for Root（/sbin/sh）\n* eg.\n<!--more-->\n\n##### `#!`\n>`#!`告诉系统其后路径所指定的程序即是解释此脚本文件的Shell程序。\n* 执行\n\t* `./test.sh`使用想对路径\n\t* sh test.sh\n* 变量\n\t* 直接使用变量名 `test=\"123\"`\n\n* 变量名和等号之间不能有空格\n* 首个字符必须为字母（a-z，A-Z）。\n* 中间不能有空格，可以使用下划线（_）。\n* 不能使用标点符号。\n* 不能使用bash里的关键字（可用help命令查看保留关键字）。\n\n##### 使用语句给变量赋值\n* for file inls /etc``\n\n##### 使用变量\n>在变量名前添加美元符号 `$`\n`$test`或者`${test}`\n\n##### 字符串\n* 单引号\n\t* 不能使用变量\n\t* 不能出现单引号，不能使用转译字符\n* 双引号\n\t* 可以使用变量\n\t* 可以使用转译字符\n\n##### 拼接字符串\n* 不需要使用 `+` 符号\n```javascript\nname=\"zhuo\"\nsay=\"hi \"$name\" !\"\nsays = \"hi ${name} !\"\necho say says\n```\n##### 字符串长度\n```javascript\nstring=\"tetetete\"\necho ${#string}\n```\n##### 截取字符串\n```javascript\nstring=\"tetetete\"\necho ${string:2:4}\n```\n##### 查找字符串\n```javascript\nstring=\"asdfsdf werfvsd\"\necho `expr index \"$string\" is`\n```\n##### 数组\n创建数组以及访问数组\n```javascript\narr=(1,2,3,4,5)\n#或者\narr[0]=1\narr[1]=2\narr[2]=3\n#访问\necho ${arr[0]}\n#访问所有元素\necho ${arr[@]}\n```\n##### 数组长度\n```javascript\nlen=${#arr[@]}\n```\n或者\n```javascript\nlen=${$arr[*]}\n```\n数组单个元素长度\n```javascript\nlen=${$arr[n]}\n```\n##### 注释\n* 不支持多行注释，单行注释使用#\n* 开发过程中，为方便注释，可以把需要注释的代码放在一个函数中\n##### echo\n输出字符串\necho string\n```javascriot\necho \"test\"\necho test\necho \"\\\"test\\\"\"\n```\n##### read\n输入字符\nread name\n```javascript\n#!/bin/sh\nread name\necho \"${name}\"\n```\n##### 显示\n`-e`开启转义\n换行\n```javascript\necho -e \"test!\\n\" # \\n换行\necho \"ok\"\n```\n##### 不换行\n```javascript\necho -e \"test!\\c\" # \\c不换行\necho \"ok\"\n```\n##### 输出到文件\n`echo \"test\" > test.txt`\n##### 原格式输出\n使用单引号，不进行转义\n##### 显示执行结果\n`echo `data``\n\n##### test命令\n检测某个条件是否成立\n\t* 数值测试\n\t```javascript\n\t-eq\t等于则为真\n\t-ne\t不等于则为真\n\t-gt\t大于则为真\n\t-ge\t大于等于则为真\n\t-lt\t小于则为真\n\t-le\t小于等于则为真\n\t```\n\t```javascript\n\tx=read\n\ty=read\n\tif test $[x] -eq $[y]\n\tthen\n\t\techo \"ok\"\n\telif test $x -gt $y\n\t\techo \"gt\"\n\telse\n\t\techo \"bad\"\n\tfi\n\t```\n\t* 字符串测试\n\t```javascript\n\t=\t等于则为真\n\t!=\t不相等则为真\n\t-z 字符串\t字符串长度伪则为真\n\t-n 字符串\t字符串长度不伪则为真\n\t```\n\t```javascript\n\tx=read\n\ty=read\n\tif test $x -eq $y\n\tthen\n\t\techo \"ok\"\n\telif test $x -gt $y\n\t\techo \"gt\"\n\telse\n\t\techo \"bad\"\n\tfi\n\t```\n##### 文件测试\n```javascript\n-e 文件名\t如果文件存在则为真\n-r 文件名\t如果文件存在且可读则为真\n-w 文件名\t如果文件存在且可写则为真\n-x 文件名\t如果文件存在且可执行则为真\n-s 文件名\t如果文件存在且至少有一个字符则为真\n-d 文件名\t如果文件存在且为目录则为真\n-f 文件名\t如果文件存在且为普通文件则为真\n-c 文件名\t如果文件存在且为字符型特殊文件则为真\n-b 文件名\t如果文件存在且为块特殊文件则为真\n```\n```javascript\nif test -e ./blog\nthen \n\techo 'file exists'\nelse\n\techo 'file does not exists'\nfi\n```javascript\n`Shell还提供了 与( -a )、或( -o )、非( ! ) 三个逻辑操作符用于将测试条件连接起来，优先级：”!” “-a” “-o”`\n##### 流程控制\n* if else\n```javascript\nx=read\ny=read\nif test $x -eq $y\nthen\n\techo \"ok\"\nelif test $x -gt $y\n\techo \"gt\"\nelse\n\techo \"bad\"\nfi\n```\n##### for\n```javascript\nfor it in 1 2 3 4 5 6 7 8\ndo\n\techo $it\ndone\n```\n##### while\n条件为真则执行\n```javascript\ncount=1\nwhile(($count<10))\ndo\n\techo $count\n\tlet \"count++\"\ndone\n```\n##### until\n直到条件为真停止,用法与while相同\n```javascript\ncount=100\nuntil(($count<=10))\ndo\n\techo $count\n\tlet \"count--\"\ndone\n```\n##### case\n```javascript\necho '请输入1-3的数字:'\nread num\ncase $num in\n\t1) echo '你输入了1'\n\t;;\n\t2) echo '你输入了2'\n\t;;\n\t3) echo '你输入了3'\n\t;;\n\t*) echo '你没有输入1到3的数字'\n\t;;\nesac\n```\n##### break\n跳出所有循环\n##### continue\n结束当前循环，继续执行下一次循环\n##### 函数\n* 定义方式,不需要带参数\n* function fun()\n* fun()\n\t* 参数返回，使用return\n\t* 函数调用，直接使用函数名，不需要加括号，带有参数直接在后面列出，用空格间隔\n\t* 函数返回值在调用函数后，可以通过$?使用\n\t* 函数中的参数，可以使用$n来表示，n>10的时候，使用${n}\n\t* 特殊参数\n\t\t* `$#` 传递到脚本的参数个数\n\t\t* `$*` 以一个单字符串显示所有向脚本传递的参数\n\t\t* `$$` 脚本运行的当前进程ID号\n\t\t* `$!` 后台运行的最后一个进程的ID号\n\t\t* `$@` 与$*相同，但是使用时加引号，并在引号中返回每个参数。\n\t\t* `$-` 显示Shell使用的当前选项，与set命令功能相同。\n\t\t* `$?` 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。\n","source":"_posts/shell基础.md","raw":"title: shell基础\ndate: 2015-11-23 15:03:01\ntags: linux\ntoc: true\n---\n#### shell分类\n* Bourne Shell（/usr/bin/sh或/bin/sh）\n* Bourne Again Shell（/bin/bash）\n* C Shell（/usr/bin/csh）\n* K Shell（/usr/bin/ksh）\n* Shell for Root（/sbin/sh）\n* eg.\n<!--more-->\n\n##### `#!`\n>`#!`告诉系统其后路径所指定的程序即是解释此脚本文件的Shell程序。\n* 执行\n\t* `./test.sh`使用想对路径\n\t* sh test.sh\n* 变量\n\t* 直接使用变量名 `test=\"123\"`\n\n* 变量名和等号之间不能有空格\n* 首个字符必须为字母（a-z，A-Z）。\n* 中间不能有空格，可以使用下划线（_）。\n* 不能使用标点符号。\n* 不能使用bash里的关键字（可用help命令查看保留关键字）。\n\n##### 使用语句给变量赋值\n* for file inls /etc``\n\n##### 使用变量\n>在变量名前添加美元符号 `$`\n`$test`或者`${test}`\n\n##### 字符串\n* 单引号\n\t* 不能使用变量\n\t* 不能出现单引号，不能使用转译字符\n* 双引号\n\t* 可以使用变量\n\t* 可以使用转译字符\n\n##### 拼接字符串\n* 不需要使用 `+` 符号\n```javascript\nname=\"zhuo\"\nsay=\"hi \"$name\" !\"\nsays = \"hi ${name} !\"\necho say says\n```\n##### 字符串长度\n```javascript\nstring=\"tetetete\"\necho ${#string}\n```\n##### 截取字符串\n```javascript\nstring=\"tetetete\"\necho ${string:2:4}\n```\n##### 查找字符串\n```javascript\nstring=\"asdfsdf werfvsd\"\necho `expr index \"$string\" is`\n```\n##### 数组\n创建数组以及访问数组\n```javascript\narr=(1,2,3,4,5)\n#或者\narr[0]=1\narr[1]=2\narr[2]=3\n#访问\necho ${arr[0]}\n#访问所有元素\necho ${arr[@]}\n```\n##### 数组长度\n```javascript\nlen=${#arr[@]}\n```\n或者\n```javascript\nlen=${$arr[*]}\n```\n数组单个元素长度\n```javascript\nlen=${$arr[n]}\n```\n##### 注释\n* 不支持多行注释，单行注释使用#\n* 开发过程中，为方便注释，可以把需要注释的代码放在一个函数中\n##### echo\n输出字符串\necho string\n```javascriot\necho \"test\"\necho test\necho \"\\\"test\\\"\"\n```\n##### read\n输入字符\nread name\n```javascript\n#!/bin/sh\nread name\necho \"${name}\"\n```\n##### 显示\n`-e`开启转义\n换行\n```javascript\necho -e \"test!\\n\" # \\n换行\necho \"ok\"\n```\n##### 不换行\n```javascript\necho -e \"test!\\c\" # \\c不换行\necho \"ok\"\n```\n##### 输出到文件\n`echo \"test\" > test.txt`\n##### 原格式输出\n使用单引号，不进行转义\n##### 显示执行结果\n`echo `data``\n\n##### test命令\n检测某个条件是否成立\n\t* 数值测试\n\t```javascript\n\t-eq\t等于则为真\n\t-ne\t不等于则为真\n\t-gt\t大于则为真\n\t-ge\t大于等于则为真\n\t-lt\t小于则为真\n\t-le\t小于等于则为真\n\t```\n\t```javascript\n\tx=read\n\ty=read\n\tif test $[x] -eq $[y]\n\tthen\n\t\techo \"ok\"\n\telif test $x -gt $y\n\t\techo \"gt\"\n\telse\n\t\techo \"bad\"\n\tfi\n\t```\n\t* 字符串测试\n\t```javascript\n\t=\t等于则为真\n\t!=\t不相等则为真\n\t-z 字符串\t字符串长度伪则为真\n\t-n 字符串\t字符串长度不伪则为真\n\t```\n\t```javascript\n\tx=read\n\ty=read\n\tif test $x -eq $y\n\tthen\n\t\techo \"ok\"\n\telif test $x -gt $y\n\t\techo \"gt\"\n\telse\n\t\techo \"bad\"\n\tfi\n\t```\n##### 文件测试\n```javascript\n-e 文件名\t如果文件存在则为真\n-r 文件名\t如果文件存在且可读则为真\n-w 文件名\t如果文件存在且可写则为真\n-x 文件名\t如果文件存在且可执行则为真\n-s 文件名\t如果文件存在且至少有一个字符则为真\n-d 文件名\t如果文件存在且为目录则为真\n-f 文件名\t如果文件存在且为普通文件则为真\n-c 文件名\t如果文件存在且为字符型特殊文件则为真\n-b 文件名\t如果文件存在且为块特殊文件则为真\n```\n```javascript\nif test -e ./blog\nthen \n\techo 'file exists'\nelse\n\techo 'file does not exists'\nfi\n```javascript\n`Shell还提供了 与( -a )、或( -o )、非( ! ) 三个逻辑操作符用于将测试条件连接起来，优先级：”!” “-a” “-o”`\n##### 流程控制\n* if else\n```javascript\nx=read\ny=read\nif test $x -eq $y\nthen\n\techo \"ok\"\nelif test $x -gt $y\n\techo \"gt\"\nelse\n\techo \"bad\"\nfi\n```\n##### for\n```javascript\nfor it in 1 2 3 4 5 6 7 8\ndo\n\techo $it\ndone\n```\n##### while\n条件为真则执行\n```javascript\ncount=1\nwhile(($count<10))\ndo\n\techo $count\n\tlet \"count++\"\ndone\n```\n##### until\n直到条件为真停止,用法与while相同\n```javascript\ncount=100\nuntil(($count<=10))\ndo\n\techo $count\n\tlet \"count--\"\ndone\n```\n##### case\n```javascript\necho '请输入1-3的数字:'\nread num\ncase $num in\n\t1) echo '你输入了1'\n\t;;\n\t2) echo '你输入了2'\n\t;;\n\t3) echo '你输入了3'\n\t;;\n\t*) echo '你没有输入1到3的数字'\n\t;;\nesac\n```\n##### break\n跳出所有循环\n##### continue\n结束当前循环，继续执行下一次循环\n##### 函数\n* 定义方式,不需要带参数\n* function fun()\n* fun()\n\t* 参数返回，使用return\n\t* 函数调用，直接使用函数名，不需要加括号，带有参数直接在后面列出，用空格间隔\n\t* 函数返回值在调用函数后，可以通过$?使用\n\t* 函数中的参数，可以使用$n来表示，n>10的时候，使用${n}\n\t* 特殊参数\n\t\t* `$#` 传递到脚本的参数个数\n\t\t* `$*` 以一个单字符串显示所有向脚本传递的参数\n\t\t* `$$` 脚本运行的当前进程ID号\n\t\t* `$!` 后台运行的最后一个进程的ID号\n\t\t* `$@` 与$*相同，但是使用时加引号，并在引号中返回每个参数。\n\t\t* `$-` 显示Shell使用的当前选项，与set命令功能相同。\n\t\t* `$?` 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。\n","slug":"shell基础","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhpd002dt0yjq3l6f0i4","content":"<h4 id=\"shell分类\">shell分类</h4><ul>\n<li>Bourne Shell（/usr/bin/sh或/bin/sh）</li>\n<li>Bourne Again Shell（/bin/bash）</li>\n<li>C Shell（/usr/bin/csh）</li>\n<li>K Shell（/usr/bin/ksh）</li>\n<li>Shell for Root（/sbin/sh）</li>\n<li>eg.<a id=\"more\"></a>\n</li>\n</ul>\n<h5 id=\"#!\"><code>#!</code></h5><blockquote>\n<p><code>#!</code>告诉系统其后路径所指定的程序即是解释此脚本文件的Shell程序。</p>\n<ul>\n<li>执行<ul>\n<li><code>./test.sh</code>使用想对路径</li>\n<li>sh test.sh</li>\n</ul>\n</li>\n<li>变量<ul>\n<li>直接使用变量名 <code>test=&quot;123&quot;</code></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>变量名和等号之间不能有空格</li>\n<li>首个字符必须为字母（a-z，A-Z）。</li>\n<li>中间不能有空格，可以使用下划线（_）。</li>\n<li>不能使用标点符号。</li>\n<li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li>\n</ul>\n<h5 id=\"使用语句给变量赋值\">使用语句给变量赋值</h5><ul>\n<li>for file inls /etc``</li>\n</ul>\n<h5 id=\"使用变量\">使用变量</h5><blockquote>\n<p>在变量名前添加美元符号 <code>$</code><br><code>$test</code>或者<code>${test}</code></p>\n</blockquote>\n<h5 id=\"字符串\">字符串</h5><ul>\n<li>单引号<ul>\n<li>不能使用变量</li>\n<li>不能出现单引号，不能使用转译字符</li>\n</ul>\n</li>\n<li>双引号<ul>\n<li>可以使用变量</li>\n<li>可以使用转译字符</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"拼接字符串\">拼接字符串</h5><ul>\n<li>不需要使用 <code>+</code> 符号<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">name=<span class=\"string\">\"zhuo\"</span></div><div class=\"line\">say=<span class=\"string\">\"hi \"</span>$name<span class=\"string\">\" !\"</span></div><div class=\"line\">says = <span class=\"string\">\"hi $&#123;name&#125; !\"</span></div><div class=\"line\">echo say says</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"字符串长度\">字符串长度</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">string=\"tetetete\"</div><div class=\"line\">echo $&#123;#string&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"截取字符串\">截取字符串</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">string=<span class=\"string\">\"tetetete\"</span></div><div class=\"line\">echo $&#123;<span class=\"attr\">string</span>:<span class=\"number\">2</span>:<span class=\"number\">4</span>&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"查找字符串\">查找字符串</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">string=<span class=\"string\">\"asdfsdf werfvsd\"</span></div><div class=\"line\">echo <span class=\"string\">`expr index \"$string\" is`</span></div></pre></td></tr></table></figure>\n<h5 id=\"数组\">数组</h5><p>创建数组以及访问数组<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr=(1,2,3,4,5)</div><div class=\"line\">#或者</div><div class=\"line\">arr[0]=1</div><div class=\"line\">arr[1]=2</div><div class=\"line\">arr[2]=3</div><div class=\"line\">#访问</div><div class=\"line\">echo $&#123;arr[0]&#125;</div><div class=\"line\">#访问所有元素</div><div class=\"line\">echo $&#123;arr[@]&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"数组长度\">数组长度</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">len=$&#123;#arr[@]&#125;</div></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">len=$&#123;$arr[*]&#125;</div></pre></td></tr></table></figure></p>\n<p>数组单个元素长度<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">len=$&#123;$arr[n]&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"注释\">注释</h5><ul>\n<li>不支持多行注释，单行注释使用#</li>\n<li>开发过程中，为方便注释，可以把需要注释的代码放在一个函数中<h5 id=\"echo\">echo</h5>输出字符串<br>echo string<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;test&quot;</div><div class=\"line\">echo test</div><div class=\"line\">echo &quot;\\&quot;test\\&quot;&quot;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"read\">read</h5><p>输入字符<br>read name<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">read name</div><div class=\"line\">echo <span class=\"string\">\"$&#123;name&#125;\"</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"显示\">显示</h5><p><code>-e</code>开启转义<br>换行<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo -e \"test!\\n\" # \\n换行</div><div class=\"line\">echo \"ok\"</div></pre></td></tr></table></figure></p>\n<h5 id=\"不换行\">不换行</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo -e \"test!\\c\" # \\c不换行</div><div class=\"line\">echo \"ok\"</div></pre></td></tr></table></figure>\n<h5 id=\"输出到文件\">输出到文件</h5><p><code>echo &quot;test&quot; &gt; test.txt</code></p>\n<h5 id=\"原格式输出\">原格式输出</h5><p>使用单引号，不进行转义</p>\n<h5 id=\"显示执行结果\">显示执行结果</h5><p><code>echo</code>data``</p>\n<h5 id=\"test命令\">test命令</h5><p>检测某个条件是否成立</p>\n<pre><code>* 数值测试\n<span class=\"comment\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">-eq\t等于则为真</div><div class=\"line\">-ne\t不等于则为真</div><div class=\"line\">-gt\t大于则为真</div><div class=\"line\">-ge\t大于等于则为真</div><div class=\"line\">-lt\t小于则为真</div><div class=\"line\">-le\t小于等于则为真</div></pre></td></tr></table></figure></span>\n\n<span class=\"comment\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">x=read</div><div class=\"line\">y=read</div><div class=\"line\"><span class=\"keyword\">if</span> test $[x] -eq $[y]</div><div class=\"line\">then</div><div class=\"line\">\techo <span class=\"string\">\"ok\"</span></div><div class=\"line\">elif test $x -gt $y</div><div class=\"line\">\techo <span class=\"string\">\"gt\"</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\techo <span class=\"string\">\"bad\"</span></div><div class=\"line\">fi</div></pre></td></tr></table></figure></span>\n\n* 字符串测试\n<span class=\"comment\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">=\t等于则为真</div><div class=\"line\">!=\t不相等则为真</div><div class=\"line\">-z 字符串\t字符串长度伪则为真</div><div class=\"line\">-n 字符串\t字符串长度不伪则为真</div></pre></td></tr></table></figure></span>\n\n<span class=\"comment\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">x=read</div><div class=\"line\">y=read</div><div class=\"line\"><span class=\"keyword\">if</span> test $x -eq $y</div><div class=\"line\">then</div><div class=\"line\">\techo <span class=\"string\">\"ok\"</span></div><div class=\"line\">elif test $x -gt $y</div><div class=\"line\">\techo <span class=\"string\">\"gt\"</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\techo <span class=\"string\">\"bad\"</span></div><div class=\"line\">fi</div></pre></td></tr></table></figure></span>\n</code></pre><h5 id=\"文件测试\">文件测试</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">-e 文件名\t如果文件存在则为真</div><div class=\"line\">-r 文件名\t如果文件存在且可读则为真</div><div class=\"line\">-w 文件名\t如果文件存在且可写则为真</div><div class=\"line\">-x 文件名\t如果文件存在且可执行则为真</div><div class=\"line\">-s 文件名\t如果文件存在且至少有一个字符则为真</div><div class=\"line\">-d 文件名\t如果文件存在且为目录则为真</div><div class=\"line\">-f 文件名\t如果文件存在且为普通文件则为真</div><div class=\"line\">-c 文件名\t如果文件存在且为字符型特殊文件则为真</div><div class=\"line\">-b 文件名\t如果文件存在且为块特殊文件则为真</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> test -e ./blog</div><div class=\"line\">then </div><div class=\"line\">\techo <span class=\"string\">'file exists'</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\techo <span class=\"string\">'file does not exists'</span></div><div class=\"line\">fi</div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`javascript</span></div><div class=\"line\">`Shell还提供了 与( -a )、或( -o )、非( ! ) 三个逻辑操作符用于将测试条件连接起来，优先级：”!” “-a” “-o”<span class=\"string\">`</span></div><div class=\"line\">##### 流程控制</div><div class=\"line\">* if else</div><div class=\"line\">`<span class=\"string\">``</span>javascript</div><div class=\"line\">x=read</div><div class=\"line\">y=read</div><div class=\"line\"><span class=\"keyword\">if</span> test $x -eq $y</div><div class=\"line\">then</div><div class=\"line\">\techo <span class=\"string\">\"ok\"</span></div><div class=\"line\">elif test $x -gt $y</div><div class=\"line\">\techo <span class=\"string\">\"gt\"</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\techo <span class=\"string\">\"bad\"</span></div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<h5 id=\"for\">for</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\techo $it</div><div class=\"line\">done</div></pre></td></tr></table></figure>\n<h5 id=\"while\">while</h5><p>条件为真则执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">count=<span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">while</span>(($count&lt;<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\techo $count</div><div class=\"line\">\t<span class=\"keyword\">let</span> <span class=\"string\">\"count++\"</span></div><div class=\"line\">done</div></pre></td></tr></table></figure></p>\n<h5 id=\"until\">until</h5><p>直到条件为真停止,用法与while相同<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">count=<span class=\"number\">100</span></div><div class=\"line\">until(($count&lt;=<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\techo $count</div><div class=\"line\">\t<span class=\"keyword\">let</span> <span class=\"string\">\"count--\"</span></div><div class=\"line\">done</div></pre></td></tr></table></figure></p>\n<h5 id=\"case\">case</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo <span class=\"string\">'请输入1-3的数字:'</span></div><div class=\"line\">read num</div><div class=\"line\"><span class=\"keyword\">case</span> $num <span class=\"keyword\">in</span></div><div class=\"line\">\t<span class=\"number\">1</span>) echo <span class=\"string\">'你输入了1'</span></div><div class=\"line\">\t;;</div><div class=\"line\">\t<span class=\"number\">2</span>) echo <span class=\"string\">'你输入了2'</span></div><div class=\"line\">\t;;</div><div class=\"line\">\t<span class=\"number\">3</span>) echo <span class=\"string\">'你输入了3'</span></div><div class=\"line\">\t;;</div><div class=\"line\">\t*) echo <span class=\"string\">'你没有输入1到3的数字'</span></div><div class=\"line\">\t;;</div><div class=\"line\">esac</div></pre></td></tr></table></figure>\n<h5 id=\"break\">break</h5><p>跳出所有循环</p>\n<h5 id=\"continue\">continue</h5><p>结束当前循环，继续执行下一次循环</p>\n<h5 id=\"函数\">函数</h5><ul>\n<li>定义方式,不需要带参数</li>\n<li>function fun()</li>\n<li>fun()<ul>\n<li>参数返回，使用return</li>\n<li>函数调用，直接使用函数名，不需要加括号，带有参数直接在后面列出，用空格间隔</li>\n<li>函数返回值在调用函数后，可以通过$?使用</li>\n<li>函数中的参数，可以使用$n来表示，n&gt;10的时候，使用${n}</li>\n<li>特殊参数<ul>\n<li><code>$#</code> 传递到脚本的参数个数</li>\n<li><code>$*</code> 以一个单字符串显示所有向脚本传递的参数</li>\n<li><code>$$</code> 脚本运行的当前进程ID号</li>\n<li><code>$!</code> 后台运行的最后一个进程的ID号</li>\n<li><code>$@</code> 与$*相同，但是使用时加引号，并在引号中返回每个参数。</li>\n<li><code>$-</code> 显示Shell使用的当前选项，与set命令功能相同。</li>\n<li><code>$?</code> 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","excerpt":"<h4 id=\"shell分类\">shell分类</h4><ul>\n<li>Bourne Shell（/usr/bin/sh或/bin/sh）</li>\n<li>Bourne Again Shell（/bin/bash）</li>\n<li>C Shell（/usr/bin/csh）</li>\n<li>K Shell（/usr/bin/ksh）</li>\n<li>Shell for Root（/sbin/sh）</li>\n<li>eg.","more":"</li>\n</ul>\n<h5 id=\"#!\"><code>#!</code></h5><blockquote>\n<p><code>#!</code>告诉系统其后路径所指定的程序即是解释此脚本文件的Shell程序。</p>\n<ul>\n<li>执行<ul>\n<li><code>./test.sh</code>使用想对路径</li>\n<li>sh test.sh</li>\n</ul>\n</li>\n<li>变量<ul>\n<li>直接使用变量名 <code>test=&quot;123&quot;</code></li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>变量名和等号之间不能有空格</li>\n<li>首个字符必须为字母（a-z，A-Z）。</li>\n<li>中间不能有空格，可以使用下划线（_）。</li>\n<li>不能使用标点符号。</li>\n<li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li>\n</ul>\n<h5 id=\"使用语句给变量赋值\">使用语句给变量赋值</h5><ul>\n<li>for file inls /etc``</li>\n</ul>\n<h5 id=\"使用变量\">使用变量</h5><blockquote>\n<p>在变量名前添加美元符号 <code>$</code><br><code>$test</code>或者<code>${test}</code></p>\n</blockquote>\n<h5 id=\"字符串\">字符串</h5><ul>\n<li>单引号<ul>\n<li>不能使用变量</li>\n<li>不能出现单引号，不能使用转译字符</li>\n</ul>\n</li>\n<li>双引号<ul>\n<li>可以使用变量</li>\n<li>可以使用转译字符</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"拼接字符串\">拼接字符串</h5><ul>\n<li>不需要使用 <code>+</code> 符号<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">name=<span class=\"string\">\"zhuo\"</span></div><div class=\"line\">say=<span class=\"string\">\"hi \"</span>$name<span class=\"string\">\" !\"</span></div><div class=\"line\">says = <span class=\"string\">\"hi $&#123;name&#125; !\"</span></div><div class=\"line\">echo say says</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"字符串长度\">字符串长度</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">string=\"tetetete\"</div><div class=\"line\">echo $&#123;#string&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"截取字符串\">截取字符串</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">string=<span class=\"string\">\"tetetete\"</span></div><div class=\"line\">echo $&#123;<span class=\"attr\">string</span>:<span class=\"number\">2</span>:<span class=\"number\">4</span>&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"查找字符串\">查找字符串</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">string=<span class=\"string\">\"asdfsdf werfvsd\"</span></div><div class=\"line\">echo <span class=\"string\">`expr index \"$string\" is`</span></div></pre></td></tr></table></figure>\n<h5 id=\"数组\">数组</h5><p>创建数组以及访问数组<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">arr=(1,2,3,4,5)</div><div class=\"line\">#或者</div><div class=\"line\">arr[0]=1</div><div class=\"line\">arr[1]=2</div><div class=\"line\">arr[2]=3</div><div class=\"line\">#访问</div><div class=\"line\">echo $&#123;arr[0]&#125;</div><div class=\"line\">#访问所有元素</div><div class=\"line\">echo $&#123;arr[@]&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"数组长度\">数组长度</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">len=$&#123;#arr[@]&#125;</div></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">len=$&#123;$arr[*]&#125;</div></pre></td></tr></table></figure></p>\n<p>数组单个元素长度<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">len=$&#123;$arr[n]&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"注释\">注释</h5><ul>\n<li>不支持多行注释，单行注释使用#</li>\n<li>开发过程中，为方便注释，可以把需要注释的代码放在一个函数中<h5 id=\"echo\">echo</h5>输出字符串<br>echo string<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo &quot;test&quot;</div><div class=\"line\">echo test</div><div class=\"line\">echo &quot;\\&quot;test\\&quot;&quot;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"read\">read</h5><p>输入字符<br>read name<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/sh</span></div><div class=\"line\">read name</div><div class=\"line\">echo <span class=\"string\">\"$&#123;name&#125;\"</span></div></pre></td></tr></table></figure></p>\n<h5 id=\"显示\">显示</h5><p><code>-e</code>开启转义<br>换行<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo -e \"test!\\n\" # \\n换行</div><div class=\"line\">echo \"ok\"</div></pre></td></tr></table></figure></p>\n<h5 id=\"不换行\">不换行</h5><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo -e \"test!\\c\" # \\c不换行</div><div class=\"line\">echo \"ok\"</div></pre></td></tr></table></figure>\n<h5 id=\"输出到文件\">输出到文件</h5><p><code>echo &quot;test&quot; &gt; test.txt</code></p>\n<h5 id=\"原格式输出\">原格式输出</h5><p>使用单引号，不进行转义</p>\n<h5 id=\"显示执行结果\">显示执行结果</h5><p><code>echo</code>data``</p>\n<h5 id=\"test命令\">test命令</h5><p>检测某个条件是否成立</p>\n<pre><code>* 数值测试\n<span class=\"comment\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">-eq\t等于则为真</div><div class=\"line\">-ne\t不等于则为真</div><div class=\"line\">-gt\t大于则为真</div><div class=\"line\">-ge\t大于等于则为真</div><div class=\"line\">-lt\t小于则为真</div><div class=\"line\">-le\t小于等于则为真</div></pre></td></tr></table></figure></span>\n\n<span class=\"comment\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">x=read</div><div class=\"line\">y=read</div><div class=\"line\"><span class=\"keyword\">if</span> test $[x] -eq $[y]</div><div class=\"line\">then</div><div class=\"line\">\techo <span class=\"string\">\"ok\"</span></div><div class=\"line\">elif test $x -gt $y</div><div class=\"line\">\techo <span class=\"string\">\"gt\"</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\techo <span class=\"string\">\"bad\"</span></div><div class=\"line\">fi</div></pre></td></tr></table></figure></span>\n\n* 字符串测试\n<span class=\"comment\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">=\t等于则为真</div><div class=\"line\">!=\t不相等则为真</div><div class=\"line\">-z 字符串\t字符串长度伪则为真</div><div class=\"line\">-n 字符串\t字符串长度不伪则为真</div></pre></td></tr></table></figure></span>\n\n<span class=\"comment\"><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">x=read</div><div class=\"line\">y=read</div><div class=\"line\"><span class=\"keyword\">if</span> test $x -eq $y</div><div class=\"line\">then</div><div class=\"line\">\techo <span class=\"string\">\"ok\"</span></div><div class=\"line\">elif test $x -gt $y</div><div class=\"line\">\techo <span class=\"string\">\"gt\"</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\techo <span class=\"string\">\"bad\"</span></div><div class=\"line\">fi</div></pre></td></tr></table></figure></span>\n</code></pre><h5 id=\"文件测试\">文件测试</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">-e 文件名\t如果文件存在则为真</div><div class=\"line\">-r 文件名\t如果文件存在且可读则为真</div><div class=\"line\">-w 文件名\t如果文件存在且可写则为真</div><div class=\"line\">-x 文件名\t如果文件存在且可执行则为真</div><div class=\"line\">-s 文件名\t如果文件存在且至少有一个字符则为真</div><div class=\"line\">-d 文件名\t如果文件存在且为目录则为真</div><div class=\"line\">-f 文件名\t如果文件存在且为普通文件则为真</div><div class=\"line\">-c 文件名\t如果文件存在且为字符型特殊文件则为真</div><div class=\"line\">-b 文件名\t如果文件存在且为块特殊文件则为真</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> test -e ./blog</div><div class=\"line\">then </div><div class=\"line\">\techo <span class=\"string\">'file exists'</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\techo <span class=\"string\">'file does not exists'</span></div><div class=\"line\">fi</div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`javascript</div><div class=\"line\">`</span>Shell还提供了 与( -a )、或( -o )、非( ! ) 三个逻辑操作符用于将测试条件连接起来，优先级：”!” “-a” “-o”<span class=\"string\">`</div><div class=\"line\">##### 流程控制</div><div class=\"line\">* if else</div><div class=\"line\">`</span><span class=\"string\">``</span>javascript</div><div class=\"line\">x=read</div><div class=\"line\">y=read</div><div class=\"line\"><span class=\"keyword\">if</span> test $x -eq $y</div><div class=\"line\">then</div><div class=\"line\">\techo <span class=\"string\">\"ok\"</span></div><div class=\"line\">elif test $x -gt $y</div><div class=\"line\">\techo <span class=\"string\">\"gt\"</span></div><div class=\"line\"><span class=\"keyword\">else</span></div><div class=\"line\">\techo <span class=\"string\">\"bad\"</span></div><div class=\"line\">fi</div></pre></td></tr></table></figure>\n<h5 id=\"for\">for</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> it <span class=\"keyword\">in</span> <span class=\"number\">1</span> <span class=\"number\">2</span> <span class=\"number\">3</span> <span class=\"number\">4</span> <span class=\"number\">5</span> <span class=\"number\">6</span> <span class=\"number\">7</span> <span class=\"number\">8</span></div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\techo $it</div><div class=\"line\">done</div></pre></td></tr></table></figure>\n<h5 id=\"while\">while</h5><p>条件为真则执行<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">count=<span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">while</span>(($count&lt;<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\techo $count</div><div class=\"line\">\t<span class=\"keyword\">let</span> <span class=\"string\">\"count++\"</span></div><div class=\"line\">done</div></pre></td></tr></table></figure></p>\n<h5 id=\"until\">until</h5><p>直到条件为真停止,用法与while相同<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">count=<span class=\"number\">100</span></div><div class=\"line\">until(($count&lt;=<span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"keyword\">do</span></div><div class=\"line\">\techo $count</div><div class=\"line\">\t<span class=\"keyword\">let</span> <span class=\"string\">\"count--\"</span></div><div class=\"line\">done</div></pre></td></tr></table></figure></p>\n<h5 id=\"case\">case</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">echo <span class=\"string\">'请输入1-3的数字:'</span></div><div class=\"line\">read num</div><div class=\"line\"><span class=\"keyword\">case</span> $num <span class=\"keyword\">in</span></div><div class=\"line\">\t<span class=\"number\">1</span>) echo <span class=\"string\">'你输入了1'</span></div><div class=\"line\">\t;;</div><div class=\"line\">\t<span class=\"number\">2</span>) echo <span class=\"string\">'你输入了2'</span></div><div class=\"line\">\t;;</div><div class=\"line\">\t<span class=\"number\">3</span>) echo <span class=\"string\">'你输入了3'</span></div><div class=\"line\">\t;;</div><div class=\"line\">\t*) echo <span class=\"string\">'你没有输入1到3的数字'</span></div><div class=\"line\">\t;;</div><div class=\"line\">esac</div></pre></td></tr></table></figure>\n<h5 id=\"break\">break</h5><p>跳出所有循环</p>\n<h5 id=\"continue\">continue</h5><p>结束当前循环，继续执行下一次循环</p>\n<h5 id=\"函数\">函数</h5><ul>\n<li>定义方式,不需要带参数</li>\n<li>function fun()</li>\n<li>fun()<ul>\n<li>参数返回，使用return</li>\n<li>函数调用，直接使用函数名，不需要加括号，带有参数直接在后面列出，用空格间隔</li>\n<li>函数返回值在调用函数后，可以通过$?使用</li>\n<li>函数中的参数，可以使用$n来表示，n&gt;10的时候，使用${n}</li>\n<li>特殊参数<ul>\n<li><code>$#</code> 传递到脚本的参数个数</li>\n<li><code>$*</code> 以一个单字符串显示所有向脚本传递的参数</li>\n<li><code>$$</code> 脚本运行的当前进程ID号</li>\n<li><code>$!</code> 后台运行的最后一个进程的ID号</li>\n<li><code>$@</code> 与$*相同，但是使用时加引号，并在引号中返回每个参数。</li>\n<li><code>$-</code> 显示Shell使用的当前选项，与set命令功能相同。</li>\n<li><code>$?</code> 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>"},{"title":"smartcropJs","date":"2015-11-14T07:03:01.000Z","toc":true,"_content":"#### 智能识别裁剪图片\n[github|https://github.com/jwagner/smartcrop.js]\n\n#### how to use\n```javascript\nSmartCrop.crop(image, {width: 100, height: 100}, function(result){console.log(result);});\n// {topCrop: {x: 300, y: 200, height: 200, width: 200}}\n```\n<!--more-->\n\n#### 兼容性\n除IE6,7,8\n","source":"_posts/smartcropJs.md","raw":"title: smartcropJs\ndate: 2015-11-14 15:03:01\ntags: web\ntoc: true\n---\n#### 智能识别裁剪图片\n[github|https://github.com/jwagner/smartcrop.js]\n\n#### how to use\n```javascript\nSmartCrop.crop(image, {width: 100, height: 100}, function(result){console.log(result);});\n// {topCrop: {x: 300, y: 200, height: 200, width: 200}}\n```\n<!--more-->\n\n#### 兼容性\n除IE6,7,8\n","slug":"smartcropJs","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhpe002ft0yjzjfwymnw","content":"<h4 id=\"智能识别裁剪图片\">智能识别裁剪图片</h4><p>[github|<a href=\"https://github.com/jwagner/smartcrop.js\" target=\"_blank\" rel=\"external\">https://github.com/jwagner/smartcrop.js</a>]</p>\n<h4 id=\"how_to_use\">how to use</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">SmartCrop.crop(image, &#123;<span class=\"attr\">width</span>: <span class=\"number\">100</span>, <span class=\"attr\">height</span>: <span class=\"number\">100</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;<span class=\"built_in\">console</span>.log(result);&#125;);</div><div class=\"line\"><span class=\"comment\">// &#123;topCrop: &#123;x: 300, y: 200, height: 200, width: 200&#125;&#125;</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"兼容性\">兼容性</h4><p>除IE6,7,8</p>\n","excerpt":"<h4 id=\"智能识别裁剪图片\">智能识别裁剪图片</h4><p>[github|<a href=\"https://github.com/jwagner/smartcrop.js\">https://github.com/jwagner/smartcrop.js</a>]</p>\n<h4 id=\"how_to_use\">how to use</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">SmartCrop.crop(image, &#123;<span class=\"attr\">width</span>: <span class=\"number\">100</span>, <span class=\"attr\">height</span>: <span class=\"number\">100</span>&#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">result</span>)</span>&#123;<span class=\"built_in\">console</span>.log(result);&#125;);</div><div class=\"line\"><span class=\"comment\">// &#123;topCrop: &#123;x: 300, y: 200, height: 200, width: 200&#125;&#125;</span></div></pre></td></tr></table></figure>","more":"<h4 id=\"兼容性\">兼容性</h4><p>除IE6,7,8</p>"},{"title":"velocity语法","date":"2015-10-19T06:50:38.000Z","toc":true,"_content":"##### velocity\n基本语法包括\n```javascript\n#set, #if, #else, #end, #foreach, #end, #iinclude, #parse, #macro\n```\n\n###### 注释\n```javascript\n##单行注释\n#* 多行注释 *#\n#** 文档格式 存储诸如文档作者、版本信息 *#\n```\n\n<!--more-->\n\n###### 引入本地文件\n`#inclede` `#parse`都是用来引入本地文件的\n区别：\n* `#parse只能引入单个文件，#include可以引入多个文件，用 , 分隔`\n* `#parse引入的文件还会被引擎解析，#include引入的文件不会被引擎解析`\n* `#parse引入的文件和父文件之间变量都是共享的`\n\n###### 变量\n变量声明 `#set($title=\"title name\")`\nvelocity是弱类型的\n* `${title}` `$title`都可以使用，但是提倡`${title}`这种用法，在拼接字符串的时候，不会出现歧义，但是引用属性的时候要使用 `$title`这种\n* 变量可以赋以下类型的值：变量引用，字面字符串，属性引用，方法引用，字面数字，数组列表\n* 如果值为null，不会被赋值，还保留原来的值\n* 未定义的变量当字符串处理\n* `$user.getName()` 等于 `$user.Name`\n```javascript\n#set( $name = \"tom\" )\n#set( $age = \"11\" )\n$name is $age.\n#set($all = \"$size$name\" )\n\n##数学特性\n#set( $test = 5 )\n#set( $count = $test + 3 )\n\n##带花括号的属性,方法调用方式，属性,方法需要在花括号之内：\n${cookie.name}\n${request.getCookies()}\n\n##赋值符号左边的变量名不能加感叹号\n```\n###### 数组访问\n>范围操作赋 `[1..10]`\n```javascript\n#foreach( $i in [1..5] )\n    $i\n#end\n```\n###### 对象访问\n>访问方法如下\n```javascript\n#set($obj = {\"qwe\":\"123\", \"asd\":\"456\"})\n$obj.get(\"key\")\n\n#foreach(#ele in $obj)\n    $ele　\n#end\n\n##$ele只取到了value\n##如何取到对象的key呢，可以使用entrySet()或keySet()方法。\n\n#foreach($ele in $!obj.entrySet())\n    $!ele.key : $!ele.value\n#end\n\n#foreach($ele in $obj.keySet())\n    $ele : $obj.get($ele)\n#end\n```\n\n###### 循环\n* `#foreach`\n```javascript\n#foreach($ele in $arrs)\n    $velocityCount is $ele\n#end\n##循环计数变量$velocityCount,默认从1开始，可以在velocity.properties 文件中设为从0或者1开始\n```\n* `#break语句`\n可用于中断 #foreach() 循环。\n\n###### 条件语句\n>用法\n```javascript\n#if( $age < 10 )\n    \n#elseif( $age == 10 )\n    \n#else\n    \n#end\n```\n\n###### 逻辑操作\n`< > == != && || !`这么多运算符\n\n###### 宏\n>定义\n```javascript\n#macro(test)\n<div></div><div></div>\n#end\n```\n带参数的\n```javascript\n#macro(test $person)\n<div>$person.name</div><div>$person.age</div>\n#end\n\ntest($pers)\n```\n###### stop\n>停止模板引擎，通常在Debug时使用\n\n###### 转义\n>如果变量定义了，两个 `\\` 只输出一个 `\\`，如果未定义，则输出所有\n```javascript\n#set($name=\"qwe\") ##定义\n$name ## qwe\n\\$name ## $name\n\\\\$name ## \\qwe\n\\\\\\$name ## \\\\$name\n##未定义\n$name ## $name\n\\$name ## \\$name\n\\\\$name ## \\\\$name\n\\\\\\$name ## \\\\\\$name\n```\n\n###### 内置对象\n`$request`\n`$response`\n`$session`\n```javascript\n#foreach($cookie in $request.getCookies())\n    $cookie.name : $cookie.value\n#end\n\n#set($name = $!request.getParameter('name'))\n```\n\n###### `evaluate()`\n>动态执行一串字符串的值：\n`#evaluate('display #if(true)show#end')`\n\n###### `define()`\n>`#define`指令自定义标签\n```javascript\n#define($hello)\n    Hello ${who}!\n#end\n#set($who = \"world\")\n$hello\n## 显示 \"Hello world!\"\n```\n不需要解析执行的\n```javascript\n#[[\n#define()\n$name\n]]#\n```\n\n###### 注意\n* velocity语法中都是使用双引号，不能使用单引号，变量将以字符串输出\n* velocity会把变量，属性和方法都输出成字符串\n* velocity可以调用在java中定义的方法\n* 输出值的时候我们通常在$后面加上`!` 例如 `$!email`，这样的好处就行，当email没有值的时候，会输出空，否则就会输出`$email`了，这不是我们想要的\n* `$2.50`这样的值是不会出错的，因为velocity变量都是以大小写字符开始的\n* 可以调用java操作string的方法例如 substring，toLowerCase,toUpperCasse等\n* 取数组长度 `$array.size()`\n* 取数组某一项 `$array.get(0)`\n* null逻辑判断\n使用 `#ifnull()` 或 `#ifnotnull()`,要使用这个特性必须在velocity.properties文件中加入：\n```javascript\nuserdirective = org.apache.velocity.tools.generic.directive.Ifnull\nuserdirective = org.apache.velocity.tools.generic.directive.Ifnotnull\n```\n使用null工具判断`#if($null.isNull($foo))`\n空的逻辑判断 `#if (! $foo)` 判断`$foo`为空，判断非空为 `#if ($foo)`","source":"_posts/velocity语法.md","raw":"title: velocity语法\ndate: 2015-10-19 14:50:38\ntags: web\ntoc: true\n---\n##### velocity\n基本语法包括\n```javascript\n#set, #if, #else, #end, #foreach, #end, #iinclude, #parse, #macro\n```\n\n###### 注释\n```javascript\n##单行注释\n#* 多行注释 *#\n#** 文档格式 存储诸如文档作者、版本信息 *#\n```\n\n<!--more-->\n\n###### 引入本地文件\n`#inclede` `#parse`都是用来引入本地文件的\n区别：\n* `#parse只能引入单个文件，#include可以引入多个文件，用 , 分隔`\n* `#parse引入的文件还会被引擎解析，#include引入的文件不会被引擎解析`\n* `#parse引入的文件和父文件之间变量都是共享的`\n\n###### 变量\n变量声明 `#set($title=\"title name\")`\nvelocity是弱类型的\n* `${title}` `$title`都可以使用，但是提倡`${title}`这种用法，在拼接字符串的时候，不会出现歧义，但是引用属性的时候要使用 `$title`这种\n* 变量可以赋以下类型的值：变量引用，字面字符串，属性引用，方法引用，字面数字，数组列表\n* 如果值为null，不会被赋值，还保留原来的值\n* 未定义的变量当字符串处理\n* `$user.getName()` 等于 `$user.Name`\n```javascript\n#set( $name = \"tom\" )\n#set( $age = \"11\" )\n$name is $age.\n#set($all = \"$size$name\" )\n\n##数学特性\n#set( $test = 5 )\n#set( $count = $test + 3 )\n\n##带花括号的属性,方法调用方式，属性,方法需要在花括号之内：\n${cookie.name}\n${request.getCookies()}\n\n##赋值符号左边的变量名不能加感叹号\n```\n###### 数组访问\n>范围操作赋 `[1..10]`\n```javascript\n#foreach( $i in [1..5] )\n    $i\n#end\n```\n###### 对象访问\n>访问方法如下\n```javascript\n#set($obj = {\"qwe\":\"123\", \"asd\":\"456\"})\n$obj.get(\"key\")\n\n#foreach(#ele in $obj)\n    $ele　\n#end\n\n##$ele只取到了value\n##如何取到对象的key呢，可以使用entrySet()或keySet()方法。\n\n#foreach($ele in $!obj.entrySet())\n    $!ele.key : $!ele.value\n#end\n\n#foreach($ele in $obj.keySet())\n    $ele : $obj.get($ele)\n#end\n```\n\n###### 循环\n* `#foreach`\n```javascript\n#foreach($ele in $arrs)\n    $velocityCount is $ele\n#end\n##循环计数变量$velocityCount,默认从1开始，可以在velocity.properties 文件中设为从0或者1开始\n```\n* `#break语句`\n可用于中断 #foreach() 循环。\n\n###### 条件语句\n>用法\n```javascript\n#if( $age < 10 )\n    \n#elseif( $age == 10 )\n    \n#else\n    \n#end\n```\n\n###### 逻辑操作\n`< > == != && || !`这么多运算符\n\n###### 宏\n>定义\n```javascript\n#macro(test)\n<div></div><div></div>\n#end\n```\n带参数的\n```javascript\n#macro(test $person)\n<div>$person.name</div><div>$person.age</div>\n#end\n\ntest($pers)\n```\n###### stop\n>停止模板引擎，通常在Debug时使用\n\n###### 转义\n>如果变量定义了，两个 `\\` 只输出一个 `\\`，如果未定义，则输出所有\n```javascript\n#set($name=\"qwe\") ##定义\n$name ## qwe\n\\$name ## $name\n\\\\$name ## \\qwe\n\\\\\\$name ## \\\\$name\n##未定义\n$name ## $name\n\\$name ## \\$name\n\\\\$name ## \\\\$name\n\\\\\\$name ## \\\\\\$name\n```\n\n###### 内置对象\n`$request`\n`$response`\n`$session`\n```javascript\n#foreach($cookie in $request.getCookies())\n    $cookie.name : $cookie.value\n#end\n\n#set($name = $!request.getParameter('name'))\n```\n\n###### `evaluate()`\n>动态执行一串字符串的值：\n`#evaluate('display #if(true)show#end')`\n\n###### `define()`\n>`#define`指令自定义标签\n```javascript\n#define($hello)\n    Hello ${who}!\n#end\n#set($who = \"world\")\n$hello\n## 显示 \"Hello world!\"\n```\n不需要解析执行的\n```javascript\n#[[\n#define()\n$name\n]]#\n```\n\n###### 注意\n* velocity语法中都是使用双引号，不能使用单引号，变量将以字符串输出\n* velocity会把变量，属性和方法都输出成字符串\n* velocity可以调用在java中定义的方法\n* 输出值的时候我们通常在$后面加上`!` 例如 `$!email`，这样的好处就行，当email没有值的时候，会输出空，否则就会输出`$email`了，这不是我们想要的\n* `$2.50`这样的值是不会出错的，因为velocity变量都是以大小写字符开始的\n* 可以调用java操作string的方法例如 substring，toLowerCase,toUpperCasse等\n* 取数组长度 `$array.size()`\n* 取数组某一项 `$array.get(0)`\n* null逻辑判断\n使用 `#ifnull()` 或 `#ifnotnull()`,要使用这个特性必须在velocity.properties文件中加入：\n```javascript\nuserdirective = org.apache.velocity.tools.generic.directive.Ifnull\nuserdirective = org.apache.velocity.tools.generic.directive.Ifnotnull\n```\n使用null工具判断`#if($null.isNull($foo))`\n空的逻辑判断 `#if (! $foo)` 判断`$foo`为空，判断非空为 `#if ($foo)`","slug":"velocity语法","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhph002ht0yj9t03b4ih","content":"<h5 id=\"velocity\">velocity</h5><p>基本语法包括<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#set, #if, #else, #end, #foreach, #end, #iinclude, #parse, #macro</div></pre></td></tr></table></figure></p>\n<h6 id=\"注释\">注释</h6><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">##单行注释</div><div class=\"line\">#* 多行注释 *#</div><div class=\"line\">#** 文档格式 存储诸如文档作者、版本信息 *#</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h6 id=\"引入本地文件\">引入本地文件</h6><p><code>#inclede</code> <code>#parse</code>都是用来引入本地文件的<br>区别：</p>\n<ul>\n<li><code>#parse只能引入单个文件，#include可以引入多个文件，用 , 分隔</code></li>\n<li><code>#parse引入的文件还会被引擎解析，#include引入的文件不会被引擎解析</code></li>\n<li><code>#parse引入的文件和父文件之间变量都是共享的</code></li>\n</ul>\n<h6 id=\"变量\">变量</h6><p>变量声明 <code>#set($title=&quot;title name&quot;)</code><br>velocity是弱类型的</p>\n<ul>\n<li><code>${title}</code> <code>$title</code>都可以使用，但是提倡<code>${title}</code>这种用法，在拼接字符串的时候，不会出现歧义，但是引用属性的时候要使用 <code>$title</code>这种</li>\n<li>变量可以赋以下类型的值：变量引用，字面字符串，属性引用，方法引用，字面数字，数组列表</li>\n<li>如果值为null，不会被赋值，还保留原来的值</li>\n<li>未定义的变量当字符串处理</li>\n<li><code>$user.getName()</code> 等于 <code>$user.Name</code><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">#set( $name = \"tom\" )</div><div class=\"line\">#set( $age = \"11\" )</div><div class=\"line\">$name is $age.</div><div class=\"line\">#set($all = \"$size$name\" )</div><div class=\"line\"></div><div class=\"line\">##数学特性</div><div class=\"line\">#set( $test = 5 )</div><div class=\"line\">#set( $count = $test + 3 )</div><div class=\"line\"></div><div class=\"line\">##带花括号的属性,方法调用方式，属性,方法需要在花括号之内：</div><div class=\"line\">$&#123;cookie.name&#125;</div><div class=\"line\">$&#123;request.getCookies()&#125;</div><div class=\"line\"></div><div class=\"line\">##赋值符号左边的变量名不能加感叹号</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"数组访问\">数组访问</h6><blockquote>\n<p>范围操作赋 <code>[1..10]</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#foreach( $i in [1..5] )</div><div class=\"line\">    $i</div><div class=\"line\">#end</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"对象访问\">对象访问</h6><blockquote>\n<p>访问方法如下<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">#set($obj = &#123;\"qwe\":\"123\", \"asd\":\"456\"&#125;)</div><div class=\"line\">$obj.get(\"key\")</div><div class=\"line\"></div><div class=\"line\">#foreach(#ele in $obj)</div><div class=\"line\">    $ele　</div><div class=\"line\">#end</div><div class=\"line\"></div><div class=\"line\">##$ele只取到了value</div><div class=\"line\">##如何取到对象的key呢，可以使用entrySet()或keySet()方法。</div><div class=\"line\"></div><div class=\"line\">#foreach($ele in $!obj.entrySet())</div><div class=\"line\">    $!ele.key : $!ele.value</div><div class=\"line\">#end</div><div class=\"line\"></div><div class=\"line\">#foreach($ele in $obj.keySet())</div><div class=\"line\">    $ele : $obj.get($ele)</div><div class=\"line\">#end</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"循环\">循环</h6><ul>\n<li><p><code>#foreach</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#foreach($ele in $arrs)</div><div class=\"line\">    $velocityCount is $ele</div><div class=\"line\">#end</div><div class=\"line\">##循环计数变量$velocityCount,默认从1开始，可以在velocity.properties 文件中设为从0或者1开始</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>#break语句</code><br>可用于中断 #foreach() 循环。</p>\n</li>\n</ul>\n<h6 id=\"条件语句\">条件语句</h6><blockquote>\n<p>用法<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#if( $age &lt; 10 )</div><div class=\"line\">    </div><div class=\"line\">#elseif( $age == 10 )</div><div class=\"line\">    </div><div class=\"line\">#else</div><div class=\"line\">    </div><div class=\"line\">#end</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"逻辑操作\">逻辑操作</h6><p><code>&lt; &gt; == != &amp;&amp; || !</code>这么多运算符</p>\n<h6 id=\"宏\">宏</h6><blockquote>\n<p>定义<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#macro(test)</div><div class=\"line\">&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;</div><div class=\"line\">#end</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>带参数的<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#macro(test $person)</div><div class=\"line\">&lt;div&gt;$person.name&lt;/div&gt;&lt;div&gt;$person.age&lt;/div&gt;</div><div class=\"line\">#end</div><div class=\"line\"></div><div class=\"line\">test($pers)</div></pre></td></tr></table></figure></p>\n<h6 id=\"stop\">stop</h6><blockquote>\n<p>停止模板引擎，通常在Debug时使用</p>\n</blockquote>\n<h6 id=\"转义\">转义</h6><blockquote>\n<p>如果变量定义了，两个 <code>\\</code> 只输出一个 <code>\\</code>，如果未定义，则输出所有<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">#set($name=\"qwe\") ##定义</div><div class=\"line\">$name ## qwe</div><div class=\"line\">\\$name ## $name</div><div class=\"line\">\\\\$name ## \\qwe</div><div class=\"line\">\\\\\\$name ## \\\\$name</div><div class=\"line\">##未定义</div><div class=\"line\">$name ## $name</div><div class=\"line\">\\$name ## \\$name</div><div class=\"line\">\\\\$name ## \\\\$name</div><div class=\"line\">\\\\\\$name ## \\\\\\$name</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"内置对象\">内置对象</h6><p><code>$request</code><br><code>$response</code><br><code>$session</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#foreach($cookie in $request.getCookies())</div><div class=\"line\">    $cookie.name : $cookie.value</div><div class=\"line\">#end</div><div class=\"line\"></div><div class=\"line\">#set($name = $!request.getParameter('name'))</div></pre></td></tr></table></figure></p>\n<h6 id=\"evaluate()\"><code>evaluate()</code></h6><blockquote>\n<p>动态执行一串字符串的值：<br><code>#evaluate(&#39;display #if(true)show#end&#39;)</code></p>\n</blockquote>\n<h6 id=\"define()\"><code>define()</code></h6><blockquote>\n<p><code>#define</code>指令自定义标签<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define($hello)</div><div class=\"line\">    Hello $&#123;who&#125;!</div><div class=\"line\">#end</div><div class=\"line\">#set($who = \"world\")</div><div class=\"line\">$hello</div><div class=\"line\">## 显示 \"Hello world!\"</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>不需要解析执行的<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#[[</div><div class=\"line\">#define()</div><div class=\"line\">$name</div><div class=\"line\">]]#</div></pre></td></tr></table></figure></p>\n<h6 id=\"注意\">注意</h6><ul>\n<li>velocity语法中都是使用双引号，不能使用单引号，变量将以字符串输出</li>\n<li>velocity会把变量，属性和方法都输出成字符串</li>\n<li>velocity可以调用在java中定义的方法</li>\n<li>输出值的时候我们通常在$后面加上<code>!</code> 例如 <code>$!email</code>，这样的好处就行，当email没有值的时候，会输出空，否则就会输出<code>$email</code>了，这不是我们想要的</li>\n<li><code>$2.50</code>这样的值是不会出错的，因为velocity变量都是以大小写字符开始的</li>\n<li>可以调用java操作string的方法例如 substring，toLowerCase,toUpperCasse等</li>\n<li>取数组长度 <code>$array.size()</code></li>\n<li>取数组某一项 <code>$array.get(0)</code></li>\n<li>null逻辑判断<br>使用 <code>#ifnull()</code> 或 <code>#ifnotnull()</code>,要使用这个特性必须在velocity.properties文件中加入：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">userdirective = org.apache.velocity.tools.generic.directive.Ifnull</div><div class=\"line\">userdirective = org.apache.velocity.tools.generic.directive.Ifnotnull</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>使用null工具判断<code>#if($null.isNull($foo))</code><br>空的逻辑判断 <code>#if (! $foo)</code> 判断<code>$foo</code>为空，判断非空为 <code>#if ($foo)</code></p>\n","excerpt":"<h5 id=\"velocity\">velocity</h5><p>基本语法包括<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#set, #if, #else, #end, #foreach, #end, #iinclude, #parse, #macro</div></pre></td></tr></table></figure></p>\n<h6 id=\"注释\">注释</h6><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">##单行注释</div><div class=\"line\">#* 多行注释 *#</div><div class=\"line\">#** 文档格式 存储诸如文档作者、版本信息 *#</div></pre></td></tr></table></figure>","more":"<h6 id=\"引入本地文件\">引入本地文件</h6><p><code>#inclede</code> <code>#parse</code>都是用来引入本地文件的<br>区别：</p>\n<ul>\n<li><code>#parse只能引入单个文件，#include可以引入多个文件，用 , 分隔</code></li>\n<li><code>#parse引入的文件还会被引擎解析，#include引入的文件不会被引擎解析</code></li>\n<li><code>#parse引入的文件和父文件之间变量都是共享的</code></li>\n</ul>\n<h6 id=\"变量\">变量</h6><p>变量声明 <code>#set($title=&quot;title name&quot;)</code><br>velocity是弱类型的</p>\n<ul>\n<li><code>${title}</code> <code>$title</code>都可以使用，但是提倡<code>${title}</code>这种用法，在拼接字符串的时候，不会出现歧义，但是引用属性的时候要使用 <code>$title</code>这种</li>\n<li>变量可以赋以下类型的值：变量引用，字面字符串，属性引用，方法引用，字面数字，数组列表</li>\n<li>如果值为null，不会被赋值，还保留原来的值</li>\n<li>未定义的变量当字符串处理</li>\n<li><code>$user.getName()</code> 等于 <code>$user.Name</code><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">#set( $name = \"tom\" )</div><div class=\"line\">#set( $age = \"11\" )</div><div class=\"line\">$name is $age.</div><div class=\"line\">#set($all = \"$size$name\" )</div><div class=\"line\"></div><div class=\"line\">##数学特性</div><div class=\"line\">#set( $test = 5 )</div><div class=\"line\">#set( $count = $test + 3 )</div><div class=\"line\"></div><div class=\"line\">##带花括号的属性,方法调用方式，属性,方法需要在花括号之内：</div><div class=\"line\">$&#123;cookie.name&#125;</div><div class=\"line\">$&#123;request.getCookies()&#125;</div><div class=\"line\"></div><div class=\"line\">##赋值符号左边的变量名不能加感叹号</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"数组访问\">数组访问</h6><blockquote>\n<p>范围操作赋 <code>[1..10]</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#foreach( $i in [1..5] )</div><div class=\"line\">    $i</div><div class=\"line\">#end</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"对象访问\">对象访问</h6><blockquote>\n<p>访问方法如下<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">#set($obj = &#123;\"qwe\":\"123\", \"asd\":\"456\"&#125;)</div><div class=\"line\">$obj.get(\"key\")</div><div class=\"line\"></div><div class=\"line\">#foreach(#ele in $obj)</div><div class=\"line\">    $ele　</div><div class=\"line\">#end</div><div class=\"line\"></div><div class=\"line\">##$ele只取到了value</div><div class=\"line\">##如何取到对象的key呢，可以使用entrySet()或keySet()方法。</div><div class=\"line\"></div><div class=\"line\">#foreach($ele in $!obj.entrySet())</div><div class=\"line\">    $!ele.key : $!ele.value</div><div class=\"line\">#end</div><div class=\"line\"></div><div class=\"line\">#foreach($ele in $obj.keySet())</div><div class=\"line\">    $ele : $obj.get($ele)</div><div class=\"line\">#end</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"循环\">循环</h6><ul>\n<li><p><code>#foreach</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#foreach($ele in $arrs)</div><div class=\"line\">    $velocityCount is $ele</div><div class=\"line\">#end</div><div class=\"line\">##循环计数变量$velocityCount,默认从1开始，可以在velocity.properties 文件中设为从0或者1开始</div></pre></td></tr></table></figure>\n</li>\n<li><p><code>#break语句</code><br>可用于中断 #foreach() 循环。</p>\n</li>\n</ul>\n<h6 id=\"条件语句\">条件语句</h6><blockquote>\n<p>用法<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#if( $age &lt; 10 )</div><div class=\"line\">    </div><div class=\"line\">#elseif( $age == 10 )</div><div class=\"line\">    </div><div class=\"line\">#else</div><div class=\"line\">    </div><div class=\"line\">#end</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"逻辑操作\">逻辑操作</h6><p><code>&lt; &gt; == != &amp;&amp; || !</code>这么多运算符</p>\n<h6 id=\"宏\">宏</h6><blockquote>\n<p>定义<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">#macro(test)</div><div class=\"line\">&lt;div&gt;&lt;/div&gt;&lt;div&gt;&lt;/div&gt;</div><div class=\"line\">#end</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>带参数的<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#macro(test $person)</div><div class=\"line\">&lt;div&gt;$person.name&lt;/div&gt;&lt;div&gt;$person.age&lt;/div&gt;</div><div class=\"line\">#end</div><div class=\"line\"></div><div class=\"line\">test($pers)</div></pre></td></tr></table></figure></p>\n<h6 id=\"stop\">stop</h6><blockquote>\n<p>停止模板引擎，通常在Debug时使用</p>\n</blockquote>\n<h6 id=\"转义\">转义</h6><blockquote>\n<p>如果变量定义了，两个 <code>\\</code> 只输出一个 <code>\\</code>，如果未定义，则输出所有<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">#set($name=\"qwe\") ##定义</div><div class=\"line\">$name ## qwe</div><div class=\"line\">\\$name ## $name</div><div class=\"line\">\\\\$name ## \\qwe</div><div class=\"line\">\\\\\\$name ## \\\\$name</div><div class=\"line\">##未定义</div><div class=\"line\">$name ## $name</div><div class=\"line\">\\$name ## \\$name</div><div class=\"line\">\\\\$name ## \\\\$name</div><div class=\"line\">\\\\\\$name ## \\\\\\$name</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"内置对象\">内置对象</h6><p><code>$request</code><br><code>$response</code><br><code>$session</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">#foreach($cookie in $request.getCookies())</div><div class=\"line\">    $cookie.name : $cookie.value</div><div class=\"line\">#end</div><div class=\"line\"></div><div class=\"line\">#set($name = $!request.getParameter('name'))</div></pre></td></tr></table></figure></p>\n<h6 id=\"evaluate()\"><code>evaluate()</code></h6><blockquote>\n<p>动态执行一串字符串的值：<br><code>#evaluate(&#39;display #if(true)show#end&#39;)</code></p>\n</blockquote>\n<h6 id=\"define()\"><code>define()</code></h6><blockquote>\n<p><code>#define</code>指令自定义标签<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">#define($hello)</div><div class=\"line\">    Hello $&#123;who&#125;!</div><div class=\"line\">#end</div><div class=\"line\">#set($who = \"world\")</div><div class=\"line\">$hello</div><div class=\"line\">## 显示 \"Hello world!\"</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>不需要解析执行的<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">#[[</div><div class=\"line\">#define()</div><div class=\"line\">$name</div><div class=\"line\">]]#</div></pre></td></tr></table></figure></p>\n<h6 id=\"注意\">注意</h6><ul>\n<li>velocity语法中都是使用双引号，不能使用单引号，变量将以字符串输出</li>\n<li>velocity会把变量，属性和方法都输出成字符串</li>\n<li>velocity可以调用在java中定义的方法</li>\n<li>输出值的时候我们通常在$后面加上<code>!</code> 例如 <code>$!email</code>，这样的好处就行，当email没有值的时候，会输出空，否则就会输出<code>$email</code>了，这不是我们想要的</li>\n<li><code>$2.50</code>这样的值是不会出错的，因为velocity变量都是以大小写字符开始的</li>\n<li>可以调用java操作string的方法例如 substring，toLowerCase,toUpperCasse等</li>\n<li>取数组长度 <code>$array.size()</code></li>\n<li>取数组某一项 <code>$array.get(0)</code></li>\n<li>null逻辑判断<br>使用 <code>#ifnull()</code> 或 <code>#ifnotnull()</code>,要使用这个特性必须在velocity.properties文件中加入：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">userdirective = org.apache.velocity.tools.generic.directive.Ifnull</div><div class=\"line\">userdirective = org.apache.velocity.tools.generic.directive.Ifnotnull</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>使用null工具判断<code>#if($null.isNull($foo))</code><br>空的逻辑判断 <code>#if (! $foo)</code> 判断<code>$foo</code>为空，判断非空为 <code>#if ($foo)</code></p>"},{"title":"从零开始Node-01","date":"2015-10-13T05:27:04.000Z","toc":true,"_content":"* 安装node,不同系统安装方法不同，到官网上下载并安装\n* 安装node包管理器 curl http://npmjs.org/install.sh | sh\n* 安装node多版本管理器 npm install -g n\n* 安装supervisor npm install -g supervisor 修改代码后不需要手动重启服务器\n* 一个简单的HTTP服务器\n<!--more-->\n```javascript\nvar http = require('http');\nhttp.createServer(function(req, res) { res.writeHead(200, {'Content-Type': 'text/html'}); res.write('<h1>This Server</h1>');\n    res.end('<p>Hello Node.js</p>');\n}).listen(8888);\nconsole.log(\"HTTP server is start...port: 8888.\");\n```","source":"_posts/从零开始Node-01.md","raw":"title: 从零开始Node-01\ndate: 2015-10-13 13:27:04\ntags: nodejs\ntoc: true\n---\n* 安装node,不同系统安装方法不同，到官网上下载并安装\n* 安装node包管理器 curl http://npmjs.org/install.sh | sh\n* 安装node多版本管理器 npm install -g n\n* 安装supervisor npm install -g supervisor 修改代码后不需要手动重启服务器\n* 一个简单的HTTP服务器\n<!--more-->\n```javascript\nvar http = require('http');\nhttp.createServer(function(req, res) { res.writeHead(200, {'Content-Type': 'text/html'}); res.write('<h1>This Server</h1>');\n    res.end('<p>Hello Node.js</p>');\n}).listen(8888);\nconsole.log(\"HTTP server is start...port: 8888.\");\n```","slug":"从零开始Node-01","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhpj002jt0yjze77o5oe","content":"<ul>\n<li>安装node,不同系统安装方法不同，到官网上下载并安装</li>\n<li>安装node包管理器 curl <a href=\"http://npmjs.org/install.sh\" target=\"_blank\" rel=\"external\">http://npmjs.org/install.sh</a> | sh</li>\n<li>安装node多版本管理器 npm install -g n</li>\n<li>安装supervisor npm install -g supervisor 修改代码后不需要手动重启服务器</li>\n<li>一个简单的HTTP服务器<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123; res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span>&#125;); res.write(<span class=\"string\">'&lt;h1&gt;This Server&lt;/h1&gt;'</span>);</div><div class=\"line\">    res.end(<span class=\"string\">'&lt;p&gt;Hello Node.js&lt;/p&gt;'</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"HTTP server is start...port: 8888.\"</span>);</div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"<ul>\n<li>安装node,不同系统安装方法不同，到官网上下载并安装</li>\n<li>安装node包管理器 curl <a href=\"http://npmjs.org/install.sh\">http://npmjs.org/install.sh</a> | sh</li>\n<li>安装node多版本管理器 npm install -g n</li>\n<li>安装supervisor npm install -g supervisor 修改代码后不需要手动重启服务器</li>\n<li>一个简单的HTTP服务器","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123; res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span>&#125;); res.write(<span class=\"string\">'&lt;h1&gt;This Server&lt;/h1&gt;'</span>);</div><div class=\"line\">    res.end(<span class=\"string\">'&lt;p&gt;Hello Node.js&lt;/p&gt;'</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">8888</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"HTTP server is start...port: 8888.\"</span>);</div></pre></td></tr></table></figure></li>\n</ul>"},{"title":"从零开始Node-02","date":"2015-10-13T05:30:14.000Z","toc":true,"_content":"##### 异步式I/O\n>Node.js采用单线程事件驱动的异步式 I/O,控制流很大程度上依靠事件和回调函数。\n<!--more-->\n```javascript\n//异步执行\nvar fs = require('fs');\nfs.readFile('1.txt', 'utf-8', function(err, data) {\nif (err) { \n    console.error(err);\n} else { \n    console.log(data);\n} });\nconsole.log('end.');\n//先输出 end 在输出data的内容\n\n\n//同步执行\nvar fs = require('fs');\nvar data = fs.readFileSync('1.txt', 'utf-8'); console.log(data);\nconsole.log('end.');\n//先输出data的内容，再输出end\n```\n\n##### 事件编程\n>Node.js的异步 I/O 操作完成后，会发送一个事件到事件队列，下面介绍一下EventEmitter\n```javascript\nvar EventEmitter = require('events').EventEmitter;\nvar event = new EventEmitter();\nevent.on('event_test', function() { console.log('event_test...');\n});\nsetTimeout(function() { event.emit('event_test');\n}, 3000);\n//3秒后输出 event_test...\n```\nNode.js 程序由事件循环开始,到事件循环结束,所有的逻辑都是事件的回调函数,所以 Node.js 始终在事件循环中,程序入口就是 事件循环第一个事件的回调函数，事件循环会检测事件队列中是否有位处理的事件，直到循环结束。\n```\n\n##### 模块\n>Node.js 的模块和包机制的实现参照了 CommonJS 的标准\nNode.js 中文件和模块是一一对应的，一个Node.js就是一个模块，var http = require('http') http就是一个模块，require后获取这个模块\n一个例子创建，并且引用一个模块\n```javascript\n//声明一个模块\nvar age;\nexports.setAge = function(age) { age = age;\n};\nexports.myAge = function() { console.log(\"i'm \" + age);\n};\n\n//调用\nvar thisModule = require('./module'); //上面的文件名\nthisModule.setAge('12'); \nthisModule.myAge(); //输出 i'm 12\n```\n在Node.js中，如果require两次一个模块，那么也只是一次，并且后实例化的对象会覆盖掉之前的\n```javascript\nvar thisModule1 = require('./module'); //上面的文件名\nthisModule.setAge('11'); \n\nvar thisModule2 = require('./module'); //上面的文件名\nthisModule.setAge('12'); \nthisModule.myAge(); //输出 i'm 12\n//thisModule1 thisModule2指向同一个实例，后看的覆盖了前面的\n```\n* 把对象封装到模块中\n```javascript\nfunction Test() { \n    var age;\n    this.setAge = function(age) {\n        age = age;\n￼    };\n    this.myAge = function() { \n        console.log(\"i'm \" + age);\n    };\n};\nmodule.exports = Test;\n\n//调用\nvar test = require('./test');\ntest = new Hello(); \ntest.setAge(12);\ntest.myAge();\n```\n\n##### 包\n>依照 CommonJS 规范实现包机制，使用npm对包进行管理\nNode.js包是一个目录，必须含有package.json,文件中是包的一些具体内容，配置信息等\nCommonJS规范:\npackage.json必须在包顶层目录下，\n二进制文件在bin下\njavascript文件在lib下\n文档在doc下\n单元测试在test下\n* 包通常是一些模块的集合，制作一个简单的包\n```javascript\n//pkg/index.js\nexports.hello = function(){\n    console.log('hello node.js');\n}\n\n//loadpackage.js\nvar pkg = require('./pkg');\npkg.hello();\n//会输出 hello node.js\n\n//package.json\n{\n    \"main\" : \"./lib/app.js\"\n}\n//重命名index.js 为app.js，放在lib下，同样方式调用这个包，同样生效\n```\nNode.js 调用包时,先检查 package.json 文件的 main 字段,将其作为包的接口模块,如果 package.json 或 main 字段不存在,会尝试找 index.js 或 index.node 作 为包的接口。\npackage.json中包含下面这几项\nname 包名称\ndescription 描述\nversion 版本\nkeywords 关键字\nmaintainers 维护者数组，每个元素要包含 name、email (可选)、web (可选)字段。\ncontributors 贡献者数组，格式同上\nbugs 提交bug地址\nlicenses 许可证数组，每个元素包含 type(许可证名称) url(链接到许可证地址)\nrepositories 仓库托管地址 包含 type,url,path(可选，相对于仓库地址)\ndependencies 包的依赖数组，包名称，版本好组成\n\n##### Node.js 包管理器\n>npm\n1.获取一个包 npm [install/i] [package_name] -g（区分本地模式和全局模式，添加-g的为全局模式）\n2.全局链接 npm link，windows不支持\n3.发布，可以使用npm init创建一个符合标准的package.json,npm adduser获取一个维护包的账号，npm publish就发布出去了，下次修改后，修改package.json中的version再执行npm publish\n4.取消发布 npm unpublish\n\n##### 调试\n>1.Node.js支持单步调试，node debug 后面加需要调试的js文件，就会启动调试工具，暂时不做详细介绍\n2.远程调试\n3.Eclipse调试\n4.node-inspector调试","source":"_posts/从零开始Node-02.md","raw":"title: 从零开始Node-02\ndate: 2015-10-13 13:30:14\ntags: nodejs\ntoc: true\n---\n##### 异步式I/O\n>Node.js采用单线程事件驱动的异步式 I/O,控制流很大程度上依靠事件和回调函数。\n<!--more-->\n```javascript\n//异步执行\nvar fs = require('fs');\nfs.readFile('1.txt', 'utf-8', function(err, data) {\nif (err) { \n    console.error(err);\n} else { \n    console.log(data);\n} });\nconsole.log('end.');\n//先输出 end 在输出data的内容\n\n\n//同步执行\nvar fs = require('fs');\nvar data = fs.readFileSync('1.txt', 'utf-8'); console.log(data);\nconsole.log('end.');\n//先输出data的内容，再输出end\n```\n\n##### 事件编程\n>Node.js的异步 I/O 操作完成后，会发送一个事件到事件队列，下面介绍一下EventEmitter\n```javascript\nvar EventEmitter = require('events').EventEmitter;\nvar event = new EventEmitter();\nevent.on('event_test', function() { console.log('event_test...');\n});\nsetTimeout(function() { event.emit('event_test');\n}, 3000);\n//3秒后输出 event_test...\n```\nNode.js 程序由事件循环开始,到事件循环结束,所有的逻辑都是事件的回调函数,所以 Node.js 始终在事件循环中,程序入口就是 事件循环第一个事件的回调函数，事件循环会检测事件队列中是否有位处理的事件，直到循环结束。\n```\n\n##### 模块\n>Node.js 的模块和包机制的实现参照了 CommonJS 的标准\nNode.js 中文件和模块是一一对应的，一个Node.js就是一个模块，var http = require('http') http就是一个模块，require后获取这个模块\n一个例子创建，并且引用一个模块\n```javascript\n//声明一个模块\nvar age;\nexports.setAge = function(age) { age = age;\n};\nexports.myAge = function() { console.log(\"i'm \" + age);\n};\n\n//调用\nvar thisModule = require('./module'); //上面的文件名\nthisModule.setAge('12'); \nthisModule.myAge(); //输出 i'm 12\n```\n在Node.js中，如果require两次一个模块，那么也只是一次，并且后实例化的对象会覆盖掉之前的\n```javascript\nvar thisModule1 = require('./module'); //上面的文件名\nthisModule.setAge('11'); \n\nvar thisModule2 = require('./module'); //上面的文件名\nthisModule.setAge('12'); \nthisModule.myAge(); //输出 i'm 12\n//thisModule1 thisModule2指向同一个实例，后看的覆盖了前面的\n```\n* 把对象封装到模块中\n```javascript\nfunction Test() { \n    var age;\n    this.setAge = function(age) {\n        age = age;\n￼    };\n    this.myAge = function() { \n        console.log(\"i'm \" + age);\n    };\n};\nmodule.exports = Test;\n\n//调用\nvar test = require('./test');\ntest = new Hello(); \ntest.setAge(12);\ntest.myAge();\n```\n\n##### 包\n>依照 CommonJS 规范实现包机制，使用npm对包进行管理\nNode.js包是一个目录，必须含有package.json,文件中是包的一些具体内容，配置信息等\nCommonJS规范:\npackage.json必须在包顶层目录下，\n二进制文件在bin下\njavascript文件在lib下\n文档在doc下\n单元测试在test下\n* 包通常是一些模块的集合，制作一个简单的包\n```javascript\n//pkg/index.js\nexports.hello = function(){\n    console.log('hello node.js');\n}\n\n//loadpackage.js\nvar pkg = require('./pkg');\npkg.hello();\n//会输出 hello node.js\n\n//package.json\n{\n    \"main\" : \"./lib/app.js\"\n}\n//重命名index.js 为app.js，放在lib下，同样方式调用这个包，同样生效\n```\nNode.js 调用包时,先检查 package.json 文件的 main 字段,将其作为包的接口模块,如果 package.json 或 main 字段不存在,会尝试找 index.js 或 index.node 作 为包的接口。\npackage.json中包含下面这几项\nname 包名称\ndescription 描述\nversion 版本\nkeywords 关键字\nmaintainers 维护者数组，每个元素要包含 name、email (可选)、web (可选)字段。\ncontributors 贡献者数组，格式同上\nbugs 提交bug地址\nlicenses 许可证数组，每个元素包含 type(许可证名称) url(链接到许可证地址)\nrepositories 仓库托管地址 包含 type,url,path(可选，相对于仓库地址)\ndependencies 包的依赖数组，包名称，版本好组成\n\n##### Node.js 包管理器\n>npm\n1.获取一个包 npm [install/i] [package_name] -g（区分本地模式和全局模式，添加-g的为全局模式）\n2.全局链接 npm link，windows不支持\n3.发布，可以使用npm init创建一个符合标准的package.json,npm adduser获取一个维护包的账号，npm publish就发布出去了，下次修改后，修改package.json中的version再执行npm publish\n4.取消发布 npm unpublish\n\n##### 调试\n>1.Node.js支持单步调试，node debug 后面加需要调试的js文件，就会启动调试工具，暂时不做详细介绍\n2.远程调试\n3.Eclipse调试\n4.node-inspector调试","slug":"从零开始Node-02","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhpl002lt0yje6i2iqo0","content":"<h5 id=\"异步式I/O\">异步式I/O</h5><blockquote>\n<p>Node.js采用单线程事件驱动的异步式 I/O,控制流很大程度上依靠事件和回调函数。<br><a id=\"more\"></a><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//异步执行</span></div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.readFile(<span class=\"string\">'1.txt'</span>, <span class=\"string\">'utf-8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">if</span> (err) &#123; </div><div class=\"line\">    <span class=\"built_in\">console</span>.error(err);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125; &#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end.'</span>);</div><div class=\"line\"><span class=\"comment\">//先输出 end 在输出data的内容</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//同步执行</span></div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> data = fs.readFileSync(<span class=\"string\">'1.txt'</span>, <span class=\"string\">'utf-8'</span>); <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end.'</span>);</div><div class=\"line\"><span class=\"comment\">//先输出data的内容，再输出end</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"事件编程\">事件编程</h5><blockquote>\n<p>Node.js的异步 I/O 操作完成后，会发送一个事件到事件队列，下面介绍一下EventEmitter<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter;</div><div class=\"line\"><span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> EventEmitter();</div><div class=\"line\">event.on(<span class=\"string\">'event_test'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'event_test...'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; event.emit(<span class=\"string\">'event_test'</span>);</div><div class=\"line\">&#125;, <span class=\"number\">3000</span>);</div><div class=\"line\"><span class=\"comment\">//3秒后输出 event_test...</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>Node.js 程序由事件循环开始,到事件循环结束,所有的逻辑都是事件的回调函数,所以 Node.js 始终在事件循环中,程序入口就是 事件循环第一个事件的回调函数，事件循环会检测事件队列中是否有位处理的事件，直到循环结束。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">##### 模块</span></div><div class=\"line\">&gt;Node.js 的模块和包机制的实现参照了 CommonJS 的标准</div><div class=\"line\">Node.js 中文件和模块是一一对应的，一个Node.js就是一个模块，<span class=\"keyword\">var</span> http = <span class=\"keyword\">require</span>(<span class=\"string\">'http'</span>) http就是一个模块，<span class=\"keyword\">require</span>后获取这个模块</div><div class=\"line\">一个例子创建，并且引用一个模块</div><div class=\"line\">```javascript</div><div class=\"line\"><span class=\"comment\">//声明一个模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> age;</div><div class=\"line\">exports.setAge = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(age)</span> </span>&#123; age = age;</div><div class=\"line\">&#125;;</div><div class=\"line\">exports.myAge = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123; console.log(<span class=\"string\">\"i'm \"</span> + age);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用</span></div><div class=\"line\"><span class=\"keyword\">var</span> thisModule = <span class=\"keyword\">require</span>(<span class=\"string\">'./module'</span>); <span class=\"comment\">//上面的文件名</span></div><div class=\"line\">thisModule.setAge(<span class=\"string\">'12'</span>); </div><div class=\"line\">thisModule.myAge(); <span class=\"comment\">//输出 i'm 12</span></div></pre></td></tr></table></figure></p>\n<p>在Node.js中，如果require两次一个模块，那么也只是一次，并且后实例化的对象会覆盖掉之前的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> thisModule1 = <span class=\"built_in\">require</span>(<span class=\"string\">'./module'</span>); <span class=\"comment\">//上面的文件名</span></div><div class=\"line\">thisModule.setAge(<span class=\"string\">'11'</span>); </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> thisModule2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./module'</span>); <span class=\"comment\">//上面的文件名</span></div><div class=\"line\">thisModule.setAge(<span class=\"string\">'12'</span>); </div><div class=\"line\">thisModule.myAge(); <span class=\"comment\">//输出 i'm 12</span></div><div class=\"line\"><span class=\"comment\">//thisModule1 thisModule2指向同一个实例，后看的覆盖了前面的</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>把对象封装到模块中<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">var</span> age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">age</span>) </span>&#123;</div><div class=\"line\">        age = age;</div><div class=\"line\">￼    &#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.myAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"i'm \"</span> + age);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用</span></div><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"built_in\">require</span>(<span class=\"string\">'./test'</span>);</div><div class=\"line\">test = <span class=\"keyword\">new</span> Hello(); </div><div class=\"line\">test.setAge(<span class=\"number\">12</span>);</div><div class=\"line\">test.myAge();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"包\">包</h5><blockquote>\n<p>依照 CommonJS 规范实现包机制，使用npm对包进行管理<br>Node.js包是一个目录，必须含有package.json,文件中是包的一些具体内容，配置信息等<br>CommonJS规范:<br>package.json必须在包顶层目录下，<br>二进制文件在bin下<br>javascript文件在lib下<br>文档在doc下<br>单元测试在test下</p>\n<ul>\n<li>包通常是一些模块的集合，制作一个简单的包<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//pkg/index.js</span></div><div class=\"line\">exports.hello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello node.js'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//loadpackage.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> pkg = <span class=\"built_in\">require</span>(<span class=\"string\">'./pkg'</span>);</div><div class=\"line\">pkg.hello();</div><div class=\"line\"><span class=\"comment\">//会输出 hello node.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//package.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"main\"</span> : <span class=\"string\">\"./lib/app.js\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//重命名index.js 为app.js，放在lib下，同样方式调用这个包，同样生效</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>Node.js 调用包时,先检查 package.json 文件的 main 字段,将其作为包的接口模块,如果 package.json 或 main 字段不存在,会尝试找 index.js 或 index.node 作 为包的接口。<br>package.json中包含下面这几项<br>name 包名称<br>description 描述<br>version 版本<br>keywords 关键字<br>maintainers 维护者数组，每个元素要包含 name、email (可选)、web (可选)字段。<br>contributors 贡献者数组，格式同上<br>bugs 提交bug地址<br>licenses 许可证数组，每个元素包含 type(许可证名称) url(链接到许可证地址)<br>repositories 仓库托管地址 包含 type,url,path(可选，相对于仓库地址)<br>dependencies 包的依赖数组，包名称，版本好组成</p>\n<h5 id=\"Node-js_包管理器\">Node.js 包管理器</h5><blockquote>\n<p>npm<br>1.获取一个包 npm [install/i] [package_name] -g（区分本地模式和全局模式，添加-g的为全局模式）<br>2.全局链接 npm link，windows不支持<br>3.发布，可以使用npm init创建一个符合标准的package.json,npm adduser获取一个维护包的账号，npm publish就发布出去了，下次修改后，修改package.json中的version再执行npm publish<br>4.取消发布 npm unpublish</p>\n</blockquote>\n<h5 id=\"调试\">调试</h5><blockquote>\n<p>1.Node.js支持单步调试，node debug 后面加需要调试的js文件，就会启动调试工具，暂时不做详细介绍<br>2.远程调试<br>3.Eclipse调试<br>4.node-inspector调试</p>\n</blockquote>\n","excerpt":"<h5 id=\"异步式I/O\">异步式I/O</h5><blockquote>\n<p>Node.js采用单线程事件驱动的异步式 I/O,控制流很大程度上依靠事件和回调函数。<br>","more":"<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//异步执行</span></div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.readFile(<span class=\"string\">'1.txt'</span>, <span class=\"string\">'utf-8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\"><span class=\"keyword\">if</span> (err) &#123; </div><div class=\"line\">    <span class=\"built_in\">console</span>.error(err);</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123; </div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">&#125; &#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end.'</span>);</div><div class=\"line\"><span class=\"comment\">//先输出 end 在输出data的内容</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//同步执行</span></div><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> data = fs.readFileSync(<span class=\"string\">'1.txt'</span>, <span class=\"string\">'utf-8'</span>); <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'end.'</span>);</div><div class=\"line\"><span class=\"comment\">//先输出data的内容，再输出end</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"事件编程\">事件编程</h5><blockquote>\n<p>Node.js的异步 I/O 操作完成后，会发送一个事件到事件队列，下面介绍一下EventEmitter<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> EventEmitter = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>).EventEmitter;</div><div class=\"line\"><span class=\"keyword\">var</span> event = <span class=\"keyword\">new</span> EventEmitter();</div><div class=\"line\">event.on(<span class=\"string\">'event_test'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'event_test...'</span>);</div><div class=\"line\">&#125;);</div><div class=\"line\">setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; event.emit(<span class=\"string\">'event_test'</span>);</div><div class=\"line\">&#125;, <span class=\"number\">3000</span>);</div><div class=\"line\"><span class=\"comment\">//3秒后输出 event_test...</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>Node.js 程序由事件循环开始,到事件循环结束,所有的逻辑都是事件的回调函数,所以 Node.js 始终在事件循环中,程序入口就是 事件循环第一个事件的回调函数，事件循环会检测事件队列中是否有位处理的事件，直到循环结束。<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">##### 模块</span></div><div class=\"line\">&gt;Node.js 的模块和包机制的实现参照了 CommonJS 的标准</div><div class=\"line\">Node.js 中文件和模块是一一对应的，一个Node.js就是一个模块，<span class=\"keyword\">var</span> http = <span class=\"keyword\">require</span>(<span class=\"string\">'http'</span>) http就是一个模块，<span class=\"keyword\">require</span>后获取这个模块</div><div class=\"line\">一个例子创建，并且引用一个模块</div><div class=\"line\">```javascript</div><div class=\"line\"><span class=\"comment\">//声明一个模块</span></div><div class=\"line\"><span class=\"keyword\">var</span> age;</div><div class=\"line\">exports.setAge = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(age)</span> </span>&#123; age = age;</div><div class=\"line\">&#125;;</div><div class=\"line\">exports.myAge = <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">()</span> </span>&#123; console.log(<span class=\"string\">\"i'm \"</span> + age);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用</span></div><div class=\"line\"><span class=\"keyword\">var</span> thisModule = <span class=\"keyword\">require</span>(<span class=\"string\">'./module'</span>); <span class=\"comment\">//上面的文件名</span></div><div class=\"line\">thisModule.setAge(<span class=\"string\">'12'</span>); </div><div class=\"line\">thisModule.myAge(); <span class=\"comment\">//输出 i'm 12</span></div></pre></td></tr></table></figure></p>\n<p>在Node.js中，如果require两次一个模块，那么也只是一次，并且后实例化的对象会覆盖掉之前的<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> thisModule1 = <span class=\"built_in\">require</span>(<span class=\"string\">'./module'</span>); <span class=\"comment\">//上面的文件名</span></div><div class=\"line\">thisModule.setAge(<span class=\"string\">'11'</span>); </div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> thisModule2 = <span class=\"built_in\">require</span>(<span class=\"string\">'./module'</span>); <span class=\"comment\">//上面的文件名</span></div><div class=\"line\">thisModule.setAge(<span class=\"string\">'12'</span>); </div><div class=\"line\">thisModule.myAge(); <span class=\"comment\">//输出 i'm 12</span></div><div class=\"line\"><span class=\"comment\">//thisModule1 thisModule2指向同一个实例，后看的覆盖了前面的</span></div></pre></td></tr></table></figure></p>\n<ul>\n<li>把对象封装到模块中<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Test</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">var</span> age;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">age</span>) </span>&#123;</div><div class=\"line\">        age = age;</div><div class=\"line\">￼    &#125;;</div><div class=\"line\">    <span class=\"keyword\">this</span>.myAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">\"i'm \"</span> + age);</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Test;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//调用</span></div><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"built_in\">require</span>(<span class=\"string\">'./test'</span>);</div><div class=\"line\">test = <span class=\"keyword\">new</span> Hello(); </div><div class=\"line\">test.setAge(<span class=\"number\">12</span>);</div><div class=\"line\">test.myAge();</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"包\">包</h5><blockquote>\n<p>依照 CommonJS 规范实现包机制，使用npm对包进行管理<br>Node.js包是一个目录，必须含有package.json,文件中是包的一些具体内容，配置信息等<br>CommonJS规范:<br>package.json必须在包顶层目录下，<br>二进制文件在bin下<br>javascript文件在lib下<br>文档在doc下<br>单元测试在test下</p>\n<ul>\n<li>包通常是一些模块的集合，制作一个简单的包<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//pkg/index.js</span></div><div class=\"line\">exports.hello = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'hello node.js'</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//loadpackage.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> pkg = <span class=\"built_in\">require</span>(<span class=\"string\">'./pkg'</span>);</div><div class=\"line\">pkg.hello();</div><div class=\"line\"><span class=\"comment\">//会输出 hello node.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//package.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"main\"</span> : <span class=\"string\">\"./lib/app.js\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//重命名index.js 为app.js，放在lib下，同样方式调用这个包，同样生效</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<p>Node.js 调用包时,先检查 package.json 文件的 main 字段,将其作为包的接口模块,如果 package.json 或 main 字段不存在,会尝试找 index.js 或 index.node 作 为包的接口。<br>package.json中包含下面这几项<br>name 包名称<br>description 描述<br>version 版本<br>keywords 关键字<br>maintainers 维护者数组，每个元素要包含 name、email (可选)、web (可选)字段。<br>contributors 贡献者数组，格式同上<br>bugs 提交bug地址<br>licenses 许可证数组，每个元素包含 type(许可证名称) url(链接到许可证地址)<br>repositories 仓库托管地址 包含 type,url,path(可选，相对于仓库地址)<br>dependencies 包的依赖数组，包名称，版本好组成</p>\n<h5 id=\"Node-js_包管理器\">Node.js 包管理器</h5><blockquote>\n<p>npm<br>1.获取一个包 npm [install/i] [package_name] -g（区分本地模式和全局模式，添加-g的为全局模式）<br>2.全局链接 npm link，windows不支持<br>3.发布，可以使用npm init创建一个符合标准的package.json,npm adduser获取一个维护包的账号，npm publish就发布出去了，下次修改后，修改package.json中的version再执行npm publish<br>4.取消发布 npm unpublish</p>\n</blockquote>\n<h5 id=\"调试\">调试</h5><blockquote>\n<p>1.Node.js支持单步调试，node debug 后面加需要调试的js文件，就会启动调试工具，暂时不做详细介绍<br>2.远程调试<br>3.Eclipse调试<br>4.node-inspector调试</p>\n</blockquote>"},{"title":"从零开始Node-03","date":"2015-10-14T05:34:43.000Z","toc":true,"_content":"##### Node.js API\n###### 全局对象\n>在javascript中，window是全局对象\n在Node.js中，global是全局对象。\n<!--more-->\n满足全局变量的条件：\n* 最外层定义的变量\n* 全局对象的属性\n* 隐式定义的变量\n全局变量过多定义过于随意会带来全局变量污染的问题，为了避免全局变量污染，在定义变量的时候使用var\n\n###### process\nNode.js的进程对象\n* Event: ‘exit’\n>process退出时会出发\n* Event: ‘uncaughtException’\n>process发生异常时触发\n* process自定义事件\n```javascript\nprocess.on('test',function(data)){\n    console.log(data);\n    process.exit(0);\n}\nprocess.emmit('test','emmit test');\n```\n* process.stdin\n>标准输入流\n```javascript\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(data) { \n    process.stdout.write('data：' + data.toString());\n});\n```\n* process.stdout\n>标准输出流,比console.log()更底层\n```javascript\nprocess.stdout.write(‘data’)\n```\n* process.argv\n>命令行参数数组\n```javascript\nconsole.log(process.argv); //存储为 test.js\n\n//执行\nnode test.js 1 \"asd\" age=12\n```\n* process.nextTick(callback)\n>为事件循环设置一项任务，在下次事件循环调用响应时调用callback\n```javascript\nfunction deal(args,callback){\n    doit(args);\n    process.nextTick(callback);\n}\ndeal(function(){\n    dome();\n});\n\n//如果doit 和 dome都是很耗时的函数，这样把耗时的操作拆分成两个事件，减少了每个事件执行时间，提高了事件响应速度。\n\n//比setTimeout(fn,times)效率更高\n```\n* process.pid、process.title、process.arch、process.platform\n>进程id，进程名字，进程架构(系统架构，X86)，进程平台(操作系统)\n* process.execPath\n>返回当前node.js进程的启动命令路径\n* process.memorUsage()\n>进程的内存使用情况\n* process.kill(pid, signal=’SIGTERM’)\n>发出一个kill信号给指定pid\n* process.exit(code=0)\n>kill当前进程，退出本进程\n…\n\n###### console\n* console.log()\n>向标准输出流打印字符并以换行符结\n```javascript\nconsole.log(123); //123\nconsole.log('d% world',hello); //hello world\n```\n* console.error()\n>向标准错误流输出\n* console.trace()\n> 向标准错误流输出当前调用栈\n* console.info()\n> 如果只有一个参数，输出这个参数的字符串形式\n如果有多个参数，格式输出\n如果没有参数，只打印一个换行符\n* console.warn()\n>输出警告\n* console.dir(obj)\n>将obj作为参数传递给util.inspect并执行，将返回的结果打印到stdout\n* console.time(label)\n>统计操作执行的时间\n* console.timeEnd(label)\n>统计操作执行的时间\n```javascript\nconsole.time('start');\nvar count=0;\nfor(var i=0;i<9999;i++)\n{\n    count+=i;\n}\nconsole.log('sum='+sum);\nconsole.timeEnd('end');\n```\n* console.assert()\n>计算结果为真返回true\n\n##### util\n>提供常用函数的集合\n* util.inherits\n>是一个实现对象间实现继承的函数\n```javascript\nvar util = require('util');\nfunction parent(){\n    this.name = 'parent';\n    this.age = 55;\n    this.do = function(){\n        console.log('1:' + this.name);\n    };\n\n}\nparent.prototype.show = function(){\n    console.log('2:' + this.name);\n};\n\nfunction child(){\n    this.name = 'child';\n}\n\nutil.inherits(child,parent);\n\nvar testParent = new Parent();\ntestParent.show(); //2:parent\ntestParent.do(); //1:parent\n\n\nvar testChild = new child(); \ntestchild.show(); //2:child\n\n//仅仅继承了在原型中定义的函数，而构造函数内部的属性没有继承。\n```\n* util.inspect\n>将任意对象转换成字符串的方法，通常用在调试和错误输出的时候\n1.接收至少一个对象，要转换的对象\n2.showHidden，可选，true 输出更多隐藏信息\n3.depth 最大递归层数，默认为2，null表示不限层数\n4.color 如果为true，输出将会带颜色\n5.注意：并不是简单的以字符串输出，即便定义了toString也不会调用\n* util.isArray()\n>如果给定的参数 “object” 是一个数组返回true，否则返回false。\n* util.isRegExp()\n>如果给定的参数 “object” 是一个正则表达式返回true，否则返回false。\n* util.isDate()\n>如果给定的参数 “object” 是一个日期返回true，否则返回false。\n* util.isError()\n>如果给定的参数 “object” 是一个错误对象返回true，否则返回false。\n* util.format()\n>返回一个格式化后的字符串\n```javascript\n// %s - String.\n// %d - Number (both integer and float).\n// %j - JSON.\n// %% - single percent sign ('%'). This does not consume an argument.\nutil.format(1, 2, 3); //1 2 3\nutil.format('%s:%s', 'asd', 'qwe'); //asd:qwe\n```\n* util.debug()\n```javascript\nrequire('util').debug('debug');\n```\n##### event\n>events模块不仅用于用户代码与Node.js下层事件循环的交互，还几乎被所有模块依赖。\nevents.EventEmitter,事件发射与事件监听器功能的封装\n```javascript\nvar events = require('events');\nvar emitter = new events.EventEmitter();\nemitter.on('test_event', function(param) { console.log('1-', param);\n});\nemitter.on('test_event', function(param) { console.log('2-', param);\n});\nemitter.emit('test_event', 123);\n\n// 1-123 \n// 2-123\n```\n* EventEmitter.on(event, listener)\n>注册一个监听器，接收事件名和回调函数\n* EventEmitter.emit(event, [arg1], [arg2], […])\n>接收事件名，传递参数\n* EventEmitter.once(event, listener)\n>注册一个单次的监听器，触发一次后就解除\n* EventEmitter.removeListener(event, listener)\n>解除指定的监听器\n* EventEmitter.removeAllListeners([event])\n>解除所有监听器\n* emitter.listeners(event)\n>返回值接收到event所有注册监听的集合\n* emitter.setMaxListeners(n)\n>给EventEmitter设置最大监听数,默认是10个\n* error事件\n>error触发时,EventEmitter如果没有响应的监听器,Node.js 会把它当作异常,退出程序并打印调用栈。我们一般要为会发射 error 事件的对象设置监听器,避免遇到错误后整个程序崩溃\n```javascript\nvar events = require('events');\nvar emitter = new events.EventEmitter();\nemitter.emit('error');\n```\n* 继承EventEmitter\n>只要是支持事件响应的核心模块都是 EventEmitter 的子类\n\n##### fs\n>文件操作模块，提供了文件的读取、写入、更名、删除、遍历目录、链接等\n\n* fs.readFile\n>异步读取\nfs.readFile(filename,[encoding],[callback(err,data)])\n```javascript\nvar fs = require('fs');\nfs.readFile('data.txt', 'utf-8', function(err, data) {\n    if (err) {\n        console.error(err);\n    } else {\n        console.log(data);\n    }\n});\n```\n* fs.readFileSync\n>同步读取\nfs.readFileSync(filename, [encoding])\n* fs.open\n>fs.open(path, flags, [mode], [callback(err, fd)])\n1.path文件路径\n2.flags\n* r 读取模式\n* r+ 读写模式\n* w 写入模式，不存在创建\n* w+ 读写模式，不存在创建\n* a 追加模式，不存在创建\n* a+ 读取追加模式打开，不存在创建\n3.mode 创建文件时指定的文件权限\n* fs.read\n> `fs.read(fd, buffer, offset, length, position, [callback(err, bytesRead, buffer)])`\n```javascript\nvar fs = require('fs');\nfs.open('data.txt', 'r', function(err, fd) { \n    if (err) {\n        console.error(err);\n        return; \n    }\n    var buf = new Buffer(8);\n    fs.read(fd, buf, 0, 8, null, function(err, bytes, buffer) {\n        if (err) {  \n            console.error(err); \n            return;\n        }\n        console.log('data: ' + bytes);\n        console.log(buffer);\n    })\n});\n```\n\n##### HTTP服务器\n```javascript\nvar http = require('http');\nhttp.createServer(function(req, res) { \n    res.writeHead(200, {'Content-Type': 'text/html'}); \n    res.write('<h1>Hello</h1>');\n    res.end('<p>Hello World</p>');\n}).listen(3000);\nconsole.log(\"server is start...port 3000.\");\n```\n* http.Server\n>http模块中的HTTP服务器对象\nhttp.Server的事件\n1.request 客户端请求到来时触发\n2.connection TCP连接建立时触发\n3.close 服务器关闭时触发\n4.checkContinue\n5.upgrade\n6.clientError\n```javascript\nvar http = require('http');\nvar server = new http.Server(); \nserver.on('request', function(req, res) {\n    res.writeHead(200, {'Content-Type': 'text/html'}); \n    res.write('<h1>Hello</h1>');\n    res.end('<p>Hello World</p>');\n}); \nserver.listen(3000);\nconsole.log(\"server is start...port 3000.\");\n```\n* http.ServerRequest\n>http.ServerRequest提供了三个事件控制请求体传输\n1.data 请求体数据到来时，事件触发\n2.end 请求体传输结束时触发\n3.close 请求结束时触发，用户强制终止了传输也会触发\n属性\n1.complete\n2.httpVersion\n3.method\n4.url\n5.headers\n6.trailers\n7.connection\n7.socket\n8.client\n获取GET请求内容\n```javascript\nvar http = require('http'); \nvar url = require('url'); \nvar util = require('util');\nhttp.createServer(function(req, res) { \n    res.writeHead(200, {'Content-Type': 'text/plain'}); \n    res.end(util.inspect(url.parse(req.url, true)));\n}).listen(3000);\n\n//请求 http://127.0.0.1:3000/text/id=123&key=qwe\n```\n获取POST请求内容\n```javascript\nvar http = require('http');\nvar querystring = require('querystring'); \nvar util = require('util');\nhttp.createServer(function(req, res) { \n    var post = '';\n    req.on('data', function(chunk) { \n        post += chunk;\n    });\n    req.on('end', function() {\n        post = querystring.parse(post); res.end(util.inspect(post));\n    });\n}).listen(3000);\n```\n* http.ServerResponse\nresponse.writeHead(statusCode, [headers]) 向请求的客户端发送相应头\nresponse.write(data, [encoding]) 向请求的客户端发送响应内容\nresponse.end([data], [encoding]) 响应结束，告知客户端所有发送已经完成\n\n##### HTTP客户端\n* http.request(options, callback)\n>option 常用的参数\nhost 请求网站的域名或者IP地址\nport 请求网站的端口，默认80\nmethod 请求方法，默认是GET\npath 请求的相对于根的路径\nheaders 一个关联的数组对象，为请求头的内容\ncallback 传递一个参数，为http.ClientResponse的实例\ntp.request 返回一个http.ClientRequest的实例\n\n* http.get(options, callback)\n>更加简便的方法用于处 理GET请求\n函数\nwrite\nend\nrequest.abort()，终止正在发送的请求\nrequest.setTimeout(timeout, [callback]) 设置请求超时时间，请求超时以后,callback 将会被调用\nrequest.setNoDelay([noDelay])\nrequest.setSocketKeepAlive([enable], [initialDelay])\n\n* http.ClientRequest\n>它表示一个正在处理的请求，其头部已经进入请求队列\n\n* http.ClientResponse\n>事件\ndata 数据到达，传递参数chunk，表示接收到的数据\nend 传输结束\nclose 连接结束\n属性\nstatusCode HTTP状态码\nhttpVersion HTTP协议版本\nheaders HTTP请求头\ntrailers HTTP请求尾\n函数\nresponse.setEncoding([encoding])，设置默认编码\nresponse.pause()，暂停接收数据和发送事件，方便实现下载功能\nresponse.resume()，从暂停状态恢复\n","source":"_posts/从零开始Node-03.md","raw":"title: 从零开始Node-03\ndate: 2015-10-14 13:34:43\ntags: nodejs\ntoc: true\n---\n##### Node.js API\n###### 全局对象\n>在javascript中，window是全局对象\n在Node.js中，global是全局对象。\n<!--more-->\n满足全局变量的条件：\n* 最外层定义的变量\n* 全局对象的属性\n* 隐式定义的变量\n全局变量过多定义过于随意会带来全局变量污染的问题，为了避免全局变量污染，在定义变量的时候使用var\n\n###### process\nNode.js的进程对象\n* Event: ‘exit’\n>process退出时会出发\n* Event: ‘uncaughtException’\n>process发生异常时触发\n* process自定义事件\n```javascript\nprocess.on('test',function(data)){\n    console.log(data);\n    process.exit(0);\n}\nprocess.emmit('test','emmit test');\n```\n* process.stdin\n>标准输入流\n```javascript\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(data) { \n    process.stdout.write('data：' + data.toString());\n});\n```\n* process.stdout\n>标准输出流,比console.log()更底层\n```javascript\nprocess.stdout.write(‘data’)\n```\n* process.argv\n>命令行参数数组\n```javascript\nconsole.log(process.argv); //存储为 test.js\n\n//执行\nnode test.js 1 \"asd\" age=12\n```\n* process.nextTick(callback)\n>为事件循环设置一项任务，在下次事件循环调用响应时调用callback\n```javascript\nfunction deal(args,callback){\n    doit(args);\n    process.nextTick(callback);\n}\ndeal(function(){\n    dome();\n});\n\n//如果doit 和 dome都是很耗时的函数，这样把耗时的操作拆分成两个事件，减少了每个事件执行时间，提高了事件响应速度。\n\n//比setTimeout(fn,times)效率更高\n```\n* process.pid、process.title、process.arch、process.platform\n>进程id，进程名字，进程架构(系统架构，X86)，进程平台(操作系统)\n* process.execPath\n>返回当前node.js进程的启动命令路径\n* process.memorUsage()\n>进程的内存使用情况\n* process.kill(pid, signal=’SIGTERM’)\n>发出一个kill信号给指定pid\n* process.exit(code=0)\n>kill当前进程，退出本进程\n…\n\n###### console\n* console.log()\n>向标准输出流打印字符并以换行符结\n```javascript\nconsole.log(123); //123\nconsole.log('d% world',hello); //hello world\n```\n* console.error()\n>向标准错误流输出\n* console.trace()\n> 向标准错误流输出当前调用栈\n* console.info()\n> 如果只有一个参数，输出这个参数的字符串形式\n如果有多个参数，格式输出\n如果没有参数，只打印一个换行符\n* console.warn()\n>输出警告\n* console.dir(obj)\n>将obj作为参数传递给util.inspect并执行，将返回的结果打印到stdout\n* console.time(label)\n>统计操作执行的时间\n* console.timeEnd(label)\n>统计操作执行的时间\n```javascript\nconsole.time('start');\nvar count=0;\nfor(var i=0;i<9999;i++)\n{\n    count+=i;\n}\nconsole.log('sum='+sum);\nconsole.timeEnd('end');\n```\n* console.assert()\n>计算结果为真返回true\n\n##### util\n>提供常用函数的集合\n* util.inherits\n>是一个实现对象间实现继承的函数\n```javascript\nvar util = require('util');\nfunction parent(){\n    this.name = 'parent';\n    this.age = 55;\n    this.do = function(){\n        console.log('1:' + this.name);\n    };\n\n}\nparent.prototype.show = function(){\n    console.log('2:' + this.name);\n};\n\nfunction child(){\n    this.name = 'child';\n}\n\nutil.inherits(child,parent);\n\nvar testParent = new Parent();\ntestParent.show(); //2:parent\ntestParent.do(); //1:parent\n\n\nvar testChild = new child(); \ntestchild.show(); //2:child\n\n//仅仅继承了在原型中定义的函数，而构造函数内部的属性没有继承。\n```\n* util.inspect\n>将任意对象转换成字符串的方法，通常用在调试和错误输出的时候\n1.接收至少一个对象，要转换的对象\n2.showHidden，可选，true 输出更多隐藏信息\n3.depth 最大递归层数，默认为2，null表示不限层数\n4.color 如果为true，输出将会带颜色\n5.注意：并不是简单的以字符串输出，即便定义了toString也不会调用\n* util.isArray()\n>如果给定的参数 “object” 是一个数组返回true，否则返回false。\n* util.isRegExp()\n>如果给定的参数 “object” 是一个正则表达式返回true，否则返回false。\n* util.isDate()\n>如果给定的参数 “object” 是一个日期返回true，否则返回false。\n* util.isError()\n>如果给定的参数 “object” 是一个错误对象返回true，否则返回false。\n* util.format()\n>返回一个格式化后的字符串\n```javascript\n// %s - String.\n// %d - Number (both integer and float).\n// %j - JSON.\n// %% - single percent sign ('%'). This does not consume an argument.\nutil.format(1, 2, 3); //1 2 3\nutil.format('%s:%s', 'asd', 'qwe'); //asd:qwe\n```\n* util.debug()\n```javascript\nrequire('util').debug('debug');\n```\n##### event\n>events模块不仅用于用户代码与Node.js下层事件循环的交互，还几乎被所有模块依赖。\nevents.EventEmitter,事件发射与事件监听器功能的封装\n```javascript\nvar events = require('events');\nvar emitter = new events.EventEmitter();\nemitter.on('test_event', function(param) { console.log('1-', param);\n});\nemitter.on('test_event', function(param) { console.log('2-', param);\n});\nemitter.emit('test_event', 123);\n\n// 1-123 \n// 2-123\n```\n* EventEmitter.on(event, listener)\n>注册一个监听器，接收事件名和回调函数\n* EventEmitter.emit(event, [arg1], [arg2], […])\n>接收事件名，传递参数\n* EventEmitter.once(event, listener)\n>注册一个单次的监听器，触发一次后就解除\n* EventEmitter.removeListener(event, listener)\n>解除指定的监听器\n* EventEmitter.removeAllListeners([event])\n>解除所有监听器\n* emitter.listeners(event)\n>返回值接收到event所有注册监听的集合\n* emitter.setMaxListeners(n)\n>给EventEmitter设置最大监听数,默认是10个\n* error事件\n>error触发时,EventEmitter如果没有响应的监听器,Node.js 会把它当作异常,退出程序并打印调用栈。我们一般要为会发射 error 事件的对象设置监听器,避免遇到错误后整个程序崩溃\n```javascript\nvar events = require('events');\nvar emitter = new events.EventEmitter();\nemitter.emit('error');\n```\n* 继承EventEmitter\n>只要是支持事件响应的核心模块都是 EventEmitter 的子类\n\n##### fs\n>文件操作模块，提供了文件的读取、写入、更名、删除、遍历目录、链接等\n\n* fs.readFile\n>异步读取\nfs.readFile(filename,[encoding],[callback(err,data)])\n```javascript\nvar fs = require('fs');\nfs.readFile('data.txt', 'utf-8', function(err, data) {\n    if (err) {\n        console.error(err);\n    } else {\n        console.log(data);\n    }\n});\n```\n* fs.readFileSync\n>同步读取\nfs.readFileSync(filename, [encoding])\n* fs.open\n>fs.open(path, flags, [mode], [callback(err, fd)])\n1.path文件路径\n2.flags\n* r 读取模式\n* r+ 读写模式\n* w 写入模式，不存在创建\n* w+ 读写模式，不存在创建\n* a 追加模式，不存在创建\n* a+ 读取追加模式打开，不存在创建\n3.mode 创建文件时指定的文件权限\n* fs.read\n> `fs.read(fd, buffer, offset, length, position, [callback(err, bytesRead, buffer)])`\n```javascript\nvar fs = require('fs');\nfs.open('data.txt', 'r', function(err, fd) { \n    if (err) {\n        console.error(err);\n        return; \n    }\n    var buf = new Buffer(8);\n    fs.read(fd, buf, 0, 8, null, function(err, bytes, buffer) {\n        if (err) {  \n            console.error(err); \n            return;\n        }\n        console.log('data: ' + bytes);\n        console.log(buffer);\n    })\n});\n```\n\n##### HTTP服务器\n```javascript\nvar http = require('http');\nhttp.createServer(function(req, res) { \n    res.writeHead(200, {'Content-Type': 'text/html'}); \n    res.write('<h1>Hello</h1>');\n    res.end('<p>Hello World</p>');\n}).listen(3000);\nconsole.log(\"server is start...port 3000.\");\n```\n* http.Server\n>http模块中的HTTP服务器对象\nhttp.Server的事件\n1.request 客户端请求到来时触发\n2.connection TCP连接建立时触发\n3.close 服务器关闭时触发\n4.checkContinue\n5.upgrade\n6.clientError\n```javascript\nvar http = require('http');\nvar server = new http.Server(); \nserver.on('request', function(req, res) {\n    res.writeHead(200, {'Content-Type': 'text/html'}); \n    res.write('<h1>Hello</h1>');\n    res.end('<p>Hello World</p>');\n}); \nserver.listen(3000);\nconsole.log(\"server is start...port 3000.\");\n```\n* http.ServerRequest\n>http.ServerRequest提供了三个事件控制请求体传输\n1.data 请求体数据到来时，事件触发\n2.end 请求体传输结束时触发\n3.close 请求结束时触发，用户强制终止了传输也会触发\n属性\n1.complete\n2.httpVersion\n3.method\n4.url\n5.headers\n6.trailers\n7.connection\n7.socket\n8.client\n获取GET请求内容\n```javascript\nvar http = require('http'); \nvar url = require('url'); \nvar util = require('util');\nhttp.createServer(function(req, res) { \n    res.writeHead(200, {'Content-Type': 'text/plain'}); \n    res.end(util.inspect(url.parse(req.url, true)));\n}).listen(3000);\n\n//请求 http://127.0.0.1:3000/text/id=123&key=qwe\n```\n获取POST请求内容\n```javascript\nvar http = require('http');\nvar querystring = require('querystring'); \nvar util = require('util');\nhttp.createServer(function(req, res) { \n    var post = '';\n    req.on('data', function(chunk) { \n        post += chunk;\n    });\n    req.on('end', function() {\n        post = querystring.parse(post); res.end(util.inspect(post));\n    });\n}).listen(3000);\n```\n* http.ServerResponse\nresponse.writeHead(statusCode, [headers]) 向请求的客户端发送相应头\nresponse.write(data, [encoding]) 向请求的客户端发送响应内容\nresponse.end([data], [encoding]) 响应结束，告知客户端所有发送已经完成\n\n##### HTTP客户端\n* http.request(options, callback)\n>option 常用的参数\nhost 请求网站的域名或者IP地址\nport 请求网站的端口，默认80\nmethod 请求方法，默认是GET\npath 请求的相对于根的路径\nheaders 一个关联的数组对象，为请求头的内容\ncallback 传递一个参数，为http.ClientResponse的实例\ntp.request 返回一个http.ClientRequest的实例\n\n* http.get(options, callback)\n>更加简便的方法用于处 理GET请求\n函数\nwrite\nend\nrequest.abort()，终止正在发送的请求\nrequest.setTimeout(timeout, [callback]) 设置请求超时时间，请求超时以后,callback 将会被调用\nrequest.setNoDelay([noDelay])\nrequest.setSocketKeepAlive([enable], [initialDelay])\n\n* http.ClientRequest\n>它表示一个正在处理的请求，其头部已经进入请求队列\n\n* http.ClientResponse\n>事件\ndata 数据到达，传递参数chunk，表示接收到的数据\nend 传输结束\nclose 连接结束\n属性\nstatusCode HTTP状态码\nhttpVersion HTTP协议版本\nheaders HTTP请求头\ntrailers HTTP请求尾\n函数\nresponse.setEncoding([encoding])，设置默认编码\nresponse.pause()，暂停接收数据和发送事件，方便实现下载功能\nresponse.resume()，从暂停状态恢复\n","slug":"从零开始Node-03","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhpn002nt0yjsl9nlvb2","content":"<h5 id=\"Node-js_API\">Node.js API</h5><h6 id=\"全局对象\">全局对象</h6><blockquote>\n<p>在javascript中，window是全局对象<br>在Node.js中，global是全局对象。<br><a id=\"more\"></a><br>满足全局变量的条件：</p>\n<ul>\n<li>最外层定义的变量</li>\n<li>全局对象的属性</li>\n<li>隐式定义的变量<br>全局变量过多定义过于随意会带来全局变量污染的问题，为了避免全局变量污染，在定义变量的时候使用var</li>\n</ul>\n</blockquote>\n<h6 id=\"process\">process</h6><p>Node.js的进程对象</p>\n<ul>\n<li>Event: ‘exit’<blockquote>\n<p>process退出时会出发</p>\n</blockquote>\n</li>\n<li>Event: ‘uncaughtException’<blockquote>\n<p>process发生异常时触发</p>\n</blockquote>\n</li>\n<li><p>process自定义事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.on(<span class=\"string\">'test'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>))</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    process.exit(<span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">process.emmit(<span class=\"string\">'test'</span>,<span class=\"string\">'emmit test'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>process.stdin</p>\n<blockquote>\n<p>标准输入流</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.stdin.resume();</div><div class=\"line\">process.stdin.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">process.stdin.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123; </div><div class=\"line\">    process.stdout.write(<span class=\"string\">'data：'</span> + data.toString());</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>process.stdout</p>\n<blockquote>\n<p>标准输出流,比console.log()更底层</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.stdout.write(‘data’)</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>process.argv</p>\n<blockquote>\n<p>命令行参数数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(process.argv); <span class=\"comment\">//存储为 test.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//执行</span></div><div class=\"line\">node test.js <span class=\"number\">1</span> <span class=\"string\">\"asd\"</span> age=<span class=\"number\">12</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>process.nextTick(callback)</p>\n<blockquote>\n<p>为事件循环设置一项任务，在下次事件循环调用响应时调用callback</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deal</span>(<span class=\"params\">args,callback</span>)</span>&#123;</div><div class=\"line\">    doit(args);</div><div class=\"line\">    process.nextTick(callback);</div><div class=\"line\">&#125;</div><div class=\"line\">deal(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    dome();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//如果doit 和 dome都是很耗时的函数，这样把耗时的操作拆分成两个事件，减少了每个事件执行时间，提高了事件响应速度。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//比setTimeout(fn,times)效率更高</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>process.pid、process.title、process.arch、process.platform</p>\n<blockquote>\n<p>进程id，进程名字，进程架构(系统架构，X86)，进程平台(操作系统)</p>\n</blockquote>\n</li>\n<li>process.execPath<blockquote>\n<p>返回当前node.js进程的启动命令路径</p>\n</blockquote>\n</li>\n<li>process.memorUsage()<blockquote>\n<p>进程的内存使用情况</p>\n</blockquote>\n</li>\n<li>process.kill(pid, signal=’SIGTERM’)<blockquote>\n<p>发出一个kill信号给指定pid</p>\n</blockquote>\n</li>\n<li>process.exit(code=0)<blockquote>\n<p>kill当前进程，退出本进程<br>…</p>\n</blockquote>\n</li>\n</ul>\n<h6 id=\"console\">console</h6><ul>\n<li><p>console.log()</p>\n<blockquote>\n<p>向标准输出流打印字符并以换行符结</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>); <span class=\"comment\">//123</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'d% world'</span>,hello); <span class=\"comment\">//hello world</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>console.error()</p>\n<blockquote>\n<p>向标准错误流输出</p>\n</blockquote>\n</li>\n<li>console.trace()<blockquote>\n<p>向标准错误流输出当前调用栈</p>\n</blockquote>\n</li>\n<li>console.info()<blockquote>\n<p>如果只有一个参数，输出这个参数的字符串形式<br>如果有多个参数，格式输出<br>如果没有参数，只打印一个换行符</p>\n</blockquote>\n</li>\n<li>console.warn()<blockquote>\n<p>输出警告</p>\n</blockquote>\n</li>\n<li>console.dir(obj)<blockquote>\n<p>将obj作为参数传递给util.inspect并执行，将返回的结果打印到stdout</p>\n</blockquote>\n</li>\n<li>console.time(label)<blockquote>\n<p>统计操作执行的时间</p>\n</blockquote>\n</li>\n<li><p>console.timeEnd(label)</p>\n<blockquote>\n<p>统计操作执行的时间</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'start'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> count=<span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">9999</span>;i++)</div><div class=\"line\">&#123;</div><div class=\"line\">    count+=i;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'sum='</span>+sum);</div><div class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'end'</span>);</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>console.assert()</p>\n<blockquote>\n<p>计算结果为真返回true</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"util\">util</h5><blockquote>\n<p>提供常用函数的集合</p>\n<ul>\n<li>util.inherits<br>是一个实现对象间实现继承的函数<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parent</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'parent'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"number\">55</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'1:'</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">parent.prototype.show = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'2:'</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">child</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'child'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">util.inherits(child,parent);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> testParent = <span class=\"keyword\">new</span> Parent();</div><div class=\"line\">testParent.show(); <span class=\"comment\">//2:parent</span></div><div class=\"line\">testParent.do(); <span class=\"comment\">//1:parent</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> testChild = <span class=\"keyword\">new</span> child(); </div><div class=\"line\">testchild.show(); <span class=\"comment\">//2:child</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//仅仅继承了在原型中定义的函数，而构造函数内部的属性没有继承。</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>util.inspect<blockquote>\n<p>将任意对象转换成字符串的方法，通常用在调试和错误输出的时候<br>1.接收至少一个对象，要转换的对象<br>2.showHidden，可选，true 输出更多隐藏信息<br>3.depth 最大递归层数，默认为2，null表示不限层数<br>4.color 如果为true，输出将会带颜色<br>5.注意：并不是简单的以字符串输出，即便定义了toString也不会调用</p>\n</blockquote>\n</li>\n<li>util.isArray()<blockquote>\n<p>如果给定的参数 “object” 是一个数组返回true，否则返回false。</p>\n</blockquote>\n</li>\n<li>util.isRegExp()<blockquote>\n<p>如果给定的参数 “object” 是一个正则表达式返回true，否则返回false。</p>\n</blockquote>\n</li>\n<li>util.isDate()<blockquote>\n<p>如果给定的参数 “object” 是一个日期返回true，否则返回false。</p>\n</blockquote>\n</li>\n<li>util.isError()<blockquote>\n<p>如果给定的参数 “object” 是一个错误对象返回true，否则返回false。</p>\n</blockquote>\n</li>\n<li><p>util.format()</p>\n<blockquote>\n<p>返回一个格式化后的字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// %s - String.</span></div><div class=\"line\"><span class=\"comment\">// %d - Number (both integer and float).</span></div><div class=\"line\"><span class=\"comment\">// %j - JSON.</span></div><div class=\"line\"><span class=\"comment\">// %% - single percent sign ('%'). This does not consume an argument.</span></div><div class=\"line\">util.format(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">//1 2 3</span></div><div class=\"line\">util.format(<span class=\"string\">'%s:%s'</span>, <span class=\"string\">'asd'</span>, <span class=\"string\">'qwe'</span>); <span class=\"comment\">//asd:qwe</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>util.debug()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>).debug(<span class=\"string\">'debug'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"event\">event</h5><blockquote>\n<p>events模块不仅用于用户代码与Node.js下层事件循环的交互，还几乎被所有模块依赖。<br>events.EventEmitter,事件发射与事件监听器功能的封装<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> emitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\">emitter.on(<span class=\"string\">'test_event'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">param</span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'1-'</span>, param);</div><div class=\"line\">&#125;);</div><div class=\"line\">emitter.on(<span class=\"string\">'test_event'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">param</span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'2-'</span>, param);</div><div class=\"line\">&#125;);</div><div class=\"line\">emitter.emit(<span class=\"string\">'test_event'</span>, <span class=\"number\">123</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 1-123 </span></div><div class=\"line\"><span class=\"comment\">// 2-123</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>EventEmitter.on(event, listener)<blockquote>\n<p>注册一个监听器，接收事件名和回调函数</p>\n</blockquote>\n</li>\n<li>EventEmitter.emit(event, [arg1], [arg2], […])<blockquote>\n<p>接收事件名，传递参数</p>\n</blockquote>\n</li>\n<li>EventEmitter.once(event, listener)<blockquote>\n<p>注册一个单次的监听器，触发一次后就解除</p>\n</blockquote>\n</li>\n<li>EventEmitter.removeListener(event, listener)<blockquote>\n<p>解除指定的监听器</p>\n</blockquote>\n</li>\n<li>EventEmitter.removeAllListeners([event])<blockquote>\n<p>解除所有监听器</p>\n</blockquote>\n</li>\n<li>emitter.listeners(event)<blockquote>\n<p>返回值接收到event所有注册监听的集合</p>\n</blockquote>\n</li>\n<li>emitter.setMaxListeners(n)<blockquote>\n<p>给EventEmitter设置最大监听数,默认是10个</p>\n</blockquote>\n</li>\n<li><p>error事件</p>\n<blockquote>\n<p>error触发时,EventEmitter如果没有响应的监听器,Node.js 会把它当作异常,退出程序并打印调用栈。我们一般要为会发射 error 事件的对象设置监听器,避免遇到错误后整个程序崩溃</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> emitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\">emitter.emit(<span class=\"string\">'error'</span>);</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>继承EventEmitter</p>\n<blockquote>\n<p>只要是支持事件响应的核心模块都是 EventEmitter 的子类</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"fs\">fs</h5><blockquote>\n<p>文件操作模块，提供了文件的读取、写入、更名、删除、遍历目录、链接等</p>\n</blockquote>\n<ul>\n<li><p>fs.readFile</p>\n<blockquote>\n<p>异步读取<br>fs.readFile(filename,[encoding],[callback(err,data)])</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.readFile(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'utf-8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.error(err);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>fs.readFileSync</p>\n<blockquote>\n<p>同步读取<br>fs.readFileSync(filename, [encoding])</p>\n</blockquote>\n</li>\n<li>fs.open<blockquote>\n<p>fs.open(path, flags, [mode], [callback(err, fd)])<br>1.path文件路径<br>2.flags</p>\n</blockquote>\n</li>\n<li>r 读取模式</li>\n<li>r+ 读写模式</li>\n<li>w 写入模式，不存在创建</li>\n<li>w+ 读写模式，不存在创建</li>\n<li>a 追加模式，不存在创建</li>\n<li>a+ 读取追加模式打开，不存在创建<br>3.mode 创建文件时指定的文件权限</li>\n<li>fs.read<blockquote>\n<p><code>fs.read(fd, buffer, offset, length, position, [callback(err, bytesRead, buffer)])</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'r'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, fd</span>) </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.error(err);</div><div class=\"line\">        <span class=\"keyword\">return</span>; </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">8</span>);</div><div class=\"line\">    fs.read(fd, buf, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, bytes, buffer</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">            <span class=\"built_in\">console</span>.error(err); </div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'data: '</span> + bytes);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(buffer);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"HTTP服务器\">HTTP服务器</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123; </div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span>&#125;); </div><div class=\"line\">    res.write(<span class=\"string\">'&lt;h1&gt;Hello&lt;/h1&gt;'</span>);</div><div class=\"line\">    res.end(<span class=\"string\">'&lt;p&gt;Hello World&lt;/p&gt;'</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"server is start...port 3000.\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li><p>http.Server</p>\n<blockquote>\n<p>http模块中的HTTP服务器对象<br>http.Server的事件<br>1.request 客户端请求到来时触发<br>2.connection TCP连接建立时触发<br>3.close 服务器关闭时触发<br>4.checkContinue<br>5.upgrade<br>6.clientError</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> http.Server(); </div><div class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span>&#125;); </div><div class=\"line\">    res.write(<span class=\"string\">'&lt;h1&gt;Hello&lt;/h1&gt;'</span>);</div><div class=\"line\">    res.end(<span class=\"string\">'&lt;p&gt;Hello World&lt;/p&gt;'</span>);</div><div class=\"line\">&#125;); </div><div class=\"line\">server.listen(<span class=\"number\">3000</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"server is start...port 3000.\"</span>);</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>http.ServerRequest</p>\n<blockquote>\n<p>http.ServerRequest提供了三个事件控制请求体传输<br>1.data 请求体数据到来时，事件触发<br>2.end 请求体传输结束时触发<br>3.close 请求结束时触发，用户强制终止了传输也会触发<br>属性<br>1.complete<br>2.httpVersion<br>3.method<br>4.url<br>5.headers<br>6.trailers<br>7.connection<br>7.socket<br>8.client<br>获取GET请求内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123; </div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;); </div><div class=\"line\">    res.end(util.inspect(url.parse(req.url, <span class=\"literal\">true</span>)));</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//请求 http://127.0.0.1:3000/text/id=123&amp;key=qwe</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<p>获取POST请求内容<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">var</span> post = <span class=\"string\">''</span>;</div><div class=\"line\">    req.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>&#123; </div><div class=\"line\">        post += chunk;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    req.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        post = querystring.parse(post); res.end(util.inspect(post));</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>http.ServerResponse<br>response.writeHead(statusCode, [headers]) 向请求的客户端发送相应头<br>response.write(data, [encoding]) 向请求的客户端发送响应内容<br>response.end([data], [encoding]) 响应结束，告知客户端所有发送已经完成</li>\n</ul>\n<h5 id=\"HTTP客户端\">HTTP客户端</h5><ul>\n<li><p>http.request(options, callback)</p>\n<blockquote>\n<p>option 常用的参数<br>host 请求网站的域名或者IP地址<br>port 请求网站的端口，默认80<br>method 请求方法，默认是GET<br>path 请求的相对于根的路径<br>headers 一个关联的数组对象，为请求头的内容<br>callback 传递一个参数，为http.ClientResponse的实例<br>tp.request 返回一个http.ClientRequest的实例</p>\n</blockquote>\n</li>\n<li><p>http.get(options, callback)</p>\n<blockquote>\n<p>更加简便的方法用于处 理GET请求<br>函数<br>write<br>end<br>request.abort()，终止正在发送的请求<br>request.setTimeout(timeout, [callback]) 设置请求超时时间，请求超时以后,callback 将会被调用<br>request.setNoDelay([noDelay])<br>request.setSocketKeepAlive([enable], [initialDelay])</p>\n</blockquote>\n</li>\n<li><p>http.ClientRequest</p>\n<blockquote>\n<p>它表示一个正在处理的请求，其头部已经进入请求队列</p>\n</blockquote>\n</li>\n<li><p>http.ClientResponse</p>\n<blockquote>\n<p>事件<br>data 数据到达，传递参数chunk，表示接收到的数据<br>end 传输结束<br>close 连接结束<br>属性<br>statusCode HTTP状态码<br>httpVersion HTTP协议版本<br>headers HTTP请求头<br>trailers HTTP请求尾<br>函数<br>response.setEncoding([encoding])，设置默认编码<br>response.pause()，暂停接收数据和发送事件，方便实现下载功能<br>response.resume()，从暂停状态恢复</p>\n</blockquote>\n</li>\n</ul>\n","excerpt":"<h5 id=\"Node-js_API\">Node.js API</h5><h6 id=\"全局对象\">全局对象</h6><blockquote>\n<p>在javascript中，window是全局对象<br>在Node.js中，global是全局对象。<br>","more":"<br>满足全局变量的条件：</p>\n<ul>\n<li>最外层定义的变量</li>\n<li>全局对象的属性</li>\n<li>隐式定义的变量<br>全局变量过多定义过于随意会带来全局变量污染的问题，为了避免全局变量污染，在定义变量的时候使用var</li>\n</ul>\n</blockquote>\n<h6 id=\"process\">process</h6><p>Node.js的进程对象</p>\n<ul>\n<li>Event: ‘exit’<blockquote>\n<p>process退出时会出发</p>\n</blockquote>\n</li>\n<li>Event: ‘uncaughtException’<blockquote>\n<p>process发生异常时触发</p>\n</blockquote>\n</li>\n<li><p>process自定义事件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.on(<span class=\"string\">'test'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>))</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    process.exit(<span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\">process.emmit(<span class=\"string\">'test'</span>,<span class=\"string\">'emmit test'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>process.stdin</p>\n<blockquote>\n<p>标准输入流</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.stdin.resume();</div><div class=\"line\">process.stdin.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">process.stdin.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123; </div><div class=\"line\">    process.stdout.write(<span class=\"string\">'data：'</span> + data.toString());</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>process.stdout</p>\n<blockquote>\n<p>标准输出流,比console.log()更底层</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">process.stdout.write(‘data’)</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>process.argv</p>\n<blockquote>\n<p>命令行参数数组</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(process.argv); <span class=\"comment\">//存储为 test.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//执行</span></div><div class=\"line\">node test.js <span class=\"number\">1</span> <span class=\"string\">\"asd\"</span> age=<span class=\"number\">12</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>process.nextTick(callback)</p>\n<blockquote>\n<p>为事件循环设置一项任务，在下次事件循环调用响应时调用callback</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deal</span>(<span class=\"params\">args,callback</span>)</span>&#123;</div><div class=\"line\">    doit(args);</div><div class=\"line\">    process.nextTick(callback);</div><div class=\"line\">&#125;</div><div class=\"line\">deal(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    dome();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//如果doit 和 dome都是很耗时的函数，这样把耗时的操作拆分成两个事件，减少了每个事件执行时间，提高了事件响应速度。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//比setTimeout(fn,times)效率更高</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>process.pid、process.title、process.arch、process.platform</p>\n<blockquote>\n<p>进程id，进程名字，进程架构(系统架构，X86)，进程平台(操作系统)</p>\n</blockquote>\n</li>\n<li>process.execPath<blockquote>\n<p>返回当前node.js进程的启动命令路径</p>\n</blockquote>\n</li>\n<li>process.memorUsage()<blockquote>\n<p>进程的内存使用情况</p>\n</blockquote>\n</li>\n<li>process.kill(pid, signal=’SIGTERM’)<blockquote>\n<p>发出一个kill信号给指定pid</p>\n</blockquote>\n</li>\n<li>process.exit(code=0)<blockquote>\n<p>kill当前进程，退出本进程<br>…</p>\n</blockquote>\n</li>\n</ul>\n<h6 id=\"console\">console</h6><ul>\n<li><p>console.log()</p>\n<blockquote>\n<p>向标准输出流打印字符并以换行符结</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span>); <span class=\"comment\">//123</span></div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'d% world'</span>,hello); <span class=\"comment\">//hello world</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>console.error()</p>\n<blockquote>\n<p>向标准错误流输出</p>\n</blockquote>\n</li>\n<li>console.trace()<blockquote>\n<p>向标准错误流输出当前调用栈</p>\n</blockquote>\n</li>\n<li>console.info()<blockquote>\n<p>如果只有一个参数，输出这个参数的字符串形式<br>如果有多个参数，格式输出<br>如果没有参数，只打印一个换行符</p>\n</blockquote>\n</li>\n<li>console.warn()<blockquote>\n<p>输出警告</p>\n</blockquote>\n</li>\n<li>console.dir(obj)<blockquote>\n<p>将obj作为参数传递给util.inspect并执行，将返回的结果打印到stdout</p>\n</blockquote>\n</li>\n<li>console.time(label)<blockquote>\n<p>统计操作执行的时间</p>\n</blockquote>\n</li>\n<li><p>console.timeEnd(label)</p>\n<blockquote>\n<p>统计操作执行的时间</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.time(<span class=\"string\">'start'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> count=<span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">9999</span>;i++)</div><div class=\"line\">&#123;</div><div class=\"line\">    count+=i;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'sum='</span>+sum);</div><div class=\"line\"><span class=\"built_in\">console</span>.timeEnd(<span class=\"string\">'end'</span>);</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>console.assert()</p>\n<blockquote>\n<p>计算结果为真返回true</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"util\">util</h5><blockquote>\n<p>提供常用函数的集合</p>\n<ul>\n<li>util.inherits<br>是一个实现对象间实现继承的函数<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parent</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'parent'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.age = <span class=\"number\">55</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.do = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'1:'</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\">parent.prototype.show = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'2:'</span> + <span class=\"keyword\">this</span>.name);</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">child</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.name = <span class=\"string\">'child'</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">util.inherits(child,parent);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> testParent = <span class=\"keyword\">new</span> Parent();</div><div class=\"line\">testParent.show(); <span class=\"comment\">//2:parent</span></div><div class=\"line\">testParent.do(); <span class=\"comment\">//1:parent</span></div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> testChild = <span class=\"keyword\">new</span> child(); </div><div class=\"line\">testchild.show(); <span class=\"comment\">//2:child</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//仅仅继承了在原型中定义的函数，而构造函数内部的属性没有继承。</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>util.inspect<blockquote>\n<p>将任意对象转换成字符串的方法，通常用在调试和错误输出的时候<br>1.接收至少一个对象，要转换的对象<br>2.showHidden，可选，true 输出更多隐藏信息<br>3.depth 最大递归层数，默认为2，null表示不限层数<br>4.color 如果为true，输出将会带颜色<br>5.注意：并不是简单的以字符串输出，即便定义了toString也不会调用</p>\n</blockquote>\n</li>\n<li>util.isArray()<blockquote>\n<p>如果给定的参数 “object” 是一个数组返回true，否则返回false。</p>\n</blockquote>\n</li>\n<li>util.isRegExp()<blockquote>\n<p>如果给定的参数 “object” 是一个正则表达式返回true，否则返回false。</p>\n</blockquote>\n</li>\n<li>util.isDate()<blockquote>\n<p>如果给定的参数 “object” 是一个日期返回true，否则返回false。</p>\n</blockquote>\n</li>\n<li>util.isError()<blockquote>\n<p>如果给定的参数 “object” 是一个错误对象返回true，否则返回false。</p>\n</blockquote>\n</li>\n<li><p>util.format()</p>\n<blockquote>\n<p>返回一个格式化后的字符串</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// %s - String.</span></div><div class=\"line\"><span class=\"comment\">// %d - Number (both integer and float).</span></div><div class=\"line\"><span class=\"comment\">// %j - JSON.</span></div><div class=\"line\"><span class=\"comment\">// %% - single percent sign ('%'). This does not consume an argument.</span></div><div class=\"line\">util.format(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); <span class=\"comment\">//1 2 3</span></div><div class=\"line\">util.format(<span class=\"string\">'%s:%s'</span>, <span class=\"string\">'asd'</span>, <span class=\"string\">'qwe'</span>); <span class=\"comment\">//asd:qwe</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>util.debug()</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>).debug(<span class=\"string\">'debug'</span>);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"event\">event</h5><blockquote>\n<p>events模块不仅用于用户代码与Node.js下层事件循环的交互，还几乎被所有模块依赖。<br>events.EventEmitter,事件发射与事件监听器功能的封装<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> emitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\">emitter.on(<span class=\"string\">'test_event'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">param</span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'1-'</span>, param);</div><div class=\"line\">&#125;);</div><div class=\"line\">emitter.on(<span class=\"string\">'test_event'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">param</span>) </span>&#123; <span class=\"built_in\">console</span>.log(<span class=\"string\">'2-'</span>, param);</div><div class=\"line\">&#125;);</div><div class=\"line\">emitter.emit(<span class=\"string\">'test_event'</span>, <span class=\"number\">123</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 1-123 </span></div><div class=\"line\"><span class=\"comment\">// 2-123</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>EventEmitter.on(event, listener)<blockquote>\n<p>注册一个监听器，接收事件名和回调函数</p>\n</blockquote>\n</li>\n<li>EventEmitter.emit(event, [arg1], [arg2], […])<blockquote>\n<p>接收事件名，传递参数</p>\n</blockquote>\n</li>\n<li>EventEmitter.once(event, listener)<blockquote>\n<p>注册一个单次的监听器，触发一次后就解除</p>\n</blockquote>\n</li>\n<li>EventEmitter.removeListener(event, listener)<blockquote>\n<p>解除指定的监听器</p>\n</blockquote>\n</li>\n<li>EventEmitter.removeAllListeners([event])<blockquote>\n<p>解除所有监听器</p>\n</blockquote>\n</li>\n<li>emitter.listeners(event)<blockquote>\n<p>返回值接收到event所有注册监听的集合</p>\n</blockquote>\n</li>\n<li>emitter.setMaxListeners(n)<blockquote>\n<p>给EventEmitter设置最大监听数,默认是10个</p>\n</blockquote>\n</li>\n<li><p>error事件</p>\n<blockquote>\n<p>error触发时,EventEmitter如果没有响应的监听器,Node.js 会把它当作异常,退出程序并打印调用栈。我们一般要为会发射 error 事件的对象设置监听器,避免遇到错误后整个程序崩溃</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> events = <span class=\"built_in\">require</span>(<span class=\"string\">'events'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> emitter = <span class=\"keyword\">new</span> events.EventEmitter();</div><div class=\"line\">emitter.emit(<span class=\"string\">'error'</span>);</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>继承EventEmitter</p>\n<blockquote>\n<p>只要是支持事件响应的核心模块都是 EventEmitter 的子类</p>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"fs\">fs</h5><blockquote>\n<p>文件操作模块，提供了文件的读取、写入、更名、删除、遍历目录、链接等</p>\n</blockquote>\n<ul>\n<li><p>fs.readFile</p>\n<blockquote>\n<p>异步读取<br>fs.readFile(filename,[encoding],[callback(err,data)])</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.readFile(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'utf-8'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.error(err);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>fs.readFileSync</p>\n<blockquote>\n<p>同步读取<br>fs.readFileSync(filename, [encoding])</p>\n</blockquote>\n</li>\n<li>fs.open<blockquote>\n<p>fs.open(path, flags, [mode], [callback(err, fd)])<br>1.path文件路径<br>2.flags</p>\n</blockquote>\n</li>\n<li>r 读取模式</li>\n<li>r+ 读写模式</li>\n<li>w 写入模式，不存在创建</li>\n<li>w+ 读写模式，不存在创建</li>\n<li>a 追加模式，不存在创建</li>\n<li>a+ 读取追加模式打开，不存在创建<br>3.mode 创建文件时指定的文件权限</li>\n<li>fs.read<blockquote>\n<p><code>fs.read(fd, buffer, offset, length, position, [callback(err, bytesRead, buffer)])</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</div><div class=\"line\">fs.open(<span class=\"string\">'data.txt'</span>, <span class=\"string\">'r'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, fd</span>) </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.error(err);</div><div class=\"line\">        <span class=\"keyword\">return</span>; </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> buf = <span class=\"keyword\">new</span> Buffer(<span class=\"number\">8</span>);</div><div class=\"line\">    fs.read(fd, buf, <span class=\"number\">0</span>, <span class=\"number\">8</span>, <span class=\"literal\">null</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, bytes, buffer</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;  </div><div class=\"line\">            <span class=\"built_in\">console</span>.error(err); </div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'data: '</span> + bytes);</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(buffer);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h5 id=\"HTTP服务器\">HTTP服务器</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123; </div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span>&#125;); </div><div class=\"line\">    res.write(<span class=\"string\">'&lt;h1&gt;Hello&lt;/h1&gt;'</span>);</div><div class=\"line\">    res.end(<span class=\"string\">'&lt;p&gt;Hello World&lt;/p&gt;'</span>);</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"server is start...port 3000.\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li><p>http.Server</p>\n<blockquote>\n<p>http模块中的HTTP服务器对象<br>http.Server的事件<br>1.request 客户端请求到来时触发<br>2.connection TCP连接建立时触发<br>3.close 服务器关闭时触发<br>4.checkContinue<br>5.upgrade<br>6.clientError</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> server = <span class=\"keyword\">new</span> http.Server(); </div><div class=\"line\">server.on(<span class=\"string\">'request'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123;</div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/html'</span>&#125;); </div><div class=\"line\">    res.write(<span class=\"string\">'&lt;h1&gt;Hello&lt;/h1&gt;'</span>);</div><div class=\"line\">    res.end(<span class=\"string\">'&lt;p&gt;Hello World&lt;/p&gt;'</span>);</div><div class=\"line\">&#125;); </div><div class=\"line\">server.listen(<span class=\"number\">3000</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">\"server is start...port 3000.\"</span>);</div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>http.ServerRequest</p>\n<blockquote>\n<p>http.ServerRequest提供了三个事件控制请求体传输<br>1.data 请求体数据到来时，事件触发<br>2.end 请求体传输结束时触发<br>3.close 请求结束时触发，用户强制终止了传输也会触发<br>属性<br>1.complete<br>2.httpVersion<br>3.method<br>4.url<br>5.headers<br>6.trailers<br>7.connection<br>7.socket<br>8.client<br>获取GET请求内容</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> url = <span class=\"built_in\">require</span>(<span class=\"string\">'url'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123; </div><div class=\"line\">    res.writeHead(<span class=\"number\">200</span>, &#123;<span class=\"string\">'Content-Type'</span>: <span class=\"string\">'text/plain'</span>&#125;); </div><div class=\"line\">    res.end(util.inspect(url.parse(req.url, <span class=\"literal\">true</span>)));</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//请求 http://127.0.0.1:3000/text/id=123&amp;key=qwe</span></div></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<p>获取POST请求内容<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'http'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> querystring = <span class=\"built_in\">require</span>(<span class=\"string\">'querystring'</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> util = <span class=\"built_in\">require</span>(<span class=\"string\">'util'</span>);</div><div class=\"line\">http.createServer(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res</span>) </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">var</span> post = <span class=\"string\">''</span>;</div><div class=\"line\">    req.on(<span class=\"string\">'data'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">chunk</span>) </span>&#123; </div><div class=\"line\">        post += chunk;</div><div class=\"line\">    &#125;);</div><div class=\"line\">    req.on(<span class=\"string\">'end'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        post = querystring.parse(post); res.end(util.inspect(post));</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;).listen(<span class=\"number\">3000</span>);</div></pre></td></tr></table></figure></p>\n<ul>\n<li>http.ServerResponse<br>response.writeHead(statusCode, [headers]) 向请求的客户端发送相应头<br>response.write(data, [encoding]) 向请求的客户端发送响应内容<br>response.end([data], [encoding]) 响应结束，告知客户端所有发送已经完成</li>\n</ul>\n<h5 id=\"HTTP客户端\">HTTP客户端</h5><ul>\n<li><p>http.request(options, callback)</p>\n<blockquote>\n<p>option 常用的参数<br>host 请求网站的域名或者IP地址<br>port 请求网站的端口，默认80<br>method 请求方法，默认是GET<br>path 请求的相对于根的路径<br>headers 一个关联的数组对象，为请求头的内容<br>callback 传递一个参数，为http.ClientResponse的实例<br>tp.request 返回一个http.ClientRequest的实例</p>\n</blockquote>\n</li>\n<li><p>http.get(options, callback)</p>\n<blockquote>\n<p>更加简便的方法用于处 理GET请求<br>函数<br>write<br>end<br>request.abort()，终止正在发送的请求<br>request.setTimeout(timeout, [callback]) 设置请求超时时间，请求超时以后,callback 将会被调用<br>request.setNoDelay([noDelay])<br>request.setSocketKeepAlive([enable], [initialDelay])</p>\n</blockquote>\n</li>\n<li><p>http.ClientRequest</p>\n<blockquote>\n<p>它表示一个正在处理的请求，其头部已经进入请求队列</p>\n</blockquote>\n</li>\n<li><p>http.ClientResponse</p>\n<blockquote>\n<p>事件<br>data 数据到达，传递参数chunk，表示接收到的数据<br>end 传输结束<br>close 连接结束<br>属性<br>statusCode HTTP状态码<br>httpVersion HTTP协议版本<br>headers HTTP请求头<br>trailers HTTP请求尾<br>函数<br>response.setEncoding([encoding])，设置默认编码<br>response.pause()，暂停接收数据和发送事件，方便实现下载功能<br>response.resume()，从暂停状态恢复</p>\n</blockquote>\n</li>\n</ul>"},{"title":"从零开始Node-04","date":"2015-10-15T06:33:42.000Z","toc":true,"_content":"##### web开发\n>* 使用express框架\n* 版本 4.x\n* 安装 sudo npm uninstall -g express\n* 安装 sudo npm install -g express-generator,4.x以后的版本需要安装这个\n* 初始化工程 express -e webApp 使用express -h会发现，-e是使用ejs模版\n* webApp工程创建完毕，我们执行 cd webApp && sudo npm install 为工程安装相关依赖\n* package.json会比以往的不同\n<!--more-->\n```javascript\n{\n    \"name\": \"webApp\",\n    \"version\": \"0.0.0\",\n    \"private\": true,\n    \"scripts\": {\n        \"start\": \"node ./bin/www\"\n    },\n        \"dependencies\": {\n        \"body-parser\": \"~1.13.1\",\n        \"cookie-parser\": \"~1.3.5\",\n        \"debug\": \"~2.2.0\",\n        \"ejs\": \"~2.3.2\",\n        \"express\": \"~4.13.0\",\n        \"morgan\": \"~1.6.1\",\n        \"serve-favicon\": \"~2.3.0\"\n    }\n}\n```\n* 启动server npm start 会进入package.json寻找start属性\n* 与以往不同的是，之前http.server启动的代码是在app.js中，而现在是在./bin/www这个文件中\n* 文件结构介绍\n    1 bin下面是一个www文件，启动node server的\n    2 node_modules 安装依赖的模块\n    3 public 静态资源，js css images\n    4 routes 路由\n    5 views 页面模版\n    6 app.js 主文件，引擎，路径，解析器，工具，路由等相关配置\n    7 `package.json` node.js标准配置文件","source":"_posts/从零开始Node-04.md","raw":"title: 从零开始Node-04\ndate: 2015-10-15 14:33:42\ntags: nodejs\ntoc: true\n---\n##### web开发\n>* 使用express框架\n* 版本 4.x\n* 安装 sudo npm uninstall -g express\n* 安装 sudo npm install -g express-generator,4.x以后的版本需要安装这个\n* 初始化工程 express -e webApp 使用express -h会发现，-e是使用ejs模版\n* webApp工程创建完毕，我们执行 cd webApp && sudo npm install 为工程安装相关依赖\n* package.json会比以往的不同\n<!--more-->\n```javascript\n{\n    \"name\": \"webApp\",\n    \"version\": \"0.0.0\",\n    \"private\": true,\n    \"scripts\": {\n        \"start\": \"node ./bin/www\"\n    },\n        \"dependencies\": {\n        \"body-parser\": \"~1.13.1\",\n        \"cookie-parser\": \"~1.3.5\",\n        \"debug\": \"~2.2.0\",\n        \"ejs\": \"~2.3.2\",\n        \"express\": \"~4.13.0\",\n        \"morgan\": \"~1.6.1\",\n        \"serve-favicon\": \"~2.3.0\"\n    }\n}\n```\n* 启动server npm start 会进入package.json寻找start属性\n* 与以往不同的是，之前http.server启动的代码是在app.js中，而现在是在./bin/www这个文件中\n* 文件结构介绍\n    1 bin下面是一个www文件，启动node server的\n    2 node_modules 安装依赖的模块\n    3 public 静态资源，js css images\n    4 routes 路由\n    5 views 页面模版\n    6 app.js 主文件，引擎，路径，解析器，工具，路由等相关配置\n    7 `package.json` node.js标准配置文件","slug":"从零开始Node-04","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhpp002pt0yj3vgvmfi6","content":"<h5 id=\"web开发\">web开发</h5><blockquote>\n<ul>\n<li>使用express框架</li>\n<li>版本 4.x</li>\n<li>安装 sudo npm uninstall -g express</li>\n<li>安装 sudo npm install -g express-generator,4.x以后的版本需要安装这个</li>\n<li>初始化工程 express -e webApp 使用express -h会发现，-e是使用ejs模版</li>\n<li>webApp工程创建完毕，我们执行 cd webApp &amp;&amp; sudo npm install 为工程安装相关依赖</li>\n<li>package.json会比以往的不同<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"webApp\"</span>,</div><div class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"private\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"start\"</span>: <span class=\"string\">\"node ./bin/www\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">        <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"body-parser\"</span>: <span class=\"string\">\"~1.13.1\"</span>,</div><div class=\"line\">        <span class=\"string\">\"cookie-parser\"</span>: <span class=\"string\">\"~1.3.5\"</span>,</div><div class=\"line\">        <span class=\"string\">\"debug\"</span>: <span class=\"string\">\"~2.2.0\"</span>,</div><div class=\"line\">        <span class=\"string\">\"ejs\"</span>: <span class=\"string\">\"~2.3.2\"</span>,</div><div class=\"line\">        <span class=\"string\">\"express\"</span>: <span class=\"string\">\"~4.13.0\"</span>,</div><div class=\"line\">        <span class=\"string\">\"morgan\"</span>: <span class=\"string\">\"~1.6.1\"</span>,</div><div class=\"line\">        <span class=\"string\">\"serve-favicon\"</span>: <span class=\"string\">\"~2.3.0\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>启动server npm start 会进入package.json寻找start属性</li>\n<li>与以往不同的是，之前http.server启动的代码是在app.js中，而现在是在./bin/www这个文件中</li>\n<li>文件结构介绍<br>  1 bin下面是一个www文件，启动node server的<br>  2 node_modules 安装依赖的模块<br>  3 public 静态资源，js css images<br>  4 routes 路由<br>  5 views 页面模版<br>  6 app.js 主文件，引擎，路径，解析器，工具，路由等相关配置<br>  7 <code>package.json</code> node.js标准配置文件</li>\n</ul>\n","excerpt":"<h5 id=\"web开发\">web开发</h5><blockquote>\n<ul>\n<li>使用express框架</li>\n<li>版本 4.x</li>\n<li>安装 sudo npm uninstall -g express</li>\n<li>安装 sudo npm install -g express-generator,4.x以后的版本需要安装这个</li>\n<li>初始化工程 express -e webApp 使用express -h会发现，-e是使用ejs模版</li>\n<li>webApp工程创建完毕，我们执行 cd webApp &amp;&amp; sudo npm install 为工程安装相关依赖</li>\n<li>package.json会比以往的不同","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"string\">\"name\"</span>: <span class=\"string\">\"webApp\"</span>,</div><div class=\"line\">    <span class=\"string\">\"version\"</span>: <span class=\"string\">\"0.0.0\"</span>,</div><div class=\"line\">    <span class=\"string\">\"private\"</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"start\"</span>: <span class=\"string\">\"node ./bin/www\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">        <span class=\"string\">\"dependencies\"</span>: &#123;</div><div class=\"line\">        <span class=\"string\">\"body-parser\"</span>: <span class=\"string\">\"~1.13.1\"</span>,</div><div class=\"line\">        <span class=\"string\">\"cookie-parser\"</span>: <span class=\"string\">\"~1.3.5\"</span>,</div><div class=\"line\">        <span class=\"string\">\"debug\"</span>: <span class=\"string\">\"~2.2.0\"</span>,</div><div class=\"line\">        <span class=\"string\">\"ejs\"</span>: <span class=\"string\">\"~2.3.2\"</span>,</div><div class=\"line\">        <span class=\"string\">\"express\"</span>: <span class=\"string\">\"~4.13.0\"</span>,</div><div class=\"line\">        <span class=\"string\">\"morgan\"</span>: <span class=\"string\">\"~1.6.1\"</span>,</div><div class=\"line\">        <span class=\"string\">\"serve-favicon\"</span>: <span class=\"string\">\"~2.3.0\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>启动server npm start 会进入package.json寻找start属性</li>\n<li>与以往不同的是，之前http.server启动的代码是在app.js中，而现在是在./bin/www这个文件中</li>\n<li>文件结构介绍<br>  1 bin下面是一个www文件，启动node server的<br>  2 node_modules 安装依赖的模块<br>  3 public 静态资源，js css images<br>  4 routes 路由<br>  5 views 页面模版<br>  6 app.js 主文件，引擎，路径，解析器，工具，路由等相关配置<br>  7 <code>package.json</code> node.js标准配置文件</li>\n</ul>"},{"title":"从零开始Node-04","date":"2015-10-16T04:23:42.000Z","toc":true,"_content":"##### nodejs连接mongodb\n\n###### 操作系统\nOS X\n\n###### 安装\n```javascript\nbrew update\nbrew install mongodb\nbrew install node\nsudo npm install -g express\n```\n<!--more-->\n\n###### 安装路径\nmongo安装在 `/usr/local/bin/mongo` 这个路径\n数据库文件在 `/data/db/` 这个路径\n\n###### 操作mongo\n* 执行mongod\n服务默认使用 host：127.0.0.1 port：27017\n* 执行mongo\n```javascript\nshow dbs 查询已有数据库\nuse databaseTest 创建databaseTest数据库\ndb.createCollection('test') 创建表\nshow collections 查看表\ndb.test.save({name:\"qwe\"}) 插入数据\ndb.test.find() 查找数据\ndb.test.find({name:\"qwe\"})\ndb.remove({name:\"qwe\"}) 删除数据\ndb.test.ensureIndex({\"name\":1}) 创建索引\ndb.test.getIndexes() 查看索引\ndb.test.dropIndex({\"username\":1}) 删除索引\ndb.test.ensureIndex({\"name\":1, \"age\":-1})\n数字1表示name键的索引按升序存储，-1表示age键的索引按照降序方式存储。\ndb.test.ensureIndex({\"id\":1},{\"unique\":true}) 创建唯一索引，插入重复的值将会报错\n如果字段被添加了索引，有可能在插入数据的时候报索引重复的错误，这时候先检查表创建的索引，如果不需要请手动删除索引\n```\n\n###### mongo 配置文件：待补充\n\n###### 连接\n>express 4.x版本有些改动\n* 初始化程序 express -e test 创建test工程\n* 进入package.json 增加\n```javascript\n\"connect-mongo\": \"*\",\n\"mongodb\": \"*\"\n```\n* 执行sudo npm install\n* 根目录创建settings.js 存放数据库配置基本信息\n```javascript\nmodule.exports = {\n    cookieSecret: 'webApp',\n    db: 'webApp',\n    host: '127.0.0.1',\n    port: 27017\n};\n```\n* 创建models文件夹，增加db.js\n```javascript\nvar settings = require('../settings');\nvar mongodb = require('mongodb');\nvar Db = mongodb.Db;\nvar Connection = mongodb.Connection;\nvar Server = mongodb.Server;\nmodule.exports = new Db(settings.db, new Server(settings.host, settings.port, {\n    auto_reconnect: true\n}), {\n    safe: true\n});\n```\n* 在models文件夹下 创建实体类info.js\n```javascript\nvar mongodb = require('./db');\nfunction Info(info) {\n    this.info = info.info;\n}\nmodule.exports = Info;\nInfo.prototype.save = function save(callback) {\n    var info = {\n        id: (new Date()).getTime(),\n        info: this.info\n    };\n    mongodb.open(function(err, db) {\n        if (err) {\n            return callback(err);\n        }\n        db.collection('infoTable', function(err, collection) {\n            if (err) {\n                console.log(err);\n                mongodb.close();\n                return callback(err);\n            }\n            console.log(info);\n            collection.insert(info, {\n                safe: true\n            }, function(err, info) {\n                if (info) {\n                    console.log('ok');\n                } else {\n                    console.log(err);\n                    mongodb.close();\n                    callback(err, info);\n                }\n            });\n        });\n    });\n};\nInfo.prototype.get = function get(userinfo, callback) {\n    mongodb.open(function(err, db) {\n        if (err) {\n            console.log(err);\n            return callback(err);\n        }\n        db.collection('infoTable', function(err, collection) {\n            if (err) {\n                console.log(err);\n                mongodb.close();\n                return callback(err);\n            }\n            collection.findOne({\n                info: userinfo\n            }, function(err, info) {\n                mongodb.close();\n                if (info) {\n                    var info = new Info(info);\n                    console.log(info);\n                } else {\n                    callback(err, null);\n                }\n            });\n        });\n    });\n};\n```\n* 在routes文件夹下添加 post.js\n```javascript\nvar express = require('express');\nvar router = express.Router();\nvar Info = require('../models/info.js')\n\nrouter.post('/', function(req, res, next) {\n    var newInfo = new info({\n        name: req.body.Info || 'test'\n    });\n    newInfo.save(function(err) {\n        if (!err) {\n            console.log('success');\n            res.redirect('/');\n        }\n        console.log('error',err);\n        return res.redirect('/');\n    });\n});\n\nmodule.exports = router;\n```\n* 最后一步，在app.js中添加路由\n```javascript\n...\nvar post = require('./routes/post');\n...\n...\napp.use('/post', post);\n```","source":"_posts/从零开始Node-05.md","raw":"title: 从零开始Node-04\ndate: 2015-10-16 12:23:42\ntags: nodejs\ntoc: true\n---\n##### nodejs连接mongodb\n\n###### 操作系统\nOS X\n\n###### 安装\n```javascript\nbrew update\nbrew install mongodb\nbrew install node\nsudo npm install -g express\n```\n<!--more-->\n\n###### 安装路径\nmongo安装在 `/usr/local/bin/mongo` 这个路径\n数据库文件在 `/data/db/` 这个路径\n\n###### 操作mongo\n* 执行mongod\n服务默认使用 host：127.0.0.1 port：27017\n* 执行mongo\n```javascript\nshow dbs 查询已有数据库\nuse databaseTest 创建databaseTest数据库\ndb.createCollection('test') 创建表\nshow collections 查看表\ndb.test.save({name:\"qwe\"}) 插入数据\ndb.test.find() 查找数据\ndb.test.find({name:\"qwe\"})\ndb.remove({name:\"qwe\"}) 删除数据\ndb.test.ensureIndex({\"name\":1}) 创建索引\ndb.test.getIndexes() 查看索引\ndb.test.dropIndex({\"username\":1}) 删除索引\ndb.test.ensureIndex({\"name\":1, \"age\":-1})\n数字1表示name键的索引按升序存储，-1表示age键的索引按照降序方式存储。\ndb.test.ensureIndex({\"id\":1},{\"unique\":true}) 创建唯一索引，插入重复的值将会报错\n如果字段被添加了索引，有可能在插入数据的时候报索引重复的错误，这时候先检查表创建的索引，如果不需要请手动删除索引\n```\n\n###### mongo 配置文件：待补充\n\n###### 连接\n>express 4.x版本有些改动\n* 初始化程序 express -e test 创建test工程\n* 进入package.json 增加\n```javascript\n\"connect-mongo\": \"*\",\n\"mongodb\": \"*\"\n```\n* 执行sudo npm install\n* 根目录创建settings.js 存放数据库配置基本信息\n```javascript\nmodule.exports = {\n    cookieSecret: 'webApp',\n    db: 'webApp',\n    host: '127.0.0.1',\n    port: 27017\n};\n```\n* 创建models文件夹，增加db.js\n```javascript\nvar settings = require('../settings');\nvar mongodb = require('mongodb');\nvar Db = mongodb.Db;\nvar Connection = mongodb.Connection;\nvar Server = mongodb.Server;\nmodule.exports = new Db(settings.db, new Server(settings.host, settings.port, {\n    auto_reconnect: true\n}), {\n    safe: true\n});\n```\n* 在models文件夹下 创建实体类info.js\n```javascript\nvar mongodb = require('./db');\nfunction Info(info) {\n    this.info = info.info;\n}\nmodule.exports = Info;\nInfo.prototype.save = function save(callback) {\n    var info = {\n        id: (new Date()).getTime(),\n        info: this.info\n    };\n    mongodb.open(function(err, db) {\n        if (err) {\n            return callback(err);\n        }\n        db.collection('infoTable', function(err, collection) {\n            if (err) {\n                console.log(err);\n                mongodb.close();\n                return callback(err);\n            }\n            console.log(info);\n            collection.insert(info, {\n                safe: true\n            }, function(err, info) {\n                if (info) {\n                    console.log('ok');\n                } else {\n                    console.log(err);\n                    mongodb.close();\n                    callback(err, info);\n                }\n            });\n        });\n    });\n};\nInfo.prototype.get = function get(userinfo, callback) {\n    mongodb.open(function(err, db) {\n        if (err) {\n            console.log(err);\n            return callback(err);\n        }\n        db.collection('infoTable', function(err, collection) {\n            if (err) {\n                console.log(err);\n                mongodb.close();\n                return callback(err);\n            }\n            collection.findOne({\n                info: userinfo\n            }, function(err, info) {\n                mongodb.close();\n                if (info) {\n                    var info = new Info(info);\n                    console.log(info);\n                } else {\n                    callback(err, null);\n                }\n            });\n        });\n    });\n};\n```\n* 在routes文件夹下添加 post.js\n```javascript\nvar express = require('express');\nvar router = express.Router();\nvar Info = require('../models/info.js')\n\nrouter.post('/', function(req, res, next) {\n    var newInfo = new info({\n        name: req.body.Info || 'test'\n    });\n    newInfo.save(function(err) {\n        if (!err) {\n            console.log('success');\n            res.redirect('/');\n        }\n        console.log('error',err);\n        return res.redirect('/');\n    });\n});\n\nmodule.exports = router;\n```\n* 最后一步，在app.js中添加路由\n```javascript\n...\nvar post = require('./routes/post');\n...\n...\napp.use('/post', post);\n```","slug":"从零开始Node-05","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhps002rt0yjyrz1s5ke","content":"<h5 id=\"nodejs连接mongodb\">nodejs连接mongodb</h5><h6 id=\"操作系统\">操作系统</h6><p>OS X</p>\n<h6 id=\"安装\">安装</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew update</div><div class=\"line\">brew install mongodb</div><div class=\"line\">brew install node</div><div class=\"line\">sudo npm install -g express</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h6 id=\"安装路径\">安装路径</h6><p>mongo安装在 <code>/usr/local/bin/mongo</code> 这个路径<br>数据库文件在 <code>/data/db/</code> 这个路径</p>\n<h6 id=\"操作mongo\">操作mongo</h6><ul>\n<li>执行mongod<br>服务默认使用 host：127.0.0.1 port：27017</li>\n<li>执行mongo<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">show dbs 查询已有数据库</div><div class=\"line\">use databaseTest 创建databaseTest数据库</div><div class=\"line\">db.createCollection(<span class=\"string\">'test'</span>) 创建表</div><div class=\"line\">show collections 查看表</div><div class=\"line\">db.test.save(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"qwe\"</span>&#125;) 插入数据</div><div class=\"line\">db.test.find() 查找数据</div><div class=\"line\">db.test.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"qwe\"</span>&#125;)</div><div class=\"line\">db.remove(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"qwe\"</span>&#125;) 删除数据</div><div class=\"line\">db.test.ensureIndex(&#123;<span class=\"string\">\"name\"</span>:<span class=\"number\">1</span>&#125;) 创建索引</div><div class=\"line\">db.test.getIndexes() 查看索引</div><div class=\"line\">db.test.dropIndex(&#123;<span class=\"string\">\"username\"</span>:<span class=\"number\">1</span>&#125;) 删除索引</div><div class=\"line\">db.test.ensureIndex(&#123;<span class=\"string\">\"name\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"age\"</span>:<span class=\"number\">-1</span>&#125;)</div><div class=\"line\">数字<span class=\"number\">1</span>表示name键的索引按升序存储，<span class=\"number\">-1</span>表示age键的索引按照降序方式存储。</div><div class=\"line\">db.test.ensureIndex(&#123;<span class=\"string\">\"id\"</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"string\">\"unique\"</span>:<span class=\"literal\">true</span>&#125;) 创建唯一索引，插入重复的值将会报错</div><div class=\"line\">如果字段被添加了索引，有可能在插入数据的时候报索引重复的错误，这时候先检查表创建的索引，如果不需要请手动删除索引</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"mongo_配置文件：待补充\">mongo 配置文件：待补充</h6><h6 id=\"连接\">连接</h6><blockquote>\n<p>express 4.x版本有些改动</p>\n<ul>\n<li>初始化程序 express -e test 创建test工程</li>\n<li>进入package.json 增加<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"connect-mongo\"</span>: <span class=\"string\">\"*\"</span>,</div><div class=\"line\"><span class=\"string\">\"mongodb\"</span>: <span class=\"string\">\"*\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>执行sudo npm install</li>\n<li><p>根目录创建settings.js 存放数据库配置基本信息</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">cookieSecret</span>: <span class=\"string\">'webApp'</span>,</div><div class=\"line\">    <span class=\"attr\">db</span>: <span class=\"string\">'webApp'</span>,</div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">'127.0.0.1'</span>,</div><div class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">27017</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建models文件夹，增加db.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> settings = <span class=\"built_in\">require</span>(<span class=\"string\">'../settings'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> mongodb = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> Db = mongodb.Db;</div><div class=\"line\"><span class=\"keyword\">var</span> Connection = mongodb.Connection;</div><div class=\"line\"><span class=\"keyword\">var</span> Server = mongodb.Server;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"keyword\">new</span> Db(settings.db, <span class=\"keyword\">new</span> Server(settings.host, settings.port, &#123;</div><div class=\"line\">    <span class=\"attr\">auto_reconnect</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;), &#123;</div><div class=\"line\">    <span class=\"attr\">safe</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>在models文件夹下 创建实体类info.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mongodb = <span class=\"built_in\">require</span>(<span class=\"string\">'./db'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Info</span>(<span class=\"params\">info</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.info = info.info;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Info;</div><div class=\"line\">Info.prototype.save = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">save</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> info = &#123;</div><div class=\"line\">        <span class=\"attr\">id</span>: (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).getTime(),</div><div class=\"line\">        <span class=\"attr\">info</span>: <span class=\"keyword\">this</span>.info</div><div class=\"line\">    &#125;;</div><div class=\"line\">    mongodb.open(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> callback(err);</div><div class=\"line\">        &#125;</div><div class=\"line\">        db.collection(<span class=\"string\">'infoTable'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, collection</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">                mongodb.close();</div><div class=\"line\">                <span class=\"keyword\">return</span> callback(err);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(info);</div><div class=\"line\">            collection.insert(info, &#123;</div><div class=\"line\">                <span class=\"attr\">safe</span>: <span class=\"literal\">true</span></div><div class=\"line\">            &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, info</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (info) &#123;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'ok'</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">                    mongodb.close();</div><div class=\"line\">                    callback(err, info);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\">Info.prototype.get = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">userinfo, callback</span>) </span>&#123;</div><div class=\"line\">    mongodb.open(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">            <span class=\"keyword\">return</span> callback(err);</div><div class=\"line\">        &#125;</div><div class=\"line\">        db.collection(<span class=\"string\">'infoTable'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, collection</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">                mongodb.close();</div><div class=\"line\">                <span class=\"keyword\">return</span> callback(err);</div><div class=\"line\">            &#125;</div><div class=\"line\">            collection.findOne(&#123;</div><div class=\"line\">                <span class=\"attr\">info</span>: userinfo</div><div class=\"line\">            &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, info</span>) </span>&#123;</div><div class=\"line\">                mongodb.close();</div><div class=\"line\">                <span class=\"keyword\">if</span> (info) &#123;</div><div class=\"line\">                    <span class=\"keyword\">var</span> info = <span class=\"keyword\">new</span> Info(info);</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(info);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    callback(err, <span class=\"literal\">null</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在routes文件夹下添加 post.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"><span class=\"keyword\">var</span> Info = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/info.js'</span>)</div><div class=\"line\"></div><div class=\"line\">router.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> newInfo = <span class=\"keyword\">new</span> info(&#123;</div><div class=\"line\">        <span class=\"attr\">name</span>: req.body.Info || <span class=\"string\">'test'</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    newInfo.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>);</div><div class=\"line\">            res.redirect(<span class=\"string\">'/'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>,err);</div><div class=\"line\">        <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'/'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n</li>\n<li><p>最后一步，在app.js中添加路由</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">var post = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/post'</span>);</div><div class=\"line\">...</div><div class=\"line\">...</div><div class=\"line\">app.use(<span class=\"string\">'/post'</span>, post);</div></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"<h5 id=\"nodejs连接mongodb\">nodejs连接mongodb</h5><h6 id=\"操作系统\">操作系统</h6><p>OS X</p>\n<h6 id=\"安装\">安装</h6><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">brew update</div><div class=\"line\">brew install mongodb</div><div class=\"line\">brew install node</div><div class=\"line\">sudo npm install -g express</div></pre></td></tr></table></figure>","more":"<h6 id=\"安装路径\">安装路径</h6><p>mongo安装在 <code>/usr/local/bin/mongo</code> 这个路径<br>数据库文件在 <code>/data/db/</code> 这个路径</p>\n<h6 id=\"操作mongo\">操作mongo</h6><ul>\n<li>执行mongod<br>服务默认使用 host：127.0.0.1 port：27017</li>\n<li>执行mongo<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">show dbs 查询已有数据库</div><div class=\"line\">use databaseTest 创建databaseTest数据库</div><div class=\"line\">db.createCollection(<span class=\"string\">'test'</span>) 创建表</div><div class=\"line\">show collections 查看表</div><div class=\"line\">db.test.save(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"qwe\"</span>&#125;) 插入数据</div><div class=\"line\">db.test.find() 查找数据</div><div class=\"line\">db.test.find(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"qwe\"</span>&#125;)</div><div class=\"line\">db.remove(&#123;<span class=\"attr\">name</span>:<span class=\"string\">\"qwe\"</span>&#125;) 删除数据</div><div class=\"line\">db.test.ensureIndex(&#123;<span class=\"string\">\"name\"</span>:<span class=\"number\">1</span>&#125;) 创建索引</div><div class=\"line\">db.test.getIndexes() 查看索引</div><div class=\"line\">db.test.dropIndex(&#123;<span class=\"string\">\"username\"</span>:<span class=\"number\">1</span>&#125;) 删除索引</div><div class=\"line\">db.test.ensureIndex(&#123;<span class=\"string\">\"name\"</span>:<span class=\"number\">1</span>, <span class=\"string\">\"age\"</span>:<span class=\"number\">-1</span>&#125;)</div><div class=\"line\">数字<span class=\"number\">1</span>表示name键的索引按升序存储，<span class=\"number\">-1</span>表示age键的索引按照降序方式存储。</div><div class=\"line\">db.test.ensureIndex(&#123;<span class=\"string\">\"id\"</span>:<span class=\"number\">1</span>&#125;,&#123;<span class=\"string\">\"unique\"</span>:<span class=\"literal\">true</span>&#125;) 创建唯一索引，插入重复的值将会报错</div><div class=\"line\">如果字段被添加了索引，有可能在插入数据的时候报索引重复的错误，这时候先检查表创建的索引，如果不需要请手动删除索引</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"mongo_配置文件：待补充\">mongo 配置文件：待补充</h6><h6 id=\"连接\">连接</h6><blockquote>\n<p>express 4.x版本有些改动</p>\n<ul>\n<li>初始化程序 express -e test 创建test工程</li>\n<li>进入package.json 增加<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">\"connect-mongo\"</span>: <span class=\"string\">\"*\"</span>,</div><div class=\"line\"><span class=\"string\">\"mongodb\"</span>: <span class=\"string\">\"*\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>执行sudo npm install</li>\n<li><p>根目录创建settings.js 存放数据库配置基本信息</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">cookieSecret</span>: <span class=\"string\">'webApp'</span>,</div><div class=\"line\">    <span class=\"attr\">db</span>: <span class=\"string\">'webApp'</span>,</div><div class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">'127.0.0.1'</span>,</div><div class=\"line\">    <span class=\"attr\">port</span>: <span class=\"number\">27017</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建models文件夹，增加db.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> settings = <span class=\"built_in\">require</span>(<span class=\"string\">'../settings'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> mongodb = <span class=\"built_in\">require</span>(<span class=\"string\">'mongodb'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> Db = mongodb.Db;</div><div class=\"line\"><span class=\"keyword\">var</span> Connection = mongodb.Connection;</div><div class=\"line\"><span class=\"keyword\">var</span> Server = mongodb.Server;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"keyword\">new</span> Db(settings.db, <span class=\"keyword\">new</span> Server(settings.host, settings.port, &#123;</div><div class=\"line\">    <span class=\"attr\">auto_reconnect</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;), &#123;</div><div class=\"line\">    <span class=\"attr\">safe</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>在models文件夹下 创建实体类info.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mongodb = <span class=\"built_in\">require</span>(<span class=\"string\">'./db'</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Info</span>(<span class=\"params\">info</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.info = info.info;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = Info;</div><div class=\"line\">Info.prototype.save = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">save</span>(<span class=\"params\">callback</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> info = &#123;</div><div class=\"line\">        <span class=\"attr\">id</span>: (<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).getTime(),</div><div class=\"line\">        <span class=\"attr\">info</span>: <span class=\"keyword\">this</span>.info</div><div class=\"line\">    &#125;;</div><div class=\"line\">    mongodb.open(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> callback(err);</div><div class=\"line\">        &#125;</div><div class=\"line\">        db.collection(<span class=\"string\">'infoTable'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, collection</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">                mongodb.close();</div><div class=\"line\">                <span class=\"keyword\">return</span> callback(err);</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(info);</div><div class=\"line\">            collection.insert(info, &#123;</div><div class=\"line\">                <span class=\"attr\">safe</span>: <span class=\"literal\">true</span></div><div class=\"line\">            &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, info</span>) </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (info) &#123;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(<span class=\"string\">'ok'</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">                    mongodb.close();</div><div class=\"line\">                    callback(err, info);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div><div class=\"line\">Info.prototype.get = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\">userinfo, callback</span>) </span>&#123;</div><div class=\"line\">    mongodb.open(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, db</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">            <span class=\"keyword\">return</span> callback(err);</div><div class=\"line\">        &#125;</div><div class=\"line\">        db.collection(<span class=\"string\">'infoTable'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, collection</span>) </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (err) &#123;</div><div class=\"line\">                <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">                mongodb.close();</div><div class=\"line\">                <span class=\"keyword\">return</span> callback(err);</div><div class=\"line\">            &#125;</div><div class=\"line\">            collection.findOne(&#123;</div><div class=\"line\">                <span class=\"attr\">info</span>: userinfo</div><div class=\"line\">            &#125;, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, info</span>) </span>&#123;</div><div class=\"line\">                mongodb.close();</div><div class=\"line\">                <span class=\"keyword\">if</span> (info) &#123;</div><div class=\"line\">                    <span class=\"keyword\">var</span> info = <span class=\"keyword\">new</span> Info(info);</div><div class=\"line\">                    <span class=\"built_in\">console</span>.log(info);</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    callback(err, <span class=\"literal\">null</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在routes文件夹下添加 post.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> express = <span class=\"built_in\">require</span>(<span class=\"string\">'express'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> router = express.Router();</div><div class=\"line\"><span class=\"keyword\">var</span> Info = <span class=\"built_in\">require</span>(<span class=\"string\">'../models/info.js'</span>)</div><div class=\"line\"></div><div class=\"line\">router.post(<span class=\"string\">'/'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">req, res, next</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> newInfo = <span class=\"keyword\">new</span> info(&#123;</div><div class=\"line\">        <span class=\"attr\">name</span>: req.body.Info || <span class=\"string\">'test'</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    newInfo.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'success'</span>);</div><div class=\"line\">            res.redirect(<span class=\"string\">'/'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'error'</span>,err);</div><div class=\"line\">        <span class=\"keyword\">return</span> res.redirect(<span class=\"string\">'/'</span>);</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">module</span>.exports = router;</div></pre></td></tr></table></figure>\n</li>\n<li><p>最后一步，在app.js中添加路由</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">var post = <span class=\"built_in\">require</span>(<span class=\"string\">'./routes/post'</span>);</div><div class=\"line\">...</div><div class=\"line\">...</div><div class=\"line\">app.use(<span class=\"string\">'/post'</span>, post);</div></pre></td></tr></table></figure></li>\n</ul>"},{"title":"从零开始Python-01","date":"2015-10-06T02:50:37.000Z","toc":true,"_content":"##### 数据类型\n>计算机不但可以处理数值，还可以处理文本，图形，音频，视频，网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中有如下几种类型：\n<!--more-->\n* 整数\n\t0 －1 900等\n* 浮点数\n\t3.14 -5.5 1.1e9 2.5e-3等\n* 字符串\n\t''或者\"\"括起来的\n* 布尔值\n\tTrue或者False\n* 空值\n\tNone\n\n区分大小写","source":"_posts/从零开始Python-01.md","raw":"title: 从零开始Python-01\ndate: 2015-10-06 10:50:37\ntags: python\ntoc: true\n---\n##### 数据类型\n>计算机不但可以处理数值，还可以处理文本，图形，音频，视频，网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中有如下几种类型：\n<!--more-->\n* 整数\n\t0 －1 900等\n* 浮点数\n\t3.14 -5.5 1.1e9 2.5e-3等\n* 字符串\n\t''或者\"\"括起来的\n* 布尔值\n\tTrue或者False\n* 空值\n\tNone\n\n区分大小写","slug":"从零开始Python-01","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhpt002tt0yjeu28wsvw","content":"<h5 id=\"数据类型\">数据类型</h5><blockquote>\n<p>计算机不但可以处理数值，还可以处理文本，图形，音频，视频，网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中有如下几种类型：<br><a id=\"more\"></a></p>\n<ul>\n<li>整数<br>  0 －1 900等</li>\n<li>浮点数<br>  3.14 -5.5 1.1e9 2.5e-3等</li>\n<li>字符串<br>  ‘’或者””括起来的</li>\n<li>布尔值<br>  True或者False</li>\n<li>空值<br>  None</li>\n</ul>\n</blockquote>\n<p>区分大小写</p>\n","excerpt":"<h5 id=\"数据类型\">数据类型</h5><blockquote>\n<p>计算机不但可以处理数值，还可以处理文本，图形，音频，视频，网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中有如下几种类型：<br>","more":"</p>\n<ul>\n<li>整数<br>  0 －1 900等</li>\n<li>浮点数<br>  3.14 -5.5 1.1e9 2.5e-3等</li>\n<li>字符串<br>  ‘’或者””括起来的</li>\n<li>布尔值<br>  True或者False</li>\n<li>空值<br>  None</li>\n</ul>\n</blockquote>\n<p>区分大小写</p>"},{"title":"从零开始Python-02","date":"2015-10-07T03:10:30.000Z","toc":true,"_content":"##### print语句\n>输出语句\n```python\nprint 'hello world'\nprint 'hello','world'\nprint 100\nprint 100+200\n```\n<!--more-->\n\n##### 注释\n>使用#开头\n```python\nprint 'how' #这是个注释\n```\n\n##### 变量\n>大小写英文，数字和_的组合，而且不能用数字开头\n```python\na=1\na_123='qwe'\n```\n\n##### 变量类型不固定的动态语言\n```python\na='ABC'\nb=a\na='XYZ'\nprint b  #'ABC'\n```\n\n##### 定义字符串\n```python\n‘’ “” \\ 转义，后面的字符不做解析\n'I\\'m a jser.\\\"OK\\\"'\nraw字符串，在字符串前面加r,里面的字符不做转义\n‘’’里面放多行字符串’’’，前面也可以加r\n```\n\n##### Unicode字符串\n```python\nu'中文'\nu'''中文'''\nur'''中文 \"韩文\"各种显示'''\n保存文件的时候，可以在第一行添加 ‘# -- coding: utf-8 --‘ 告诉解析起，用utf-8编码读取\n```\n\n##### 整数和浮点数\n>四则运算，整数的运算永远是精确的，浮点数的计算可能不是精确的，计算机二进制处理，在除法运算中 / 取模，% 取余。\n```python\n11/4 #2\n11.0/4 #2.75\n```\n\n##### 布尔类型\n>* and两个都是True,计算结果为True\n* or 一个为True结果就是True,两个都是False结果为False\n* not True变成False,False变成True\n* python把0 空字符串’’ 和None看成False,其他数值和非空字符串都看成True.\n\n##### 短路计算\n>* 计算a and b的时候，如果a是False，根据与运算法则，整个结果都是False，则返回False，如果a为True，则返回b\n* 计算a or b的时候，如果a是True，返回True，因此返回a，如果a为False，则返回b","source":"_posts/从零开始Python-02.md","raw":"title: 从零开始Python-02\ndate: 2015-10-07 11:10:30\ntags: python\ntoc: true\n---\n##### print语句\n>输出语句\n```python\nprint 'hello world'\nprint 'hello','world'\nprint 100\nprint 100+200\n```\n<!--more-->\n\n##### 注释\n>使用#开头\n```python\nprint 'how' #这是个注释\n```\n\n##### 变量\n>大小写英文，数字和_的组合，而且不能用数字开头\n```python\na=1\na_123='qwe'\n```\n\n##### 变量类型不固定的动态语言\n```python\na='ABC'\nb=a\na='XYZ'\nprint b  #'ABC'\n```\n\n##### 定义字符串\n```python\n‘’ “” \\ 转义，后面的字符不做解析\n'I\\'m a jser.\\\"OK\\\"'\nraw字符串，在字符串前面加r,里面的字符不做转义\n‘’’里面放多行字符串’’’，前面也可以加r\n```\n\n##### Unicode字符串\n```python\nu'中文'\nu'''中文'''\nur'''中文 \"韩文\"各种显示'''\n保存文件的时候，可以在第一行添加 ‘# -- coding: utf-8 --‘ 告诉解析起，用utf-8编码读取\n```\n\n##### 整数和浮点数\n>四则运算，整数的运算永远是精确的，浮点数的计算可能不是精确的，计算机二进制处理，在除法运算中 / 取模，% 取余。\n```python\n11/4 #2\n11.0/4 #2.75\n```\n\n##### 布尔类型\n>* and两个都是True,计算结果为True\n* or 一个为True结果就是True,两个都是False结果为False\n* not True变成False,False变成True\n* python把0 空字符串’’ 和None看成False,其他数值和非空字符串都看成True.\n\n##### 短路计算\n>* 计算a and b的时候，如果a是False，根据与运算法则，整个结果都是False，则返回False，如果a为True，则返回b\n* 计算a or b的时候，如果a是True，返回True，因此返回a，如果a为False，则返回b","slug":"从零开始Python-02","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhpv002vt0yj7qpke21l","content":"<h5 id=\"print语句\">print语句</h5><blockquote>\n<p>输出语句<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'hello world'</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'hello'</span>,<span class=\"string\">'world'</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"number\">100</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"number\">100</span>+<span class=\"number\">200</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<h5 id=\"注释\">注释</h5><blockquote>\n<p>使用#开头<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'how'</span> <span class=\"comment\">#这是个注释</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"变量\">变量</h5><blockquote>\n<p>大小写英文，数字和_的组合，而且不能用数字开头<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=<span class=\"number\">1</span></div><div class=\"line\">a_123=<span class=\"string\">'qwe'</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"变量类型不固定的动态语言\">变量类型不固定的动态语言</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=<span class=\"string\">'ABC'</span></div><div class=\"line\">b=a</div><div class=\"line\">a=<span class=\"string\">'XYZ'</span></div><div class=\"line\"><span class=\"keyword\">print</span> b  <span class=\"comment\">#'ABC'</span></div></pre></td></tr></table></figure>\n<h5 id=\"定义字符串\">定义字符串</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">‘’ “” \\ 转义，后面的字符不做解析</div><div class=\"line\"><span class=\"string\">'I\\'m a jser.\\\"OK\\\"'</span></div><div class=\"line\">raw字符串，在字符串前面加r,里面的字符不做转义</div><div class=\"line\">‘’’里面放多行字符串’’’，前面也可以加r</div></pre></td></tr></table></figure>\n<h5 id=\"Unicode字符串\">Unicode字符串</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">u'中文'</span></div><div class=\"line\"><span class=\"string\">u'''中文'''</span></div><div class=\"line\"><span class=\"string\">ur'''中文 \"韩文\"各种显示'''</span></div><div class=\"line\">保存文件的时候，可以在第一行添加 ‘<span class=\"comment\"># -- coding: utf-8 --‘ 告诉解析起，用utf-8编码读取</span></div></pre></td></tr></table></figure>\n<h5 id=\"整数和浮点数\">整数和浮点数</h5><blockquote>\n<p>四则运算，整数的运算永远是精确的，浮点数的计算可能不是精确的，计算机二进制处理，在除法运算中 / 取模，% 取余。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">11</span>/<span class=\"number\">4</span> <span class=\"comment\">#2</span></div><div class=\"line\"><span class=\"number\">11.0</span>/<span class=\"number\">4</span> <span class=\"comment\">#2.75</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"布尔类型\">布尔类型</h5><blockquote>\n<ul>\n<li>and两个都是True,计算结果为True</li>\n<li>or 一个为True结果就是True,两个都是False结果为False</li>\n<li>not True变成False,False变成True</li>\n<li>python把0 空字符串’’ 和None看成False,其他数值和非空字符串都看成True.</li>\n</ul>\n</blockquote>\n<h5 id=\"短路计算\">短路计算</h5><blockquote>\n<ul>\n<li>计算a and b的时候，如果a是False，根据与运算法则，整个结果都是False，则返回False，如果a为True，则返回b</li>\n<li>计算a or b的时候，如果a是True，返回True，因此返回a，如果a为False，则返回b</li>\n</ul>\n</blockquote>\n","excerpt":"<h5 id=\"print语句\">print语句</h5><blockquote>\n<p>输出语句<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'hello world'</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'hello'</span>,<span class=\"string\">'world'</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"number\">100</span></div><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"number\">100</span>+<span class=\"number\">200</span></div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<h5 id=\"注释\">注释</h5><blockquote>\n<p>使用#开头<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'how'</span> <span class=\"comment\">#这是个注释</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"变量\">变量</h5><blockquote>\n<p>大小写英文，数字和_的组合，而且不能用数字开头<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=<span class=\"number\">1</span></div><div class=\"line\">a_123=<span class=\"string\">'qwe'</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"变量类型不固定的动态语言\">变量类型不固定的动态语言</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">a=<span class=\"string\">'ABC'</span></div><div class=\"line\">b=a</div><div class=\"line\">a=<span class=\"string\">'XYZ'</span></div><div class=\"line\"><span class=\"keyword\">print</span> b  <span class=\"comment\">#'ABC'</span></div></pre></td></tr></table></figure>\n<h5 id=\"定义字符串\">定义字符串</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">‘’ “” \\ 转义，后面的字符不做解析</div><div class=\"line\"><span class=\"string\">'I\\'m a jser.\\\"OK\\\"'</span></div><div class=\"line\">raw字符串，在字符串前面加r,里面的字符不做转义</div><div class=\"line\">‘’’里面放多行字符串’’’，前面也可以加r</div></pre></td></tr></table></figure>\n<h5 id=\"Unicode字符串\">Unicode字符串</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">u'中文'</span></div><div class=\"line\"><span class=\"string\">u'''中文'''</span></div><div class=\"line\"><span class=\"string\">ur'''中文 \"韩文\"各种显示'''</span></div><div class=\"line\">保存文件的时候，可以在第一行添加 ‘<span class=\"comment\"># -- coding: utf-8 --‘ 告诉解析起，用utf-8编码读取</span></div></pre></td></tr></table></figure>\n<h5 id=\"整数和浮点数\">整数和浮点数</h5><blockquote>\n<p>四则运算，整数的运算永远是精确的，浮点数的计算可能不是精确的，计算机二进制处理，在除法运算中 / 取模，% 取余。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"number\">11</span>/<span class=\"number\">4</span> <span class=\"comment\">#2</span></div><div class=\"line\"><span class=\"number\">11.0</span>/<span class=\"number\">4</span> <span class=\"comment\">#2.75</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"布尔类型\">布尔类型</h5><blockquote>\n<ul>\n<li>and两个都是True,计算结果为True</li>\n<li>or 一个为True结果就是True,两个都是False结果为False</li>\n<li>not True变成False,False变成True</li>\n<li>python把0 空字符串’’ 和None看成False,其他数值和非空字符串都看成True.</li>\n</ul>\n</blockquote>\n<h5 id=\"短路计算\">短路计算</h5><blockquote>\n<ul>\n<li>计算a and b的时候，如果a是False，根据与运算法则，整个结果都是False，则返回False，如果a为True，则返回b</li>\n<li>计算a or b的时候，如果a是True，返回True，因此返回a，如果a为False，则返回b</li>\n</ul>\n</blockquote>"},{"title":"从零开始Python-03","date":"2015-10-08T07:14:09.000Z","toc":true,"_content":"##### list\n>数据类型的列表，有序集合，可以执行添加删除操作\n<!--more-->\n```python\nlist1 = ['1','qwe','asd1']\nlist1 # ['1','qwe','asd1']\n\nlist2 = [1,True,'123aS4'] #可以包含不同类型的元素\nlist2 # [1,True,'123aS4']\n\nlist3 = []  #空list\n\nlist2[0] # 1  按照索引访问\nlist[4] #报错，超出索引\n\nlist2[-1] # '123aS4' 倒序访问\nlist[-4] #报错，不存在\n```\n* append 追加到末尾\n* insert(index,item) 指定位置添加元素\n* pop() 删除最后一个元素\n* pop(index) 删除指定位置的元素\n* 替换元素 直接给特定位置元素赋值\n\n##### 切片\n>list切片，字符串切片\n```python\nx = [1,2,3,4,5,6]\nx[:3] #取前三个 索引为0,1,2的元素\nx[1:3] #从索引1开始到索引3结束，取两个元素\nx[:] #取所有元素，返回还是list\nx[::2] #每两个取1个\n#倒序\nx[-1:] #最后一个元素索引－1\n```\n```python\nx='asdfghjkl'\nx[:3]\nx[1:3]\nx[::2]\n```\n\n##### tuple\n>有序列表，元组，与list区别是，一旦创建就不能修改\n```python\ntuple1 = (1,'123',True)\ntuple1[1] # 1\ntuple1[-1] # True\n\n#单元素\ntuple2 = (1,) #如果不加 , 括号会被当作运算符去执行\ntuple2 # (1,)\n\ntuple1 # (1,'123',True) #加不加 , 输出结果都一样\n\n#tuple中的元素包含数组，就变成了可变的，数组的内容可变\nx1 = (1,2,[3,4])\nx2 = x1[2]\nx[1] = 'a'\nx[2] = 'b'\n\nprint x1 # (1,2,['a','b'])\n```","source":"_posts/从零开始Python-03.md","raw":"title: 从零开始Python-03\ndate: 2015-10-08 15:14:09\ntags: python\ntoc: true\n---\n##### list\n>数据类型的列表，有序集合，可以执行添加删除操作\n<!--more-->\n```python\nlist1 = ['1','qwe','asd1']\nlist1 # ['1','qwe','asd1']\n\nlist2 = [1,True,'123aS4'] #可以包含不同类型的元素\nlist2 # [1,True,'123aS4']\n\nlist3 = []  #空list\n\nlist2[0] # 1  按照索引访问\nlist[4] #报错，超出索引\n\nlist2[-1] # '123aS4' 倒序访问\nlist[-4] #报错，不存在\n```\n* append 追加到末尾\n* insert(index,item) 指定位置添加元素\n* pop() 删除最后一个元素\n* pop(index) 删除指定位置的元素\n* 替换元素 直接给特定位置元素赋值\n\n##### 切片\n>list切片，字符串切片\n```python\nx = [1,2,3,4,5,6]\nx[:3] #取前三个 索引为0,1,2的元素\nx[1:3] #从索引1开始到索引3结束，取两个元素\nx[:] #取所有元素，返回还是list\nx[::2] #每两个取1个\n#倒序\nx[-1:] #最后一个元素索引－1\n```\n```python\nx='asdfghjkl'\nx[:3]\nx[1:3]\nx[::2]\n```\n\n##### tuple\n>有序列表，元组，与list区别是，一旦创建就不能修改\n```python\ntuple1 = (1,'123',True)\ntuple1[1] # 1\ntuple1[-1] # True\n\n#单元素\ntuple2 = (1,) #如果不加 , 括号会被当作运算符去执行\ntuple2 # (1,)\n\ntuple1 # (1,'123',True) #加不加 , 输出结果都一样\n\n#tuple中的元素包含数组，就变成了可变的，数组的内容可变\nx1 = (1,2,[3,4])\nx2 = x1[2]\nx[1] = 'a'\nx[2] = 'b'\n\nprint x1 # (1,2,['a','b'])\n```","slug":"从零开始Python-03","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhpw002yt0yjo7sn7spw","content":"<h5 id=\"list\">list</h5><blockquote>\n<p>数据类型的列表，有序集合，可以执行添加删除操作<br><a id=\"more\"></a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">list1 = [<span class=\"string\">'1'</span>,<span class=\"string\">'qwe'</span>,<span class=\"string\">'asd1'</span>]</div><div class=\"line\">list1 <span class=\"comment\"># ['1','qwe','asd1']</span></div><div class=\"line\"></div><div class=\"line\">list2 = [<span class=\"number\">1</span>,<span class=\"keyword\">True</span>,<span class=\"string\">'123aS4'</span>] <span class=\"comment\">#可以包含不同类型的元素</span></div><div class=\"line\">list2 <span class=\"comment\"># [1,True,'123aS4']</span></div><div class=\"line\"></div><div class=\"line\">list3 = []  <span class=\"comment\">#空list</span></div><div class=\"line\"></div><div class=\"line\">list2[<span class=\"number\">0</span>] <span class=\"comment\"># 1  按照索引访问</span></div><div class=\"line\">list[<span class=\"number\">4</span>] <span class=\"comment\">#报错，超出索引</span></div><div class=\"line\"></div><div class=\"line\">list2[<span class=\"number\">-1</span>] <span class=\"comment\"># '123aS4' 倒序访问</span></div><div class=\"line\">list[<span class=\"number\">-4</span>] <span class=\"comment\">#报错，不存在</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>append 追加到末尾</li>\n<li>insert(index,item) 指定位置添加元素</li>\n<li>pop() 删除最后一个元素</li>\n<li>pop(index) 删除指定位置的元素</li>\n<li>替换元素 直接给特定位置元素赋值</li>\n</ul>\n<h5 id=\"切片\">切片</h5><blockquote>\n<p>list切片，字符串切片<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</div><div class=\"line\">x[:<span class=\"number\">3</span>] <span class=\"comment\">#取前三个 索引为0,1,2的元素</span></div><div class=\"line\">x[<span class=\"number\">1</span>:<span class=\"number\">3</span>] <span class=\"comment\">#从索引1开始到索引3结束，取两个元素</span></div><div class=\"line\">x[:] <span class=\"comment\">#取所有元素，返回还是list</span></div><div class=\"line\">x[::<span class=\"number\">2</span>] <span class=\"comment\">#每两个取1个</span></div><div class=\"line\"><span class=\"comment\">#倒序</span></div><div class=\"line\">x[<span class=\"number\">-1</span>:] <span class=\"comment\">#最后一个元素索引－1</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">x=<span class=\"string\">'asdfghjkl'</span></div><div class=\"line\">x[:<span class=\"number\">3</span>]</div><div class=\"line\">x[<span class=\"number\">1</span>:<span class=\"number\">3</span>]</div><div class=\"line\">x[::<span class=\"number\">2</span>]</div></pre></td></tr></table></figure>\n<h5 id=\"tuple\">tuple</h5><blockquote>\n<p>有序列表，元组，与list区别是，一旦创建就不能修改<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">tuple1 = (<span class=\"number\">1</span>,<span class=\"string\">'123'</span>,<span class=\"keyword\">True</span>)</div><div class=\"line\">tuple1[<span class=\"number\">1</span>] <span class=\"comment\"># 1</span></div><div class=\"line\">tuple1[<span class=\"number\">-1</span>] <span class=\"comment\"># True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#单元素</span></div><div class=\"line\">tuple2 = (<span class=\"number\">1</span>,) <span class=\"comment\">#如果不加 , 括号会被当作运算符去执行</span></div><div class=\"line\">tuple2 <span class=\"comment\"># (1,)</span></div><div class=\"line\"></div><div class=\"line\">tuple1 <span class=\"comment\"># (1,'123',True) #加不加 , 输出结果都一样</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#tuple中的元素包含数组，就变成了可变的，数组的内容可变</span></div><div class=\"line\">x1 = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>])</div><div class=\"line\">x2 = x1[<span class=\"number\">2</span>]</div><div class=\"line\">x[<span class=\"number\">1</span>] = <span class=\"string\">'a'</span></div><div class=\"line\">x[<span class=\"number\">2</span>] = <span class=\"string\">'b'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> x1 <span class=\"comment\"># (1,2,['a','b'])</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n","excerpt":"<h5 id=\"list\">list</h5><blockquote>\n<p>数据类型的列表，有序集合，可以执行添加删除操作<br>","more":"<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">list1 = [<span class=\"string\">'1'</span>,<span class=\"string\">'qwe'</span>,<span class=\"string\">'asd1'</span>]</div><div class=\"line\">list1 <span class=\"comment\"># ['1','qwe','asd1']</span></div><div class=\"line\"></div><div class=\"line\">list2 = [<span class=\"number\">1</span>,<span class=\"keyword\">True</span>,<span class=\"string\">'123aS4'</span>] <span class=\"comment\">#可以包含不同类型的元素</span></div><div class=\"line\">list2 <span class=\"comment\"># [1,True,'123aS4']</span></div><div class=\"line\"></div><div class=\"line\">list3 = []  <span class=\"comment\">#空list</span></div><div class=\"line\"></div><div class=\"line\">list2[<span class=\"number\">0</span>] <span class=\"comment\"># 1  按照索引访问</span></div><div class=\"line\">list[<span class=\"number\">4</span>] <span class=\"comment\">#报错，超出索引</span></div><div class=\"line\"></div><div class=\"line\">list2[<span class=\"number\">-1</span>] <span class=\"comment\"># '123aS4' 倒序访问</span></div><div class=\"line\">list[<span class=\"number\">-4</span>] <span class=\"comment\">#报错，不存在</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>append 追加到末尾</li>\n<li>insert(index,item) 指定位置添加元素</li>\n<li>pop() 删除最后一个元素</li>\n<li>pop(index) 删除指定位置的元素</li>\n<li>替换元素 直接给特定位置元素赋值</li>\n</ul>\n<h5 id=\"切片\">切片</h5><blockquote>\n<p>list切片，字符串切片<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>]</div><div class=\"line\">x[:<span class=\"number\">3</span>] <span class=\"comment\">#取前三个 索引为0,1,2的元素</span></div><div class=\"line\">x[<span class=\"number\">1</span>:<span class=\"number\">3</span>] <span class=\"comment\">#从索引1开始到索引3结束，取两个元素</span></div><div class=\"line\">x[:] <span class=\"comment\">#取所有元素，返回还是list</span></div><div class=\"line\">x[::<span class=\"number\">2</span>] <span class=\"comment\">#每两个取1个</span></div><div class=\"line\"><span class=\"comment\">#倒序</span></div><div class=\"line\">x[<span class=\"number\">-1</span>:] <span class=\"comment\">#最后一个元素索引－1</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">x=<span class=\"string\">'asdfghjkl'</span></div><div class=\"line\">x[:<span class=\"number\">3</span>]</div><div class=\"line\">x[<span class=\"number\">1</span>:<span class=\"number\">3</span>]</div><div class=\"line\">x[::<span class=\"number\">2</span>]</div></pre></td></tr></table></figure>\n<h5 id=\"tuple\">tuple</h5><blockquote>\n<p>有序列表，元组，与list区别是，一旦创建就不能修改<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">tuple1 = (<span class=\"number\">1</span>,<span class=\"string\">'123'</span>,<span class=\"keyword\">True</span>)</div><div class=\"line\">tuple1[<span class=\"number\">1</span>] <span class=\"comment\"># 1</span></div><div class=\"line\">tuple1[<span class=\"number\">-1</span>] <span class=\"comment\"># True</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#单元素</span></div><div class=\"line\">tuple2 = (<span class=\"number\">1</span>,) <span class=\"comment\">#如果不加 , 括号会被当作运算符去执行</span></div><div class=\"line\">tuple2 <span class=\"comment\"># (1,)</span></div><div class=\"line\"></div><div class=\"line\">tuple1 <span class=\"comment\"># (1,'123',True) #加不加 , 输出结果都一样</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#tuple中的元素包含数组，就变成了可变的，数组的内容可变</span></div><div class=\"line\">x1 = (<span class=\"number\">1</span>,<span class=\"number\">2</span>,[<span class=\"number\">3</span>,<span class=\"number\">4</span>])</div><div class=\"line\">x2 = x1[<span class=\"number\">2</span>]</div><div class=\"line\">x[<span class=\"number\">1</span>] = <span class=\"string\">'a'</span></div><div class=\"line\">x[<span class=\"number\">2</span>] = <span class=\"string\">'b'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> x1 <span class=\"comment\"># (1,2,['a','b'])</span></div></pre></td></tr></table></figure></p>\n</blockquote>"},{"title":"从零开始Python-04","date":"2015-10-09T04:09:54.000Z","toc":true,"_content":"##### 控制语句\n###### if\n>条件判断，if条件为true就会执行分支语句\n<!--more-->\n```python\na = 2\nif a == 2:\n    print 'a:',a\n\n#四个空格缩进，具有相同缩进的代码就是一个代码块，退出缩进需要添加一行回车\n```\n###### if else\n>if True执行if代码块，否则执行else代码块\n```python\na = 2\nif a == 2:\n    print 'a 1:',a\n\nelse:\n    print 'a 2:',a\n    \n\na = 2\nif not a == 2:\n    print 'a 1:',a\n\nelse:\n    print 'a 2:',a\n```\n\n###### if elif else\n>if elif条件判断，符合执行，否则执行else\n```python\na = 2\nif a == 1:\n    print 'a 1:',a\n\nelif a == 2:\n    print 'a 2:',a\n\nelse:\n    print 'a 3:',a\n```\n\n###### for\n>list和tuple可以使用for循环，读取每个值\n```python\nx = ['a','b','c']\nfor i in x:\n    print i\n```\n\n###### while\n>根据表达式判断是否结束\n```python\ncount = 100\nindex = 0\nwhile index < count:\n    print index\n    index = index + 1\n```\n\n###### break\n>退出循环\n```python\nall = 0\nx = 1\nwhile True:\n    all = all + x\n    x = x + 1\n    if x > 55:\n        break\n\nprint all\n```\n\n###### continue\n>跳过本次循环，继续执行下一次循环\n```python\nall = [11,22,33,44,55,66,77,88,99]\nsum\nfor x in all:\n    if x < 50:\n        continue\n\n    sum = sum + x\n```\n\n###### 嵌套循环\n>循环内部添加循环\n```python\nfor x in [1,2,3,4,5]:\n    for y in [6,7,8,9,10]:\n        print x+y\n```","source":"_posts/从零开始Python-04.md","raw":"title: 从零开始Python-04\ndate: 2015-10-09 12:09:54\ntags: python\ntoc: true\n---\n##### 控制语句\n###### if\n>条件判断，if条件为true就会执行分支语句\n<!--more-->\n```python\na = 2\nif a == 2:\n    print 'a:',a\n\n#四个空格缩进，具有相同缩进的代码就是一个代码块，退出缩进需要添加一行回车\n```\n###### if else\n>if True执行if代码块，否则执行else代码块\n```python\na = 2\nif a == 2:\n    print 'a 1:',a\n\nelse:\n    print 'a 2:',a\n    \n\na = 2\nif not a == 2:\n    print 'a 1:',a\n\nelse:\n    print 'a 2:',a\n```\n\n###### if elif else\n>if elif条件判断，符合执行，否则执行else\n```python\na = 2\nif a == 1:\n    print 'a 1:',a\n\nelif a == 2:\n    print 'a 2:',a\n\nelse:\n    print 'a 3:',a\n```\n\n###### for\n>list和tuple可以使用for循环，读取每个值\n```python\nx = ['a','b','c']\nfor i in x:\n    print i\n```\n\n###### while\n>根据表达式判断是否结束\n```python\ncount = 100\nindex = 0\nwhile index < count:\n    print index\n    index = index + 1\n```\n\n###### break\n>退出循环\n```python\nall = 0\nx = 1\nwhile True:\n    all = all + x\n    x = x + 1\n    if x > 55:\n        break\n\nprint all\n```\n\n###### continue\n>跳过本次循环，继续执行下一次循环\n```python\nall = [11,22,33,44,55,66,77,88,99]\nsum\nfor x in all:\n    if x < 50:\n        continue\n\n    sum = sum + x\n```\n\n###### 嵌套循环\n>循环内部添加循环\n```python\nfor x in [1,2,3,4,5]:\n    for y in [6,7,8,9,10]:\n        print x+y\n```","slug":"从零开始Python-04","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhpx0030t0yj25gibdmh","content":"<h5 id=\"控制语句\">控制语句</h5><h6 id=\"if\">if</h6><blockquote>\n<p>条件判断，if条件为true就会执行分支语句<br><a id=\"more\"></a><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">if</span> a == <span class=\"number\">2</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a:'</span>,a</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#四个空格缩进，具有相同缩进的代码就是一个代码块，退出缩进需要添加一行回车</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"if_else\">if else</h6><blockquote>\n<p>if True执行if代码块，否则执行else代码块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">if</span> a == <span class=\"number\">2</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a 1:'</span>,a</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a 2:'</span>,a</div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">a = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> a == <span class=\"number\">2</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a 1:'</span>,a</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a 2:'</span>,a</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"if_elif_else\">if elif else</h6><blockquote>\n<p>if elif条件判断，符合执行，否则执行else<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">if</span> a == <span class=\"number\">1</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a 1:'</span>,a</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">elif</span> a == <span class=\"number\">2</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a 2:'</span>,a</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a 3:'</span>,a</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"for\">for</h6><blockquote>\n<p>list和tuple可以使用for循环，读取每个值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x:</div><div class=\"line\">    <span class=\"keyword\">print</span> i</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"while\">while</h6><blockquote>\n<p>根据表达式判断是否结束<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">count = <span class=\"number\">100</span></div><div class=\"line\">index = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">while</span> index &lt; count:</div><div class=\"line\">    <span class=\"keyword\">print</span> index</div><div class=\"line\">    index = index + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"break\">break</h6><blockquote>\n<p>退出循环<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">all = <span class=\"number\">0</span></div><div class=\"line\">x = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">    all = all + x</div><div class=\"line\">    x = x + <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">55</span>:</div><div class=\"line\">        <span class=\"keyword\">break</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> all</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"continue\">continue</h6><blockquote>\n<p>跳过本次循环，继续执行下一次循环<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">all = [<span class=\"number\">11</span>,<span class=\"number\">22</span>,<span class=\"number\">33</span>,<span class=\"number\">44</span>,<span class=\"number\">55</span>,<span class=\"number\">66</span>,<span class=\"number\">77</span>,<span class=\"number\">88</span>,<span class=\"number\">99</span>]</div><div class=\"line\">sum</div><div class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> all:</div><div class=\"line\">    <span class=\"keyword\">if</span> x &lt; <span class=\"number\">50</span>:</div><div class=\"line\">        <span class=\"keyword\">continue</span></div><div class=\"line\"></div><div class=\"line\">    sum = sum + x</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"嵌套循环\">嵌套循环</h6><blockquote>\n<p>循环内部添加循环<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]:</div><div class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> [<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]:</div><div class=\"line\">        <span class=\"keyword\">print</span> x+y</div></pre></td></tr></table></figure></p>\n</blockquote>\n","excerpt":"<h5 id=\"控制语句\">控制语句</h5><h6 id=\"if\">if</h6><blockquote>\n<p>条件判断，if条件为true就会执行分支语句<br>","more":"<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">if</span> a == <span class=\"number\">2</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a:'</span>,a</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#四个空格缩进，具有相同缩进的代码就是一个代码块，退出缩进需要添加一行回车</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"if_else\">if else</h6><blockquote>\n<p>if True执行if代码块，否则执行else代码块<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">if</span> a == <span class=\"number\">2</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a 1:'</span>,a</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a 2:'</span>,a</div><div class=\"line\">    </div><div class=\"line\"></div><div class=\"line\">a = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> a == <span class=\"number\">2</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a 1:'</span>,a</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a 2:'</span>,a</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"if_elif_else\">if elif else</h6><blockquote>\n<p>if elif条件判断，符合执行，否则执行else<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">a = <span class=\"number\">2</span></div><div class=\"line\"><span class=\"keyword\">if</span> a == <span class=\"number\">1</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a 1:'</span>,a</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">elif</span> a == <span class=\"number\">2</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a 2:'</span>,a</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">else</span>:</div><div class=\"line\">    <span class=\"keyword\">print</span> <span class=\"string\">'a 3:'</span>,a</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"for\">for</h6><blockquote>\n<p>list和tuple可以使用for循环，读取每个值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = [<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x:</div><div class=\"line\">    <span class=\"keyword\">print</span> i</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"while\">while</h6><blockquote>\n<p>根据表达式判断是否结束<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">count = <span class=\"number\">100</span></div><div class=\"line\">index = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">while</span> index &lt; count:</div><div class=\"line\">    <span class=\"keyword\">print</span> index</div><div class=\"line\">    index = index + <span class=\"number\">1</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"break\">break</h6><blockquote>\n<p>退出循环<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">all = <span class=\"number\">0</span></div><div class=\"line\">x = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">while</span> <span class=\"keyword\">True</span>:</div><div class=\"line\">    all = all + x</div><div class=\"line\">    x = x + <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">if</span> x &gt; <span class=\"number\">55</span>:</div><div class=\"line\">        <span class=\"keyword\">break</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> all</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"continue\">continue</h6><blockquote>\n<p>跳过本次循环，继续执行下一次循环<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">all = [<span class=\"number\">11</span>,<span class=\"number\">22</span>,<span class=\"number\">33</span>,<span class=\"number\">44</span>,<span class=\"number\">55</span>,<span class=\"number\">66</span>,<span class=\"number\">77</span>,<span class=\"number\">88</span>,<span class=\"number\">99</span>]</div><div class=\"line\">sum</div><div class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> all:</div><div class=\"line\">    <span class=\"keyword\">if</span> x &lt; <span class=\"number\">50</span>:</div><div class=\"line\">        <span class=\"keyword\">continue</span></div><div class=\"line\"></div><div class=\"line\">    sum = sum + x</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"嵌套循环\">嵌套循环</h6><blockquote>\n<p>循环内部添加循环<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]:</div><div class=\"line\">    <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> [<span class=\"number\">6</span>,<span class=\"number\">7</span>,<span class=\"number\">8</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>]:</div><div class=\"line\">        <span class=\"keyword\">print</span> x+y</div></pre></td></tr></table></figure></p>\n</blockquote>"},{"title":"从零开始Python-05","date":"2015-10-10T03:12:24.000Z","toc":true,"_content":"##### dict\n>键值对 字典\n```python\nx = {'a':1,'b':2}\nlen(x) #集合大小\nprint x['a'] # 1\n```\n<!--more-->\n* key value形式，通过key查找\n* 通过key去访问value，如果key不存在就报错，为了避免报错，可以先判断\n```python\nif 'a' in x:\n    print x['a']\n```\n* 使用get方法，在key不存在的时候返回None\n```python\nprint x.get('a') # 1\n```\n* 查找速度快，但是消耗内存大，list占用内存小，查找速度慢\n* key不能重复\n* 存储没有顺序\n* key不可变\n* 增加一个元素,如果key已经存在则覆盖值\n```python\nx['c'] = 3\n```\n* 遍历for in\n```python\nfor i in x:\n    print i\n    print x[i]\n```\n\n##### set\n\n* 建立一组key,key永远不会重复，无序的，元素不能改变\n```python\nx = set(['a','b','c','c'])\n\nprint x # set(['a','c','b'])\n\n#访问\n'a' in x # True\n```\n* 使用for in遍历\n* 更新set,add()添加，如果已经存在不会报错，remove()移除，如果不存在报错","source":"_posts/从零开始Python-05.md","raw":"title: 从零开始Python-05\ndate: 2015-10-10 11:12:24\ntags: python\ntoc: true\n---\n##### dict\n>键值对 字典\n```python\nx = {'a':1,'b':2}\nlen(x) #集合大小\nprint x['a'] # 1\n```\n<!--more-->\n* key value形式，通过key查找\n* 通过key去访问value，如果key不存在就报错，为了避免报错，可以先判断\n```python\nif 'a' in x:\n    print x['a']\n```\n* 使用get方法，在key不存在的时候返回None\n```python\nprint x.get('a') # 1\n```\n* 查找速度快，但是消耗内存大，list占用内存小，查找速度慢\n* key不能重复\n* 存储没有顺序\n* key不可变\n* 增加一个元素,如果key已经存在则覆盖值\n```python\nx['c'] = 3\n```\n* 遍历for in\n```python\nfor i in x:\n    print i\n    print x[i]\n```\n\n##### set\n\n* 建立一组key,key永远不会重复，无序的，元素不能改变\n```python\nx = set(['a','b','c','c'])\n\nprint x # set(['a','c','b'])\n\n#访问\n'a' in x # True\n```\n* 使用for in遍历\n* 更新set,add()添加，如果已经存在不会报错，remove()移除，如果不存在报错","slug":"从零开始Python-05","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhpy0032t0yjh4wk7ssr","content":"<h5 id=\"dict\">dict</h5><blockquote>\n<p>键值对 字典<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>&#125;</div><div class=\"line\">len(x) <span class=\"comment\">#集合大小</span></div><div class=\"line\"><span class=\"keyword\">print</span> x[<span class=\"string\">'a'</span>] <span class=\"comment\"># 1</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<ul>\n<li>key value形式，通过key查找</li>\n<li><p>通过key去访问value，如果key不存在就报错，为了避免报错，可以先判断</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">'a'</span> <span class=\"keyword\">in</span> x:</div><div class=\"line\">    <span class=\"keyword\">print</span> x[<span class=\"string\">'a'</span>]</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用get方法，在key不存在的时候返回None</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> x.get(<span class=\"string\">'a'</span>) <span class=\"comment\"># 1</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>查找速度快，但是消耗内存大，list占用内存小，查找速度慢</p>\n</li>\n<li>key不能重复</li>\n<li>存储没有顺序</li>\n<li>key不可变</li>\n<li><p>增加一个元素,如果key已经存在则覆盖值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">x[<span class=\"string\">'c'</span>] = <span class=\"number\">3</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>遍历for in</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x:</div><div class=\"line\">    <span class=\"keyword\">print</span> i</div><div class=\"line\">    <span class=\"keyword\">print</span> x[i]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"set\">set</h5><ul>\n<li><p>建立一组key,key永远不会重复，无序的，元素不能改变</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = set([<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'c'</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> x <span class=\"comment\"># set(['a','c','b'])</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#访问</span></div><div class=\"line\"><span class=\"string\">'a'</span> <span class=\"keyword\">in</span> x <span class=\"comment\"># True</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>使用for in遍历</p>\n</li>\n<li>更新set,add()添加，如果已经存在不会报错，remove()移除，如果不存在报错</li>\n</ul>\n","excerpt":"<h5 id=\"dict\">dict</h5><blockquote>\n<p>键值对 字典<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>&#125;</div><div class=\"line\">len(x) <span class=\"comment\">#集合大小</span></div><div class=\"line\"><span class=\"keyword\">print</span> x[<span class=\"string\">'a'</span>] <span class=\"comment\"># 1</span></div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<ul>\n<li>key value形式，通过key查找</li>\n<li><p>通过key去访问value，如果key不存在就报错，为了避免报错，可以先判断</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">'a'</span> <span class=\"keyword\">in</span> x:</div><div class=\"line\">    <span class=\"keyword\">print</span> x[<span class=\"string\">'a'</span>]</div></pre></td></tr></table></figure>\n</li>\n<li><p>使用get方法，在key不存在的时候返回None</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">print</span> x.get(<span class=\"string\">'a'</span>) <span class=\"comment\"># 1</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>查找速度快，但是消耗内存大，list占用内存小，查找速度慢</p>\n</li>\n<li>key不能重复</li>\n<li>存储没有顺序</li>\n<li>key不可变</li>\n<li><p>增加一个元素,如果key已经存在则覆盖值</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">x[<span class=\"string\">'c'</span>] = <span class=\"number\">3</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>遍历for in</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x:</div><div class=\"line\">    <span class=\"keyword\">print</span> i</div><div class=\"line\">    <span class=\"keyword\">print</span> x[i]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"set\">set</h5><ul>\n<li><p>建立一组key,key永远不会重复，无序的，元素不能改变</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = set([<span class=\"string\">'a'</span>,<span class=\"string\">'b'</span>,<span class=\"string\">'c'</span>,<span class=\"string\">'c'</span>])</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">print</span> x <span class=\"comment\"># set(['a','c','b'])</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#访问</span></div><div class=\"line\"><span class=\"string\">'a'</span> <span class=\"keyword\">in</span> x <span class=\"comment\"># True</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>使用for in遍历</p>\n</li>\n<li>更新set,add()添加，如果已经存在不会报错，remove()移除，如果不存在报错</li>\n</ul>"},{"title":"从零开始Python-06","date":"2015-10-11T13:11:24.000Z","toc":true,"_content":"##### 函数\n###### 内置函数\n> 可以引用math包，里面有很多数学函数\n<!--more-->\n`import math`\n* abs(x)\n```python\nabs(-1)\nabs(11)\n```\n* cmp(x,y)\n```python\ncmp(1,2) #-1\ncmp(1,-1) #1\ncmp(1,1) #0\n```\n* int(x)\n```python\nint('111') #111\nint('1.11') #1\n```\n* str(x)\n```python\nstr(111) #'111'\n```\n\n###### 编写函数\n>使用def语句\n```python\ndef myFuc(a):\n    return a+'...ok'\n```\n如果没有返回结果，函数也会返回None,return None可以简写为return\n\n###### 返回多个值\n```python\ndef myFuc(x,y):\n    xx = x+1\n    yy = y+1\n    return xx,yy\n\na,b = myFuc(1,2) #2,3\n```\n实际返回的是一个tuple,由于是()包着的，所以从语法上讲可以省略括号,多个变量可以同时接收一个tuple,按照对应的位置赋值\n\n###### 递归函数\n>自身调用自身的函数\n```python\ndef myFuc(x):\n    if x==1:\n        return 1\n\nreturn x * myFuc(x-1)\n```\n###### 默认参数\n```python\ndef myFuc(x,y=2):\n    return x*y\n```\n\n###### 可变参数\n```python\ndef muFuc(*args):\n    sum = 0\n    for x in args:\n        sum = sum+x\n    \n    return sum\n\n#args 看成tuple\n```","source":"_posts/从零开始Python-06.md","raw":"title: 从零开始Python-06\ndate: 2015-10-11 21:11:24\ntags: python\ntoc: true\n---\n##### 函数\n###### 内置函数\n> 可以引用math包，里面有很多数学函数\n<!--more-->\n`import math`\n* abs(x)\n```python\nabs(-1)\nabs(11)\n```\n* cmp(x,y)\n```python\ncmp(1,2) #-1\ncmp(1,-1) #1\ncmp(1,1) #0\n```\n* int(x)\n```python\nint('111') #111\nint('1.11') #1\n```\n* str(x)\n```python\nstr(111) #'111'\n```\n\n###### 编写函数\n>使用def语句\n```python\ndef myFuc(a):\n    return a+'...ok'\n```\n如果没有返回结果，函数也会返回None,return None可以简写为return\n\n###### 返回多个值\n```python\ndef myFuc(x,y):\n    xx = x+1\n    yy = y+1\n    return xx,yy\n\na,b = myFuc(1,2) #2,3\n```\n实际返回的是一个tuple,由于是()包着的，所以从语法上讲可以省略括号,多个变量可以同时接收一个tuple,按照对应的位置赋值\n\n###### 递归函数\n>自身调用自身的函数\n```python\ndef myFuc(x):\n    if x==1:\n        return 1\n\nreturn x * myFuc(x-1)\n```\n###### 默认参数\n```python\ndef myFuc(x,y=2):\n    return x*y\n```\n\n###### 可变参数\n```python\ndef muFuc(*args):\n    sum = 0\n    for x in args:\n        sum = sum+x\n    \n    return sum\n\n#args 看成tuple\n```","slug":"从零开始Python-06","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhpz0035t0yjeqnjxera","content":"<h5 id=\"函数\">函数</h5><h6 id=\"内置函数\">内置函数</h6><blockquote>\n<p>可以引用math包，里面有很多数学函数<br><a id=\"more\"></a><br><code>import math</code></p>\n<ul>\n<li>abs(x)<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">abs(<span class=\"number\">-1</span>)</div><div class=\"line\">abs(<span class=\"number\">11</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>cmp(x,y)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cmp(<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">#-1</span></div><div class=\"line\">cmp(<span class=\"number\">1</span>,<span class=\"number\">-1</span>) <span class=\"comment\">#1</span></div><div class=\"line\">cmp(<span class=\"number\">1</span>,<span class=\"number\">1</span>) <span class=\"comment\">#0</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>int(x)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">int(<span class=\"string\">'111'</span>) <span class=\"comment\">#111</span></div><div class=\"line\">int(<span class=\"string\">'1.11'</span>) <span class=\"comment\">#1</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>str(x)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">str(<span class=\"number\">111</span>) <span class=\"comment\">#'111'</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"编写函数\">编写函数</h6><blockquote>\n<p>使用def语句<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myFuc</span><span class=\"params\">(a)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> a+<span class=\"string\">'...ok'</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>如果没有返回结果，函数也会返回None,return None可以简写为return</p>\n<h6 id=\"返回多个值\">返回多个值</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myFuc</span><span class=\"params\">(x,y)</span>:</span></div><div class=\"line\">    xx = x+<span class=\"number\">1</span></div><div class=\"line\">    yy = y+<span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> xx,yy</div><div class=\"line\"></div><div class=\"line\">a,b = myFuc(<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">#2,3</span></div></pre></td></tr></table></figure>\n<p>实际返回的是一个tuple,由于是()包着的，所以从语法上讲可以省略括号,多个变量可以同时接收一个tuple,按照对应的位置赋值</p>\n<h6 id=\"递归函数\">递归函数</h6><blockquote>\n<p>自身调用自身的函数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myFuc</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> x==<span class=\"number\">1</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">return</span> x * myFuc(x<span class=\"number\">-1</span>)</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"默认参数\">默认参数</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myFuc</span><span class=\"params\">(x,y=<span class=\"number\">2</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> x*y</div></pre></td></tr></table></figure>\n<h6 id=\"可变参数\">可变参数</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">muFuc</span><span class=\"params\">(*args)</span>:</span></div><div class=\"line\">    sum = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> args:</div><div class=\"line\">        sum = sum+x</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> sum</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#args 看成tuple</span></div></pre></td></tr></table></figure>","excerpt":"<h5 id=\"函数\">函数</h5><h6 id=\"内置函数\">内置函数</h6><blockquote>\n<p>可以引用math包，里面有很多数学函数<br>","more":"<br><code>import math</code></p>\n<ul>\n<li>abs(x)<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">abs(<span class=\"number\">-1</span>)</div><div class=\"line\">abs(<span class=\"number\">11</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>cmp(x,y)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">cmp(<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">#-1</span></div><div class=\"line\">cmp(<span class=\"number\">1</span>,<span class=\"number\">-1</span>) <span class=\"comment\">#1</span></div><div class=\"line\">cmp(<span class=\"number\">1</span>,<span class=\"number\">1</span>) <span class=\"comment\">#0</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>int(x)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">int(<span class=\"string\">'111'</span>) <span class=\"comment\">#111</span></div><div class=\"line\">int(<span class=\"string\">'1.11'</span>) <span class=\"comment\">#1</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>str(x)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">str(<span class=\"number\">111</span>) <span class=\"comment\">#'111'</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h6 id=\"编写函数\">编写函数</h6><blockquote>\n<p>使用def语句<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myFuc</span><span class=\"params\">(a)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> a+<span class=\"string\">'...ok'</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>如果没有返回结果，函数也会返回None,return None可以简写为return</p>\n<h6 id=\"返回多个值\">返回多个值</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myFuc</span><span class=\"params\">(x,y)</span>:</span></div><div class=\"line\">    xx = x+<span class=\"number\">1</span></div><div class=\"line\">    yy = y+<span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">return</span> xx,yy</div><div class=\"line\"></div><div class=\"line\">a,b = myFuc(<span class=\"number\">1</span>,<span class=\"number\">2</span>) <span class=\"comment\">#2,3</span></div></pre></td></tr></table></figure>\n<p>实际返回的是一个tuple,由于是()包着的，所以从语法上讲可以省略括号,多个变量可以同时接收一个tuple,按照对应的位置赋值</p>\n<h6 id=\"递归函数\">递归函数</h6><blockquote>\n<p>自身调用自身的函数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myFuc</span><span class=\"params\">(x)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> x==<span class=\"number\">1</span>:</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">return</span> x * myFuc(x<span class=\"number\">-1</span>)</div></pre></td></tr></table></figure></p>\n</blockquote>\n<h6 id=\"默认参数\">默认参数</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myFuc</span><span class=\"params\">(x,y=<span class=\"number\">2</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">return</span> x*y</div></pre></td></tr></table></figure>\n<h6 id=\"可变参数\">可变参数</h6><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">muFuc</span><span class=\"params\">(*args)</span>:</span></div><div class=\"line\">    sum = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> args:</div><div class=\"line\">        sum = sum+x</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> sum</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#args 看成tuple</span></div></pre></td></tr></table></figure>"},{"title":"从零开始Python-07","date":"2015-10-12T01:12:10.000Z","toc":true,"_content":"##### 迭代\n>使用for in迭代\n```python\nx=['asd','zxc','123']\nfor i in x:\n    print i\n```\n<!--more-->\n\n##### 迭代索引\n```python\nx=['asd','zxc','123']\nfor k,v in x:\n    print k,'-',v\n```\n##### 迭代dict value\n>values方法,把dict转换成value的list\n```python\nx = {'a':1,'b':2}\nprint x.values()\n```\n* itervalues方法,不转换，迭代过程中依次取dict的value\n```python\nx = {'a':1,'b':2}\nprint x.itervalues()\n```\n\n##### 迭代dict key value\n```python\nx = {'a':1,'b':2}\nfor k,v in x.items():\n    print k,'-',v\n```\n* items，iteritems类似，把dict转换成 tuple的list\n\n##### 生成列表\n>range\n```python\nrange(1,100) #[1,2,3,...,100]\n\n[a+a for a in range(1,100)] # 1-100，每个数自身相加 [2,4,6,...,200]\n```\n##### 复杂表达式\n```python\nx = ['a':1,'b':2]\ntmpl=['<div>%s</div><div>%s</div>' (k,v) for k,v in x.iteritems()]\n```\n\n##### 条件过滤\n```python\n[a+a for a in range(1,100) if x > 50 ] # 1-100，每个数自身相加 [2,4,6,...,200]\n```\n\n##### 多层表达式\n```python\n[x+y for x in 'asd' for y in '123'] # ['a1','s2','d3']\n\nx=[]\nfor i in 'asd':\n    for j in '123':\n        x.append(i+j)\n```\n","source":"_posts/从零开始Python-07.md","raw":"title: 从零开始Python-07\ndate: 2015-10-12 09:12:10\ntags: python\ntoc: true\n---\n##### 迭代\n>使用for in迭代\n```python\nx=['asd','zxc','123']\nfor i in x:\n    print i\n```\n<!--more-->\n\n##### 迭代索引\n```python\nx=['asd','zxc','123']\nfor k,v in x:\n    print k,'-',v\n```\n##### 迭代dict value\n>values方法,把dict转换成value的list\n```python\nx = {'a':1,'b':2}\nprint x.values()\n```\n* itervalues方法,不转换，迭代过程中依次取dict的value\n```python\nx = {'a':1,'b':2}\nprint x.itervalues()\n```\n\n##### 迭代dict key value\n```python\nx = {'a':1,'b':2}\nfor k,v in x.items():\n    print k,'-',v\n```\n* items，iteritems类似，把dict转换成 tuple的list\n\n##### 生成列表\n>range\n```python\nrange(1,100) #[1,2,3,...,100]\n\n[a+a for a in range(1,100)] # 1-100，每个数自身相加 [2,4,6,...,200]\n```\n##### 复杂表达式\n```python\nx = ['a':1,'b':2]\ntmpl=['<div>%s</div><div>%s</div>' (k,v) for k,v in x.iteritems()]\n```\n\n##### 条件过滤\n```python\n[a+a for a in range(1,100) if x > 50 ] # 1-100，每个数自身相加 [2,4,6,...,200]\n```\n\n##### 多层表达式\n```python\n[x+y for x in 'asd' for y in '123'] # ['a1','s2','d3']\n\nx=[]\nfor i in 'asd':\n    for j in '123':\n        x.append(i+j)\n```\n","slug":"从零开始Python-07","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhq00037t0yjsybshhj8","content":"<h5 id=\"迭代\">迭代</h5><blockquote>\n<p>使用for in迭代<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">x=[<span class=\"string\">'asd'</span>,<span class=\"string\">'zxc'</span>,<span class=\"string\">'123'</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x:</div><div class=\"line\">    <span class=\"keyword\">print</span> i</div></pre></td></tr></table></figure></p>\n</blockquote>\n<a id=\"more\"></a>\n<h5 id=\"迭代索引\">迭代索引</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">x=[<span class=\"string\">'asd'</span>,<span class=\"string\">'zxc'</span>,<span class=\"string\">'123'</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> x:</div><div class=\"line\">    <span class=\"keyword\">print</span> k,<span class=\"string\">'-'</span>,v</div></pre></td></tr></table></figure>\n<h5 id=\"迭代dict_value\">迭代dict value</h5><blockquote>\n<p>values方法,把dict转换成value的list<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>&#125;</div><div class=\"line\"><span class=\"keyword\">print</span> x.values()</div></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>itervalues方法,不转换，迭代过程中依次取dict的value<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>&#125;</div><div class=\"line\"><span class=\"keyword\">print</span> x.itervalues()</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"迭代dict_key_value\">迭代dict key value</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> x.items():</div><div class=\"line\">    <span class=\"keyword\">print</span> k,<span class=\"string\">'-'</span>,v</div></pre></td></tr></table></figure>\n<ul>\n<li>items，iteritems类似，把dict转换成 tuple的list</li>\n</ul>\n<h5 id=\"生成列表\">生成列表</h5><blockquote>\n<p>range<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">range(<span class=\"number\">1</span>,<span class=\"number\">100</span>) <span class=\"comment\">#[1,2,3,...,100]</span></div><div class=\"line\"></div><div class=\"line\">[a+a <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">100</span>)] <span class=\"comment\"># 1-100，每个数自身相加 [2,4,6,...,200]</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"复杂表达式\">复杂表达式</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = [<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>]</div><div class=\"line\">tmpl=[<span class=\"string\">'&lt;div&gt;%s&lt;/div&gt;&lt;div&gt;%s&lt;/div&gt;'</span> (k,v) <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> x.iteritems()]</div></pre></td></tr></table></figure>\n<h5 id=\"条件过滤\">条件过滤</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[a+a <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">100</span>) <span class=\"keyword\">if</span> x &gt; <span class=\"number\">50</span> ] <span class=\"comment\"># 1-100，每个数自身相加 [2,4,6,...,200]</span></div></pre></td></tr></table></figure>\n<h5 id=\"多层表达式\">多层表达式</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[x+y <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"string\">'asd'</span> <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"string\">'123'</span>] <span class=\"comment\"># ['a1','s2','d3']</span></div><div class=\"line\"></div><div class=\"line\">x=[]</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">'asd'</span>:</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"string\">'123'</span>:</div><div class=\"line\">        x.append(i+j)</div></pre></td></tr></table></figure>\n","excerpt":"<h5 id=\"迭代\">迭代</h5><blockquote>\n<p>使用for in迭代<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">x=[<span class=\"string\">'asd'</span>,<span class=\"string\">'zxc'</span>,<span class=\"string\">'123'</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> x:</div><div class=\"line\">    <span class=\"keyword\">print</span> i</div></pre></td></tr></table></figure></p>\n</blockquote>","more":"<h5 id=\"迭代索引\">迭代索引</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">x=[<span class=\"string\">'asd'</span>,<span class=\"string\">'zxc'</span>,<span class=\"string\">'123'</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> x:</div><div class=\"line\">    <span class=\"keyword\">print</span> k,<span class=\"string\">'-'</span>,v</div></pre></td></tr></table></figure>\n<h5 id=\"迭代dict_value\">迭代dict value</h5><blockquote>\n<p>values方法,把dict转换成value的list<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>&#125;</div><div class=\"line\"><span class=\"keyword\">print</span> x.values()</div></pre></td></tr></table></figure></p>\n</blockquote>\n<ul>\n<li>itervalues方法,不转换，迭代过程中依次取dict的value<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>&#125;</div><div class=\"line\"><span class=\"keyword\">print</span> x.itervalues()</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h5 id=\"迭代dict_key_value\">迭代dict key value</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = &#123;<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>&#125;</div><div class=\"line\"><span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> x.items():</div><div class=\"line\">    <span class=\"keyword\">print</span> k,<span class=\"string\">'-'</span>,v</div></pre></td></tr></table></figure>\n<ul>\n<li>items，iteritems类似，把dict转换成 tuple的list</li>\n</ul>\n<h5 id=\"生成列表\">生成列表</h5><blockquote>\n<p>range<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">range(<span class=\"number\">1</span>,<span class=\"number\">100</span>) <span class=\"comment\">#[1,2,3,...,100]</span></div><div class=\"line\"></div><div class=\"line\">[a+a <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">100</span>)] <span class=\"comment\"># 1-100，每个数自身相加 [2,4,6,...,200]</span></div></pre></td></tr></table></figure></p>\n</blockquote>\n<h5 id=\"复杂表达式\">复杂表达式</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">x = [<span class=\"string\">'a'</span>:<span class=\"number\">1</span>,<span class=\"string\">'b'</span>:<span class=\"number\">2</span>]</div><div class=\"line\">tmpl=[<span class=\"string\">'&lt;div&gt;%s&lt;/div&gt;&lt;div&gt;%s&lt;/div&gt;'</span> (k,v) <span class=\"keyword\">for</span> k,v <span class=\"keyword\">in</span> x.iteritems()]</div></pre></td></tr></table></figure>\n<h5 id=\"条件过滤\">条件过滤</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">[a+a <span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> range(<span class=\"number\">1</span>,<span class=\"number\">100</span>) <span class=\"keyword\">if</span> x &gt; <span class=\"number\">50</span> ] <span class=\"comment\"># 1-100，每个数自身相加 [2,4,6,...,200]</span></div></pre></td></tr></table></figure>\n<h5 id=\"多层表达式\">多层表达式</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[x+y <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"string\">'asd'</span> <span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"string\">'123'</span>] <span class=\"comment\"># ['a1','s2','d3']</span></div><div class=\"line\"></div><div class=\"line\">x=[]</div><div class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">'asd'</span>:</div><div class=\"line\">    <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"string\">'123'</span>:</div><div class=\"line\">        x.append(i+j)</div></pre></td></tr></table></figure>"},{"title":"使用nproxy实现本地代理","date":"2015-11-22T07:03:01.000Z","toc":true,"_content":"\n#### 安装\n##### 先安装Node.js\n##### 安装nproxy\n```javascript\nsudo npm install -g nproxy\n```\n##### nproxy介绍\n```javascript\nOptions:\n    -h, --help               output usage information\n    -V, --version            output the version number\n    -l, --list [list]        Specify the replace rule file\n    -p, --port [port]        Specify the port\n    -t, --timeout [timeout]  Specify the request timeout(5 seconds by default)\n    -d, --debug              Enable debug mode\n    -n, --networks           Display network interface list\n```\n<!--more-->\n\n##### 开启代理端口\n```javascript\nnproxy -l replace_rule.js -p 8188\n```\n使用本地replace_rule.js转换规则，监听本地8188端口\n\n##### replace_rule.js\n```javascript\nmodule.exports = [\n    {\n        pattern:'http://test.test.com/pro/(.*)',\n        responder:\"http://127.0.0.1/pro/$1\"\n    }\n];\n```\n##### 浏览器怎么做\n* 安装代理插件，一大堆\n* 配置代理 127.0.0.1 端口8188\n* 可以设置自动转换规则，即：哪些网站使用这个代理","source":"_posts/使用nproxy实现本地代理.md","raw":"title: 使用nproxy实现本地代理\ndate: 2015-11-22 15:03:01\ntags: web\ntoc: true\n---\n\n#### 安装\n##### 先安装Node.js\n##### 安装nproxy\n```javascript\nsudo npm install -g nproxy\n```\n##### nproxy介绍\n```javascript\nOptions:\n    -h, --help               output usage information\n    -V, --version            output the version number\n    -l, --list [list]        Specify the replace rule file\n    -p, --port [port]        Specify the port\n    -t, --timeout [timeout]  Specify the request timeout(5 seconds by default)\n    -d, --debug              Enable debug mode\n    -n, --networks           Display network interface list\n```\n<!--more-->\n\n##### 开启代理端口\n```javascript\nnproxy -l replace_rule.js -p 8188\n```\n使用本地replace_rule.js转换规则，监听本地8188端口\n\n##### replace_rule.js\n```javascript\nmodule.exports = [\n    {\n        pattern:'http://test.test.com/pro/(.*)',\n        responder:\"http://127.0.0.1/pro/$1\"\n    }\n];\n```\n##### 浏览器怎么做\n* 安装代理插件，一大堆\n* 配置代理 127.0.0.1 端口8188\n* 可以设置自动转换规则，即：哪些网站使用这个代理","slug":"使用nproxy实现本地代理","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhq2003at0yji8jp5mjz","content":"<h4 id=\"安装\">安装</h4><h5 id=\"先安装Node-js\">先安装Node.js</h5><h5 id=\"安装nproxy\">安装nproxy</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo npm install -g nproxy</div></pre></td></tr></table></figure>\n<h5 id=\"nproxy介绍\">nproxy介绍</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Options:</div><div class=\"line\">    -h, --help               output usage information</div><div class=\"line\">    -V, --version            output the version number</div><div class=\"line\">    -l, --list [list]        Specify the replace rule file</div><div class=\"line\">    -p, --port [port]        Specify the port</div><div class=\"line\">    -t, --timeout [timeout]  Specify the request timeout(<span class=\"number\">5</span> seconds by <span class=\"keyword\">default</span>)</div><div class=\"line\">    -d, --debug              Enable debug mode</div><div class=\"line\">    -n, --networks           Display network interface list</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h5 id=\"开启代理端口\">开启代理端口</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nproxy -l replace_rule.js -p <span class=\"number\">8188</span></div></pre></td></tr></table></figure>\n<p>使用本地replace_rule.js转换规则，监听本地8188端口</p>\n<h5 id=\"replace_rule-js\">replace_rule.js</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = [</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">pattern</span>:<span class=\"string\">'http://test.test.com/pro/(.*)'</span>,</div><div class=\"line\">        <span class=\"attr\">responder</span>:<span class=\"string\">\"http://127.0.0.1/pro/$1\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<h5 id=\"浏览器怎么做\">浏览器怎么做</h5><ul>\n<li>安装代理插件，一大堆</li>\n<li>配置代理 127.0.0.1 端口8188</li>\n<li>可以设置自动转换规则，即：哪些网站使用这个代理</li>\n</ul>\n","excerpt":"<h4 id=\"安装\">安装</h4><h5 id=\"先安装Node-js\">先安装Node.js</h5><h5 id=\"安装nproxy\">安装nproxy</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo npm install -g nproxy</div></pre></td></tr></table></figure>\n<h5 id=\"nproxy介绍\">nproxy介绍</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">Options:</div><div class=\"line\">    -h, --help               output usage information</div><div class=\"line\">    -V, --version            output the version number</div><div class=\"line\">    -l, --list [list]        Specify the replace rule file</div><div class=\"line\">    -p, --port [port]        Specify the port</div><div class=\"line\">    -t, --timeout [timeout]  Specify the request timeout(<span class=\"number\">5</span> seconds by <span class=\"keyword\">default</span>)</div><div class=\"line\">    -d, --debug              Enable debug mode</div><div class=\"line\">    -n, --networks           Display network interface list</div></pre></td></tr></table></figure>","more":"<h5 id=\"开启代理端口\">开启代理端口</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">nproxy -l replace_rule.js -p <span class=\"number\">8188</span></div></pre></td></tr></table></figure>\n<p>使用本地replace_rule.js转换规则，监听本地8188端口</p>\n<h5 id=\"replace_rule-js\">replace_rule.js</h5><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = [</div><div class=\"line\">    &#123;</div><div class=\"line\">        <span class=\"attr\">pattern</span>:<span class=\"string\">'http://test.test.com/pro/(.*)'</span>,</div><div class=\"line\">        <span class=\"attr\">responder</span>:<span class=\"string\">\"http://127.0.0.1/pro/$1\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">];</div></pre></td></tr></table></figure>\n<h5 id=\"浏览器怎么做\">浏览器怎么做</h5><ul>\n<li>安装代理插件，一大堆</li>\n<li>配置代理 127.0.0.1 端口8188</li>\n<li>可以设置自动转换规则，即：哪些网站使用这个代理</li>\n</ul>"},{"title":"前端知识点集合","date":"2015-11-19T07:03:01.000Z","toc":true,"_content":"#### getBoundingClientRect\n>计算视口坐标,方法返回一个有left、right、top、bottom属性的对象，分别表示元素四个位置的相对于视口的坐标。getBoundingClientRect所返回的坐标包含元素的内边距和边框，不包含外边距。兼容性很好，非常好用.\n\n#### scrollIntoView\n>可以让元素直接呈现到可视区域，实际上是屏幕显示区的最顶端\n<!--more-->\n\n#### 检查图片是否加在完\n```javascript\n$('img').load(function(){\n\tconsole.log('load over');\n});\n```\n#### 修复加载失败的图片\n```javascript\n$('img').on('error',function(){\n\t$(this).prop('src','/default.png');\n});\n```\n#### 回到顶部\n```javascript\n$(document).animate({scrollTop:0},1000);\n```\n#### 图片预加载\n```javascript\n$.preLoad = function(){\n\tfor(var i = 0,len = arguments.length;i<len;i++){\n\t\tvar $img = $('<img>');\n\t\t$img.attr('src',arguments[i]);\n\t}\n}\nvar imgList = ['/img1.png','/img2.png'];\n$.preLoad(imgList);\n```javascript\n#### visible\n```javascript\n$(document).on('visibilitychange', function (e) {\n\tif (e.target.visibilityState === 'visible') {\n\t\tconsole.log('visible');\n\t} else {\n\t\tconsole.log('hidden');\n\t}\n});\n```\n用来监听浏览器是否处于激活状态，可视状态\n\n#### ajax调用错误处理\n```javascript\n$(document).ajaxError(function(e,xhr,settings,error){\n\tconsole.log(error);\n});\n```\n#### 获取用户输入keyCode\n```javascript\n<input type=\"text\" onkeydown=\"getCode(event);\" >\n\n//Javascript 代码\n//代码如下:\nfunction getCode(evt){\n\t//兼容IE和Firefox获得keyBoardEvent对象\n\tevt =  evt || window.event;\n\t//兼容IE和Firefox获得keyBoardEvent对象的键值\n\tvar key = evt.keyCode || evt.which;\n\t//显示按键键值\n\tconsole.info(key);\n}\n```\n#### Date在IE8以下版本的问题\n使用 new Date(‘2015-10-10’),在ie8下会转成NaN,需要使用new Date(‘2015/10/10’)，我们可以自定义一个时间转换函数\n```javascript\nfunction parse( dateStr ){\n   if( dateStr instanceof Date ){\n        return dateStr;\n    } else if( /^\\d+$/.test( dateStr ) ) {\n        return new Date( parseInt( dateStr , 10 ) );\n    } else {\n        return new Date( Date.parse( dateStr.replace(/-/g,'/') ) );\n    }\n}\n```\n#### 搜索框的值\n```javascript\n$(\"#js_ipt\")\n   .focus(function(){$(this).val('')})\n   .blur(function(){\n     var $this = $(this);\n    ($this.val() === '')? $this.val('请搜索...') : null;\n });\n ```\n#### 部分刷新\n```javascript\nsetInterval(function() { \n  $(\"#content\").load(url);\n }, 5000);\n ```\n#### 密码强度\n```javascript\n//密码为八位及以上并且字母数字特殊字符三项都包括\nvar strongRegex = new RegExp(\"^(?=.{8,})(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*\\\\W).*$\", \"g\");\n//密码为七位及以上并且字母、数字、特殊字符三项中有两项，强度是中等 \nvar mediumRegex = new RegExp(\"^(?=.{7,})(((?=.*[A-Z])(?=.*[a-z]))|((?=.*[A-Z])(?=.*[0-9]))|((?=.*[a-z])(?=.*[0-9]))).*$\", \"g\");\n//更多字符\nvar enoughRegex = new RegExp(\"(?=.{6,}).*\", \"g\");\n```\n#### 滚动动态加载内容\n```javascript\nvar loading = false;\n$(window).scroll(function(){\n if((($(window).scrollTop()+$(window).height())+250)>=$(document).height()){\n   if(loading == false){\n      loading = true;\n      $('#loadingbar').css(\"display\",\"block\");\n      $.ajax({\n\t\t  url:'/getData.json',\n\t\t  type:'POST',\n\t\t  dataType:'json',\n\t\t  data:{\n\t\t\t  id:'123'\n\t\t  }\n\t  }).done(function(data){\n\t\t  if(data.ret){\n\t\t  }\n\t  });\n    }\n  }\n});\n```javascript\n\n#### url参数转对象\n```javascript\nvar search = location.search.substr(1);\n    obj = {};\nsearch.replace(/([^?&]+)=([^?&]+)/g, function(s, v, k) {\n    obj[v] = decodeURIComponent(k);\n    return k + '=' +  v;\n});\n```","source":"_posts/前端知识点集合.md","raw":"title: 前端知识点集合\ndate: 2015-11-19 15:03:01\ntags: web\ntoc: true\n---\n#### getBoundingClientRect\n>计算视口坐标,方法返回一个有left、right、top、bottom属性的对象，分别表示元素四个位置的相对于视口的坐标。getBoundingClientRect所返回的坐标包含元素的内边距和边框，不包含外边距。兼容性很好，非常好用.\n\n#### scrollIntoView\n>可以让元素直接呈现到可视区域，实际上是屏幕显示区的最顶端\n<!--more-->\n\n#### 检查图片是否加在完\n```javascript\n$('img').load(function(){\n\tconsole.log('load over');\n});\n```\n#### 修复加载失败的图片\n```javascript\n$('img').on('error',function(){\n\t$(this).prop('src','/default.png');\n});\n```\n#### 回到顶部\n```javascript\n$(document).animate({scrollTop:0},1000);\n```\n#### 图片预加载\n```javascript\n$.preLoad = function(){\n\tfor(var i = 0,len = arguments.length;i<len;i++){\n\t\tvar $img = $('<img>');\n\t\t$img.attr('src',arguments[i]);\n\t}\n}\nvar imgList = ['/img1.png','/img2.png'];\n$.preLoad(imgList);\n```javascript\n#### visible\n```javascript\n$(document).on('visibilitychange', function (e) {\n\tif (e.target.visibilityState === 'visible') {\n\t\tconsole.log('visible');\n\t} else {\n\t\tconsole.log('hidden');\n\t}\n});\n```\n用来监听浏览器是否处于激活状态，可视状态\n\n#### ajax调用错误处理\n```javascript\n$(document).ajaxError(function(e,xhr,settings,error){\n\tconsole.log(error);\n});\n```\n#### 获取用户输入keyCode\n```javascript\n<input type=\"text\" onkeydown=\"getCode(event);\" >\n\n//Javascript 代码\n//代码如下:\nfunction getCode(evt){\n\t//兼容IE和Firefox获得keyBoardEvent对象\n\tevt =  evt || window.event;\n\t//兼容IE和Firefox获得keyBoardEvent对象的键值\n\tvar key = evt.keyCode || evt.which;\n\t//显示按键键值\n\tconsole.info(key);\n}\n```\n#### Date在IE8以下版本的问题\n使用 new Date(‘2015-10-10’),在ie8下会转成NaN,需要使用new Date(‘2015/10/10’)，我们可以自定义一个时间转换函数\n```javascript\nfunction parse( dateStr ){\n   if( dateStr instanceof Date ){\n        return dateStr;\n    } else if( /^\\d+$/.test( dateStr ) ) {\n        return new Date( parseInt( dateStr , 10 ) );\n    } else {\n        return new Date( Date.parse( dateStr.replace(/-/g,'/') ) );\n    }\n}\n```\n#### 搜索框的值\n```javascript\n$(\"#js_ipt\")\n   .focus(function(){$(this).val('')})\n   .blur(function(){\n     var $this = $(this);\n    ($this.val() === '')? $this.val('请搜索...') : null;\n });\n ```\n#### 部分刷新\n```javascript\nsetInterval(function() { \n  $(\"#content\").load(url);\n }, 5000);\n ```\n#### 密码强度\n```javascript\n//密码为八位及以上并且字母数字特殊字符三项都包括\nvar strongRegex = new RegExp(\"^(?=.{8,})(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*\\\\W).*$\", \"g\");\n//密码为七位及以上并且字母、数字、特殊字符三项中有两项，强度是中等 \nvar mediumRegex = new RegExp(\"^(?=.{7,})(((?=.*[A-Z])(?=.*[a-z]))|((?=.*[A-Z])(?=.*[0-9]))|((?=.*[a-z])(?=.*[0-9]))).*$\", \"g\");\n//更多字符\nvar enoughRegex = new RegExp(\"(?=.{6,}).*\", \"g\");\n```\n#### 滚动动态加载内容\n```javascript\nvar loading = false;\n$(window).scroll(function(){\n if((($(window).scrollTop()+$(window).height())+250)>=$(document).height()){\n   if(loading == false){\n      loading = true;\n      $('#loadingbar').css(\"display\",\"block\");\n      $.ajax({\n\t\t  url:'/getData.json',\n\t\t  type:'POST',\n\t\t  dataType:'json',\n\t\t  data:{\n\t\t\t  id:'123'\n\t\t  }\n\t  }).done(function(data){\n\t\t  if(data.ret){\n\t\t  }\n\t  });\n    }\n  }\n});\n```javascript\n\n#### url参数转对象\n```javascript\nvar search = location.search.substr(1);\n    obj = {};\nsearch.replace(/([^?&]+)=([^?&]+)/g, function(s, v, k) {\n    obj[v] = decodeURIComponent(k);\n    return k + '=' +  v;\n});\n```","slug":"前端知识点集合","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhq3003ct0yjy6tjen3d","content":"<h4 id=\"getBoundingClientRect\">getBoundingClientRect</h4><blockquote>\n<p>计算视口坐标,方法返回一个有left、right、top、bottom属性的对象，分别表示元素四个位置的相对于视口的坐标。getBoundingClientRect所返回的坐标包含元素的内边距和边框，不包含外边距。兼容性很好，非常好用.</p>\n</blockquote>\n<h4 id=\"scrollIntoView\">scrollIntoView</h4><blockquote>\n<p>可以让元素直接呈现到可视区域，实际上是屏幕显示区的最顶端<br><a id=\"more\"></a></p>\n</blockquote>\n<h4 id=\"检查图片是否加在完\">检查图片是否加在完</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'img'</span>).load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'load over'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"修复加载失败的图片\">修复加载失败的图片</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'img'</span>).on(<span class=\"string\">'error'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t$(<span class=\"keyword\">this</span>).prop(<span class=\"string\">'src'</span>,<span class=\"string\">'/default.png'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"回到顶部\">回到顶部</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).animate(&#123;<span class=\"attr\">scrollTop</span>:<span class=\"number\">0</span>&#125;,<span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"图片预加载\">图片预加载</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.preLoad = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,len = <span class=\"built_in\">arguments</span>.length;i&lt;len;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> $img = $(<span class=\"string\">'&lt;img&gt;'</span>);</div><div class=\"line\">\t\t$img.attr(<span class=\"string\">'src'</span>,<span class=\"built_in\">arguments</span>[i]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> imgList = [<span class=\"string\">'/img1.png'</span>,<span class=\"string\">'/img2.png'</span>];</div><div class=\"line\">$.preLoad(imgList);</div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`javascript</span></div><div class=\"line\">#### visible</div><div class=\"line\">`<span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"built_in\">document</span>).on(<span class=\"string\">'visibilitychange'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (e.target.visibilityState === <span class=\"string\">'visible'</span>) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'visible'</span>);</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'hidden'</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>用来监听浏览器是否处于激活状态，可视状态</p>\n<h4 id=\"ajax调用错误处理\">ajax调用错误处理</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ajaxError(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,xhr,settings,error</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"获取用户输入keyCode\">获取用户输入keyCode</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> onkeydown=<span class=\"string\">\"getCode(event);\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Javascript 代码</span></div><div class=\"line\"><span class=\"comment\">//代码如下:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCode</span>(<span class=\"params\">evt</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//兼容IE和Firefox获得keyBoardEvent对象</span></div><div class=\"line\">\tevt =  evt || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">\t<span class=\"comment\">//兼容IE和Firefox获得keyBoardEvent对象的键值</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> key = evt.keyCode || evt.which;</div><div class=\"line\">\t<span class=\"comment\">//显示按键键值</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.info(key);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Date在IE8以下版本的问题\">Date在IE8以下版本的问题</h4><p>使用 new Date(‘2015-10-10’),在ie8下会转成NaN,需要使用new Date(‘2015/10/10’)，我们可以自定义一个时间转换函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parse</span>(<span class=\"params\"> dateStr </span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span>( dateStr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span> )&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> dateStr;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( <span class=\"regexp\">/^\\d+$/</span>.test( dateStr ) ) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( <span class=\"built_in\">parseInt</span>( dateStr , <span class=\"number\">10</span> ) );</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( <span class=\"built_in\">Date</span>.parse( dateStr.replace(<span class=\"regexp\">/-/g</span>,<span class=\"string\">'/'</span>) ) );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"搜索框的值\">搜索框的值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"#js_ipt\"</span>)</div><div class=\"line\">   .focus(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;$(<span class=\"keyword\">this</span>).val(<span class=\"string\">''</span>)&#125;)</div><div class=\"line\">   .blur(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> $<span class=\"keyword\">this</span> = $(<span class=\"keyword\">this</span>);</div><div class=\"line\">    ($<span class=\"keyword\">this</span>.val() === <span class=\"string\">''</span>)? $<span class=\"keyword\">this</span>.val(<span class=\"string\">'请搜索...'</span>) : <span class=\"literal\">null</span>;</div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"部分刷新\">部分刷新</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">  $(<span class=\"string\">\"#content\"</span>).load(url);</div><div class=\"line\"> &#125;, <span class=\"number\">5000</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"密码强度\">密码强度</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//密码为八位及以上并且字母数字特殊字符三项都包括</span></div><div class=\"line\"><span class=\"keyword\">var</span> strongRegex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"^(?=.&#123;8,&#125;)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*\\\\W).*$\"</span>, <span class=\"string\">\"g\"</span>);</div><div class=\"line\"><span class=\"comment\">//密码为七位及以上并且字母、数字、特殊字符三项中有两项，强度是中等 </span></div><div class=\"line\"><span class=\"keyword\">var</span> mediumRegex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"^(?=.&#123;7,&#125;)(((?=.*[A-Z])(?=.*[a-z]))|((?=.*[A-Z])(?=.*[0-9]))|((?=.*[a-z])(?=.*[0-9]))).*$\"</span>, <span class=\"string\">\"g\"</span>);</div><div class=\"line\"><span class=\"comment\">//更多字符</span></div><div class=\"line\"><span class=\"keyword\">var</span> enoughRegex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(?=.&#123;6,&#125;).*\"</span>, <span class=\"string\">\"g\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"滚动动态加载内容\">滚动动态加载内容</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> loading = <span class=\"literal\">false</span>;</div><div class=\"line\">$(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">if</span>((($(<span class=\"built_in\">window</span>).scrollTop()+$(<span class=\"built_in\">window</span>).height())+<span class=\"number\">250</span>)&gt;=$(<span class=\"built_in\">document</span>).height())&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span>(loading == <span class=\"literal\">false</span>)&#123;</div><div class=\"line\">      loading = <span class=\"literal\">true</span>;</div><div class=\"line\">      $(<span class=\"string\">'#loadingbar'</span>).css(<span class=\"string\">\"display\"</span>,<span class=\"string\">\"block\"</span>);</div><div class=\"line\">      $.ajax(&#123;</div><div class=\"line\">\t\t  <span class=\"attr\">url</span>:<span class=\"string\">'/getData.json'</span>,</div><div class=\"line\">\t\t  <span class=\"attr\">type</span>:<span class=\"string\">'POST'</span>,</div><div class=\"line\">\t\t  <span class=\"attr\">dataType</span>:<span class=\"string\">'json'</span>,</div><div class=\"line\">\t\t  <span class=\"attr\">data</span>:&#123;</div><div class=\"line\">\t\t\t  <span class=\"attr\">id</span>:<span class=\"string\">'123'</span></div><div class=\"line\">\t\t  &#125;</div><div class=\"line\">\t  &#125;).done(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">\t\t  <span class=\"keyword\">if</span>(data.ret)&#123;</div><div class=\"line\">\t\t  &#125;</div><div class=\"line\">\t  &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`javascript</span></div><div class=\"line\"></div><div class=\"line\">#### url参数转对象</div><div class=\"line\">`<span class=\"string\">``</span>javascript</div><div class=\"line\"><span class=\"keyword\">var</span> search = location.search.substr(<span class=\"number\">1</span>);</div><div class=\"line\">    obj = &#123;&#125;;</div><div class=\"line\">search.replace(<span class=\"regexp\">/([^?&amp;]+)=([^?&amp;]+)/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, v, k</span>) </span>&#123;</div><div class=\"line\">    obj[v] = <span class=\"built_in\">decodeURIComponent</span>(k);</div><div class=\"line\">    <span class=\"keyword\">return</span> k + <span class=\"string\">'='</span> +  v;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","excerpt":"<h4 id=\"getBoundingClientRect\">getBoundingClientRect</h4><blockquote>\n<p>计算视口坐标,方法返回一个有left、right、top、bottom属性的对象，分别表示元素四个位置的相对于视口的坐标。getBoundingClientRect所返回的坐标包含元素的内边距和边框，不包含外边距。兼容性很好，非常好用.</p>\n</blockquote>\n<h4 id=\"scrollIntoView\">scrollIntoView</h4><blockquote>\n<p>可以让元素直接呈现到可视区域，实际上是屏幕显示区的最顶端<br>","more":"</p>\n</blockquote>\n<h4 id=\"检查图片是否加在完\">检查图片是否加在完</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'img'</span>).load(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'load over'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"修复加载失败的图片\">修复加载失败的图片</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">'img'</span>).on(<span class=\"string\">'error'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t$(<span class=\"keyword\">this</span>).prop(<span class=\"string\">'src'</span>,<span class=\"string\">'/default.png'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"回到顶部\">回到顶部</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).animate(&#123;<span class=\"attr\">scrollTop</span>:<span class=\"number\">0</span>&#125;,<span class=\"number\">1000</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"图片预加载\">图片预加载</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">$.preLoad = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>,len = <span class=\"built_in\">arguments</span>.length;i&lt;len;i++)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> $img = $(<span class=\"string\">'&lt;img&gt;'</span>);</div><div class=\"line\">\t\t$img.attr(<span class=\"string\">'src'</span>,<span class=\"built_in\">arguments</span>[i]);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> imgList = [<span class=\"string\">'/img1.png'</span>,<span class=\"string\">'/img2.png'</span>];</div><div class=\"line\">$.preLoad(imgList);</div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`javascript</div><div class=\"line\">#### visible</div><div class=\"line\">`</span><span class=\"string\">``</span>javascript</div><div class=\"line\">$(<span class=\"built_in\">document</span>).on(<span class=\"string\">'visibilitychange'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (e.target.visibilityState === <span class=\"string\">'visible'</span>) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'visible'</span>);</div><div class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'hidden'</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>用来监听浏览器是否处于激活状态，可视状态</p>\n<h4 id=\"ajax调用错误处理\">ajax调用错误处理</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"built_in\">document</span>).ajaxError(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e,xhr,settings,error</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"获取用户输入keyCode\">获取用户输入keyCode</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"text\"</span> onkeydown=<span class=\"string\">\"getCode(event);\"</span> &gt;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//Javascript 代码</span></div><div class=\"line\"><span class=\"comment\">//代码如下:</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getCode</span>(<span class=\"params\">evt</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"comment\">//兼容IE和Firefox获得keyBoardEvent对象</span></div><div class=\"line\">\tevt =  evt || <span class=\"built_in\">window</span>.event;</div><div class=\"line\">\t<span class=\"comment\">//兼容IE和Firefox获得keyBoardEvent对象的键值</span></div><div class=\"line\">\t<span class=\"keyword\">var</span> key = evt.keyCode || evt.which;</div><div class=\"line\">\t<span class=\"comment\">//显示按键键值</span></div><div class=\"line\">\t<span class=\"built_in\">console</span>.info(key);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"Date在IE8以下版本的问题\">Date在IE8以下版本的问题</h4><p>使用 new Date(‘2015-10-10’),在ie8下会转成NaN,需要使用new Date(‘2015/10/10’)，我们可以自定义一个时间转换函数<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parse</span>(<span class=\"params\"> dateStr </span>)</span>&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span>( dateStr <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Date</span> )&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> dateStr;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>( <span class=\"regexp\">/^\\d+$/</span>.test( dateStr ) ) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( <span class=\"built_in\">parseInt</span>( dateStr , <span class=\"number\">10</span> ) );</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>( <span class=\"built_in\">Date</span>.parse( dateStr.replace(<span class=\"regexp\">/-/g</span>,<span class=\"string\">'/'</span>) ) );</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"搜索框的值\">搜索框的值</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">$(<span class=\"string\">\"#js_ipt\"</span>)</div><div class=\"line\">   .focus(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;$(<span class=\"keyword\">this</span>).val(<span class=\"string\">''</span>)&#125;)</div><div class=\"line\">   .blur(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">     <span class=\"keyword\">var</span> $<span class=\"keyword\">this</span> = $(<span class=\"keyword\">this</span>);</div><div class=\"line\">    ($<span class=\"keyword\">this</span>.val() === <span class=\"string\">''</span>)? $<span class=\"keyword\">this</span>.val(<span class=\"string\">'请搜索...'</span>) : <span class=\"literal\">null</span>;</div><div class=\"line\"> &#125;);</div></pre></td></tr></table></figure>\n<h4 id=\"部分刷新\">部分刷新</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\">  $(<span class=\"string\">\"#content\"</span>).load(url);</div><div class=\"line\"> &#125;, <span class=\"number\">5000</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"密码强度\">密码强度</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//密码为八位及以上并且字母数字特殊字符三项都包括</span></div><div class=\"line\"><span class=\"keyword\">var</span> strongRegex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"^(?=.&#123;8,&#125;)(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*\\\\W).*$\"</span>, <span class=\"string\">\"g\"</span>);</div><div class=\"line\"><span class=\"comment\">//密码为七位及以上并且字母、数字、特殊字符三项中有两项，强度是中等 </span></div><div class=\"line\"><span class=\"keyword\">var</span> mediumRegex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"^(?=.&#123;7,&#125;)(((?=.*[A-Z])(?=.*[a-z]))|((?=.*[A-Z])(?=.*[0-9]))|((?=.*[a-z])(?=.*[0-9]))).*$\"</span>, <span class=\"string\">\"g\"</span>);</div><div class=\"line\"><span class=\"comment\">//更多字符</span></div><div class=\"line\"><span class=\"keyword\">var</span> enoughRegex = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"string\">\"(?=.&#123;6,&#125;).*\"</span>, <span class=\"string\">\"g\"</span>);</div></pre></td></tr></table></figure>\n<h4 id=\"滚动动态加载内容\">滚动动态加载内容</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> loading = <span class=\"literal\">false</span>;</div><div class=\"line\">$(<span class=\"built_in\">window</span>).scroll(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\"> <span class=\"keyword\">if</span>((($(<span class=\"built_in\">window</span>).scrollTop()+$(<span class=\"built_in\">window</span>).height())+<span class=\"number\">250</span>)&gt;=$(<span class=\"built_in\">document</span>).height())&#123;</div><div class=\"line\">   <span class=\"keyword\">if</span>(loading == <span class=\"literal\">false</span>)&#123;</div><div class=\"line\">      loading = <span class=\"literal\">true</span>;</div><div class=\"line\">      $(<span class=\"string\">'#loadingbar'</span>).css(<span class=\"string\">\"display\"</span>,<span class=\"string\">\"block\"</span>);</div><div class=\"line\">      $.ajax(&#123;</div><div class=\"line\">\t\t  <span class=\"attr\">url</span>:<span class=\"string\">'/getData.json'</span>,</div><div class=\"line\">\t\t  <span class=\"attr\">type</span>:<span class=\"string\">'POST'</span>,</div><div class=\"line\">\t\t  <span class=\"attr\">dataType</span>:<span class=\"string\">'json'</span>,</div><div class=\"line\">\t\t  <span class=\"attr\">data</span>:&#123;</div><div class=\"line\">\t\t\t  <span class=\"attr\">id</span>:<span class=\"string\">'123'</span></div><div class=\"line\">\t\t  &#125;</div><div class=\"line\">\t  &#125;).done(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">\t\t  <span class=\"keyword\">if</span>(data.ret)&#123;</div><div class=\"line\">\t\t  &#125;</div><div class=\"line\">\t  &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"string\">``</span><span class=\"string\">`javascript</div><div class=\"line\"></div><div class=\"line\">#### url参数转对象</div><div class=\"line\">`</span><span class=\"string\">``</span>javascript</div><div class=\"line\"><span class=\"keyword\">var</span> search = location.search.substr(<span class=\"number\">1</span>);</div><div class=\"line\">    obj = &#123;&#125;;</div><div class=\"line\">search.replace(<span class=\"regexp\">/([^?&amp;]+)=([^?&amp;]+)/g</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">s, v, k</span>) </span>&#123;</div><div class=\"line\">    obj[v] = <span class=\"built_in\">decodeURIComponent</span>(k);</div><div class=\"line\">    <span class=\"keyword\">return</span> k + <span class=\"string\">'='</span> +  v;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>"},{"title":"前端笔试题集","keywords":"前端,笔试题,前端笔试题集","description":"前端笔试题集大全","date":"2017-02-07T08:25:43.000Z","toc":true,"_content":"#### 笔试题集\n##### viewport禁止页面放大\n通过设置页面meta标签viewport的值，可以设置页面的宽高度以及缩放行为\n* initial-scale  设置页面初始缩放比例\n＊ minimum-scale 设置缩放最小比例\n＊ maximum-scale 设置缩放最大比例\n＊ user-scalable 设置用户是否可以用手控制缩放\n通过设置 initial-scale=1 user-scalable=no 或者 initial-scale=1 maximum-scale=1 禁止用户放大或者缩小网页。\n\n<!--more-->\n\n##### data-* 属性的作用\n使用 data-* 可以嵌入自定义数据，可以存储页面或者应用程序的私有自定义数据，使得html元素可以嵌入数据。可以通过javascript设置和获取data-*的数据。data-*的属性必须以data开头，不能包含大写字母的任意字符串。\n``` html\n<div id=\"test\" data-val=\"ddd\"></div>\n```\n\n```javascript\nvar test = document.getElementById('test');\nconsole.log(test.dataset.val);\ntest.dataset.val = 'eee';\nconsole.log(test.dataset.val);\n```\n\n##### cookie sessionStorage localStorage\n* cookie:\n存储在浏览器中，有域名和path的限制，在所有同源窗口中共享，可以设置过期时间，默认是浏览器关闭失效，存储大小最大4k，cookie的值会随每次http的请求进行传输，所以cookie应该尽量少而且精简，不至于影响网页性能，通常用来存储一些用户登录信息等，应该做好加密工作，不要存储一些太过机密的数据。原生接口不太友好，二次封装后用起来更方便。\n* localStorage\n存储在浏览器中，有域名限制，在所有同源窗口中共享，不能设置过期时间(可以自己通过数据去控制),永久有效，存储大小最大5M, 值不会随http传输携带，可以存储一些本地数据，在性能优化，数据缓存上都可以使用，不要存储机密数据，防止隐私泄漏，xss攻击等。原生接口支持的比较好，但是可以封装让其对对象数组支持的更好。\n老版本ie浏览器不支持改属性，可以使用store.js，通过userData进行兼容处理过了。\n* sessionStorage\n存储在浏览器中，有域名和窗口的限制，不同浏览器窗口同源也不共享，不可以设置过期时间，仅在当前会话下有效，关闭页面或者关闭浏览器都会被清除，存储大小最大5M，可以存储一些页面的临时数据，或者页面运行期间的一些流程控制，值不会随http传输携带，不要存储机密数据，防止隐私泄漏，xss攻击等。原生接口支持的比较好，但是可以封装让其对对象数组支持的更好。\n\n##### 浏览器的标准模式，怪异模式\nHTML和CSS标准完成之前，各个浏览器对HTML和CSS的解析有各自不同的实现，很多旧的网页是按照非标准去设计实现的，在标准形成之后，为了向后兼容，所以现代浏览器都会有两种渲染模式，标准模式和怪异模式。具体使用哪种渲染模式，通过DOCTYPE去区分，当浏览器遇到正确的DOCTYPE的时候，就用标准模式渲染，遇到错误的DOCTYPE或者没有DOCTYPE声明的，则使用怪异模式渲染。\n* 盒模型差异\n标准模式下CSS盒模型宽高不包含内边距和边框\n怪异模式下CSS盒模型宽高包含内边距和边框\n＊ 行内元素垂直对齐\n标准模式下将会对齐到盒内文本的基线，怪异模式下对齐到底部。\n\n##### 盒模型宽高|box-sizing\n* 标准模式下\n盒子总宽度 = width + padding + border + margin\n* 怪异模式下\n内容宽度包含 content + padding + border\n盒子总宽度 = width + margin\n* box-sizing\ncontent-box : 采用标准模式解析计算(默认值)\nborder-box : 采用怪异模式解析计算\n\n##### 函数中arguments\narguments是一个对象，该对象的属性值是从0-n的数字，所以访问的时候可以像数组那样访问，但它却不是数组，它还拥有length属性，返回的是属性的长度，callee属性返回的是正在被执行的function,可以在递归调用时使用,caller属性返回的是对函数的引用，该函数调用了当前函数。\n```javascript\n// 使用Array对象的方法可以将arguments转换成数组\nvar argsArr = Array.prototype.slice.call(arguments);\n```\n","source":"_posts/前端笔试题集.md","raw":"title: 前端笔试题集\nkeywords: 前端,笔试题,前端笔试题集\ndescription: 前端笔试题集大全\ndate: 2017-02-07 16:25:43\ntags: web\ntoc: true\n---\n#### 笔试题集\n##### viewport禁止页面放大\n通过设置页面meta标签viewport的值，可以设置页面的宽高度以及缩放行为\n* initial-scale  设置页面初始缩放比例\n＊ minimum-scale 设置缩放最小比例\n＊ maximum-scale 设置缩放最大比例\n＊ user-scalable 设置用户是否可以用手控制缩放\n通过设置 initial-scale=1 user-scalable=no 或者 initial-scale=1 maximum-scale=1 禁止用户放大或者缩小网页。\n\n<!--more-->\n\n##### data-* 属性的作用\n使用 data-* 可以嵌入自定义数据，可以存储页面或者应用程序的私有自定义数据，使得html元素可以嵌入数据。可以通过javascript设置和获取data-*的数据。data-*的属性必须以data开头，不能包含大写字母的任意字符串。\n``` html\n<div id=\"test\" data-val=\"ddd\"></div>\n```\n\n```javascript\nvar test = document.getElementById('test');\nconsole.log(test.dataset.val);\ntest.dataset.val = 'eee';\nconsole.log(test.dataset.val);\n```\n\n##### cookie sessionStorage localStorage\n* cookie:\n存储在浏览器中，有域名和path的限制，在所有同源窗口中共享，可以设置过期时间，默认是浏览器关闭失效，存储大小最大4k，cookie的值会随每次http的请求进行传输，所以cookie应该尽量少而且精简，不至于影响网页性能，通常用来存储一些用户登录信息等，应该做好加密工作，不要存储一些太过机密的数据。原生接口不太友好，二次封装后用起来更方便。\n* localStorage\n存储在浏览器中，有域名限制，在所有同源窗口中共享，不能设置过期时间(可以自己通过数据去控制),永久有效，存储大小最大5M, 值不会随http传输携带，可以存储一些本地数据，在性能优化，数据缓存上都可以使用，不要存储机密数据，防止隐私泄漏，xss攻击等。原生接口支持的比较好，但是可以封装让其对对象数组支持的更好。\n老版本ie浏览器不支持改属性，可以使用store.js，通过userData进行兼容处理过了。\n* sessionStorage\n存储在浏览器中，有域名和窗口的限制，不同浏览器窗口同源也不共享，不可以设置过期时间，仅在当前会话下有效，关闭页面或者关闭浏览器都会被清除，存储大小最大5M，可以存储一些页面的临时数据，或者页面运行期间的一些流程控制，值不会随http传输携带，不要存储机密数据，防止隐私泄漏，xss攻击等。原生接口支持的比较好，但是可以封装让其对对象数组支持的更好。\n\n##### 浏览器的标准模式，怪异模式\nHTML和CSS标准完成之前，各个浏览器对HTML和CSS的解析有各自不同的实现，很多旧的网页是按照非标准去设计实现的，在标准形成之后，为了向后兼容，所以现代浏览器都会有两种渲染模式，标准模式和怪异模式。具体使用哪种渲染模式，通过DOCTYPE去区分，当浏览器遇到正确的DOCTYPE的时候，就用标准模式渲染，遇到错误的DOCTYPE或者没有DOCTYPE声明的，则使用怪异模式渲染。\n* 盒模型差异\n标准模式下CSS盒模型宽高不包含内边距和边框\n怪异模式下CSS盒模型宽高包含内边距和边框\n＊ 行内元素垂直对齐\n标准模式下将会对齐到盒内文本的基线，怪异模式下对齐到底部。\n\n##### 盒模型宽高|box-sizing\n* 标准模式下\n盒子总宽度 = width + padding + border + margin\n* 怪异模式下\n内容宽度包含 content + padding + border\n盒子总宽度 = width + margin\n* box-sizing\ncontent-box : 采用标准模式解析计算(默认值)\nborder-box : 采用怪异模式解析计算\n\n##### 函数中arguments\narguments是一个对象，该对象的属性值是从0-n的数字，所以访问的时候可以像数组那样访问，但它却不是数组，它还拥有length属性，返回的是属性的长度，callee属性返回的是正在被执行的function,可以在递归调用时使用,caller属性返回的是对函数的引用，该函数调用了当前函数。\n```javascript\n// 使用Array对象的方法可以将arguments转换成数组\nvar argsArr = Array.prototype.slice.call(arguments);\n```\n","slug":"前端笔试题集","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhq3003et0yjslb0me1u","content":"<h4 id=\"笔试题集\">笔试题集</h4><h5 id=\"viewport禁止页面放大\">viewport禁止页面放大</h5><p>通过设置页面meta标签viewport的值，可以设置页面的宽高度以及缩放行为</p>\n<ul>\n<li>initial-scale  设置页面初始缩放比例<br>＊ minimum-scale 设置缩放最小比例<br>＊ maximum-scale 设置缩放最大比例<br>＊ user-scalable 设置用户是否可以用手控制缩放<br>通过设置 initial-scale=1 user-scalable=no 或者 initial-scale=1 maximum-scale=1 禁止用户放大或者缩小网页。</li>\n</ul>\n<a id=\"more\"></a>\n<h5 id=\"data-*_属性的作用\">data-* 属性的作用</h5><p>使用 data-<em> 可以嵌入自定义数据，可以存储页面或者应用程序的私有自定义数据，使得html元素可以嵌入数据。可以通过javascript设置和获取data-</em>的数据。data-*的属性必须以data开头，不能包含大写字母的任意字符串。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">data-val</span>=<span class=\"string\">\"ddd\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'test'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(test.dataset.val);</div><div class=\"line\">test.dataset.val = <span class=\"string\">'eee'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(test.dataset.val);</div></pre></td></tr></table></figure>\n<h5 id=\"cookie_sessionStorage_localStorage\">cookie sessionStorage localStorage</h5><ul>\n<li>cookie:<br>存储在浏览器中，有域名和path的限制，在所有同源窗口中共享，可以设置过期时间，默认是浏览器关闭失效，存储大小最大4k，cookie的值会随每次http的请求进行传输，所以cookie应该尽量少而且精简，不至于影响网页性能，通常用来存储一些用户登录信息等，应该做好加密工作，不要存储一些太过机密的数据。原生接口不太友好，二次封装后用起来更方便。</li>\n<li>localStorage<br>存储在浏览器中，有域名限制，在所有同源窗口中共享，不能设置过期时间(可以自己通过数据去控制),永久有效，存储大小最大5M, 值不会随http传输携带，可以存储一些本地数据，在性能优化，数据缓存上都可以使用，不要存储机密数据，防止隐私泄漏，xss攻击等。原生接口支持的比较好，但是可以封装让其对对象数组支持的更好。<br>老版本ie浏览器不支持改属性，可以使用store.js，通过userData进行兼容处理过了。</li>\n<li>sessionStorage<br>存储在浏览器中，有域名和窗口的限制，不同浏览器窗口同源也不共享，不可以设置过期时间，仅在当前会话下有效，关闭页面或者关闭浏览器都会被清除，存储大小最大5M，可以存储一些页面的临时数据，或者页面运行期间的一些流程控制，值不会随http传输携带，不要存储机密数据，防止隐私泄漏，xss攻击等。原生接口支持的比较好，但是可以封装让其对对象数组支持的更好。</li>\n</ul>\n<h5 id=\"浏览器的标准模式，怪异模式\">浏览器的标准模式，怪异模式</h5><p>HTML和CSS标准完成之前，各个浏览器对HTML和CSS的解析有各自不同的实现，很多旧的网页是按照非标准去设计实现的，在标准形成之后，为了向后兼容，所以现代浏览器都会有两种渲染模式，标准模式和怪异模式。具体使用哪种渲染模式，通过DOCTYPE去区分，当浏览器遇到正确的DOCTYPE的时候，就用标准模式渲染，遇到错误的DOCTYPE或者没有DOCTYPE声明的，则使用怪异模式渲染。</p>\n<ul>\n<li>盒模型差异<br>标准模式下CSS盒模型宽高不包含内边距和边框<br>怪异模式下CSS盒模型宽高包含内边距和边框<br>＊ 行内元素垂直对齐<br>标准模式下将会对齐到盒内文本的基线，怪异模式下对齐到底部。</li>\n</ul>\n<h5 id=\"盒模型宽高|box-sizing\">盒模型宽高|box-sizing</h5><ul>\n<li>标准模式下<br>盒子总宽度 = width + padding + border + margin</li>\n<li>怪异模式下<br>内容宽度包含 content + padding + border<br>盒子总宽度 = width + margin</li>\n<li>box-sizing<br>content-box : 采用标准模式解析计算(默认值)<br>border-box : 采用怪异模式解析计算</li>\n</ul>\n<h5 id=\"函数中arguments\">函数中arguments</h5><p>arguments是一个对象，该对象的属性值是从0-n的数字，所以访问的时候可以像数组那样访问，但它却不是数组，它还拥有length属性，返回的是属性的长度，callee属性返回的是正在被执行的function,可以在递归调用时使用,caller属性返回的是对函数的引用，该函数调用了当前函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用Array对象的方法可以将arguments转换成数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> argsArr = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</div></pre></td></tr></table></figure></p>\n","excerpt":"<h4 id=\"笔试题集\">笔试题集</h4><h5 id=\"viewport禁止页面放大\">viewport禁止页面放大</h5><p>通过设置页面meta标签viewport的值，可以设置页面的宽高度以及缩放行为</p>\n<ul>\n<li>initial-scale  设置页面初始缩放比例<br>＊ minimum-scale 设置缩放最小比例<br>＊ maximum-scale 设置缩放最大比例<br>＊ user-scalable 设置用户是否可以用手控制缩放<br>通过设置 initial-scale=1 user-scalable=no 或者 initial-scale=1 maximum-scale=1 禁止用户放大或者缩小网页。</li>\n</ul>","more":"<h5 id=\"data-*_属性的作用\">data-* 属性的作用</h5><p>使用 data-<em> 可以嵌入自定义数据，可以存储页面或者应用程序的私有自定义数据，使得html元素可以嵌入数据。可以通过javascript设置和获取data-</em>的数据。data-*的属性必须以data开头，不能包含大写字母的任意字符串。<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">data-val</span>=<span class=\"string\">\"ddd\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> test = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'test'</span>);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(test.dataset.val);</div><div class=\"line\">test.dataset.val = <span class=\"string\">'eee'</span>;</div><div class=\"line\"><span class=\"built_in\">console</span>.log(test.dataset.val);</div></pre></td></tr></table></figure>\n<h5 id=\"cookie_sessionStorage_localStorage\">cookie sessionStorage localStorage</h5><ul>\n<li>cookie:<br>存储在浏览器中，有域名和path的限制，在所有同源窗口中共享，可以设置过期时间，默认是浏览器关闭失效，存储大小最大4k，cookie的值会随每次http的请求进行传输，所以cookie应该尽量少而且精简，不至于影响网页性能，通常用来存储一些用户登录信息等，应该做好加密工作，不要存储一些太过机密的数据。原生接口不太友好，二次封装后用起来更方便。</li>\n<li>localStorage<br>存储在浏览器中，有域名限制，在所有同源窗口中共享，不能设置过期时间(可以自己通过数据去控制),永久有效，存储大小最大5M, 值不会随http传输携带，可以存储一些本地数据，在性能优化，数据缓存上都可以使用，不要存储机密数据，防止隐私泄漏，xss攻击等。原生接口支持的比较好，但是可以封装让其对对象数组支持的更好。<br>老版本ie浏览器不支持改属性，可以使用store.js，通过userData进行兼容处理过了。</li>\n<li>sessionStorage<br>存储在浏览器中，有域名和窗口的限制，不同浏览器窗口同源也不共享，不可以设置过期时间，仅在当前会话下有效，关闭页面或者关闭浏览器都会被清除，存储大小最大5M，可以存储一些页面的临时数据，或者页面运行期间的一些流程控制，值不会随http传输携带，不要存储机密数据，防止隐私泄漏，xss攻击等。原生接口支持的比较好，但是可以封装让其对对象数组支持的更好。</li>\n</ul>\n<h5 id=\"浏览器的标准模式，怪异模式\">浏览器的标准模式，怪异模式</h5><p>HTML和CSS标准完成之前，各个浏览器对HTML和CSS的解析有各自不同的实现，很多旧的网页是按照非标准去设计实现的，在标准形成之后，为了向后兼容，所以现代浏览器都会有两种渲染模式，标准模式和怪异模式。具体使用哪种渲染模式，通过DOCTYPE去区分，当浏览器遇到正确的DOCTYPE的时候，就用标准模式渲染，遇到错误的DOCTYPE或者没有DOCTYPE声明的，则使用怪异模式渲染。</p>\n<ul>\n<li>盒模型差异<br>标准模式下CSS盒模型宽高不包含内边距和边框<br>怪异模式下CSS盒模型宽高包含内边距和边框<br>＊ 行内元素垂直对齐<br>标准模式下将会对齐到盒内文本的基线，怪异模式下对齐到底部。</li>\n</ul>\n<h5 id=\"盒模型宽高|box-sizing\">盒模型宽高|box-sizing</h5><ul>\n<li>标准模式下<br>盒子总宽度 = width + padding + border + margin</li>\n<li>怪异模式下<br>内容宽度包含 content + padding + border<br>盒子总宽度 = width + margin</li>\n<li>box-sizing<br>content-box : 采用标准模式解析计算(默认值)<br>border-box : 采用怪异模式解析计算</li>\n</ul>\n<h5 id=\"函数中arguments\">函数中arguments</h5><p>arguments是一个对象，该对象的属性值是从0-n的数字，所以访问的时候可以像数组那样访问，但它却不是数组，它还拥有length属性，返回的是属性的长度，callee属性返回的是正在被执行的function,可以在递归调用时使用,caller属性返回的是对函数的引用，该函数调用了当前函数。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 使用Array对象的方法可以将arguments转换成数组</span></div><div class=\"line\"><span class=\"keyword\">var</span> argsArr = <span class=\"built_in\">Array</span>.prototype.slice.call(<span class=\"built_in\">arguments</span>);</div></pre></td></tr></table></figure></p>"},{"title":"动态脚本","date":"2015-11-25T07:03:01.000Z","toc":true,"_content":"#### 动态加载js\n```javascript\nfunction loadScript(data,type){\n\tvar script = document.createElement(\"script\");\n\tscript.type = \"text/javascript\";\n\ttry{\n\t\tif(type === 1){\n\t\t\tscript.appendChild(document.createTextNode(data));\n\t\t}else{\n\t\t\tscript.src = data;\n\t\t}\n\t}catch(ex){\n\t\tif(type === 1){\n\t\t\tscript.text = code\n\t\t}else{\n\t\t\tscript.src = data;\n\t\t}\n\t}\n\tdocument.body.appendChild(script);\n}\n```\n<!--more-->\n\n#### 动态样式\n```javascript\nfunction loadStyle(data,type){\n\tvar style = document.createElement(\"style\");\n\tstyle.type = \"text/css\";\n\ttry{\n\t\tif(type === 1){\n\t\t\tstyle.appendChild(document.createTextNode(data));\n\t\t}else{\n\t\t\tstyle.href = data;\n\t\t}\n\t}catch(ex){\n\t\tif(type === 1){\n\t\t\tstyle.styleSheet.cssText = css;\n\t\t}else{\n\t\t\tstyle.href = data;\n\t\t}\n\t}\n\tvar head = document.getElementsByTagName(\"head\")[0];\n\thead.appendChild(style);\n}\n```","source":"_posts/动态脚本.md","raw":"title: 动态脚本\ndate: 2015-11-25 15:03:01\ntags: javascript\ntoc: true\n---\n#### 动态加载js\n```javascript\nfunction loadScript(data,type){\n\tvar script = document.createElement(\"script\");\n\tscript.type = \"text/javascript\";\n\ttry{\n\t\tif(type === 1){\n\t\t\tscript.appendChild(document.createTextNode(data));\n\t\t}else{\n\t\t\tscript.src = data;\n\t\t}\n\t}catch(ex){\n\t\tif(type === 1){\n\t\t\tscript.text = code\n\t\t}else{\n\t\t\tscript.src = data;\n\t\t}\n\t}\n\tdocument.body.appendChild(script);\n}\n```\n<!--more-->\n\n#### 动态样式\n```javascript\nfunction loadStyle(data,type){\n\tvar style = document.createElement(\"style\");\n\tstyle.type = \"text/css\";\n\ttry{\n\t\tif(type === 1){\n\t\t\tstyle.appendChild(document.createTextNode(data));\n\t\t}else{\n\t\t\tstyle.href = data;\n\t\t}\n\t}catch(ex){\n\t\tif(type === 1){\n\t\t\tstyle.styleSheet.cssText = css;\n\t\t}else{\n\t\t\tstyle.href = data;\n\t\t}\n\t}\n\tvar head = document.getElementsByTagName(\"head\")[0];\n\thead.appendChild(style);\n}\n```","slug":"动态脚本","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhqf003lt0yjr18a8eso","content":"<h4 id=\"动态加载js\">动态加载js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">data,type</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">\tscript.type = <span class=\"string\">\"text/javascript\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(type === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\tscript.appendChild(<span class=\"built_in\">document</span>.createTextNode(data));</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\tscript.src = data;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;<span class=\"keyword\">catch</span>(ex)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(type === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\tscript.text = code</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\tscript.src = data;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"动态样式\">动态样式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadStyle</span>(<span class=\"params\">data,type</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> style = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"style\"</span>);</div><div class=\"line\">\tstyle.type = <span class=\"string\">\"text/css\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(type === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\tstyle.appendChild(<span class=\"built_in\">document</span>.createTextNode(data));</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\tstyle.href = data;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;<span class=\"keyword\">catch</span>(ex)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(type === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\tstyle.styleSheet.cssText = css;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\tstyle.href = data;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">var</span> head = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">\thead.appendChild(style);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<h4 id=\"动态加载js\">动态加载js</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadScript</span>(<span class=\"params\">data,type</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> script = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">\tscript.type = <span class=\"string\">\"text/javascript\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(type === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\tscript.appendChild(<span class=\"built_in\">document</span>.createTextNode(data));</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\tscript.src = data;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;<span class=\"keyword\">catch</span>(ex)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(type === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\tscript.text = code</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\tscript.src = data;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"built_in\">document</span>.body.appendChild(script);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","more":"<h4 id=\"动态样式\">动态样式</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadStyle</span>(<span class=\"params\">data,type</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> style = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"style\"</span>);</div><div class=\"line\">\tstyle.type = <span class=\"string\">\"text/css\"</span>;</div><div class=\"line\">\t<span class=\"keyword\">try</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(type === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\tstyle.appendChild(<span class=\"built_in\">document</span>.createTextNode(data));</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\tstyle.href = data;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;<span class=\"keyword\">catch</span>(ex)&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span>(type === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">\t\t\tstyle.styleSheet.cssText = css;</div><div class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">\t\t\tstyle.href = data;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">var</span> head = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">\thead.appendChild(style);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"动画","date":"2015-11-17T07:03:01.000Z","toc":true,"_content":"#### css动画\n* translate\n* transation\n#### animate\n* javascript动画\n* setTimeout\n* setInterval\n* requestAnimationFrame\n<!--more-->\n#### jquery动画\n* animate\n#### js动画库\n#### canvas动画","source":"_posts/动画.md","raw":"title: 动画\ndate: 2015-11-17 15:03:01\ntags: web\ntoc: true\n---\n#### css动画\n* translate\n* transation\n#### animate\n* javascript动画\n* setTimeout\n* setInterval\n* requestAnimationFrame\n<!--more-->\n#### jquery动画\n* animate\n#### js动画库\n#### canvas动画","slug":"动画","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhqg003mt0yjvv3lug6c","content":"<h4 id=\"css动画\">css动画</h4><ul>\n<li>translate</li>\n<li>transation<h4 id=\"animate\">animate</h4></li>\n<li>javascript动画</li>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>requestAnimationFrame<a id=\"more\"></a>\n<h4 id=\"jquery动画\">jquery动画</h4></li>\n<li>animate<h4 id=\"js动画库\">js动画库</h4><h4 id=\"canvas动画\">canvas动画</h4></li>\n</ul>\n","excerpt":"<h4 id=\"css动画\">css动画</h4><ul>\n<li>translate</li>\n<li>transation<h4 id=\"animate\">animate</h4></li>\n<li>javascript动画</li>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>requestAnimationFrame","more":"<h4 id=\"jquery动画\">jquery动画</h4></li>\n<li>animate<h4 id=\"js动画库\">js动画库</h4><h4 id=\"canvas动画\">canvas动画</h4></li>\n</ul>"},{"title":"如何调试移动端网页","keywords":"移动端调试，真机调试，调试","description":"如何调试移动端网页","date":"2015-10-01T09:50:37.000Z","toc":true,"_content":"\n#### 真机上调试移动端的页面\n##### 1. mac safri ios设备safri\n步骤：\n1. 在设置>safri>高级web检查器（打开）\n2. mac下safri 偏好设置>高级>显示开发菜单\n3. 在手机safri访问网址，在开发中找到自己的设备，找到网址，点击就可以调试\n<!--more-->\n\n##### 2. DebugGap\n官网地址：http://www.debuggap.com/\n* 介绍\n\t* 支持 windows、mac、linux\n\t* 支持HTML5的都支持，不仅限手机内置浏览器，及应用或平台。\n\t* 多设备调试\n\t* 调试功能：\n\t\t* Elements - css修改、结构查看\n\t\t* Network - 网络请求查看\n\t\t* Resources - cookie、本地存储查看\n\t\t* Sources - 断点调试\n\t\t* Console - 控制台\n* 使用：\n\t* windows\n\t\t* 下载windows版本，然后解压，打开 DebugGap.exe,然后可以默认设置也可以自定义设置\n\t\t* 接下来，在我们要调试的页面最底部添加一个引用\n\t\t\t`<script src=\"./debuggap.js\"></script>`\n\t\t* 直接访问我们的页面，页面右上角会多出一个蓝色的圆形按钮，pc上如果点不动，就使用浏览器模拟器\n\t\t* 点击config，把之前设置的ip port填进去，然后点击连接\n\t\t* 再点击蓝色的圆形按钮，再点击Inspect,观察之前起的应用，多一个蓝色框框的区域，点击进去，调试工具就出来了。\n\t\t* 移动设备调试，可以把手机和电脑连接同一个wifi，保证在一个网段，然后在电脑上起一个服务器，保证页面通过手机能访问到，然后手机访问电脑ip+端口号，然后就是页面路径，就可以访问到了，其他操作同上。\n\t* mac,linux\n\t\t* 方法同上\n* 支持情况\n\t* windows从性能以及调试情况来看，支持的最好\n* 断点调试条件\n\t* chrome浏览器可以单步调试，\n\t* 没定制过的webview, Android 4.4+\n\t* 需要在电脑上安装设备驱动，并且打开usb调试，连接数据线\n\n##### 3. Weinre\n使用方法\n* windows安装 `npm -g install weinre`\n* `weinre —httpPort 8081 —boundHost -all-` 用这个打开8081调试端口\n* 浏览器打开 `http://localhost:8081` 会看到weinre的介绍信息\n* `<script src=\"http://localhost:8081/target/target-script-min.js#anonymous\"></script>`\n* 需要调试的页面加上这个脚本，需要将上面代码中的localhost替换为电脑ip，手机访问页面也可以\n* anonymous 这个可以换成自己的标识，这样多人调试的时候也不会混乱了。\n\n##### 4. vorlon\n使用方法\n基于 Node.js 和 Socket.IO 开发。\n调试css比较靠谱，其安装方法以及调试方式和Weinre比较类似，但是更容易定位问题，忽略内容，直观的都是dom结构\n* 安装 `npm i -g vorlon`\n* 运行 `vorlon`\n* 需要调试的页面上添加 `<script src=\"http://localhost:1337/vorlon.js\"></script>`这样一段标签\n* 浏览器访问 `http://localhost:1337` 就可以调试了\n\n##### 5. UC浏览器开发版\n准备\n* adb tool。\n* UC浏览器开发版本(apk)。\n* usb数据线一根\nWIFI的调试方法，保证pc和手机在同一个网段，在PC上打开Chrome或Safari，在地址栏输入：手机IP + :9998，在手机端会弹出确认按钮，点击确认后，就可在pc上看到效果了\n\n##### 6. Chrome\n调试方法\n* 翻墙。\n* PC Chrome最新版\n* 安卓 Chrome最新版\n* 插线后，在chrome浏览器输入 chrome://inspect\n\n##### 7. Firefox\n调试方法\n* PC Firefox 15+\n* Android Firefox 15+\n* 一根数据线\n* adb驱动(UC浏览器那步已经安装过了)\n* adb devices（查看连接的设备）\n* adb forward tcp:6000 tcp:6000（本地开一个接口做代理接受数据）\n* 手机端Firefox点击菜单栏的”设置”->”开发者工具”，勾选”远程调试”。\n* PC端Firefox打开about:config，设置devtools.debugger.remote-enabled为True\n* 接下来找到桌面端Firefox-菜单-工具-Web开发者-远程链接。保证端口号和上面开启的端口号一致就好了。\n\n##### 8. Opera\n调试方法\n* 打开pc opera control+shift+i 打开调试，点击右上角远程调试设置端口，在用模拟器输入opera:debug，连接端口，就可以了\n* 上面这个方法有些过时 打开新版的手机opera浏览器，输入opera:debug，里面讲解了调试方式，工具就是adb和pc chrome浏览器\n稍微麻烦一点，因为要装一些软件，完成后可以用pc端模拟器调试也可以用真机调试。\n\n##### 9. browsersync\n这是一个开发利器，能让浏览器实时、快速响应文件更改（html、js、css、sass、less等）并自动刷新页面。可以同时在PC、平板、手机等设备下同时进项调试。","source":"_posts/如何调试移动端网页.md","raw":"title: 如何调试移动端网页\nkeywords: 移动端调试，真机调试，调试\ndescription: 如何调试移动端网页\ndate: 2015-10-01 17:50:37\ntags: web\ntoc: true\n---\n\n#### 真机上调试移动端的页面\n##### 1. mac safri ios设备safri\n步骤：\n1. 在设置>safri>高级web检查器（打开）\n2. mac下safri 偏好设置>高级>显示开发菜单\n3. 在手机safri访问网址，在开发中找到自己的设备，找到网址，点击就可以调试\n<!--more-->\n\n##### 2. DebugGap\n官网地址：http://www.debuggap.com/\n* 介绍\n\t* 支持 windows、mac、linux\n\t* 支持HTML5的都支持，不仅限手机内置浏览器，及应用或平台。\n\t* 多设备调试\n\t* 调试功能：\n\t\t* Elements - css修改、结构查看\n\t\t* Network - 网络请求查看\n\t\t* Resources - cookie、本地存储查看\n\t\t* Sources - 断点调试\n\t\t* Console - 控制台\n* 使用：\n\t* windows\n\t\t* 下载windows版本，然后解压，打开 DebugGap.exe,然后可以默认设置也可以自定义设置\n\t\t* 接下来，在我们要调试的页面最底部添加一个引用\n\t\t\t`<script src=\"./debuggap.js\"></script>`\n\t\t* 直接访问我们的页面，页面右上角会多出一个蓝色的圆形按钮，pc上如果点不动，就使用浏览器模拟器\n\t\t* 点击config，把之前设置的ip port填进去，然后点击连接\n\t\t* 再点击蓝色的圆形按钮，再点击Inspect,观察之前起的应用，多一个蓝色框框的区域，点击进去，调试工具就出来了。\n\t\t* 移动设备调试，可以把手机和电脑连接同一个wifi，保证在一个网段，然后在电脑上起一个服务器，保证页面通过手机能访问到，然后手机访问电脑ip+端口号，然后就是页面路径，就可以访问到了，其他操作同上。\n\t* mac,linux\n\t\t* 方法同上\n* 支持情况\n\t* windows从性能以及调试情况来看，支持的最好\n* 断点调试条件\n\t* chrome浏览器可以单步调试，\n\t* 没定制过的webview, Android 4.4+\n\t* 需要在电脑上安装设备驱动，并且打开usb调试，连接数据线\n\n##### 3. Weinre\n使用方法\n* windows安装 `npm -g install weinre`\n* `weinre —httpPort 8081 —boundHost -all-` 用这个打开8081调试端口\n* 浏览器打开 `http://localhost:8081` 会看到weinre的介绍信息\n* `<script src=\"http://localhost:8081/target/target-script-min.js#anonymous\"></script>`\n* 需要调试的页面加上这个脚本，需要将上面代码中的localhost替换为电脑ip，手机访问页面也可以\n* anonymous 这个可以换成自己的标识，这样多人调试的时候也不会混乱了。\n\n##### 4. vorlon\n使用方法\n基于 Node.js 和 Socket.IO 开发。\n调试css比较靠谱，其安装方法以及调试方式和Weinre比较类似，但是更容易定位问题，忽略内容，直观的都是dom结构\n* 安装 `npm i -g vorlon`\n* 运行 `vorlon`\n* 需要调试的页面上添加 `<script src=\"http://localhost:1337/vorlon.js\"></script>`这样一段标签\n* 浏览器访问 `http://localhost:1337` 就可以调试了\n\n##### 5. UC浏览器开发版\n准备\n* adb tool。\n* UC浏览器开发版本(apk)。\n* usb数据线一根\nWIFI的调试方法，保证pc和手机在同一个网段，在PC上打开Chrome或Safari，在地址栏输入：手机IP + :9998，在手机端会弹出确认按钮，点击确认后，就可在pc上看到效果了\n\n##### 6. Chrome\n调试方法\n* 翻墙。\n* PC Chrome最新版\n* 安卓 Chrome最新版\n* 插线后，在chrome浏览器输入 chrome://inspect\n\n##### 7. Firefox\n调试方法\n* PC Firefox 15+\n* Android Firefox 15+\n* 一根数据线\n* adb驱动(UC浏览器那步已经安装过了)\n* adb devices（查看连接的设备）\n* adb forward tcp:6000 tcp:6000（本地开一个接口做代理接受数据）\n* 手机端Firefox点击菜单栏的”设置”->”开发者工具”，勾选”远程调试”。\n* PC端Firefox打开about:config，设置devtools.debugger.remote-enabled为True\n* 接下来找到桌面端Firefox-菜单-工具-Web开发者-远程链接。保证端口号和上面开启的端口号一致就好了。\n\n##### 8. Opera\n调试方法\n* 打开pc opera control+shift+i 打开调试，点击右上角远程调试设置端口，在用模拟器输入opera:debug，连接端口，就可以了\n* 上面这个方法有些过时 打开新版的手机opera浏览器，输入opera:debug，里面讲解了调试方式，工具就是adb和pc chrome浏览器\n稍微麻烦一点，因为要装一些软件，完成后可以用pc端模拟器调试也可以用真机调试。\n\n##### 9. browsersync\n这是一个开发利器，能让浏览器实时、快速响应文件更改（html、js、css、sass、less等）并自动刷新页面。可以同时在PC、平板、手机等设备下同时进项调试。","slug":"如何调试移动端网页","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhqj003ot0yjiwnuwdh3","content":"<h4 id=\"真机上调试移动端的页面\">真机上调试移动端的页面</h4><h5 id=\"1-_mac_safri_ios设备safri\">1. mac safri ios设备safri</h5><p>步骤：</p>\n<ol>\n<li>在设置&gt;safri&gt;高级web检查器（打开）</li>\n<li>mac下safri 偏好设置&gt;高级&gt;显示开发菜单</li>\n<li>在手机safri访问网址，在开发中找到自己的设备，找到网址，点击就可以调试<a id=\"more\"></a>\n</li>\n</ol>\n<h5 id=\"2-_DebugGap\">2. DebugGap</h5><p>官网地址：<a href=\"http://www.debuggap.com/\" target=\"_blank\" rel=\"external\">http://www.debuggap.com/</a></p>\n<ul>\n<li>介绍<ul>\n<li>支持 windows、mac、linux</li>\n<li>支持HTML5的都支持，不仅限手机内置浏览器，及应用或平台。</li>\n<li>多设备调试</li>\n<li>调试功能：<ul>\n<li>Elements - css修改、结构查看</li>\n<li>Network - 网络请求查看</li>\n<li>Resources - cookie、本地存储查看</li>\n<li>Sources - 断点调试</li>\n<li>Console - 控制台</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>使用：<ul>\n<li>windows<ul>\n<li>下载windows版本，然后解压，打开 DebugGap.exe,然后可以默认设置也可以自定义设置</li>\n<li>接下来，在我们要调试的页面最底部添加一个引用<br>  <code>&lt;script src=&quot;./debuggap.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>直接访问我们的页面，页面右上角会多出一个蓝色的圆形按钮，pc上如果点不动，就使用浏览器模拟器</li>\n<li>点击config，把之前设置的ip port填进去，然后点击连接</li>\n<li>再点击蓝色的圆形按钮，再点击Inspect,观察之前起的应用，多一个蓝色框框的区域，点击进去，调试工具就出来了。</li>\n<li>移动设备调试，可以把手机和电脑连接同一个wifi，保证在一个网段，然后在电脑上起一个服务器，保证页面通过手机能访问到，然后手机访问电脑ip+端口号，然后就是页面路径，就可以访问到了，其他操作同上。</li>\n</ul>\n</li>\n<li>mac,linux<ul>\n<li>方法同上</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>支持情况<ul>\n<li>windows从性能以及调试情况来看，支持的最好</li>\n</ul>\n</li>\n<li>断点调试条件<ul>\n<li>chrome浏览器可以单步调试，</li>\n<li>没定制过的webview, Android 4.4+</li>\n<li>需要在电脑上安装设备驱动，并且打开usb调试，连接数据线</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-_Weinre\">3. Weinre</h5><p>使用方法</p>\n<ul>\n<li>windows安装 <code>npm -g install weinre</code></li>\n<li><code>weinre —httpPort 8081 —boundHost -all-</code> 用这个打开8081调试端口</li>\n<li>浏览器打开 <code>http://localhost:8081</code> 会看到weinre的介绍信息</li>\n<li><code>&lt;script src=&quot;http://localhost:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code></li>\n<li>需要调试的页面加上这个脚本，需要将上面代码中的localhost替换为电脑ip，手机访问页面也可以</li>\n<li>anonymous 这个可以换成自己的标识，这样多人调试的时候也不会混乱了。</li>\n</ul>\n<h5 id=\"4-_vorlon\">4. vorlon</h5><p>使用方法<br>基于 Node.js 和 Socket.IO 开发。<br>调试css比较靠谱，其安装方法以及调试方式和Weinre比较类似，但是更容易定位问题，忽略内容，直观的都是dom结构</p>\n<ul>\n<li>安装 <code>npm i -g vorlon</code></li>\n<li>运行 <code>vorlon</code></li>\n<li>需要调试的页面上添加 <code>&lt;script src=&quot;http://localhost:1337/vorlon.js&quot;&gt;&lt;/script&gt;</code>这样一段标签</li>\n<li>浏览器访问 <code>http://localhost:1337</code> 就可以调试了</li>\n</ul>\n<h5 id=\"5-_UC浏览器开发版\">5. UC浏览器开发版</h5><p>准备</p>\n<ul>\n<li>adb tool。</li>\n<li>UC浏览器开发版本(apk)。</li>\n<li>usb数据线一根<br>WIFI的调试方法，保证pc和手机在同一个网段，在PC上打开Chrome或Safari，在地址栏输入：手机IP + :9998，在手机端会弹出确认按钮，点击确认后，就可在pc上看到效果了</li>\n</ul>\n<h5 id=\"6-_Chrome\">6. Chrome</h5><p>调试方法</p>\n<ul>\n<li>翻墙。</li>\n<li>PC Chrome最新版</li>\n<li>安卓 Chrome最新版</li>\n<li>插线后，在chrome浏览器输入 chrome://inspect</li>\n</ul>\n<h5 id=\"7-_Firefox\">7. Firefox</h5><p>调试方法</p>\n<ul>\n<li>PC Firefox 15+</li>\n<li>Android Firefox 15+</li>\n<li>一根数据线</li>\n<li>adb驱动(UC浏览器那步已经安装过了)</li>\n<li>adb devices（查看连接的设备）</li>\n<li>adb forward tcp:6000 tcp:6000（本地开一个接口做代理接受数据）</li>\n<li>手机端Firefox点击菜单栏的”设置”-&gt;”开发者工具”，勾选”远程调试”。</li>\n<li>PC端Firefox打开about:config，设置devtools.debugger.remote-enabled为True</li>\n<li>接下来找到桌面端Firefox-菜单-工具-Web开发者-远程链接。保证端口号和上面开启的端口号一致就好了。</li>\n</ul>\n<h5 id=\"8-_Opera\">8. Opera</h5><p>调试方法</p>\n<ul>\n<li>打开pc opera control+shift+i 打开调试，点击右上角远程调试设置端口，在用模拟器输入opera:debug，连接端口，就可以了</li>\n<li>上面这个方法有些过时 打开新版的手机opera浏览器，输入opera:debug，里面讲解了调试方式，工具就是adb和pc chrome浏览器<br>稍微麻烦一点，因为要装一些软件，完成后可以用pc端模拟器调试也可以用真机调试。</li>\n</ul>\n<h5 id=\"9-_browsersync\">9. browsersync</h5><p>这是一个开发利器，能让浏览器实时、快速响应文件更改（html、js、css、sass、less等）并自动刷新页面。可以同时在PC、平板、手机等设备下同时进项调试。</p>\n","excerpt":"<h4 id=\"真机上调试移动端的页面\">真机上调试移动端的页面</h4><h5 id=\"1-_mac_safri_ios设备safri\">1. mac safri ios设备safri</h5><p>步骤：</p>\n<ol>\n<li>在设置&gt;safri&gt;高级web检查器（打开）</li>\n<li>mac下safri 偏好设置&gt;高级&gt;显示开发菜单</li>\n<li>在手机safri访问网址，在开发中找到自己的设备，找到网址，点击就可以调试","more":"</li>\n</ol>\n<h5 id=\"2-_DebugGap\">2. DebugGap</h5><p>官网地址：<a href=\"http://www.debuggap.com/\">http://www.debuggap.com/</a></p>\n<ul>\n<li>介绍<ul>\n<li>支持 windows、mac、linux</li>\n<li>支持HTML5的都支持，不仅限手机内置浏览器，及应用或平台。</li>\n<li>多设备调试</li>\n<li>调试功能：<ul>\n<li>Elements - css修改、结构查看</li>\n<li>Network - 网络请求查看</li>\n<li>Resources - cookie、本地存储查看</li>\n<li>Sources - 断点调试</li>\n<li>Console - 控制台</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>使用：<ul>\n<li>windows<ul>\n<li>下载windows版本，然后解压，打开 DebugGap.exe,然后可以默认设置也可以自定义设置</li>\n<li>接下来，在我们要调试的页面最底部添加一个引用<br>  <code>&lt;script src=&quot;./debuggap.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>直接访问我们的页面，页面右上角会多出一个蓝色的圆形按钮，pc上如果点不动，就使用浏览器模拟器</li>\n<li>点击config，把之前设置的ip port填进去，然后点击连接</li>\n<li>再点击蓝色的圆形按钮，再点击Inspect,观察之前起的应用，多一个蓝色框框的区域，点击进去，调试工具就出来了。</li>\n<li>移动设备调试，可以把手机和电脑连接同一个wifi，保证在一个网段，然后在电脑上起一个服务器，保证页面通过手机能访问到，然后手机访问电脑ip+端口号，然后就是页面路径，就可以访问到了，其他操作同上。</li>\n</ul>\n</li>\n<li>mac,linux<ul>\n<li>方法同上</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>支持情况<ul>\n<li>windows从性能以及调试情况来看，支持的最好</li>\n</ul>\n</li>\n<li>断点调试条件<ul>\n<li>chrome浏览器可以单步调试，</li>\n<li>没定制过的webview, Android 4.4+</li>\n<li>需要在电脑上安装设备驱动，并且打开usb调试，连接数据线</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"3-_Weinre\">3. Weinre</h5><p>使用方法</p>\n<ul>\n<li>windows安装 <code>npm -g install weinre</code></li>\n<li><code>weinre —httpPort 8081 —boundHost -all-</code> 用这个打开8081调试端口</li>\n<li>浏览器打开 <code>http://localhost:8081</code> 会看到weinre的介绍信息</li>\n<li><code>&lt;script src=&quot;http://localhost:8081/target/target-script-min.js#anonymous&quot;&gt;&lt;/script&gt;</code></li>\n<li>需要调试的页面加上这个脚本，需要将上面代码中的localhost替换为电脑ip，手机访问页面也可以</li>\n<li>anonymous 这个可以换成自己的标识，这样多人调试的时候也不会混乱了。</li>\n</ul>\n<h5 id=\"4-_vorlon\">4. vorlon</h5><p>使用方法<br>基于 Node.js 和 Socket.IO 开发。<br>调试css比较靠谱，其安装方法以及调试方式和Weinre比较类似，但是更容易定位问题，忽略内容，直观的都是dom结构</p>\n<ul>\n<li>安装 <code>npm i -g vorlon</code></li>\n<li>运行 <code>vorlon</code></li>\n<li>需要调试的页面上添加 <code>&lt;script src=&quot;http://localhost:1337/vorlon.js&quot;&gt;&lt;/script&gt;</code>这样一段标签</li>\n<li>浏览器访问 <code>http://localhost:1337</code> 就可以调试了</li>\n</ul>\n<h5 id=\"5-_UC浏览器开发版\">5. UC浏览器开发版</h5><p>准备</p>\n<ul>\n<li>adb tool。</li>\n<li>UC浏览器开发版本(apk)。</li>\n<li>usb数据线一根<br>WIFI的调试方法，保证pc和手机在同一个网段，在PC上打开Chrome或Safari，在地址栏输入：手机IP + :9998，在手机端会弹出确认按钮，点击确认后，就可在pc上看到效果了</li>\n</ul>\n<h5 id=\"6-_Chrome\">6. Chrome</h5><p>调试方法</p>\n<ul>\n<li>翻墙。</li>\n<li>PC Chrome最新版</li>\n<li>安卓 Chrome最新版</li>\n<li>插线后，在chrome浏览器输入 chrome://inspect</li>\n</ul>\n<h5 id=\"7-_Firefox\">7. Firefox</h5><p>调试方法</p>\n<ul>\n<li>PC Firefox 15+</li>\n<li>Android Firefox 15+</li>\n<li>一根数据线</li>\n<li>adb驱动(UC浏览器那步已经安装过了)</li>\n<li>adb devices（查看连接的设备）</li>\n<li>adb forward tcp:6000 tcp:6000（本地开一个接口做代理接受数据）</li>\n<li>手机端Firefox点击菜单栏的”设置”-&gt;”开发者工具”，勾选”远程调试”。</li>\n<li>PC端Firefox打开about:config，设置devtools.debugger.remote-enabled为True</li>\n<li>接下来找到桌面端Firefox-菜单-工具-Web开发者-远程链接。保证端口号和上面开启的端口号一致就好了。</li>\n</ul>\n<h5 id=\"8-_Opera\">8. Opera</h5><p>调试方法</p>\n<ul>\n<li>打开pc opera control+shift+i 打开调试，点击右上角远程调试设置端口，在用模拟器输入opera:debug，连接端口，就可以了</li>\n<li>上面这个方法有些过时 打开新版的手机opera浏览器，输入opera:debug，里面讲解了调试方式，工具就是adb和pc chrome浏览器<br>稍微麻烦一点，因为要装一些软件，完成后可以用pc端模拟器调试也可以用真机调试。</li>\n</ul>\n<h5 id=\"9-_browsersync\">9. browsersync</h5><p>这是一个开发利器，能让浏览器实时、快速响应文件更改（html、js、css、sass、less等）并自动刷新页面。可以同时在PC、平板、手机等设备下同时进项调试。</p>"},{"title":"实现发送邮件功能","keywords":"email,邮件,nodejs发送邮件,python发送邮件,发送邮件,send email","description":"代码实现发送邮件功能","date":"2017-02-09T03:00:12.000Z","toc":true,"_content":"日常开发中，我们经常会有发送邮件的需求，无论是发送代码中的异常或者错误信息，还是发送一些网站数据，下面我们就动手去实现一下这个功能。\n\n<!--more-->\n\n##### nodejs\n以发送163邮箱为例，使用nodemailer模块，这里用的版本是0.7.1，最新版本的参数稍有变更，请自行[前往](https://github.com/nodemailer/nodemailer)查看\n```javascript\n// \"nodemailer\": \"0.7.1\"\nimport nodemailer from 'nodemailer';\n\nlet smtpTransport = nodemailer.createTransport(\"SMTP\", {\n  host: \"smtp.163.com\",\n  secureConnection: true,\n  port: 465,\n  auth: {\n    user: \"test@163.com\",\n    pass: \"test\" // 使用客户端授权密码，在邮件设置中可以获取到\n  }\n});\n\nlet mailOptionsDefault = {\n  from: \"test <test@163.com>\",\n  to: \"test@test.com\",\n  subject: \"test\",\n  text: \"test\",\n  html: \"test\"\n}\n\nfunction sendEmail(){\n  smtpTransport.sendMail(mailOptionsDefault, (error, response) => {\n    if(error){\n      console.log(error);\n    } else{\n      console.log(\"Message sent: \" + response.message);\n    }\n    smtpTransport.close();\n  });\n}\n\nexport {\n  sendEmail\n}\n```\n\n##### python\n以发送163邮箱为例\n```python\nimport smtplib \nfrom email.mime.text import MIMEText\n\ndef sendMail(text):\n    sender = 'test@163.com'  \n    receiver = ['test@163.com']\n    mailToCc = []\n    subject = '[test]'  \n    smtpserver = 'smtp.163.com'  \n    username = 'test@163.com'  \n    password = 'test'  // 使用客户端授权密码，在邮件设置中可以获取到\n    \n    msg = MIMEText(text, 'html', 'utf-8')      \n    msg['Subject'] = subject  \n    msg['From'] = sender\n    msg['To'] = ';'.join(receiver)\n    msg['Cc'] = ';'.join(mailToCc)\n    smtp = smtplib.SMTP_SSL('smtp.163.com', 465)  \n    smtp.connect(smtpserver)  \n    smtp.login(username, password)  \n    smtp.sendmail(sender, receiver + mailToCc, msg.as_string())  \n    smtp.quit() \n\nsendMail('test')\n```\n\n##### html\n简单的打开邮箱客户端，自动填充收件人\n```html\n<a href=\"Mailto:wuzhuo0425@163.com\">email</a>\n```\n\n稍微复杂一些的，内容更丰富的发送方式\n```html\n<a href=\"Mailto:wuzhuo0425@163.com?CC=test@163.com&BCC=test@163.com&Subject=Hello&Body=world\">email</a>\n```","source":"_posts/实现发送邮件功能.md","raw":"title: 实现发送邮件功能\nkeywords: email,邮件,nodejs发送邮件,python发送邮件,发送邮件,send email\ndescription: 代码实现发送邮件功能\ndate: 2017-02-09 11:00:12\ntags: web\ntoc: true\n---\n日常开发中，我们经常会有发送邮件的需求，无论是发送代码中的异常或者错误信息，还是发送一些网站数据，下面我们就动手去实现一下这个功能。\n\n<!--more-->\n\n##### nodejs\n以发送163邮箱为例，使用nodemailer模块，这里用的版本是0.7.1，最新版本的参数稍有变更，请自行[前往](https://github.com/nodemailer/nodemailer)查看\n```javascript\n// \"nodemailer\": \"0.7.1\"\nimport nodemailer from 'nodemailer';\n\nlet smtpTransport = nodemailer.createTransport(\"SMTP\", {\n  host: \"smtp.163.com\",\n  secureConnection: true,\n  port: 465,\n  auth: {\n    user: \"test@163.com\",\n    pass: \"test\" // 使用客户端授权密码，在邮件设置中可以获取到\n  }\n});\n\nlet mailOptionsDefault = {\n  from: \"test <test@163.com>\",\n  to: \"test@test.com\",\n  subject: \"test\",\n  text: \"test\",\n  html: \"test\"\n}\n\nfunction sendEmail(){\n  smtpTransport.sendMail(mailOptionsDefault, (error, response) => {\n    if(error){\n      console.log(error);\n    } else{\n      console.log(\"Message sent: \" + response.message);\n    }\n    smtpTransport.close();\n  });\n}\n\nexport {\n  sendEmail\n}\n```\n\n##### python\n以发送163邮箱为例\n```python\nimport smtplib \nfrom email.mime.text import MIMEText\n\ndef sendMail(text):\n    sender = 'test@163.com'  \n    receiver = ['test@163.com']\n    mailToCc = []\n    subject = '[test]'  \n    smtpserver = 'smtp.163.com'  \n    username = 'test@163.com'  \n    password = 'test'  // 使用客户端授权密码，在邮件设置中可以获取到\n    \n    msg = MIMEText(text, 'html', 'utf-8')      \n    msg['Subject'] = subject  \n    msg['From'] = sender\n    msg['To'] = ';'.join(receiver)\n    msg['Cc'] = ';'.join(mailToCc)\n    smtp = smtplib.SMTP_SSL('smtp.163.com', 465)  \n    smtp.connect(smtpserver)  \n    smtp.login(username, password)  \n    smtp.sendmail(sender, receiver + mailToCc, msg.as_string())  \n    smtp.quit() \n\nsendMail('test')\n```\n\n##### html\n简单的打开邮箱客户端，自动填充收件人\n```html\n<a href=\"Mailto:wuzhuo0425@163.com\">email</a>\n```\n\n稍微复杂一些的，内容更丰富的发送方式\n```html\n<a href=\"Mailto:wuzhuo0425@163.com?CC=test@163.com&BCC=test@163.com&Subject=Hello&Body=world\">email</a>\n```","slug":"实现发送邮件功能","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhqk003qt0yjer6ukbep","content":"<p>日常开发中，我们经常会有发送邮件的需求，无论是发送代码中的异常或者错误信息，还是发送一些网站数据，下面我们就动手去实现一下这个功能。</p>\n<a id=\"more\"></a>\n<h5 id=\"nodejs\">nodejs</h5><p>以发送163邮箱为例，使用nodemailer模块，这里用的版本是0.7.1，最新版本的参数稍有变更，请自行<a href=\"https://github.com/nodemailer/nodemailer\" target=\"_blank\" rel=\"external\">前往</a>查看<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// \"nodemailer\": \"0.7.1\"</span></div><div class=\"line\"><span class=\"keyword\">import</span> nodemailer <span class=\"keyword\">from</span> <span class=\"string\">'nodemailer'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> smtpTransport = nodemailer.createTransport(<span class=\"string\">\"SMTP\"</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">host</span>: <span class=\"string\">\"smtp.163.com\"</span>,</div><div class=\"line\">  <span class=\"attr\">secureConnection</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">port</span>: <span class=\"number\">465</span>,</div><div class=\"line\">  <span class=\"attr\">auth</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">user</span>: <span class=\"string\">\"test@163.com\"</span>,</div><div class=\"line\">    <span class=\"attr\">pass</span>: <span class=\"string\">\"test\"</span> <span class=\"comment\">// 使用客户端授权密码，在邮件设置中可以获取到</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> mailOptionsDefault = &#123;</div><div class=\"line\">  <span class=\"attr\">from</span>: <span class=\"string\">\"test &lt;test@163.com&gt;\"</span>,</div><div class=\"line\">  <span class=\"attr\">to</span>: <span class=\"string\">\"test@test.com\"</span>,</div><div class=\"line\">  <span class=\"attr\">subject</span>: <span class=\"string\">\"test\"</span>,</div><div class=\"line\">  <span class=\"attr\">text</span>: <span class=\"string\">\"test\"</span>,</div><div class=\"line\">  <span class=\"attr\">html</span>: <span class=\"string\">\"test\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendEmail</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  smtpTransport.sendMail(mailOptionsDefault, (error, response) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(error)&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Message sent: \"</span> + response.message);</div><div class=\"line\">    &#125;</div><div class=\"line\">    smtpTransport.close();</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> &#123;</div><div class=\"line\">  sendEmail</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"python\">python</h5><p>以发送163邮箱为例<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> smtplib </div><div class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendMail</span><span class=\"params\">(text)</span>:</span></div><div class=\"line\">    sender = <span class=\"string\">'test@163.com'</span>  </div><div class=\"line\">    receiver = [<span class=\"string\">'test@163.com'</span>]</div><div class=\"line\">    mailToCc = []</div><div class=\"line\">    subject = <span class=\"string\">'[test]'</span>  </div><div class=\"line\">    smtpserver = <span class=\"string\">'smtp.163.com'</span>  </div><div class=\"line\">    username = <span class=\"string\">'test@163.com'</span>  </div><div class=\"line\">    password = <span class=\"string\">'test'</span>  // 使用客户端授权密码，在邮件设置中可以获取到</div><div class=\"line\">    </div><div class=\"line\">    msg = MIMEText(text, <span class=\"string\">'html'</span>, <span class=\"string\">'utf-8'</span>)      </div><div class=\"line\">    msg[<span class=\"string\">'Subject'</span>] = subject  </div><div class=\"line\">    msg[<span class=\"string\">'From'</span>] = sender</div><div class=\"line\">    msg[<span class=\"string\">'To'</span>] = <span class=\"string\">';'</span>.join(receiver)</div><div class=\"line\">    msg[<span class=\"string\">'Cc'</span>] = <span class=\"string\">';'</span>.join(mailToCc)</div><div class=\"line\">    smtp = smtplib.SMTP_SSL(<span class=\"string\">'smtp.163.com'</span>, <span class=\"number\">465</span>)  </div><div class=\"line\">    smtp.connect(smtpserver)  </div><div class=\"line\">    smtp.login(username, password)  </div><div class=\"line\">    smtp.sendmail(sender, receiver + mailToCc, msg.as_string())  </div><div class=\"line\">    smtp.quit() </div><div class=\"line\"></div><div class=\"line\">sendMail(<span class=\"string\">'test'</span>)</div></pre></td></tr></table></figure></p>\n<h5 id=\"html\">html</h5><p>简单的打开邮箱客户端，自动填充收件人<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"Mailto:wuzhuo0425@163.com\"</span>&gt;</span>email<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>稍微复杂一些的，内容更丰富的发送方式<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"Mailto:wuzhuo0425@163.com?CC=test@163.com&amp;BCC=test@163.com&amp;Subject=Hello&amp;Body=world\"</span>&gt;</span>email<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n","excerpt":"<p>日常开发中，我们经常会有发送邮件的需求，无论是发送代码中的异常或者错误信息，还是发送一些网站数据，下面我们就动手去实现一下这个功能。</p>","more":"<h5 id=\"nodejs\">nodejs</h5><p>以发送163邮箱为例，使用nodemailer模块，这里用的版本是0.7.1，最新版本的参数稍有变更，请自行<a href=\"https://github.com/nodemailer/nodemailer\">前往</a>查看<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// \"nodemailer\": \"0.7.1\"</span></div><div class=\"line\"><span class=\"keyword\">import</span> nodemailer <span class=\"keyword\">from</span> <span class=\"string\">'nodemailer'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> smtpTransport = nodemailer.createTransport(<span class=\"string\">\"SMTP\"</span>, &#123;</div><div class=\"line\">  <span class=\"attr\">host</span>: <span class=\"string\">\"smtp.163.com\"</span>,</div><div class=\"line\">  <span class=\"attr\">secureConnection</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">  <span class=\"attr\">port</span>: <span class=\"number\">465</span>,</div><div class=\"line\">  <span class=\"attr\">auth</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">user</span>: <span class=\"string\">\"test@163.com\"</span>,</div><div class=\"line\">    <span class=\"attr\">pass</span>: <span class=\"string\">\"test\"</span> <span class=\"comment\">// 使用客户端授权密码，在邮件设置中可以获取到</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> mailOptionsDefault = &#123;</div><div class=\"line\">  <span class=\"attr\">from</span>: <span class=\"string\">\"test &lt;test@163.com&gt;\"</span>,</div><div class=\"line\">  <span class=\"attr\">to</span>: <span class=\"string\">\"test@test.com\"</span>,</div><div class=\"line\">  <span class=\"attr\">subject</span>: <span class=\"string\">\"test\"</span>,</div><div class=\"line\">  <span class=\"attr\">text</span>: <span class=\"string\">\"test\"</span>,</div><div class=\"line\">  <span class=\"attr\">html</span>: <span class=\"string\">\"test\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sendEmail</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  smtpTransport.sendMail(mailOptionsDefault, (error, response) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(error)&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(error);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">\"Message sent: \"</span> + response.message);</div><div class=\"line\">    &#125;</div><div class=\"line\">    smtpTransport.close();</div><div class=\"line\">  &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> &#123;</div><div class=\"line\">  sendEmail</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"python\">python</h5><p>以发送163邮箱为例<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> smtplib </div><div class=\"line\"><span class=\"keyword\">from</span> email.mime.text <span class=\"keyword\">import</span> MIMEText</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sendMail</span><span class=\"params\">(text)</span>:</span></div><div class=\"line\">    sender = <span class=\"string\">'test@163.com'</span>  </div><div class=\"line\">    receiver = [<span class=\"string\">'test@163.com'</span>]</div><div class=\"line\">    mailToCc = []</div><div class=\"line\">    subject = <span class=\"string\">'[test]'</span>  </div><div class=\"line\">    smtpserver = <span class=\"string\">'smtp.163.com'</span>  </div><div class=\"line\">    username = <span class=\"string\">'test@163.com'</span>  </div><div class=\"line\">    password = <span class=\"string\">'test'</span>  // 使用客户端授权密码，在邮件设置中可以获取到</div><div class=\"line\">    </div><div class=\"line\">    msg = MIMEText(text, <span class=\"string\">'html'</span>, <span class=\"string\">'utf-8'</span>)      </div><div class=\"line\">    msg[<span class=\"string\">'Subject'</span>] = subject  </div><div class=\"line\">    msg[<span class=\"string\">'From'</span>] = sender</div><div class=\"line\">    msg[<span class=\"string\">'To'</span>] = <span class=\"string\">';'</span>.join(receiver)</div><div class=\"line\">    msg[<span class=\"string\">'Cc'</span>] = <span class=\"string\">';'</span>.join(mailToCc)</div><div class=\"line\">    smtp = smtplib.SMTP_SSL(<span class=\"string\">'smtp.163.com'</span>, <span class=\"number\">465</span>)  </div><div class=\"line\">    smtp.connect(smtpserver)  </div><div class=\"line\">    smtp.login(username, password)  </div><div class=\"line\">    smtp.sendmail(sender, receiver + mailToCc, msg.as_string())  </div><div class=\"line\">    smtp.quit() </div><div class=\"line\"></div><div class=\"line\">sendMail(<span class=\"string\">'test'</span>)</div></pre></td></tr></table></figure></p>\n<h5 id=\"html\">html</h5><p>简单的打开邮箱客户端，自动填充收件人<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"Mailto:wuzhuo0425@163.com\"</span>&gt;</span>email<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>\n<p>稍微复杂一些的，内容更丰富的发送方式<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"Mailto:wuzhuo0425@163.com?CC=test@163.com&amp;BCC=test@163.com&amp;Subject=Hello&amp;Body=world\"</span>&gt;</span>email<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></div></pre></td></tr></table></figure></p>"},{"title":"延迟加载解决方案","date":"2015-10-25T07:03:01.000Z","toc":true,"_content":"#### 图片\n>* 给图片添加data-lazy等标签，放图片url,等页面加载完再去做替换，不会阻塞页面onload。\n* 同样像上面那样，但是等到页面滚动到特殊位置的时候，才去加载对应图片，实现懒加载。\n* 对于一些大图，我们还可以先给他一个质量低的图片，然后用js创建image对象，给它赋值src,监听它的onload事件，加载完后把url赋给img标签,实现预加载。\n* jquery的lazyload插件，给图片设置data-original类似的标签，可以实现懒加载。\n<!--more-->\n说了这么多，再看看怎么判断浏览器滚动到了哪里，哪些需要加载。\n```javascript\n// 浏览器可视区域 \nfunction getClient(){ \n    var l, t, w, h; \n    l = document.documentElement.scrollLeft || document.body.scrollLeft; \n    t = document.documentElement.scrollTop || document.body.scrollTop; \n    w = document.documentElement.clientWidth; \n    h = document.documentElement.clientHeight; \n    return { left: l, top: t, width: w, height: h }; \n}\n```\n```javascript\n// 待加载资源位置 \nfunction getSubClient(p){ \n    var l = 0, t = 0, w, h; \n    w = p.offsetWidth; \n    h = p.offsetHeight; \n    while(p.offsetParent){ \n        l += p.offsetLeft; \n        t += p.offsetTop; \n        p = p.offsetParent; \n    } \n    return { left: l, top: t, width: w, height: h }; \n}\n```\n```javascript\n// 判断两个矩形是否相交,如果相交说明dom已经出现在了窗口，需要加载了\nfunction intens(rec1, rec2){ \n    var lc1, lc2, tc1, tc2, w1, h1; \n    lc1 = rec1.left + rec1.width / 2; \n    lc2 = rec2.left + rec2.width / 2; \n    tc1 = rec1.top + rec1.height / 2 ; \n    tc2 = rec2.top + rec2.height / 2 ; \n    w1 = (rec1.width + rec2.width) / 2 ; \n    h1 = (rec1.height + rec2.height) / 2; \n    return Math.abs(lc1 - lc2) < w1 && Math.abs(tc1 - tc2) < h1 ; \n}\n```\n```javascript\n// 判断某个区域是否出现在可视区域 \nfunction test(domArr, prec1, callback){ \n    var prec2; \n    for (var i = domArr.length - 1; i >= 0; i--) { \n        if (domArr[i]) { \n            prec2 = getSubClient(domArr[i]); \n            if (intens(prec1, prec2)) { \n                callback(domArr[i]); \n                delete domArr[i]; \n            } \n        } \n    } \n}\n```\n```javascript\n// 检查dom是否出现在可视区域 \nfunction check(){ \n    var prec1 = getClient(); \n    test(eleArr, prec1, function(dom){ \n        dom.innerHTML ＝ '123';\n    }) \n} \nvar ele1 = document.getElementById(\"js_ele1\"); \nvar ele2 = document.getElementById(\"js_ele2\"); \nvar eleArr = [ele1, ele2]; \nwindow.onscroll = function(){ \n    check();\n} \nwindow.onresize = function(){ \n    check(); \n}\n```\n\n#### 非图片\n* 有些在可视区外加载的列表，页面比较靠底部，不需要页面加载的时候就展示，可以等页面滚动到相应的位置再去发请求，做渲染之类的\n* 还有些动画效果也可以这样\n* 但是注意，要做个判断，这样的动作应该只一次就够了\n\n##### 优点\n* 提高网页响应速度，毕竟图片加载会阻塞onload事件\n* 影响网页收录与排名，因为蜘蛛爬页面的时候，如果响应速度快，页面优化值会高\n* 减少请求，降低服务器压力，减少流量\n\n##### 缺点\n* 图片不会被收录\n* 如果响应速度慢，会看到图片加载过程","source":"_posts/延迟加载解决方案.md","raw":"title: 延迟加载解决方案\ndate: 2015-10-25 15:03:01\ntags: javascript\ntoc: true\n---\n#### 图片\n>* 给图片添加data-lazy等标签，放图片url,等页面加载完再去做替换，不会阻塞页面onload。\n* 同样像上面那样，但是等到页面滚动到特殊位置的时候，才去加载对应图片，实现懒加载。\n* 对于一些大图，我们还可以先给他一个质量低的图片，然后用js创建image对象，给它赋值src,监听它的onload事件，加载完后把url赋给img标签,实现预加载。\n* jquery的lazyload插件，给图片设置data-original类似的标签，可以实现懒加载。\n<!--more-->\n说了这么多，再看看怎么判断浏览器滚动到了哪里，哪些需要加载。\n```javascript\n// 浏览器可视区域 \nfunction getClient(){ \n    var l, t, w, h; \n    l = document.documentElement.scrollLeft || document.body.scrollLeft; \n    t = document.documentElement.scrollTop || document.body.scrollTop; \n    w = document.documentElement.clientWidth; \n    h = document.documentElement.clientHeight; \n    return { left: l, top: t, width: w, height: h }; \n}\n```\n```javascript\n// 待加载资源位置 \nfunction getSubClient(p){ \n    var l = 0, t = 0, w, h; \n    w = p.offsetWidth; \n    h = p.offsetHeight; \n    while(p.offsetParent){ \n        l += p.offsetLeft; \n        t += p.offsetTop; \n        p = p.offsetParent; \n    } \n    return { left: l, top: t, width: w, height: h }; \n}\n```\n```javascript\n// 判断两个矩形是否相交,如果相交说明dom已经出现在了窗口，需要加载了\nfunction intens(rec1, rec2){ \n    var lc1, lc2, tc1, tc2, w1, h1; \n    lc1 = rec1.left + rec1.width / 2; \n    lc2 = rec2.left + rec2.width / 2; \n    tc1 = rec1.top + rec1.height / 2 ; \n    tc2 = rec2.top + rec2.height / 2 ; \n    w1 = (rec1.width + rec2.width) / 2 ; \n    h1 = (rec1.height + rec2.height) / 2; \n    return Math.abs(lc1 - lc2) < w1 && Math.abs(tc1 - tc2) < h1 ; \n}\n```\n```javascript\n// 判断某个区域是否出现在可视区域 \nfunction test(domArr, prec1, callback){ \n    var prec2; \n    for (var i = domArr.length - 1; i >= 0; i--) { \n        if (domArr[i]) { \n            prec2 = getSubClient(domArr[i]); \n            if (intens(prec1, prec2)) { \n                callback(domArr[i]); \n                delete domArr[i]; \n            } \n        } \n    } \n}\n```\n```javascript\n// 检查dom是否出现在可视区域 \nfunction check(){ \n    var prec1 = getClient(); \n    test(eleArr, prec1, function(dom){ \n        dom.innerHTML ＝ '123';\n    }) \n} \nvar ele1 = document.getElementById(\"js_ele1\"); \nvar ele2 = document.getElementById(\"js_ele2\"); \nvar eleArr = [ele1, ele2]; \nwindow.onscroll = function(){ \n    check();\n} \nwindow.onresize = function(){ \n    check(); \n}\n```\n\n#### 非图片\n* 有些在可视区外加载的列表，页面比较靠底部，不需要页面加载的时候就展示，可以等页面滚动到相应的位置再去发请求，做渲染之类的\n* 还有些动画效果也可以这样\n* 但是注意，要做个判断，这样的动作应该只一次就够了\n\n##### 优点\n* 提高网页响应速度，毕竟图片加载会阻塞onload事件\n* 影响网页收录与排名，因为蜘蛛爬页面的时候，如果响应速度快，页面优化值会高\n* 减少请求，降低服务器压力，减少流量\n\n##### 缺点\n* 图片不会被收录\n* 如果响应速度慢，会看到图片加载过程","slug":"延迟加载解决方案","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhql003st0yja369brae","content":"<h4 id=\"图片\">图片</h4><blockquote>\n<ul>\n<li>给图片添加data-lazy等标签，放图片url,等页面加载完再去做替换，不会阻塞页面onload。</li>\n<li>同样像上面那样，但是等到页面滚动到特殊位置的时候，才去加载对应图片，实现懒加载。</li>\n<li>对于一些大图，我们还可以先给他一个质量低的图片，然后用js创建image对象，给它赋值src,监听它的onload事件，加载完后把url赋给img标签,实现预加载。</li>\n<li>jquery的lazyload插件，给图片设置data-original类似的标签，可以实现懒加载。<a id=\"more\"></a>\n说了这么多，再看看怎么判断浏览器滚动到了哪里，哪些需要加载。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 浏览器可视区域 </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getClient</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">var</span> l, t, w, h; </div><div class=\"line\">    l = <span class=\"built_in\">document</span>.documentElement.scrollLeft || <span class=\"built_in\">document</span>.body.scrollLeft; </div><div class=\"line\">    t = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop; </div><div class=\"line\">    w = <span class=\"built_in\">document</span>.documentElement.clientWidth; </div><div class=\"line\">    h = <span class=\"built_in\">document</span>.documentElement.clientHeight; </div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">left</span>: l, <span class=\"attr\">top</span>: t, <span class=\"attr\">width</span>: w, <span class=\"attr\">height</span>: h &#125;; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 待加载资源位置 </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSubClient</span>(<span class=\"params\">p</span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">var</span> l = <span class=\"number\">0</span>, t = <span class=\"number\">0</span>, w, h; </div><div class=\"line\">    w = p.offsetWidth; </div><div class=\"line\">    h = p.offsetHeight; </div><div class=\"line\">    <span class=\"keyword\">while</span>(p.offsetParent)&#123; </div><div class=\"line\">        l += p.offsetLeft; </div><div class=\"line\">        t += p.offsetTop; </div><div class=\"line\">        p = p.offsetParent; </div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">left</span>: l, <span class=\"attr\">top</span>: t, <span class=\"attr\">width</span>: w, <span class=\"attr\">height</span>: h &#125;; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 判断两个矩形是否相交,如果相交说明dom已经出现在了窗口，需要加载了</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">intens</span>(<span class=\"params\">rec1, rec2</span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">var</span> lc1, lc2, tc1, tc2, w1, h1; </div><div class=\"line\">    lc1 = rec1.left + rec1.width / <span class=\"number\">2</span>; </div><div class=\"line\">    lc2 = rec2.left + rec2.width / <span class=\"number\">2</span>; </div><div class=\"line\">    tc1 = rec1.top + rec1.height / <span class=\"number\">2</span> ; </div><div class=\"line\">    tc2 = rec2.top + rec2.height / <span class=\"number\">2</span> ; </div><div class=\"line\">    w1 = (rec1.width + rec2.width) / <span class=\"number\">2</span> ; </div><div class=\"line\">    h1 = (rec1.height + rec2.height) / <span class=\"number\">2</span>; </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.abs(lc1 - lc2) &lt; w1 &amp;&amp; <span class=\"built_in\">Math</span>.abs(tc1 - tc2) &lt; h1 ; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 判断某个区域是否出现在可视区域 </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">domArr, prec1, callback</span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">var</span> prec2; </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = domArr.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123; </div><div class=\"line\">        <span class=\"keyword\">if</span> (domArr[i]) &#123; </div><div class=\"line\">            prec2 = getSubClient(domArr[i]); </div><div class=\"line\">            <span class=\"keyword\">if</span> (intens(prec1, prec2)) &#123; </div><div class=\"line\">                callback(domArr[i]); </div><div class=\"line\">                <span class=\"keyword\">delete</span> domArr[i]; </div><div class=\"line\">            &#125; </div><div class=\"line\">        &#125; </div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 检查dom是否出现在可视区域 </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">var</span> prec1 = getClient(); </div><div class=\"line\">    test(eleArr, prec1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom</span>)</span>&#123; </div><div class=\"line\">        dom.innerHTML ＝ <span class=\"string\">'123'</span>;</div><div class=\"line\">    &#125;) </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"keyword\">var</span> ele1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"js_ele1\"</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> ele2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"js_ele2\"</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> eleArr = [ele1, ele2]; </div><div class=\"line\"><span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    check();</div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"built_in\">window</span>.onresize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    check(); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"非图片\">非图片</h4><ul>\n<li>有些在可视区外加载的列表，页面比较靠底部，不需要页面加载的时候就展示，可以等页面滚动到相应的位置再去发请求，做渲染之类的</li>\n<li>还有些动画效果也可以这样</li>\n<li>但是注意，要做个判断，这样的动作应该只一次就够了</li>\n</ul>\n<h5 id=\"优点\">优点</h5><ul>\n<li>提高网页响应速度，毕竟图片加载会阻塞onload事件</li>\n<li>影响网页收录与排名，因为蜘蛛爬页面的时候，如果响应速度快，页面优化值会高</li>\n<li>减少请求，降低服务器压力，减少流量</li>\n</ul>\n<h5 id=\"缺点\">缺点</h5><ul>\n<li>图片不会被收录</li>\n<li>如果响应速度慢，会看到图片加载过程</li>\n</ul>\n","excerpt":"<h4 id=\"图片\">图片</h4><blockquote>\n<ul>\n<li>给图片添加data-lazy等标签，放图片url,等页面加载完再去做替换，不会阻塞页面onload。</li>\n<li>同样像上面那样，但是等到页面滚动到特殊位置的时候，才去加载对应图片，实现懒加载。</li>\n<li>对于一些大图，我们还可以先给他一个质量低的图片，然后用js创建image对象，给它赋值src,监听它的onload事件，加载完后把url赋给img标签,实现预加载。</li>\n<li>jquery的lazyload插件，给图片设置data-original类似的标签，可以实现懒加载。","more":"说了这么多，再看看怎么判断浏览器滚动到了哪里，哪些需要加载。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 浏览器可视区域 </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getClient</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">var</span> l, t, w, h; </div><div class=\"line\">    l = <span class=\"built_in\">document</span>.documentElement.scrollLeft || <span class=\"built_in\">document</span>.body.scrollLeft; </div><div class=\"line\">    t = <span class=\"built_in\">document</span>.documentElement.scrollTop || <span class=\"built_in\">document</span>.body.scrollTop; </div><div class=\"line\">    w = <span class=\"built_in\">document</span>.documentElement.clientWidth; </div><div class=\"line\">    h = <span class=\"built_in\">document</span>.documentElement.clientHeight; </div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">left</span>: l, <span class=\"attr\">top</span>: t, <span class=\"attr\">width</span>: w, <span class=\"attr\">height</span>: h &#125;; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 待加载资源位置 </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSubClient</span>(<span class=\"params\">p</span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">var</span> l = <span class=\"number\">0</span>, t = <span class=\"number\">0</span>, w, h; </div><div class=\"line\">    w = p.offsetWidth; </div><div class=\"line\">    h = p.offsetHeight; </div><div class=\"line\">    <span class=\"keyword\">while</span>(p.offsetParent)&#123; </div><div class=\"line\">        l += p.offsetLeft; </div><div class=\"line\">        t += p.offsetTop; </div><div class=\"line\">        p = p.offsetParent; </div><div class=\"line\">    &#125; </div><div class=\"line\">    <span class=\"keyword\">return</span> &#123; <span class=\"attr\">left</span>: l, <span class=\"attr\">top</span>: t, <span class=\"attr\">width</span>: w, <span class=\"attr\">height</span>: h &#125;; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 判断两个矩形是否相交,如果相交说明dom已经出现在了窗口，需要加载了</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">intens</span>(<span class=\"params\">rec1, rec2</span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">var</span> lc1, lc2, tc1, tc2, w1, h1; </div><div class=\"line\">    lc1 = rec1.left + rec1.width / <span class=\"number\">2</span>; </div><div class=\"line\">    lc2 = rec2.left + rec2.width / <span class=\"number\">2</span>; </div><div class=\"line\">    tc1 = rec1.top + rec1.height / <span class=\"number\">2</span> ; </div><div class=\"line\">    tc2 = rec2.top + rec2.height / <span class=\"number\">2</span> ; </div><div class=\"line\">    w1 = (rec1.width + rec2.width) / <span class=\"number\">2</span> ; </div><div class=\"line\">    h1 = (rec1.height + rec2.height) / <span class=\"number\">2</span>; </div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.abs(lc1 - lc2) &lt; w1 &amp;&amp; <span class=\"built_in\">Math</span>.abs(tc1 - tc2) &lt; h1 ; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 判断某个区域是否出现在可视区域 </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">domArr, prec1, callback</span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">var</span> prec2; </div><div class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = domArr.length - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123; </div><div class=\"line\">        <span class=\"keyword\">if</span> (domArr[i]) &#123; </div><div class=\"line\">            prec2 = getSubClient(domArr[i]); </div><div class=\"line\">            <span class=\"keyword\">if</span> (intens(prec1, prec2)) &#123; </div><div class=\"line\">                callback(domArr[i]); </div><div class=\"line\">                <span class=\"keyword\">delete</span> domArr[i]; </div><div class=\"line\">            &#125; </div><div class=\"line\">        &#125; </div><div class=\"line\">    &#125; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 检查dom是否出现在可视区域 </span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    <span class=\"keyword\">var</span> prec1 = getClient(); </div><div class=\"line\">    test(eleArr, prec1, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">dom</span>)</span>&#123; </div><div class=\"line\">        dom.innerHTML ＝ <span class=\"string\">'123'</span>;</div><div class=\"line\">    &#125;) </div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"keyword\">var</span> ele1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"js_ele1\"</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> ele2 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"js_ele2\"</span>); </div><div class=\"line\"><span class=\"keyword\">var</span> eleArr = [ele1, ele2]; </div><div class=\"line\"><span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    check();</div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"built_in\">window</span>.onresize = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123; </div><div class=\"line\">    check(); </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"非图片\">非图片</h4><ul>\n<li>有些在可视区外加载的列表，页面比较靠底部，不需要页面加载的时候就展示，可以等页面滚动到相应的位置再去发请求，做渲染之类的</li>\n<li>还有些动画效果也可以这样</li>\n<li>但是注意，要做个判断，这样的动作应该只一次就够了</li>\n</ul>\n<h5 id=\"优点\">优点</h5><ul>\n<li>提高网页响应速度，毕竟图片加载会阻塞onload事件</li>\n<li>影响网页收录与排名，因为蜘蛛爬页面的时候，如果响应速度快，页面优化值会高</li>\n<li>减少请求，降低服务器压力，减少流量</li>\n</ul>\n<h5 id=\"缺点\">缺点</h5><ul>\n<li>图片不会被收录</li>\n<li>如果响应速度慢，会看到图片加载过程</li>\n</ul>"},{"title":"异步javascript","date":"2015-11-18T07:03:01.000Z","toc":true,"_content":"#### 什么是异步javascript\n>顺序的执行的代码，我们称之为同步代码，异步的过程就是让有些非常耗时的javascript代码放在异步模块中之行，同步代码之行结束后再去之行它。\n\n#### 异步javascript发展过程\n* 回调函数\n\t函数可以作为参数传递给另一个函数，这样的过程称之为回调，当执行完函数的内容后，执行回调函数，来完成异步的模拟。\n\t回调函数可以使程序编的简单易懂，但是耦合性确比较高，维护起来比较麻烦。错误处理容易被忽视，不能return,使用不当会让程序非常臃肿。\n<!--more-->\n* 事件监听\n\t通过事件监听，触发达到异步执行代码的过程。\n* 发布订阅\n\t我们可以创建发布／订阅模式，或者观察者模式，通过订阅，发布的过程来实现异步\n* Promises\n\tPromises是一种规范，Promises允许我们通过链式调用的方式编写代码，增强了代码的可读性。\n","source":"_posts/异步javascript.md","raw":"title: 异步javascript\ndate: 2015-11-18 15:03:01\ntags: javascript\ntoc: true\n---\n#### 什么是异步javascript\n>顺序的执行的代码，我们称之为同步代码，异步的过程就是让有些非常耗时的javascript代码放在异步模块中之行，同步代码之行结束后再去之行它。\n\n#### 异步javascript发展过程\n* 回调函数\n\t函数可以作为参数传递给另一个函数，这样的过程称之为回调，当执行完函数的内容后，执行回调函数，来完成异步的模拟。\n\t回调函数可以使程序编的简单易懂，但是耦合性确比较高，维护起来比较麻烦。错误处理容易被忽视，不能return,使用不当会让程序非常臃肿。\n<!--more-->\n* 事件监听\n\t通过事件监听，触发达到异步执行代码的过程。\n* 发布订阅\n\t我们可以创建发布／订阅模式，或者观察者模式，通过订阅，发布的过程来实现异步\n* Promises\n\tPromises是一种规范，Promises允许我们通过链式调用的方式编写代码，增强了代码的可读性。\n","slug":"异步javascript","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhqo003ut0yjnr84887g","content":"<h4 id=\"什么是异步javascript\">什么是异步javascript</h4><blockquote>\n<p>顺序的执行的代码，我们称之为同步代码，异步的过程就是让有些非常耗时的javascript代码放在异步模块中之行，同步代码之行结束后再去之行它。</p>\n</blockquote>\n<h4 id=\"异步javascript发展过程\">异步javascript发展过程</h4><ul>\n<li>回调函数<br>  函数可以作为参数传递给另一个函数，这样的过程称之为回调，当执行完函数的内容后，执行回调函数，来完成异步的模拟。<br>  回调函数可以使程序编的简单易懂，但是耦合性确比较高，维护起来比较麻烦。错误处理容易被忽视，不能return,使用不当会让程序非常臃肿。<a id=\"more\"></a></li>\n<li>事件监听<br>  通过事件监听，触发达到异步执行代码的过程。</li>\n<li>发布订阅<br>  我们可以创建发布／订阅模式，或者观察者模式，通过订阅，发布的过程来实现异步</li>\n<li>Promises<br>  Promises是一种规范，Promises允许我们通过链式调用的方式编写代码，增强了代码的可读性。</li>\n</ul>\n","excerpt":"<h4 id=\"什么是异步javascript\">什么是异步javascript</h4><blockquote>\n<p>顺序的执行的代码，我们称之为同步代码，异步的过程就是让有些非常耗时的javascript代码放在异步模块中之行，同步代码之行结束后再去之行它。</p>\n</blockquote>\n<h4 id=\"异步javascript发展过程\">异步javascript发展过程</h4><ul>\n<li>回调函数<br>  函数可以作为参数传递给另一个函数，这样的过程称之为回调，当执行完函数的内容后，执行回调函数，来完成异步的模拟。<br>  回调函数可以使程序编的简单易懂，但是耦合性确比较高，维护起来比较麻烦。错误处理容易被忽视，不能return,使用不当会让程序非常臃肿。","more":"</li>\n<li>事件监听<br>  通过事件监听，触发达到异步执行代码的过程。</li>\n<li>发布订阅<br>  我们可以创建发布／订阅模式，或者观察者模式，通过订阅，发布的过程来实现异步</li>\n<li>Promises<br>  Promises是一种规范，Promises允许我们通过链式调用的方式编写代码，增强了代码的可读性。</li>\n</ul>"},{"title":"微信小程序开发","date":"2016-11-03T11:17:42.000Z","toc":true,"_content":"##### 准备\n* 开发环境\n  * [下载开发工具](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html)\n  * [按照网上教程破解](https://github.com/gavinkwoe/weapp-ide-crack)\n  * 或者直接下载破解好的包\n* 学习资料\n  * [学习资料](https://mp.weixin.qq.com/debug/wxadoc/dev/)\n\n<!--more-->\n\n##### 开始\n* 打开微信web开发者工具\n* AppID选择 无AppID 或者 随便写一个(破解后)\n* 项目名称随便写\n* 开发目录选择一个空的文件夹\n\n##### 项目目录\n* 文件\n    * app.js 必须 项目的主文件 小程序的逻辑\n    * app.json 必须 小程序的公共设置\n    * app.wxss 非必须 存放小程序的公共样式\n    * 各个文件编写规范以及配置的意义资料中讲的很详细,就不重新描述了。\n* 开发\n>这个小应用中调用了一些wx的组件以及API,实现了一个列表的下拉刷新，上拉加载，每一项的左划菜单(删除，收藏等),开发时间有限，实现的比较粗糙，主要是为了把小程序开发这一套走一遍，知道小程序想干什么，能干什么，怎么干。下面只贴了部分代码。\n\n```javascript\n// app.js\nApp({\n  onLaunch: function () {\n    console.log('App Launch')\n  },\n  onShow: function () {\n    console.log('App Show')\n  },\n  onHide: function () {\n    console.log('App Hide')\n  },\n  globalData: {\n    userInfo: false,\n    nightMode: false\n  }\n})\n```\n\n```javascript\n// app.json\n{\n  \"pages\": [\n    \"page/component/index/index\",\n    \"page/component/pic/pic\",\n    \"page/component/fav/fav\",\n    \"page/component/about/about\"\n  ],\n  \"window\": {\n    \"navigationBarTextStyle\": \"white\",\n    \"navigationBarTitleText\": \"Jokes\",\n    \"navigationBarBackgroundColor\": \"#353336\",\n    \"backgroundColor\": \"#353336\"\n  },\n  \"tabBar\": {\n    \"color\": \"#000000\",\n    \"selectedColor\": \"#ffffff\",\n    \"borderStyle\": \"black\",\n    \"backgroundColor\": \"#413f40\",\n    \"list\": [{\n      \"pagePath\": \"page/component/index/index\",\n      \"iconPath\": \"image/icon_jokes_default.png\",\n      \"selectedIconPath\": \"image/icon_jokes_active.png\",\n      \"text\": \"Jokes\"\n    }, {\n      \"pagePath\": \"page/component/pic/pic\",\n      \"iconPath\": \"image/icon_pic_default.png\",\n      \"selectedIconPath\": \"image/icon_pic_active.png\",\n      \"text\": \"Jokes\"\n    }, {\n      \"pagePath\": \"page/component/fav/fav\",\n      \"iconPath\": \"image/icon_fav_default.png\",\n      \"selectedIconPath\": \"image/icon_fav_active.png\",\n      \"text\": \"fav\"\n    }, {\n      \"pagePath\": \"page/component/about/about\",\n      \"iconPath\": \"image/icon_settings_default.png\",\n      \"selectedIconPath\": \"image/icon_settings_active.png\",\n      \"text\": \"Settings\"\n    }]\n  },\n  \"networkTimeout\": {\n    \"request\": 10000,\n    \"connectSocket\": 10000,\n    \"uploadFile\": 10000,\n    \"downloadFile\": 10000\n  },\n  \"debug\": true\n}\n```\n\n```javascript\n// app.wxss\npage {\n  background-color: #fbf9fe;\n  height: 100%;\n}\n```\n\n```javascript\n// page/component/index/index.js\nvar jodeData,startX,startY,endX,endY,moveStart,\n    topAdImgs = [\n        '../../../image/ad/1.jpg',\n        '../../../image/ad/2.jpg',\n        '../../../image/ad/3.jpg',\n        '../../../image/ad/4.jpg',\n        '../../../image/ad/5.jpg'\n    ];\n\nPage({\n  data: {\n    list: [],\n    itemToView: '',\n    scrollTop: 0,\n    currentPage: 1,\n    bottomHidden: 'none',\n    modalHidden: true,\n    modalText: '',\n    topImages:topAdImgs,\n  },\n  colorMap: ['#86a3c1','#86d1cc','#bdd4e4','#debf88','#f9af02'],\n  parse: function(html) {\n    html = html.replace(/(<p>)|(<\\/p>)|(\\t)|(&nbsp;)/gm, \"\");\n    return html;\n  },\n  prefixData: function(data){\n    var self = this;\n    var favJokes = wx.getStorageSync('favJokes') || [];\n    data.forEach(function(item,index){\n      item.ct = item.ct.substr(0,19);\n      if(item.type === 1){\n        item.text = self.parse(item.text);  \n      }\n      item.background = self.colorMap[index%5];\n      item.right = '0%';\n      item.hidden = 'block';\n      item.hasFav = 'none';\n      favJokes.forEach(function(fitem,findex){\n        if(fitem.id === item.id){\n          item.hasFav = 'block';\n        }\n      });\n    });\n    return data;\n  },\n  onLoad: function(options) {\n    var self = this;\n    wx.request({\n      url: 'https://123.test.com/joke_text?page=' + self.data.currentPage,\n      data: {},\n      header: {\n        'Content-Type': 'application/json'\n      },\n      success: function(res) {\n        var data = res.data;\n        data = self.prefixData(data);\n        self.setData({\n          bottomHidden: 'none'\n        });\n        if(self.data.currentPage === 1){\n          self.setData({\n            list: data\n          });\n          self.toPos(self.data.currentPage);  \n        }else{\n          data = self.data.list.concat(data);\n          self.setData({\n            list: data\n          });\n        }\n      },\n      error: function(){\n        self.setData({\n          bottomHidden: 'none'\n        });\n      }\n    });\n  },\n  toPos: function(page){\n    var self = this;\n    setTimeout(function(){\n      self.setData({\n        itemToView: 'item' + (page-1) * 20\n      });\n    },1000);\n  },\n  reDealData: function(){\n    var allJodes = this.data.list;\n    var favJokes = wx.getStorageSync('favJokes') || [];\n    allJodes.forEach(function(item,index){\n      item.hasFav = 'none';\n      favJokes.forEach(function(fitem,findex){\n        if(fitem.id === item.id){\n          item.hasFav = 'block';\n        }\n      });\n    });\n    this.setData({\n      list: allJodes\n    });\n  },\n  onShow: function() {\n    this.reDealData();\n  },\n  topUpdate: function(event){\n    this.setData({\n      currentPage: 1,\n      itemToView: 'top'\n    });\n    this.onLoad();\n  },\n  bottomLoad: function(event){\n    var page = this.data.currentPage;\n    page = page + 1;\n    this.setData({\n      bottomHidden: 'block',\n      currentPage: page\n    });\n    this.onLoad();\n  },\n  itemScroll: function(event){\n  },\n  itemClick: function(event){\n    // wx.navigationTo({url:\"\"});\n  },\n  itemStart: function(event){\n    var touch = event.touches[0];\n    startX = touch.clientX;\n    startY = touch.clientY;\n    moveStart = true;\n  },\n  itemMove: function(event){\n    var self = this;\n    var dataIndex = event.currentTarget.dataset.idx;\n    jodeData = this.data.list;\n    if(moveStart){\n      var touch = event.touches[0];\n      endX = touch.clientX;\n      endY = touch.clientY;\n      if(Math.abs(startX - endX) >= Math.abs(startY - endY)){\n        if(endX - startX <= -5){\n          jodeData.forEach(function(item,index){\n            item.right = '0%';\n          });\n          jodeData[dataIndex].right = \"20%\";\n        }else{\n          jodeData.forEach(function(item,index){\n            item.right = '0%';\n          });\n        }\n        self.setData({\n          list: jodeData\n        });\n      }\n    }\n    moveStart = false;\n  },\n  modalChange:function(event){\n    this.setData({\n      modalHidden: true,\n      modalText: ''\n    })\n  },\n  tapFav:function(event){\n    var dataIndex = event.currentTarget.dataset.idx;\n    var allJodes = this.data.list;\n    var curJokes = allJodes[dataIndex];\n    curJokes.right = '0%';\n    var favJokes = wx.getStorageSync('favJokes') || [];\n    if(curJokes.hasFav !== 'block'){\n      curJokes.hasFav = 'block';\n      favJokes.unshift(curJokes);\n      wx.setStorageSync('favJokes', favJokes);\n      this.setData({\n        list: allJodes\n      });\n    }else{\n      this.setData({\n        list: allJodes,\n        modalHidden: false,\n        modalText: '添加过了'\n      });\n    }\n  },\n  tapDel:function(event){\n    var dataIndex = event.currentTarget.dataset.idx;\n    var allJodes = this.data.list;\n    var curJokes = allJodes[dataIndex];\n    curJokes.right = '0%';\n    curJokes.hidden = 'none';\n    this.setData({\n      list: allJodes\n    });\n  }\n})\n```\n\n```html\n// page/component/index/index.wxml\n<modal class=\"modal\" hidden=\"{{modalHidden}}\" \n    no-cancel bindconfirm=\"modalChange\">\n  <view> {{modalText}} </view>\n</modal>\n<view class=\"index\">\n    <view class=\"body\">\n    \t<swiper class=\"top-swiper\" indicator-dots=\"true\"\n\t\t  autoplay=\"true\" interval=\"5000\" duration=\"1000\">\n\t\t  <block wx:for=\"{{topImages}}\">\n\t\t    <swiper-item>\n\t\t      <image src=\"{{item}}\" class=\"slide-image\"/>\n\t\t    </swiper-item>\n\t\t  </block>\n\t\t</swiper>\n    \t<scroll-view class=\"scroll-view\" \n    \t    scroll-y=\"true\" bindscrolltoupper=\"topUpdate\"\n    \t    bindscrolltolower=\"bottomLoad\" bindscroll=\"itemScroll\" \n    \t    scroll-into-view=\"{{itemToView}}\" \n    \t    scroll-top=\"{{scrollTop}}\" \n    \t    upper-threshold=\"20\" \n    \t    lower-threshold=\"30\">\n\t    \t<view class=\"list-container\">\n\t    \t\t<view id=\"top\" class=\"pull-update\">\n\t    \t\t\t正在更新\n            <image style=\"width: 30rpx; height: 30rpx;margin-left:10rpx;\" \n\t\t            mode=\"scaleToFill\" src=\"../../../image/loading.gif\"></image>\n\t    \t\t</view>\n\t\t    \t<block wx:for=\"{{list}}\">\n\t\t        <view id=\"item{{index}}\" data-idx=\"{{index}}\" class=\"item\"\n\t\t            style=\"background:{{item.background}};right:{{item.right}};display:{{item.hidden}};\" \n\t\t            bindtap=\"itemClick\" bindtouchstart=\"itemStart\" bindtouchmove=\"itemMove\">\n\t\t        \t<view class=\"info-container\">\n\t\t\t          <view class=\"date\">\n\t\t\t          \t{{item.ct}}\n\t\t\t          </view>\n  \t\t\t        <block wx:if=\"{{item.type == 1}}\">\n  \t\t\t\t\t\t    <view class=\"content\">\n  \t\t\t          \t{{item.text}}\n  \t\t\t          </view>\n  \t\t\t\t\t    </block>\n  \t\t\t\t\t    <block wx:else>\n  \t\t\t\t\t  \t  <view class=\"content\">\n  \t\t\t\t          \t<image class=\"img-info\" mode=\"aspectFit\" \n  \t\t\t\t          \t    src=\"{{item.img}}\"></image>\n  \t\t\t\t          </view>\n  \t\t\t\t          <view class=\"title\">\n  \t\t\t\t          \t{{item.title}}\n  \t\t\t\t          </view>\n  \t\t\t\t\t    </block>\n  \t\t\t      </view>\n\t\t          <image class=\"fav-icon\" mode=\"scaleToFill\" \n\t\t            src=\"../../../image/fav.png\" style=\"display:{{item.hasFav}}\"></image>\n        \t    <view class=\"opt-item opt-fav\" catchtap=\"tapFav\" data-idx=\"{{index}}\">喜欢</view>\n        \t    <view class=\"opt-item opt-del\" catchtap=\"tapDel\" data-idx=\"{{index}}\">删除</view>\n\t\t        </view>\n\t\t\t    </block>\n\t\t\t    <view id=\"bottom\" class=\"pull-load\" style=\"display:{{bottomHidden}};\">\n\t    \t\t\t正在加载\n            <image style=\"width: 30rpx; height: 30rpx;margin-left:10rpx;\"\n\t    \t\t\t            mode=\"scaleToFill\" src=\"../../../image/loading.gif\"></image>\n\t    \t\t</view>\n\t\t\t  </view>\n\t    </scroll-view>\n    </view>\n</view>\n\n```\n\n```javascript\n// page/component/index/index.wxss\n@import '../../common/wxss/base.wxss';\n@import '../../common/wxss/common.wxss';\n```\n\n```javascript\n// page/common/wxss/base.wxss\n.index{\n    background-color: #FBF9FE;\n    font-family: -apple-system-font,Helvetica Neue,Helvetica,sans-serif;\n    flex: 1;\n    min-height: 100%;\n    font-size: 32rpx;\n}\n.body{\n    overflow: hidden;\n}\n```\n\n```javascript\n// page/common/wxss/common.wxss\n.top-swiper{\n    height: 300rpx;\n    width: 100%;\n}\n.slide-image{\n    height: 300rpx;\n    width: 100%;\n}\n.scroll-view{\n    height: 860rpx;\n}\n.pic-view{\n    height: 1160rpx;\n}\n.list-container{\n    margin: 40rpx 0;\n}\n.pull-update{\n    text-align: center;\n    height: 40rpx;\n    line-height: 40rpx;\n    margin-top: -40rpx;\n}\n.pull-load{\n    text-align: center;\n    height: 40rpx;\n    line-height: 40rpx;\n}\n.item{\n    position: relative;\n    display: block;\n    width: 100%;\n  text-align: left;\n  vertical-align: middle;\n  background-color: #fff;\n    border-radius: 3;\n    border: 0 none;\n    margin: 0;\n    min-height: 200rpx;\n    box-sizing: border-box;\n    transition: all .25s ease;\n    -webkit-transition: all .25s ease;\n}\n.opt-item{\n    position: absolute;\n    height: 100%;\n    width: 10%;\n    box-sizing: border-box;\n    padding-left: 20rpx;\n    min-height: 200rpx;\n    writing-mode: vertical-lr;\n    text-align: center;\n    vertical-align: middle;\n    display: inline-block;\n}\n.opt-fav{\n    color: #fff;\n    right: -10%;\n    background: #868484;\n}\n.opt-del{\n    color: #fff;\n    right: -20%;\n    background: #dc4545;\n}\n.fav-del{\n    color: #fff;\n    right: -10%;\n    background: #dc4545;\n}\n.info-container{\n    padding: 0 10rpx;\n}\n.date{\n    color: #fff;\n    text-align: left;\n    padding:18rpx 8rpx 8rpx 8rpx;\n}\n.title{\n    font-size: 28rpx;\n    color: #fff;\n    text-align: left;\n    padding:8rpx 8rpx 18rpx 8rpx;\n    color: #333;\n}\n.content{\n    font-size: 28rpx;\n    text-align: left;\n    padding:8rpx 8rpx 18rpx 8rpx;\n    color: #333;\n}\n.blank-icon{\n    margin: 0 auto;\n}\n.fav-icon{\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 60rpx;\n    height: 60rpx;\n}\n```\n\n##### 简单理解\n* 小程序开发起来难度适中，主要是对框架，API以及组建的了解，开发过程中简单的拼凑，加上自己逻辑的串联，就可以完成一个小应用\n* 对于前端开发来说，成本是非常低的，css，js语法一样，然后就是html，html就相当于我们使用一个新的模版引擎，更加强大的mustache\n* 更像是hybrid开发，我们有调起原生的功能的能力，而又不需要去注册一堆方法(和app约定的方法),例如相册，定位，罗盘，网络，系统信息等\n* 我们不用过多考虑路由的问题，兼容的问题\n* 网络请求没有跨域产生的问题\n* 解决了跨平台，多设备下的交互一致性\n\n##### 资料大全\n[资料大全](https://github.com/justjavac/awesome-wechat-weapp?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n\n","source":"_posts/微信小程序开发.md","raw":"title: 微信小程序开发\ndate: 2016-11-03 19:17:42\ntags: web\ntoc: true\n---\n##### 准备\n* 开发环境\n  * [下载开发工具](https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html)\n  * [按照网上教程破解](https://github.com/gavinkwoe/weapp-ide-crack)\n  * 或者直接下载破解好的包\n* 学习资料\n  * [学习资料](https://mp.weixin.qq.com/debug/wxadoc/dev/)\n\n<!--more-->\n\n##### 开始\n* 打开微信web开发者工具\n* AppID选择 无AppID 或者 随便写一个(破解后)\n* 项目名称随便写\n* 开发目录选择一个空的文件夹\n\n##### 项目目录\n* 文件\n    * app.js 必须 项目的主文件 小程序的逻辑\n    * app.json 必须 小程序的公共设置\n    * app.wxss 非必须 存放小程序的公共样式\n    * 各个文件编写规范以及配置的意义资料中讲的很详细,就不重新描述了。\n* 开发\n>这个小应用中调用了一些wx的组件以及API,实现了一个列表的下拉刷新，上拉加载，每一项的左划菜单(删除，收藏等),开发时间有限，实现的比较粗糙，主要是为了把小程序开发这一套走一遍，知道小程序想干什么，能干什么，怎么干。下面只贴了部分代码。\n\n```javascript\n// app.js\nApp({\n  onLaunch: function () {\n    console.log('App Launch')\n  },\n  onShow: function () {\n    console.log('App Show')\n  },\n  onHide: function () {\n    console.log('App Hide')\n  },\n  globalData: {\n    userInfo: false,\n    nightMode: false\n  }\n})\n```\n\n```javascript\n// app.json\n{\n  \"pages\": [\n    \"page/component/index/index\",\n    \"page/component/pic/pic\",\n    \"page/component/fav/fav\",\n    \"page/component/about/about\"\n  ],\n  \"window\": {\n    \"navigationBarTextStyle\": \"white\",\n    \"navigationBarTitleText\": \"Jokes\",\n    \"navigationBarBackgroundColor\": \"#353336\",\n    \"backgroundColor\": \"#353336\"\n  },\n  \"tabBar\": {\n    \"color\": \"#000000\",\n    \"selectedColor\": \"#ffffff\",\n    \"borderStyle\": \"black\",\n    \"backgroundColor\": \"#413f40\",\n    \"list\": [{\n      \"pagePath\": \"page/component/index/index\",\n      \"iconPath\": \"image/icon_jokes_default.png\",\n      \"selectedIconPath\": \"image/icon_jokes_active.png\",\n      \"text\": \"Jokes\"\n    }, {\n      \"pagePath\": \"page/component/pic/pic\",\n      \"iconPath\": \"image/icon_pic_default.png\",\n      \"selectedIconPath\": \"image/icon_pic_active.png\",\n      \"text\": \"Jokes\"\n    }, {\n      \"pagePath\": \"page/component/fav/fav\",\n      \"iconPath\": \"image/icon_fav_default.png\",\n      \"selectedIconPath\": \"image/icon_fav_active.png\",\n      \"text\": \"fav\"\n    }, {\n      \"pagePath\": \"page/component/about/about\",\n      \"iconPath\": \"image/icon_settings_default.png\",\n      \"selectedIconPath\": \"image/icon_settings_active.png\",\n      \"text\": \"Settings\"\n    }]\n  },\n  \"networkTimeout\": {\n    \"request\": 10000,\n    \"connectSocket\": 10000,\n    \"uploadFile\": 10000,\n    \"downloadFile\": 10000\n  },\n  \"debug\": true\n}\n```\n\n```javascript\n// app.wxss\npage {\n  background-color: #fbf9fe;\n  height: 100%;\n}\n```\n\n```javascript\n// page/component/index/index.js\nvar jodeData,startX,startY,endX,endY,moveStart,\n    topAdImgs = [\n        '../../../image/ad/1.jpg',\n        '../../../image/ad/2.jpg',\n        '../../../image/ad/3.jpg',\n        '../../../image/ad/4.jpg',\n        '../../../image/ad/5.jpg'\n    ];\n\nPage({\n  data: {\n    list: [],\n    itemToView: '',\n    scrollTop: 0,\n    currentPage: 1,\n    bottomHidden: 'none',\n    modalHidden: true,\n    modalText: '',\n    topImages:topAdImgs,\n  },\n  colorMap: ['#86a3c1','#86d1cc','#bdd4e4','#debf88','#f9af02'],\n  parse: function(html) {\n    html = html.replace(/(<p>)|(<\\/p>)|(\\t)|(&nbsp;)/gm, \"\");\n    return html;\n  },\n  prefixData: function(data){\n    var self = this;\n    var favJokes = wx.getStorageSync('favJokes') || [];\n    data.forEach(function(item,index){\n      item.ct = item.ct.substr(0,19);\n      if(item.type === 1){\n        item.text = self.parse(item.text);  \n      }\n      item.background = self.colorMap[index%5];\n      item.right = '0%';\n      item.hidden = 'block';\n      item.hasFav = 'none';\n      favJokes.forEach(function(fitem,findex){\n        if(fitem.id === item.id){\n          item.hasFav = 'block';\n        }\n      });\n    });\n    return data;\n  },\n  onLoad: function(options) {\n    var self = this;\n    wx.request({\n      url: 'https://123.test.com/joke_text?page=' + self.data.currentPage,\n      data: {},\n      header: {\n        'Content-Type': 'application/json'\n      },\n      success: function(res) {\n        var data = res.data;\n        data = self.prefixData(data);\n        self.setData({\n          bottomHidden: 'none'\n        });\n        if(self.data.currentPage === 1){\n          self.setData({\n            list: data\n          });\n          self.toPos(self.data.currentPage);  \n        }else{\n          data = self.data.list.concat(data);\n          self.setData({\n            list: data\n          });\n        }\n      },\n      error: function(){\n        self.setData({\n          bottomHidden: 'none'\n        });\n      }\n    });\n  },\n  toPos: function(page){\n    var self = this;\n    setTimeout(function(){\n      self.setData({\n        itemToView: 'item' + (page-1) * 20\n      });\n    },1000);\n  },\n  reDealData: function(){\n    var allJodes = this.data.list;\n    var favJokes = wx.getStorageSync('favJokes') || [];\n    allJodes.forEach(function(item,index){\n      item.hasFav = 'none';\n      favJokes.forEach(function(fitem,findex){\n        if(fitem.id === item.id){\n          item.hasFav = 'block';\n        }\n      });\n    });\n    this.setData({\n      list: allJodes\n    });\n  },\n  onShow: function() {\n    this.reDealData();\n  },\n  topUpdate: function(event){\n    this.setData({\n      currentPage: 1,\n      itemToView: 'top'\n    });\n    this.onLoad();\n  },\n  bottomLoad: function(event){\n    var page = this.data.currentPage;\n    page = page + 1;\n    this.setData({\n      bottomHidden: 'block',\n      currentPage: page\n    });\n    this.onLoad();\n  },\n  itemScroll: function(event){\n  },\n  itemClick: function(event){\n    // wx.navigationTo({url:\"\"});\n  },\n  itemStart: function(event){\n    var touch = event.touches[0];\n    startX = touch.clientX;\n    startY = touch.clientY;\n    moveStart = true;\n  },\n  itemMove: function(event){\n    var self = this;\n    var dataIndex = event.currentTarget.dataset.idx;\n    jodeData = this.data.list;\n    if(moveStart){\n      var touch = event.touches[0];\n      endX = touch.clientX;\n      endY = touch.clientY;\n      if(Math.abs(startX - endX) >= Math.abs(startY - endY)){\n        if(endX - startX <= -5){\n          jodeData.forEach(function(item,index){\n            item.right = '0%';\n          });\n          jodeData[dataIndex].right = \"20%\";\n        }else{\n          jodeData.forEach(function(item,index){\n            item.right = '0%';\n          });\n        }\n        self.setData({\n          list: jodeData\n        });\n      }\n    }\n    moveStart = false;\n  },\n  modalChange:function(event){\n    this.setData({\n      modalHidden: true,\n      modalText: ''\n    })\n  },\n  tapFav:function(event){\n    var dataIndex = event.currentTarget.dataset.idx;\n    var allJodes = this.data.list;\n    var curJokes = allJodes[dataIndex];\n    curJokes.right = '0%';\n    var favJokes = wx.getStorageSync('favJokes') || [];\n    if(curJokes.hasFav !== 'block'){\n      curJokes.hasFav = 'block';\n      favJokes.unshift(curJokes);\n      wx.setStorageSync('favJokes', favJokes);\n      this.setData({\n        list: allJodes\n      });\n    }else{\n      this.setData({\n        list: allJodes,\n        modalHidden: false,\n        modalText: '添加过了'\n      });\n    }\n  },\n  tapDel:function(event){\n    var dataIndex = event.currentTarget.dataset.idx;\n    var allJodes = this.data.list;\n    var curJokes = allJodes[dataIndex];\n    curJokes.right = '0%';\n    curJokes.hidden = 'none';\n    this.setData({\n      list: allJodes\n    });\n  }\n})\n```\n\n```html\n// page/component/index/index.wxml\n<modal class=\"modal\" hidden=\"{{modalHidden}}\" \n    no-cancel bindconfirm=\"modalChange\">\n  <view> {{modalText}} </view>\n</modal>\n<view class=\"index\">\n    <view class=\"body\">\n    \t<swiper class=\"top-swiper\" indicator-dots=\"true\"\n\t\t  autoplay=\"true\" interval=\"5000\" duration=\"1000\">\n\t\t  <block wx:for=\"{{topImages}}\">\n\t\t    <swiper-item>\n\t\t      <image src=\"{{item}}\" class=\"slide-image\"/>\n\t\t    </swiper-item>\n\t\t  </block>\n\t\t</swiper>\n    \t<scroll-view class=\"scroll-view\" \n    \t    scroll-y=\"true\" bindscrolltoupper=\"topUpdate\"\n    \t    bindscrolltolower=\"bottomLoad\" bindscroll=\"itemScroll\" \n    \t    scroll-into-view=\"{{itemToView}}\" \n    \t    scroll-top=\"{{scrollTop}}\" \n    \t    upper-threshold=\"20\" \n    \t    lower-threshold=\"30\">\n\t    \t<view class=\"list-container\">\n\t    \t\t<view id=\"top\" class=\"pull-update\">\n\t    \t\t\t正在更新\n            <image style=\"width: 30rpx; height: 30rpx;margin-left:10rpx;\" \n\t\t            mode=\"scaleToFill\" src=\"../../../image/loading.gif\"></image>\n\t    \t\t</view>\n\t\t    \t<block wx:for=\"{{list}}\">\n\t\t        <view id=\"item{{index}}\" data-idx=\"{{index}}\" class=\"item\"\n\t\t            style=\"background:{{item.background}};right:{{item.right}};display:{{item.hidden}};\" \n\t\t            bindtap=\"itemClick\" bindtouchstart=\"itemStart\" bindtouchmove=\"itemMove\">\n\t\t        \t<view class=\"info-container\">\n\t\t\t          <view class=\"date\">\n\t\t\t          \t{{item.ct}}\n\t\t\t          </view>\n  \t\t\t        <block wx:if=\"{{item.type == 1}}\">\n  \t\t\t\t\t\t    <view class=\"content\">\n  \t\t\t          \t{{item.text}}\n  \t\t\t          </view>\n  \t\t\t\t\t    </block>\n  \t\t\t\t\t    <block wx:else>\n  \t\t\t\t\t  \t  <view class=\"content\">\n  \t\t\t\t          \t<image class=\"img-info\" mode=\"aspectFit\" \n  \t\t\t\t          \t    src=\"{{item.img}}\"></image>\n  \t\t\t\t          </view>\n  \t\t\t\t          <view class=\"title\">\n  \t\t\t\t          \t{{item.title}}\n  \t\t\t\t          </view>\n  \t\t\t\t\t    </block>\n  \t\t\t      </view>\n\t\t          <image class=\"fav-icon\" mode=\"scaleToFill\" \n\t\t            src=\"../../../image/fav.png\" style=\"display:{{item.hasFav}}\"></image>\n        \t    <view class=\"opt-item opt-fav\" catchtap=\"tapFav\" data-idx=\"{{index}}\">喜欢</view>\n        \t    <view class=\"opt-item opt-del\" catchtap=\"tapDel\" data-idx=\"{{index}}\">删除</view>\n\t\t        </view>\n\t\t\t    </block>\n\t\t\t    <view id=\"bottom\" class=\"pull-load\" style=\"display:{{bottomHidden}};\">\n\t    \t\t\t正在加载\n            <image style=\"width: 30rpx; height: 30rpx;margin-left:10rpx;\"\n\t    \t\t\t            mode=\"scaleToFill\" src=\"../../../image/loading.gif\"></image>\n\t    \t\t</view>\n\t\t\t  </view>\n\t    </scroll-view>\n    </view>\n</view>\n\n```\n\n```javascript\n// page/component/index/index.wxss\n@import '../../common/wxss/base.wxss';\n@import '../../common/wxss/common.wxss';\n```\n\n```javascript\n// page/common/wxss/base.wxss\n.index{\n    background-color: #FBF9FE;\n    font-family: -apple-system-font,Helvetica Neue,Helvetica,sans-serif;\n    flex: 1;\n    min-height: 100%;\n    font-size: 32rpx;\n}\n.body{\n    overflow: hidden;\n}\n```\n\n```javascript\n// page/common/wxss/common.wxss\n.top-swiper{\n    height: 300rpx;\n    width: 100%;\n}\n.slide-image{\n    height: 300rpx;\n    width: 100%;\n}\n.scroll-view{\n    height: 860rpx;\n}\n.pic-view{\n    height: 1160rpx;\n}\n.list-container{\n    margin: 40rpx 0;\n}\n.pull-update{\n    text-align: center;\n    height: 40rpx;\n    line-height: 40rpx;\n    margin-top: -40rpx;\n}\n.pull-load{\n    text-align: center;\n    height: 40rpx;\n    line-height: 40rpx;\n}\n.item{\n    position: relative;\n    display: block;\n    width: 100%;\n  text-align: left;\n  vertical-align: middle;\n  background-color: #fff;\n    border-radius: 3;\n    border: 0 none;\n    margin: 0;\n    min-height: 200rpx;\n    box-sizing: border-box;\n    transition: all .25s ease;\n    -webkit-transition: all .25s ease;\n}\n.opt-item{\n    position: absolute;\n    height: 100%;\n    width: 10%;\n    box-sizing: border-box;\n    padding-left: 20rpx;\n    min-height: 200rpx;\n    writing-mode: vertical-lr;\n    text-align: center;\n    vertical-align: middle;\n    display: inline-block;\n}\n.opt-fav{\n    color: #fff;\n    right: -10%;\n    background: #868484;\n}\n.opt-del{\n    color: #fff;\n    right: -20%;\n    background: #dc4545;\n}\n.fav-del{\n    color: #fff;\n    right: -10%;\n    background: #dc4545;\n}\n.info-container{\n    padding: 0 10rpx;\n}\n.date{\n    color: #fff;\n    text-align: left;\n    padding:18rpx 8rpx 8rpx 8rpx;\n}\n.title{\n    font-size: 28rpx;\n    color: #fff;\n    text-align: left;\n    padding:8rpx 8rpx 18rpx 8rpx;\n    color: #333;\n}\n.content{\n    font-size: 28rpx;\n    text-align: left;\n    padding:8rpx 8rpx 18rpx 8rpx;\n    color: #333;\n}\n.blank-icon{\n    margin: 0 auto;\n}\n.fav-icon{\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 60rpx;\n    height: 60rpx;\n}\n```\n\n##### 简单理解\n* 小程序开发起来难度适中，主要是对框架，API以及组建的了解，开发过程中简单的拼凑，加上自己逻辑的串联，就可以完成一个小应用\n* 对于前端开发来说，成本是非常低的，css，js语法一样，然后就是html，html就相当于我们使用一个新的模版引擎，更加强大的mustache\n* 更像是hybrid开发，我们有调起原生的功能的能力，而又不需要去注册一堆方法(和app约定的方法),例如相册，定位，罗盘，网络，系统信息等\n* 我们不用过多考虑路由的问题，兼容的问题\n* 网络请求没有跨域产生的问题\n* 解决了跨平台，多设备下的交互一致性\n\n##### 资料大全\n[资料大全](https://github.com/justjavac/awesome-wechat-weapp?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io)\n\n","slug":"微信小程序开发","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhqq003wt0yj44o4djf0","content":"<h5 id=\"准备\">准备</h5><ul>\n<li>开发环境<ul>\n<li><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html\" target=\"_blank\" rel=\"external\">下载开发工具</a></li>\n<li><a href=\"https://github.com/gavinkwoe/weapp-ide-crack\" target=\"_blank\" rel=\"external\">按照网上教程破解</a></li>\n<li>或者直接下载破解好的包</li>\n</ul>\n</li>\n<li>学习资料<ul>\n<li><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/\" target=\"_blank\" rel=\"external\">学习资料</a></li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n<h5 id=\"开始\">开始</h5><ul>\n<li>打开微信web开发者工具</li>\n<li>AppID选择 无AppID 或者 随便写一个(破解后)</li>\n<li>项目名称随便写</li>\n<li>开发目录选择一个空的文件夹</li>\n</ul>\n<h5 id=\"项目目录\">项目目录</h5><ul>\n<li>文件<ul>\n<li>app.js 必须 项目的主文件 小程序的逻辑</li>\n<li>app.json 必须 小程序的公共设置</li>\n<li>app.wxss 非必须 存放小程序的公共样式</li>\n<li>各个文件编写规范以及配置的意义资料中讲的很详细,就不重新描述了。</li>\n</ul>\n</li>\n<li>开发<blockquote>\n<p>这个小应用中调用了一些wx的组件以及API,实现了一个列表的下拉刷新，上拉加载，每一项的左划菜单(删除，收藏等),开发时间有限，实现的比较粗糙，主要是为了把小程序开发这一套走一遍，知道小程序想干什么，能干什么，怎么干。下面只贴了部分代码。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app.js</span></div><div class=\"line\">App(&#123;</div><div class=\"line\">  <span class=\"attr\">onLaunch</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'App Launch'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">onShow</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'App Show'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">onHide</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'App Hide'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">globalData</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">userInfo</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">nightMode</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"pages\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"page/component/index/index\"</span>,</div><div class=\"line\">    <span class=\"string\">\"page/component/pic/pic\"</span>,</div><div class=\"line\">    <span class=\"string\">\"page/component/fav/fav\"</span>,</div><div class=\"line\">    <span class=\"string\">\"page/component/about/about\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"string\">\"window\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"navigationBarTextStyle\"</span>: <span class=\"string\">\"white\"</span>,</div><div class=\"line\">    <span class=\"string\">\"navigationBarTitleText\"</span>: <span class=\"string\">\"Jokes\"</span>,</div><div class=\"line\">    <span class=\"string\">\"navigationBarBackgroundColor\"</span>: <span class=\"string\">\"#353336\"</span>,</div><div class=\"line\">    <span class=\"string\">\"backgroundColor\"</span>: <span class=\"string\">\"#353336\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"tabBar\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"color\"</span>: <span class=\"string\">\"#000000\"</span>,</div><div class=\"line\">    <span class=\"string\">\"selectedColor\"</span>: <span class=\"string\">\"#ffffff\"</span>,</div><div class=\"line\">    <span class=\"string\">\"borderStyle\"</span>: <span class=\"string\">\"black\"</span>,</div><div class=\"line\">    <span class=\"string\">\"backgroundColor\"</span>: <span class=\"string\">\"#413f40\"</span>,</div><div class=\"line\">    <span class=\"string\">\"list\"</span>: [&#123;</div><div class=\"line\">      <span class=\"string\">\"pagePath\"</span>: <span class=\"string\">\"page/component/index/index\"</span>,</div><div class=\"line\">      <span class=\"string\">\"iconPath\"</span>: <span class=\"string\">\"image/icon_jokes_default.png\"</span>,</div><div class=\"line\">      <span class=\"string\">\"selectedIconPath\"</span>: <span class=\"string\">\"image/icon_jokes_active.png\"</span>,</div><div class=\"line\">      <span class=\"string\">\"text\"</span>: <span class=\"string\">\"Jokes\"</span></div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      <span class=\"string\">\"pagePath\"</span>: <span class=\"string\">\"page/component/pic/pic\"</span>,</div><div class=\"line\">      <span class=\"string\">\"iconPath\"</span>: <span class=\"string\">\"image/icon_pic_default.png\"</span>,</div><div class=\"line\">      <span class=\"string\">\"selectedIconPath\"</span>: <span class=\"string\">\"image/icon_pic_active.png\"</span>,</div><div class=\"line\">      <span class=\"string\">\"text\"</span>: <span class=\"string\">\"Jokes\"</span></div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      <span class=\"string\">\"pagePath\"</span>: <span class=\"string\">\"page/component/fav/fav\"</span>,</div><div class=\"line\">      <span class=\"string\">\"iconPath\"</span>: <span class=\"string\">\"image/icon_fav_default.png\"</span>,</div><div class=\"line\">      <span class=\"string\">\"selectedIconPath\"</span>: <span class=\"string\">\"image/icon_fav_active.png\"</span>,</div><div class=\"line\">      <span class=\"string\">\"text\"</span>: <span class=\"string\">\"fav\"</span></div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      <span class=\"string\">\"pagePath\"</span>: <span class=\"string\">\"page/component/about/about\"</span>,</div><div class=\"line\">      <span class=\"string\">\"iconPath\"</span>: <span class=\"string\">\"image/icon_settings_default.png\"</span>,</div><div class=\"line\">      <span class=\"string\">\"selectedIconPath\"</span>: <span class=\"string\">\"image/icon_settings_active.png\"</span>,</div><div class=\"line\">      <span class=\"string\">\"text\"</span>: <span class=\"string\">\"Settings\"</span></div><div class=\"line\">    &#125;]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"networkTimeout\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"request\"</span>: <span class=\"number\">10000</span>,</div><div class=\"line\">    <span class=\"string\">\"connectSocket\"</span>: <span class=\"number\">10000</span>,</div><div class=\"line\">    <span class=\"string\">\"uploadFile\"</span>: <span class=\"number\">10000</span>,</div><div class=\"line\">    <span class=\"string\">\"downloadFile\"</span>: <span class=\"number\">10000</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"debug\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// app.wxss</div><div class=\"line\">page &#123;</div><div class=\"line\">  background-color: #fbf9fe;</div><div class=\"line\">  height: 100%;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// page/component/index/index.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> jodeData,startX,startY,endX,endY,moveStart,</div><div class=\"line\">    topAdImgs = [</div><div class=\"line\">        <span class=\"string\">'../../../image/ad/1.jpg'</span>,</div><div class=\"line\">        <span class=\"string\">'../../../image/ad/2.jpg'</span>,</div><div class=\"line\">        <span class=\"string\">'../../../image/ad/3.jpg'</span>,</div><div class=\"line\">        <span class=\"string\">'../../../image/ad/4.jpg'</span>,</div><div class=\"line\">        <span class=\"string\">'../../../image/ad/5.jpg'</span></div><div class=\"line\">    ];</div><div class=\"line\"></div><div class=\"line\">Page(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">list</span>: [],</div><div class=\"line\">    <span class=\"attr\">itemToView</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">scrollTop</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">currentPage</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">bottomHidden</span>: <span class=\"string\">'none'</span>,</div><div class=\"line\">    <span class=\"attr\">modalHidden</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">modalText</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">topImages</span>:topAdImgs,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">colorMap</span>: [<span class=\"string\">'#86a3c1'</span>,<span class=\"string\">'#86d1cc'</span>,<span class=\"string\">'#bdd4e4'</span>,<span class=\"string\">'#debf88'</span>,<span class=\"string\">'#f9af02'</span>],</div><div class=\"line\">  <span class=\"attr\">parse</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">    html = html.replace(<span class=\"regexp\">/(&lt;p&gt;)|(&lt;\\/p&gt;)|(\\t)|(&amp;nbsp;)/gm</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> html;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">prefixData</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> favJokes = wx.getStorageSync(<span class=\"string\">'favJokes'</span>) || [];</div><div class=\"line\">    data.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</div><div class=\"line\">      item.ct = item.ct.substr(<span class=\"number\">0</span>,<span class=\"number\">19</span>);</div><div class=\"line\">      <span class=\"keyword\">if</span>(item.type === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        item.text = self.parse(item.text);  </div><div class=\"line\">      &#125;</div><div class=\"line\">      item.background = self.colorMap[index%<span class=\"number\">5</span>];</div><div class=\"line\">      item.right = <span class=\"string\">'0%'</span>;</div><div class=\"line\">      item.hidden = <span class=\"string\">'block'</span>;</div><div class=\"line\">      item.hasFav = <span class=\"string\">'none'</span>;</div><div class=\"line\">      favJokes.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fitem,findex</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(fitem.id === item.id)&#123;</div><div class=\"line\">          item.hasFav = <span class=\"string\">'block'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> data;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">onLoad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    wx.request(&#123;</div><div class=\"line\">      <span class=\"attr\">url</span>: <span class=\"string\">'https://123.test.com/joke_text?page='</span> + self.data.currentPage,</div><div class=\"line\">      <span class=\"attr\">data</span>: &#123;&#125;,</div><div class=\"line\">      <span class=\"attr\">header</span>: &#123;</div><div class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> data = res.data;</div><div class=\"line\">        data = self.prefixData(data);</div><div class=\"line\">        self.setData(&#123;</div><div class=\"line\">          <span class=\"attr\">bottomHidden</span>: <span class=\"string\">'none'</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">if</span>(self.data.currentPage === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">          self.setData(&#123;</div><div class=\"line\">            <span class=\"attr\">list</span>: data</div><div class=\"line\">          &#125;);</div><div class=\"line\">          self.toPos(self.data.currentPage);  </div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          data = self.data.list.concat(data);</div><div class=\"line\">          self.setData(&#123;</div><div class=\"line\">            <span class=\"attr\">list</span>: data</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        self.setData(&#123;</div><div class=\"line\">          <span class=\"attr\">bottomHidden</span>: <span class=\"string\">'none'</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">toPos</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">page</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      self.setData(&#123;</div><div class=\"line\">        <span class=\"attr\">itemToView</span>: <span class=\"string\">'item'</span> + (page<span class=\"number\">-1</span>) * <span class=\"number\">20</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;,<span class=\"number\">1000</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">reDealData</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> allJodes = <span class=\"keyword\">this</span>.data.list;</div><div class=\"line\">    <span class=\"keyword\">var</span> favJokes = wx.getStorageSync(<span class=\"string\">'favJokes'</span>) || [];</div><div class=\"line\">    allJodes.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</div><div class=\"line\">      item.hasFav = <span class=\"string\">'none'</span>;</div><div class=\"line\">      favJokes.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fitem,findex</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(fitem.id === item.id)&#123;</div><div class=\"line\">          item.hasFav = <span class=\"string\">'block'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">      <span class=\"attr\">list</span>: allJodes</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">onShow</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.reDealData();</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">topUpdate</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">      <span class=\"attr\">currentPage</span>: <span class=\"number\">1</span>,</div><div class=\"line\">      <span class=\"attr\">itemToView</span>: <span class=\"string\">'top'</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">this</span>.onLoad();</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">bottomLoad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = <span class=\"keyword\">this</span>.data.currentPage;</div><div class=\"line\">    page = page + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">      <span class=\"attr\">bottomHidden</span>: <span class=\"string\">'block'</span>,</div><div class=\"line\">      <span class=\"attr\">currentPage</span>: page</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">this</span>.onLoad();</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">itemScroll</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">itemClick</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// wx.navigationTo(&#123;url:\"\"&#125;);</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">itemStart</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> touch = event.touches[<span class=\"number\">0</span>];</div><div class=\"line\">    startX = touch.clientX;</div><div class=\"line\">    startY = touch.clientY;</div><div class=\"line\">    moveStart = <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">itemMove</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> dataIndex = event.currentTarget.dataset.idx;</div><div class=\"line\">    jodeData = <span class=\"keyword\">this</span>.data.list;</div><div class=\"line\">    <span class=\"keyword\">if</span>(moveStart)&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> touch = event.touches[<span class=\"number\">0</span>];</div><div class=\"line\">      endX = touch.clientX;</div><div class=\"line\">      endY = touch.clientY;</div><div class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"built_in\">Math</span>.abs(startX - endX) &gt;= <span class=\"built_in\">Math</span>.abs(startY - endY))&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(endX - startX &lt;= <span class=\"number\">-5</span>)&#123;</div><div class=\"line\">          jodeData.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</div><div class=\"line\">            item.right = <span class=\"string\">'0%'</span>;</div><div class=\"line\">          &#125;);</div><div class=\"line\">          jodeData[dataIndex].right = <span class=\"string\">\"20%\"</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          jodeData.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</div><div class=\"line\">            item.right = <span class=\"string\">'0%'</span>;</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        self.setData(&#123;</div><div class=\"line\">          <span class=\"attr\">list</span>: jodeData</div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    moveStart = <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">modalChange</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">      <span class=\"attr\">modalHidden</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      <span class=\"attr\">modalText</span>: <span class=\"string\">''</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">tapFav</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> dataIndex = event.currentTarget.dataset.idx;</div><div class=\"line\">    <span class=\"keyword\">var</span> allJodes = <span class=\"keyword\">this</span>.data.list;</div><div class=\"line\">    <span class=\"keyword\">var</span> curJokes = allJodes[dataIndex];</div><div class=\"line\">    curJokes.right = <span class=\"string\">'0%'</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> favJokes = wx.getStorageSync(<span class=\"string\">'favJokes'</span>) || [];</div><div class=\"line\">    <span class=\"keyword\">if</span>(curJokes.hasFav !== <span class=\"string\">'block'</span>)&#123;</div><div class=\"line\">      curJokes.hasFav = <span class=\"string\">'block'</span>;</div><div class=\"line\">      favJokes.unshift(curJokes);</div><div class=\"line\">      wx.setStorageSync(<span class=\"string\">'favJokes'</span>, favJokes);</div><div class=\"line\">      <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">        <span class=\"attr\">list</span>: allJodes</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">        <span class=\"attr\">list</span>: allJodes,</div><div class=\"line\">        <span class=\"attr\">modalHidden</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">modalText</span>: <span class=\"string\">'添加过了'</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">tapDel</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> dataIndex = event.currentTarget.dataset.idx;</div><div class=\"line\">    <span class=\"keyword\">var</span> allJodes = <span class=\"keyword\">this</span>.data.list;</div><div class=\"line\">    <span class=\"keyword\">var</span> curJokes = allJodes[dataIndex];</div><div class=\"line\">    curJokes.right = <span class=\"string\">'0%'</span>;</div><div class=\"line\">    curJokes.hidden = <span class=\"string\">'none'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">      <span class=\"attr\">list</span>: allJodes</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">// page/component/index/index.wxml</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">modal</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal\"</span> <span class=\"attr\">hidden</span>=<span class=\"string\">\"&#123;&#123;modalHidden&#125;&#125;\"</span> </span></div><div class=\"line\">    <span class=\"attr\">no-cancel</span> <span class=\"attr\">bindconfirm</span>=<span class=\"string\">\"modalChange\"</span>&gt;</div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span> &#123;&#123;modalText&#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">modal</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"index\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"body\"</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">swiper</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top-swiper\"</span> <span class=\"attr\">indicator-dots</span>=<span class=\"string\">\"true\"</span></span></div><div class=\"line\">\t\t  <span class=\"attr\">autoplay</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">interval</span>=<span class=\"string\">\"5000\"</span> <span class=\"attr\">duration</span>=<span class=\"string\">\"1000\"</span>&gt;</div><div class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">\"&#123;&#123;topImages&#125;&#125;\"</span>&gt;</span></div><div class=\"line\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">swiper-item</span>&gt;</span></div><div class=\"line\">\t\t      <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;item&#125;&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide-image\"</span>/&gt;</span></div><div class=\"line\">\t\t    <span class=\"tag\">&lt;/<span class=\"name\">swiper-item</span>&gt;</span></div><div class=\"line\">\t\t  <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">swiper</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">scroll-view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"scroll-view\"</span> </span></div><div class=\"line\">    \t    <span class=\"attr\">scroll-y</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">bindscrolltoupper</span>=<span class=\"string\">\"topUpdate\"</span></div><div class=\"line\">    \t    <span class=\"attr\">bindscrolltolower</span>=<span class=\"string\">\"bottomLoad\"</span> <span class=\"attr\">bindscroll</span>=<span class=\"string\">\"itemScroll\"</span> </div><div class=\"line\">    \t    <span class=\"attr\">scroll-into-view</span>=<span class=\"string\">\"&#123;&#123;itemToView&#125;&#125;\"</span> </div><div class=\"line\">    \t    <span class=\"attr\">scroll-top</span>=<span class=\"string\">\"&#123;&#123;scrollTop&#125;&#125;\"</span> </div><div class=\"line\">    \t    <span class=\"attr\">upper-threshold</span>=<span class=\"string\">\"20\"</span> </div><div class=\"line\">    \t    <span class=\"attr\">lower-threshold</span>=<span class=\"string\">\"30\"</span>&gt;</div><div class=\"line\">\t    \t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-container\"</span>&gt;</span></div><div class=\"line\">\t    \t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">id</span>=<span class=\"string\">\"top\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pull-update\"</span>&gt;</span></div><div class=\"line\">\t    \t\t\t正在更新</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 30rpx; height: 30rpx;margin-left:10rpx;\"</span> </span></div><div class=\"line\">\t\t            <span class=\"attr\">mode</span>=<span class=\"string\">\"scaleToFill\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../../image/loading.gif\"</span>&gt;<span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></div><div class=\"line\">\t    \t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">\t\t    \t<span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">\"&#123;&#123;list&#125;&#125;\"</span>&gt;</span></div><div class=\"line\">\t\t        <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item&#123;&#123;index&#125;&#125;\"</span> <span class=\"attr\">data-idx</span>=<span class=\"string\">\"&#123;&#123;index&#125;&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span></span></div><div class=\"line\">\t\t            <span class=\"attr\">style</span>=<span class=\"string\">\"background:&#123;&#123;item.background&#125;&#125;;right:&#123;&#123;item.right&#125;&#125;;display:&#123;&#123;item.hidden&#125;&#125;;\"</span> </div><div class=\"line\">\t\t            <span class=\"attr\">bindtap</span>=<span class=\"string\">\"itemClick\"</span> <span class=\"attr\">bindtouchstart</span>=<span class=\"string\">\"itemStart\"</span> <span class=\"attr\">bindtouchmove</span>=<span class=\"string\">\"itemMove\"</span>&gt;</div><div class=\"line\">\t\t        \t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"info-container\"</span>&gt;</span></div><div class=\"line\">\t\t\t          <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"date\"</span>&gt;</span></div><div class=\"line\">\t\t\t          \t&#123;&#123;item.ct&#125;&#125;</div><div class=\"line\">\t\t\t          <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">  \t\t\t        <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">\"&#123;&#123;item.type == 1&#125;&#125;\"</span>&gt;</span></div><div class=\"line\">  \t\t\t\t\t\t    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></div><div class=\"line\">  \t\t\t          \t&#123;&#123;item.text&#125;&#125;</div><div class=\"line\">  \t\t\t          <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">  \t\t\t\t\t    <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></div><div class=\"line\">  \t\t\t\t\t    <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:else</span>&gt;</span></div><div class=\"line\">  \t\t\t\t\t  \t  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></div><div class=\"line\">  \t\t\t\t          \t<span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-info\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"aspectFit\"</span> </span></div><div class=\"line\">  \t\t\t\t          \t    <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;item.img&#125;&#125;\"</span>&gt;<span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></div><div class=\"line\">  \t\t\t\t          <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">  \t\t\t\t          <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span></div><div class=\"line\">  \t\t\t\t          \t&#123;&#123;item.title&#125;&#125;</div><div class=\"line\">  \t\t\t\t          <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">  \t\t\t\t\t    <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></div><div class=\"line\">  \t\t\t      <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">\t\t          <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fav-icon\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"scaleToFill\"</span> </span></div><div class=\"line\">\t\t            <span class=\"attr\">src</span>=<span class=\"string\">\"../../../image/fav.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:&#123;&#123;item.hasFav&#125;&#125;\"</span>&gt;<span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></div><div class=\"line\">        \t    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"opt-item opt-fav\"</span> <span class=\"attr\">catchtap</span>=<span class=\"string\">\"tapFav\"</span> <span class=\"attr\">data-idx</span>=<span class=\"string\">\"&#123;&#123;index&#125;&#125;\"</span>&gt;</span>喜欢<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">        \t    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"opt-item opt-del\"</span> <span class=\"attr\">catchtap</span>=<span class=\"string\">\"tapDel\"</span> <span class=\"attr\">data-idx</span>=<span class=\"string\">\"&#123;&#123;index&#125;&#125;\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">\t\t        <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">\t\t\t    <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></div><div class=\"line\">\t\t\t    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bottom\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pull-load\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:&#123;&#123;bottomHidden&#125;&#125;;\"</span>&gt;</span></div><div class=\"line\">\t    \t\t\t正在加载</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 30rpx; height: 30rpx;margin-left:10rpx;\"</span></span></div><div class=\"line\">\t    \t\t\t            <span class=\"attr\">mode</span>=<span class=\"string\">\"scaleToFill\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../../image/loading.gif\"</span>&gt;<span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></div><div class=\"line\">\t    \t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">\t\t\t  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">scroll-view</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// page/component/index/index.wxss</span></div><div class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'../../common/wxss/base.wxss'</span>;</div><div class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'../../common/wxss/common.wxss'</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// page/common/wxss/base.wxss</div><div class=\"line\">.index&#123;</div><div class=\"line\">    background-color: #FBF9FE;</div><div class=\"line\">    font-family: -apple-system-font,Helvetica Neue,Helvetica,sans-serif;</div><div class=\"line\">    flex: 1;</div><div class=\"line\">    min-height: 100%;</div><div class=\"line\">    font-size: 32rpx;</div><div class=\"line\">&#125;</div><div class=\"line\">.body&#123;</div><div class=\"line\">    overflow: hidden;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div></pre></td><td class=\"code\"><pre><div class=\"line\">// page/common/wxss/common.wxss</div><div class=\"line\">.top-swiper&#123;</div><div class=\"line\">    height: 300rpx;</div><div class=\"line\">    width: 100%;</div><div class=\"line\">&#125;</div><div class=\"line\">.slide-image&#123;</div><div class=\"line\">    height: 300rpx;</div><div class=\"line\">    width: 100%;</div><div class=\"line\">&#125;</div><div class=\"line\">.scroll-view&#123;</div><div class=\"line\">    height: 860rpx;</div><div class=\"line\">&#125;</div><div class=\"line\">.pic-view&#123;</div><div class=\"line\">    height: 1160rpx;</div><div class=\"line\">&#125;</div><div class=\"line\">.list-container&#123;</div><div class=\"line\">    margin: 40rpx 0;</div><div class=\"line\">&#125;</div><div class=\"line\">.pull-update&#123;</div><div class=\"line\">    text-align: center;</div><div class=\"line\">    height: 40rpx;</div><div class=\"line\">    line-height: 40rpx;</div><div class=\"line\">    margin-top: -40rpx;</div><div class=\"line\">&#125;</div><div class=\"line\">.pull-load&#123;</div><div class=\"line\">    text-align: center;</div><div class=\"line\">    height: 40rpx;</div><div class=\"line\">    line-height: 40rpx;</div><div class=\"line\">&#125;</div><div class=\"line\">.item&#123;</div><div class=\"line\">    position: relative;</div><div class=\"line\">    display: block;</div><div class=\"line\">    width: 100%;</div><div class=\"line\">  text-align: left;</div><div class=\"line\">  vertical-align: middle;</div><div class=\"line\">  background-color: #fff;</div><div class=\"line\">    border-radius: 3;</div><div class=\"line\">    border: 0 none;</div><div class=\"line\">    margin: 0;</div><div class=\"line\">    min-height: 200rpx;</div><div class=\"line\">    box-sizing: border-box;</div><div class=\"line\">    transition: all .25s ease;</div><div class=\"line\">    -webkit-transition: all .25s ease;</div><div class=\"line\">&#125;</div><div class=\"line\">.opt-item&#123;</div><div class=\"line\">    position: absolute;</div><div class=\"line\">    height: 100%;</div><div class=\"line\">    width: 10%;</div><div class=\"line\">    box-sizing: border-box;</div><div class=\"line\">    padding-left: 20rpx;</div><div class=\"line\">    min-height: 200rpx;</div><div class=\"line\">    writing-mode: vertical-lr;</div><div class=\"line\">    text-align: center;</div><div class=\"line\">    vertical-align: middle;</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">&#125;</div><div class=\"line\">.opt-fav&#123;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    right: -10%;</div><div class=\"line\">    background: #868484;</div><div class=\"line\">&#125;</div><div class=\"line\">.opt-del&#123;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    right: -20%;</div><div class=\"line\">    background: #dc4545;</div><div class=\"line\">&#125;</div><div class=\"line\">.fav-del&#123;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    right: -10%;</div><div class=\"line\">    background: #dc4545;</div><div class=\"line\">&#125;</div><div class=\"line\">.info-container&#123;</div><div class=\"line\">    padding: 0 10rpx;</div><div class=\"line\">&#125;</div><div class=\"line\">.date&#123;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    text-align: left;</div><div class=\"line\">    padding:18rpx 8rpx 8rpx 8rpx;</div><div class=\"line\">&#125;</div><div class=\"line\">.title&#123;</div><div class=\"line\">    font-size: 28rpx;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    text-align: left;</div><div class=\"line\">    padding:8rpx 8rpx 18rpx 8rpx;</div><div class=\"line\">    color: #333;</div><div class=\"line\">&#125;</div><div class=\"line\">.content&#123;</div><div class=\"line\">    font-size: 28rpx;</div><div class=\"line\">    text-align: left;</div><div class=\"line\">    padding:8rpx 8rpx 18rpx 8rpx;</div><div class=\"line\">    color: #333;</div><div class=\"line\">&#125;</div><div class=\"line\">.blank-icon&#123;</div><div class=\"line\">    margin: 0 auto;</div><div class=\"line\">&#125;</div><div class=\"line\">.fav-icon&#123;</div><div class=\"line\">    position: absolute;</div><div class=\"line\">    right: 0;</div><div class=\"line\">    top: 0;</div><div class=\"line\">    width: 60rpx;</div><div class=\"line\">    height: 60rpx;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"简单理解\">简单理解</h5><ul>\n<li>小程序开发起来难度适中，主要是对框架，API以及组建的了解，开发过程中简单的拼凑，加上自己逻辑的串联，就可以完成一个小应用</li>\n<li>对于前端开发来说，成本是非常低的，css，js语法一样，然后就是html，html就相当于我们使用一个新的模版引擎，更加强大的mustache</li>\n<li>更像是hybrid开发，我们有调起原生的功能的能力，而又不需要去注册一堆方法(和app约定的方法),例如相册，定位，罗盘，网络，系统信息等</li>\n<li>我们不用过多考虑路由的问题，兼容的问题</li>\n<li>网络请求没有跨域产生的问题</li>\n<li>解决了跨平台，多设备下的交互一致性</li>\n</ul>\n<h5 id=\"资料大全\">资料大全</h5><p><a href=\"https://github.com/justjavac/awesome-wechat-weapp?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\" target=\"_blank\" rel=\"external\">资料大全</a></p>\n","excerpt":"<h5 id=\"准备\">准备</h5><ul>\n<li>开发环境<ul>\n<li><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html\">下载开发工具</a></li>\n<li><a href=\"https://github.com/gavinkwoe/weapp-ide-crack\">按照网上教程破解</a></li>\n<li>或者直接下载破解好的包</li>\n</ul>\n</li>\n<li>学习资料<ul>\n<li><a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/\">学习资料</a></li>\n</ul>\n</li>\n</ul>","more":"<h5 id=\"开始\">开始</h5><ul>\n<li>打开微信web开发者工具</li>\n<li>AppID选择 无AppID 或者 随便写一个(破解后)</li>\n<li>项目名称随便写</li>\n<li>开发目录选择一个空的文件夹</li>\n</ul>\n<h5 id=\"项目目录\">项目目录</h5><ul>\n<li>文件<ul>\n<li>app.js 必须 项目的主文件 小程序的逻辑</li>\n<li>app.json 必须 小程序的公共设置</li>\n<li>app.wxss 非必须 存放小程序的公共样式</li>\n<li>各个文件编写规范以及配置的意义资料中讲的很详细,就不重新描述了。</li>\n</ul>\n</li>\n<li>开发<blockquote>\n<p>这个小应用中调用了一些wx的组件以及API,实现了一个列表的下拉刷新，上拉加载，每一项的左划菜单(删除，收藏等),开发时间有限，实现的比较粗糙，主要是为了把小程序开发这一套走一遍，知道小程序想干什么，能干什么，怎么干。下面只贴了部分代码。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app.js</span></div><div class=\"line\">App(&#123;</div><div class=\"line\">  <span class=\"attr\">onLaunch</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'App Launch'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">onShow</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'App Show'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">onHide</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'App Hide'</span>)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">globalData</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">userInfo</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">    <span class=\"attr\">nightMode</span>: <span class=\"literal\">false</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// app.json</span></div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"pages\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"page/component/index/index\"</span>,</div><div class=\"line\">    <span class=\"string\">\"page/component/pic/pic\"</span>,</div><div class=\"line\">    <span class=\"string\">\"page/component/fav/fav\"</span>,</div><div class=\"line\">    <span class=\"string\">\"page/component/about/about\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  <span class=\"string\">\"window\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"navigationBarTextStyle\"</span>: <span class=\"string\">\"white\"</span>,</div><div class=\"line\">    <span class=\"string\">\"navigationBarTitleText\"</span>: <span class=\"string\">\"Jokes\"</span>,</div><div class=\"line\">    <span class=\"string\">\"navigationBarBackgroundColor\"</span>: <span class=\"string\">\"#353336\"</span>,</div><div class=\"line\">    <span class=\"string\">\"backgroundColor\"</span>: <span class=\"string\">\"#353336\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"tabBar\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"color\"</span>: <span class=\"string\">\"#000000\"</span>,</div><div class=\"line\">    <span class=\"string\">\"selectedColor\"</span>: <span class=\"string\">\"#ffffff\"</span>,</div><div class=\"line\">    <span class=\"string\">\"borderStyle\"</span>: <span class=\"string\">\"black\"</span>,</div><div class=\"line\">    <span class=\"string\">\"backgroundColor\"</span>: <span class=\"string\">\"#413f40\"</span>,</div><div class=\"line\">    <span class=\"string\">\"list\"</span>: [&#123;</div><div class=\"line\">      <span class=\"string\">\"pagePath\"</span>: <span class=\"string\">\"page/component/index/index\"</span>,</div><div class=\"line\">      <span class=\"string\">\"iconPath\"</span>: <span class=\"string\">\"image/icon_jokes_default.png\"</span>,</div><div class=\"line\">      <span class=\"string\">\"selectedIconPath\"</span>: <span class=\"string\">\"image/icon_jokes_active.png\"</span>,</div><div class=\"line\">      <span class=\"string\">\"text\"</span>: <span class=\"string\">\"Jokes\"</span></div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      <span class=\"string\">\"pagePath\"</span>: <span class=\"string\">\"page/component/pic/pic\"</span>,</div><div class=\"line\">      <span class=\"string\">\"iconPath\"</span>: <span class=\"string\">\"image/icon_pic_default.png\"</span>,</div><div class=\"line\">      <span class=\"string\">\"selectedIconPath\"</span>: <span class=\"string\">\"image/icon_pic_active.png\"</span>,</div><div class=\"line\">      <span class=\"string\">\"text\"</span>: <span class=\"string\">\"Jokes\"</span></div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      <span class=\"string\">\"pagePath\"</span>: <span class=\"string\">\"page/component/fav/fav\"</span>,</div><div class=\"line\">      <span class=\"string\">\"iconPath\"</span>: <span class=\"string\">\"image/icon_fav_default.png\"</span>,</div><div class=\"line\">      <span class=\"string\">\"selectedIconPath\"</span>: <span class=\"string\">\"image/icon_fav_active.png\"</span>,</div><div class=\"line\">      <span class=\"string\">\"text\"</span>: <span class=\"string\">\"fav\"</span></div><div class=\"line\">    &#125;, &#123;</div><div class=\"line\">      <span class=\"string\">\"pagePath\"</span>: <span class=\"string\">\"page/component/about/about\"</span>,</div><div class=\"line\">      <span class=\"string\">\"iconPath\"</span>: <span class=\"string\">\"image/icon_settings_default.png\"</span>,</div><div class=\"line\">      <span class=\"string\">\"selectedIconPath\"</span>: <span class=\"string\">\"image/icon_settings_active.png\"</span>,</div><div class=\"line\">      <span class=\"string\">\"text\"</span>: <span class=\"string\">\"Settings\"</span></div><div class=\"line\">    &#125;]</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"networkTimeout\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"request\"</span>: <span class=\"number\">10000</span>,</div><div class=\"line\">    <span class=\"string\">\"connectSocket\"</span>: <span class=\"number\">10000</span>,</div><div class=\"line\">    <span class=\"string\">\"uploadFile\"</span>: <span class=\"number\">10000</span>,</div><div class=\"line\">    <span class=\"string\">\"downloadFile\"</span>: <span class=\"number\">10000</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"debug\"</span>: <span class=\"literal\">true</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// app.wxss</div><div class=\"line\">page &#123;</div><div class=\"line\">  background-color: #fbf9fe;</div><div class=\"line\">  height: 100%;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// page/component/index/index.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> jodeData,startX,startY,endX,endY,moveStart,</div><div class=\"line\">    topAdImgs = [</div><div class=\"line\">        <span class=\"string\">'../../../image/ad/1.jpg'</span>,</div><div class=\"line\">        <span class=\"string\">'../../../image/ad/2.jpg'</span>,</div><div class=\"line\">        <span class=\"string\">'../../../image/ad/3.jpg'</span>,</div><div class=\"line\">        <span class=\"string\">'../../../image/ad/4.jpg'</span>,</div><div class=\"line\">        <span class=\"string\">'../../../image/ad/5.jpg'</span></div><div class=\"line\">    ];</div><div class=\"line\"></div><div class=\"line\">Page(&#123;</div><div class=\"line\">  <span class=\"attr\">data</span>: &#123;</div><div class=\"line\">    <span class=\"attr\">list</span>: [],</div><div class=\"line\">    <span class=\"attr\">itemToView</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">scrollTop</span>: <span class=\"number\">0</span>,</div><div class=\"line\">    <span class=\"attr\">currentPage</span>: <span class=\"number\">1</span>,</div><div class=\"line\">    <span class=\"attr\">bottomHidden</span>: <span class=\"string\">'none'</span>,</div><div class=\"line\">    <span class=\"attr\">modalHidden</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">    <span class=\"attr\">modalText</span>: <span class=\"string\">''</span>,</div><div class=\"line\">    <span class=\"attr\">topImages</span>:topAdImgs,</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">colorMap</span>: [<span class=\"string\">'#86a3c1'</span>,<span class=\"string\">'#86d1cc'</span>,<span class=\"string\">'#bdd4e4'</span>,<span class=\"string\">'#debf88'</span>,<span class=\"string\">'#f9af02'</span>],</div><div class=\"line\">  <span class=\"attr\">parse</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">html</span>) </span>&#123;</div><div class=\"line\">    html = html.replace(<span class=\"regexp\">/(&lt;p&gt;)|(&lt;\\/p&gt;)|(\\t)|(&amp;nbsp;)/gm</span>, <span class=\"string\">\"\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> html;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">prefixData</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> favJokes = wx.getStorageSync(<span class=\"string\">'favJokes'</span>) || [];</div><div class=\"line\">    data.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</div><div class=\"line\">      item.ct = item.ct.substr(<span class=\"number\">0</span>,<span class=\"number\">19</span>);</div><div class=\"line\">      <span class=\"keyword\">if</span>(item.type === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">        item.text = self.parse(item.text);  </div><div class=\"line\">      &#125;</div><div class=\"line\">      item.background = self.colorMap[index%<span class=\"number\">5</span>];</div><div class=\"line\">      item.right = <span class=\"string\">'0%'</span>;</div><div class=\"line\">      item.hidden = <span class=\"string\">'block'</span>;</div><div class=\"line\">      item.hasFav = <span class=\"string\">'none'</span>;</div><div class=\"line\">      favJokes.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fitem,findex</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(fitem.id === item.id)&#123;</div><div class=\"line\">          item.hasFav = <span class=\"string\">'block'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">return</span> data;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">onLoad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">options</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    wx.request(&#123;</div><div class=\"line\">      <span class=\"attr\">url</span>: <span class=\"string\">'https://123.test.com/joke_text?page='</span> + self.data.currentPage,</div><div class=\"line\">      <span class=\"attr\">data</span>: &#123;&#125;,</div><div class=\"line\">      <span class=\"attr\">header</span>: &#123;</div><div class=\"line\">        <span class=\"string\">'Content-Type'</span>: <span class=\"string\">'application/json'</span></div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> data = res.data;</div><div class=\"line\">        data = self.prefixData(data);</div><div class=\"line\">        self.setData(&#123;</div><div class=\"line\">          <span class=\"attr\">bottomHidden</span>: <span class=\"string\">'none'</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">        <span class=\"keyword\">if</span>(self.data.currentPage === <span class=\"number\">1</span>)&#123;</div><div class=\"line\">          self.setData(&#123;</div><div class=\"line\">            <span class=\"attr\">list</span>: data</div><div class=\"line\">          &#125;);</div><div class=\"line\">          self.toPos(self.data.currentPage);  </div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          data = self.data.list.concat(data);</div><div class=\"line\">          self.setData(&#123;</div><div class=\"line\">            <span class=\"attr\">list</span>: data</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;,</div><div class=\"line\">      <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        self.setData(&#123;</div><div class=\"line\">          <span class=\"attr\">bottomHidden</span>: <span class=\"string\">'none'</span></div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">toPos</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">page</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    setTimeout(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">      self.setData(&#123;</div><div class=\"line\">        <span class=\"attr\">itemToView</span>: <span class=\"string\">'item'</span> + (page<span class=\"number\">-1</span>) * <span class=\"number\">20</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;,<span class=\"number\">1000</span>);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">reDealData</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> allJodes = <span class=\"keyword\">this</span>.data.list;</div><div class=\"line\">    <span class=\"keyword\">var</span> favJokes = wx.getStorageSync(<span class=\"string\">'favJokes'</span>) || [];</div><div class=\"line\">    allJodes.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</div><div class=\"line\">      item.hasFav = <span class=\"string\">'none'</span>;</div><div class=\"line\">      favJokes.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">fitem,findex</span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(fitem.id === item.id)&#123;</div><div class=\"line\">          item.hasFav = <span class=\"string\">'block'</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">      <span class=\"attr\">list</span>: allJodes</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">onShow</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.reDealData();</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">topUpdate</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">      <span class=\"attr\">currentPage</span>: <span class=\"number\">1</span>,</div><div class=\"line\">      <span class=\"attr\">itemToView</span>: <span class=\"string\">'top'</span></div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">this</span>.onLoad();</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">bottomLoad</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> page = <span class=\"keyword\">this</span>.data.currentPage;</div><div class=\"line\">    page = page + <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">      <span class=\"attr\">bottomHidden</span>: <span class=\"string\">'block'</span>,</div><div class=\"line\">      <span class=\"attr\">currentPage</span>: page</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"keyword\">this</span>.onLoad();</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">itemScroll</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">itemClick</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// wx.navigationTo(&#123;url:\"\"&#125;);</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">itemStart</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> touch = event.touches[<span class=\"number\">0</span>];</div><div class=\"line\">    startX = touch.clientX;</div><div class=\"line\">    startY = touch.clientY;</div><div class=\"line\">    moveStart = <span class=\"literal\">true</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">itemMove</span>: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> self = <span class=\"keyword\">this</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> dataIndex = event.currentTarget.dataset.idx;</div><div class=\"line\">    jodeData = <span class=\"keyword\">this</span>.data.list;</div><div class=\"line\">    <span class=\"keyword\">if</span>(moveStart)&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> touch = event.touches[<span class=\"number\">0</span>];</div><div class=\"line\">      endX = touch.clientX;</div><div class=\"line\">      endY = touch.clientY;</div><div class=\"line\">      <span class=\"keyword\">if</span>(<span class=\"built_in\">Math</span>.abs(startX - endX) &gt;= <span class=\"built_in\">Math</span>.abs(startY - endY))&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span>(endX - startX &lt;= <span class=\"number\">-5</span>)&#123;</div><div class=\"line\">          jodeData.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</div><div class=\"line\">            item.right = <span class=\"string\">'0%'</span>;</div><div class=\"line\">          &#125;);</div><div class=\"line\">          jodeData[dataIndex].right = <span class=\"string\">\"20%\"</span>;</div><div class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">          jodeData.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">item,index</span>)</span>&#123;</div><div class=\"line\">            item.right = <span class=\"string\">'0%'</span>;</div><div class=\"line\">          &#125;);</div><div class=\"line\">        &#125;</div><div class=\"line\">        self.setData(&#123;</div><div class=\"line\">          <span class=\"attr\">list</span>: jodeData</div><div class=\"line\">        &#125;);</div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    moveStart = <span class=\"literal\">false</span>;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">modalChange</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">      <span class=\"attr\">modalHidden</span>: <span class=\"literal\">true</span>,</div><div class=\"line\">      <span class=\"attr\">modalText</span>: <span class=\"string\">''</span></div><div class=\"line\">    &#125;)</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">tapFav</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> dataIndex = event.currentTarget.dataset.idx;</div><div class=\"line\">    <span class=\"keyword\">var</span> allJodes = <span class=\"keyword\">this</span>.data.list;</div><div class=\"line\">    <span class=\"keyword\">var</span> curJokes = allJodes[dataIndex];</div><div class=\"line\">    curJokes.right = <span class=\"string\">'0%'</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> favJokes = wx.getStorageSync(<span class=\"string\">'favJokes'</span>) || [];</div><div class=\"line\">    <span class=\"keyword\">if</span>(curJokes.hasFav !== <span class=\"string\">'block'</span>)&#123;</div><div class=\"line\">      curJokes.hasFav = <span class=\"string\">'block'</span>;</div><div class=\"line\">      favJokes.unshift(curJokes);</div><div class=\"line\">      wx.setStorageSync(<span class=\"string\">'favJokes'</span>, favJokes);</div><div class=\"line\">      <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">        <span class=\"attr\">list</span>: allJodes</div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">        <span class=\"attr\">list</span>: allJodes,</div><div class=\"line\">        <span class=\"attr\">modalHidden</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">        <span class=\"attr\">modalText</span>: <span class=\"string\">'添加过了'</span></div><div class=\"line\">      &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"attr\">tapDel</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> dataIndex = event.currentTarget.dataset.idx;</div><div class=\"line\">    <span class=\"keyword\">var</span> allJodes = <span class=\"keyword\">this</span>.data.list;</div><div class=\"line\">    <span class=\"keyword\">var</span> curJokes = allJodes[dataIndex];</div><div class=\"line\">    curJokes.right = <span class=\"string\">'0%'</span>;</div><div class=\"line\">    curJokes.hidden = <span class=\"string\">'none'</span>;</div><div class=\"line\">    <span class=\"keyword\">this</span>.setData(&#123;</div><div class=\"line\">      <span class=\"attr\">list</span>: allJodes</div><div class=\"line\">    &#125;);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div></pre></td><td class=\"code\"><pre><div class=\"line\">// page/component/index/index.wxml</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">modal</span> <span class=\"attr\">class</span>=<span class=\"string\">\"modal\"</span> <span class=\"attr\">hidden</span>=<span class=\"string\">\"&#123;&#123;modalHidden&#125;&#125;\"</span> </div><div class=\"line\">    <span class=\"attr\">no-cancel</span> <span class=\"attr\">bindconfirm</span>=<span class=\"string\">\"modalChange\"</span>&gt;</span></div><div class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span> &#123;&#123;modalText&#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">modal</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"index\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"body\"</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">swiper</span> <span class=\"attr\">class</span>=<span class=\"string\">\"top-swiper\"</span> <span class=\"attr\">indicator-dots</span>=<span class=\"string\">\"true\"</span></div><div class=\"line\">\t\t  <span class=\"attr\">autoplay</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">interval</span>=<span class=\"string\">\"5000\"</span> <span class=\"attr\">duration</span>=<span class=\"string\">\"1000\"</span>&gt;</span></div><div class=\"line\">\t\t  <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">\"&#123;&#123;topImages&#125;&#125;\"</span>&gt;</span></div><div class=\"line\">\t\t    <span class=\"tag\">&lt;<span class=\"name\">swiper-item</span>&gt;</span></div><div class=\"line\">\t\t      <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;item&#125;&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"slide-image\"</span>/&gt;</span></div><div class=\"line\">\t\t    <span class=\"tag\">&lt;/<span class=\"name\">swiper-item</span>&gt;</span></div><div class=\"line\">\t\t  <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">swiper</span>&gt;</span></div><div class=\"line\">    \t<span class=\"tag\">&lt;<span class=\"name\">scroll-view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"scroll-view\"</span> </div><div class=\"line\">    \t    <span class=\"attr\">scroll-y</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">bindscrolltoupper</span>=<span class=\"string\">\"topUpdate\"</span></div><div class=\"line\">    \t    <span class=\"attr\">bindscrolltolower</span>=<span class=\"string\">\"bottomLoad\"</span> <span class=\"attr\">bindscroll</span>=<span class=\"string\">\"itemScroll\"</span> </div><div class=\"line\">    \t    <span class=\"attr\">scroll-into-view</span>=<span class=\"string\">\"&#123;&#123;itemToView&#125;&#125;\"</span> </div><div class=\"line\">    \t    <span class=\"attr\">scroll-top</span>=<span class=\"string\">\"&#123;&#123;scrollTop&#125;&#125;\"</span> </div><div class=\"line\">    \t    <span class=\"attr\">upper-threshold</span>=<span class=\"string\">\"20\"</span> </div><div class=\"line\">    \t    <span class=\"attr\">lower-threshold</span>=<span class=\"string\">\"30\"</span>&gt;</span></div><div class=\"line\">\t    \t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"list-container\"</span>&gt;</span></div><div class=\"line\">\t    \t\t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">id</span>=<span class=\"string\">\"top\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pull-update\"</span>&gt;</span></div><div class=\"line\">\t    \t\t\t正在更新</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 30rpx; height: 30rpx;margin-left:10rpx;\"</span> </div><div class=\"line\">\t\t            <span class=\"attr\">mode</span>=<span class=\"string\">\"scaleToFill\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../../image/loading.gif\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></div><div class=\"line\">\t    \t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">\t\t    \t<span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">\"&#123;&#123;list&#125;&#125;\"</span>&gt;</span></div><div class=\"line\">\t\t        <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">id</span>=<span class=\"string\">\"item&#123;&#123;index&#125;&#125;\"</span> <span class=\"attr\">data-idx</span>=<span class=\"string\">\"&#123;&#123;index&#125;&#125;\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"item\"</span></div><div class=\"line\">\t\t            <span class=\"attr\">style</span>=<span class=\"string\">\"background:&#123;&#123;item.background&#125;&#125;;right:&#123;&#123;item.right&#125;&#125;;display:&#123;&#123;item.hidden&#125;&#125;;\"</span> </div><div class=\"line\">\t\t            <span class=\"attr\">bindtap</span>=<span class=\"string\">\"itemClick\"</span> <span class=\"attr\">bindtouchstart</span>=<span class=\"string\">\"itemStart\"</span> <span class=\"attr\">bindtouchmove</span>=<span class=\"string\">\"itemMove\"</span>&gt;</span></div><div class=\"line\">\t\t        \t<span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"info-container\"</span>&gt;</span></div><div class=\"line\">\t\t\t          <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"date\"</span>&gt;</span></div><div class=\"line\">\t\t\t          \t&#123;&#123;item.ct&#125;&#125;</div><div class=\"line\">\t\t\t          <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">  \t\t\t        <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:if</span>=<span class=\"string\">\"&#123;&#123;item.type == 1&#125;&#125;\"</span>&gt;</span></div><div class=\"line\">  \t\t\t\t\t\t    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></div><div class=\"line\">  \t\t\t          \t&#123;&#123;item.text&#125;&#125;</div><div class=\"line\">  \t\t\t          <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">  \t\t\t\t\t    <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></div><div class=\"line\">  \t\t\t\t\t    <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:else</span>&gt;</span></div><div class=\"line\">  \t\t\t\t\t  \t  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"content\"</span>&gt;</span></div><div class=\"line\">  \t\t\t\t          \t<span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img-info\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"aspectFit\"</span> </div><div class=\"line\">  \t\t\t\t          \t    <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123;item.img&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></div><div class=\"line\">  \t\t\t\t          <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">  \t\t\t\t          <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span></div><div class=\"line\">  \t\t\t\t          \t&#123;&#123;item.title&#125;&#125;</div><div class=\"line\">  \t\t\t\t          <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">  \t\t\t\t\t    <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></div><div class=\"line\">  \t\t\t      <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">\t\t          <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fav-icon\"</span> <span class=\"attr\">mode</span>=<span class=\"string\">\"scaleToFill\"</span> </div><div class=\"line\">\t\t            <span class=\"attr\">src</span>=<span class=\"string\">\"../../../image/fav.png\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:&#123;&#123;item.hasFav&#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></div><div class=\"line\">        \t    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"opt-item opt-fav\"</span> <span class=\"attr\">catchtap</span>=<span class=\"string\">\"tapFav\"</span> <span class=\"attr\">data-idx</span>=<span class=\"string\">\"&#123;&#123;index&#125;&#125;\"</span>&gt;</span>喜欢<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">        \t    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"opt-item opt-del\"</span> <span class=\"attr\">catchtap</span>=<span class=\"string\">\"tapDel\"</span> <span class=\"attr\">data-idx</span>=<span class=\"string\">\"&#123;&#123;index&#125;&#125;\"</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">\t\t        <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">\t\t\t    <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></div><div class=\"line\">\t\t\t    <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">id</span>=<span class=\"string\">\"bottom\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pull-load\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display:&#123;&#123;bottomHidden&#125;&#125;;\"</span>&gt;</span></div><div class=\"line\">\t    \t\t\t正在加载</div><div class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">style</span>=<span class=\"string\">\"width: 30rpx; height: 30rpx;margin-left:10rpx;\"</span></div><div class=\"line\">\t    \t\t\t            <span class=\"attr\">mode</span>=<span class=\"string\">\"scaleToFill\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../../image/loading.gif\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></div><div class=\"line\">\t    \t\t<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">\t\t\t  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\">\t    <span class=\"tag\">&lt;/<span class=\"name\">scroll-view</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// page/component/index/index.wxss</span></div><div class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'../../common/wxss/base.wxss'</span>;</div><div class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">'../../common/wxss/common.wxss'</span>;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">// page/common/wxss/base.wxss</div><div class=\"line\">.index&#123;</div><div class=\"line\">    background-color: #FBF9FE;</div><div class=\"line\">    font-family: -apple-system-font,Helvetica Neue,Helvetica,sans-serif;</div><div class=\"line\">    flex: 1;</div><div class=\"line\">    min-height: 100%;</div><div class=\"line\">    font-size: 32rpx;</div><div class=\"line\">&#125;</div><div class=\"line\">.body&#123;</div><div class=\"line\">    overflow: hidden;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div></pre></td><td class=\"code\"><pre><div class=\"line\">// page/common/wxss/common.wxss</div><div class=\"line\">.top-swiper&#123;</div><div class=\"line\">    height: 300rpx;</div><div class=\"line\">    width: 100%;</div><div class=\"line\">&#125;</div><div class=\"line\">.slide-image&#123;</div><div class=\"line\">    height: 300rpx;</div><div class=\"line\">    width: 100%;</div><div class=\"line\">&#125;</div><div class=\"line\">.scroll-view&#123;</div><div class=\"line\">    height: 860rpx;</div><div class=\"line\">&#125;</div><div class=\"line\">.pic-view&#123;</div><div class=\"line\">    height: 1160rpx;</div><div class=\"line\">&#125;</div><div class=\"line\">.list-container&#123;</div><div class=\"line\">    margin: 40rpx 0;</div><div class=\"line\">&#125;</div><div class=\"line\">.pull-update&#123;</div><div class=\"line\">    text-align: center;</div><div class=\"line\">    height: 40rpx;</div><div class=\"line\">    line-height: 40rpx;</div><div class=\"line\">    margin-top: -40rpx;</div><div class=\"line\">&#125;</div><div class=\"line\">.pull-load&#123;</div><div class=\"line\">    text-align: center;</div><div class=\"line\">    height: 40rpx;</div><div class=\"line\">    line-height: 40rpx;</div><div class=\"line\">&#125;</div><div class=\"line\">.item&#123;</div><div class=\"line\">    position: relative;</div><div class=\"line\">    display: block;</div><div class=\"line\">    width: 100%;</div><div class=\"line\">  text-align: left;</div><div class=\"line\">  vertical-align: middle;</div><div class=\"line\">  background-color: #fff;</div><div class=\"line\">    border-radius: 3;</div><div class=\"line\">    border: 0 none;</div><div class=\"line\">    margin: 0;</div><div class=\"line\">    min-height: 200rpx;</div><div class=\"line\">    box-sizing: border-box;</div><div class=\"line\">    transition: all .25s ease;</div><div class=\"line\">    -webkit-transition: all .25s ease;</div><div class=\"line\">&#125;</div><div class=\"line\">.opt-item&#123;</div><div class=\"line\">    position: absolute;</div><div class=\"line\">    height: 100%;</div><div class=\"line\">    width: 10%;</div><div class=\"line\">    box-sizing: border-box;</div><div class=\"line\">    padding-left: 20rpx;</div><div class=\"line\">    min-height: 200rpx;</div><div class=\"line\">    writing-mode: vertical-lr;</div><div class=\"line\">    text-align: center;</div><div class=\"line\">    vertical-align: middle;</div><div class=\"line\">    display: inline-block;</div><div class=\"line\">&#125;</div><div class=\"line\">.opt-fav&#123;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    right: -10%;</div><div class=\"line\">    background: #868484;</div><div class=\"line\">&#125;</div><div class=\"line\">.opt-del&#123;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    right: -20%;</div><div class=\"line\">    background: #dc4545;</div><div class=\"line\">&#125;</div><div class=\"line\">.fav-del&#123;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    right: -10%;</div><div class=\"line\">    background: #dc4545;</div><div class=\"line\">&#125;</div><div class=\"line\">.info-container&#123;</div><div class=\"line\">    padding: 0 10rpx;</div><div class=\"line\">&#125;</div><div class=\"line\">.date&#123;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    text-align: left;</div><div class=\"line\">    padding:18rpx 8rpx 8rpx 8rpx;</div><div class=\"line\">&#125;</div><div class=\"line\">.title&#123;</div><div class=\"line\">    font-size: 28rpx;</div><div class=\"line\">    color: #fff;</div><div class=\"line\">    text-align: left;</div><div class=\"line\">    padding:8rpx 8rpx 18rpx 8rpx;</div><div class=\"line\">    color: #333;</div><div class=\"line\">&#125;</div><div class=\"line\">.content&#123;</div><div class=\"line\">    font-size: 28rpx;</div><div class=\"line\">    text-align: left;</div><div class=\"line\">    padding:8rpx 8rpx 18rpx 8rpx;</div><div class=\"line\">    color: #333;</div><div class=\"line\">&#125;</div><div class=\"line\">.blank-icon&#123;</div><div class=\"line\">    margin: 0 auto;</div><div class=\"line\">&#125;</div><div class=\"line\">.fav-icon&#123;</div><div class=\"line\">    position: absolute;</div><div class=\"line\">    right: 0;</div><div class=\"line\">    top: 0;</div><div class=\"line\">    width: 60rpx;</div><div class=\"line\">    height: 60rpx;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h5 id=\"简单理解\">简单理解</h5><ul>\n<li>小程序开发起来难度适中，主要是对框架，API以及组建的了解，开发过程中简单的拼凑，加上自己逻辑的串联，就可以完成一个小应用</li>\n<li>对于前端开发来说，成本是非常低的，css，js语法一样，然后就是html，html就相当于我们使用一个新的模版引擎，更加强大的mustache</li>\n<li>更像是hybrid开发，我们有调起原生的功能的能力，而又不需要去注册一堆方法(和app约定的方法),例如相册，定位，罗盘，网络，系统信息等</li>\n<li>我们不用过多考虑路由的问题，兼容的问题</li>\n<li>网络请求没有跨域产生的问题</li>\n<li>解决了跨平台，多设备下的交互一致性</li>\n</ul>\n<h5 id=\"资料大全\">资料大全</h5><p><a href=\"https://github.com/justjavac/awesome-wechat-weapp?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io\">资料大全</a></p>"},{"title":"浏览器扩展应用开发","date":"2015-11-10T07:03:01.000Z","toc":true,"_content":"#### 简介\n>chrome应用商店里面存放着大量的浏览器应用，这些扩展应用不同于浏览器插件，它们必须依赖浏览器而运行。浏览器应用的本质就是web页面，浏览器支持的API我们都可以使用\n<!--more-->\n\n#### 准备\n>* 开发浏览器扩招应用不需要我们学习额外的技能，只需要我们日常开发中使用的html,js,css知识足矣。\n* 项目中包含的文件\n\t1. manifest\n\t2. 一个或多个html文件\n\t3. javascript文件（可选）\n\t4. css文件（可选）\n\t5. 其他文件，例如图片（可选）\n* 这些文件放在同一个根目录下，发布应用时，这个目录全部打包到一个应用名是.crx的压缩文件中。\n[https://chrome.google.com/webstore/developer/dashboard]上传应用的时候，可以自动生成.crx文件\n或者使用浏览器的 更多工具》扩展程序》打包扩展程序 功能，生成.crx文件。\n\n#### manifest.json\n```javascript\n{\n\t\"name\": \"My Extension\",\n\t\"version\": \"2.1\",\n\t\"description\": \"Gets information from Google.\",\n\t\"icons\": { \"128\": \"icon_128.png\" },\n\t\"background_page\": \"bg.html\",\n\t\"permissions\": [\"http://*.google.com/\", \"https://*.google.com/\"],\n\t\"browser_action\": {\n\t\t\"default_title\": \"\",\n\t\t\"default_icon\": \"icon_19.png\",\n\t\t\"default_popup\": \"popup.html\"\n\t}\n}\n```\nmanifest.json文件中主要内容都在这里，不难理解\n\n#### 基本架构\n1. 运行app的主页面，可以使用chrome.tabs.create()或者window.open()来显示内部的HTML文件。也可以直接使用html文件。\n2. Content scripts，如果一个页面要与web页面交互，需要使用一个content scripts，content script脚本是指能够在浏览器已经加载的页面内部运行的javascript脚本。可以将content script看作是网页的一部分，而不是它所在的应用的一部分。\n```javascript\n{\n  \"name\": \"My extension\",\n  ...\n  \"content_scripts\": [\n    {\n      \"matches\": [\"http://www.google.com/*\"],\n      \"css\": [\"mystyles.css\"],\n      \"js\": [\"jquery.js\", \"myscript.js\"]\n    }\n  ],\n  ...\n}\n或者\n{\n  \"name\": \"My extension\",\n  ...\n  \"permissions\": [\n    \"tabs\", \"http://www.google.com/*\"\n  ],\n  ...\n}\n\n直接注入\n/* background.html */\nchrome.browserAction.onClicked.addListener(function(tab) {\n  chrome.tabs.executeScript(null,\n                           {code:\"document.body.bgColor='red'\"});\n});\n\n/* manifest.json */\n\"permissions\": [\n  \"tabs\", \"http://*/*\"\n],\n\n注入文件\nchrome.tabs.executeScript(null, {file: \"content_script.js\"});\n```\n3. 通信 扩展和web页面之间可以通信，使用 getViews()和getBackgroundPage() 可以获得页面的引用，就能操作页面方法，操作页面dom\n4. 数据保存，如果是在非隐身模式下，可以使用localStorage，检查窗口是否在隐身模式下，检查Tab或Window对象的incognito属性。\n\n#### 跨域\n```javascript\n/* manifest.json */\n\"permissions\": [\n\t\"http://api.test.com/\"\n]\n```","source":"_posts/浏览器扩展应用开发.md","raw":"title: 浏览器扩展应用开发\ndate: 2015-11-10 15:03:01\ntags: web\ntoc: true\n---\n#### 简介\n>chrome应用商店里面存放着大量的浏览器应用，这些扩展应用不同于浏览器插件，它们必须依赖浏览器而运行。浏览器应用的本质就是web页面，浏览器支持的API我们都可以使用\n<!--more-->\n\n#### 准备\n>* 开发浏览器扩招应用不需要我们学习额外的技能，只需要我们日常开发中使用的html,js,css知识足矣。\n* 项目中包含的文件\n\t1. manifest\n\t2. 一个或多个html文件\n\t3. javascript文件（可选）\n\t4. css文件（可选）\n\t5. 其他文件，例如图片（可选）\n* 这些文件放在同一个根目录下，发布应用时，这个目录全部打包到一个应用名是.crx的压缩文件中。\n[https://chrome.google.com/webstore/developer/dashboard]上传应用的时候，可以自动生成.crx文件\n或者使用浏览器的 更多工具》扩展程序》打包扩展程序 功能，生成.crx文件。\n\n#### manifest.json\n```javascript\n{\n\t\"name\": \"My Extension\",\n\t\"version\": \"2.1\",\n\t\"description\": \"Gets information from Google.\",\n\t\"icons\": { \"128\": \"icon_128.png\" },\n\t\"background_page\": \"bg.html\",\n\t\"permissions\": [\"http://*.google.com/\", \"https://*.google.com/\"],\n\t\"browser_action\": {\n\t\t\"default_title\": \"\",\n\t\t\"default_icon\": \"icon_19.png\",\n\t\t\"default_popup\": \"popup.html\"\n\t}\n}\n```\nmanifest.json文件中主要内容都在这里，不难理解\n\n#### 基本架构\n1. 运行app的主页面，可以使用chrome.tabs.create()或者window.open()来显示内部的HTML文件。也可以直接使用html文件。\n2. Content scripts，如果一个页面要与web页面交互，需要使用一个content scripts，content script脚本是指能够在浏览器已经加载的页面内部运行的javascript脚本。可以将content script看作是网页的一部分，而不是它所在的应用的一部分。\n```javascript\n{\n  \"name\": \"My extension\",\n  ...\n  \"content_scripts\": [\n    {\n      \"matches\": [\"http://www.google.com/*\"],\n      \"css\": [\"mystyles.css\"],\n      \"js\": [\"jquery.js\", \"myscript.js\"]\n    }\n  ],\n  ...\n}\n或者\n{\n  \"name\": \"My extension\",\n  ...\n  \"permissions\": [\n    \"tabs\", \"http://www.google.com/*\"\n  ],\n  ...\n}\n\n直接注入\n/* background.html */\nchrome.browserAction.onClicked.addListener(function(tab) {\n  chrome.tabs.executeScript(null,\n                           {code:\"document.body.bgColor='red'\"});\n});\n\n/* manifest.json */\n\"permissions\": [\n  \"tabs\", \"http://*/*\"\n],\n\n注入文件\nchrome.tabs.executeScript(null, {file: \"content_script.js\"});\n```\n3. 通信 扩展和web页面之间可以通信，使用 getViews()和getBackgroundPage() 可以获得页面的引用，就能操作页面方法，操作页面dom\n4. 数据保存，如果是在非隐身模式下，可以使用localStorage，检查窗口是否在隐身模式下，检查Tab或Window对象的incognito属性。\n\n#### 跨域\n```javascript\n/* manifest.json */\n\"permissions\": [\n\t\"http://api.test.com/\"\n]\n```","slug":"浏览器扩展应用开发","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhqt003yt0yjhodz5p6o","content":"<h4 id=\"简介\">简介</h4><blockquote>\n<p>chrome应用商店里面存放着大量的浏览器应用，这些扩展应用不同于浏览器插件，它们必须依赖浏览器而运行。浏览器应用的本质就是web页面，浏览器支持的API我们都可以使用<br><a id=\"more\"></a></p>\n</blockquote>\n<h4 id=\"准备\">准备</h4><blockquote>\n<ul>\n<li>开发浏览器扩招应用不需要我们学习额外的技能，只需要我们日常开发中使用的html,js,css知识足矣。</li>\n<li>项目中包含的文件<ol>\n<li>manifest</li>\n<li>一个或多个html文件</li>\n<li>javascript文件（可选）</li>\n<li>css文件（可选）</li>\n<li>其他文件，例如图片（可选）</li>\n</ol>\n</li>\n<li>这些文件放在同一个根目录下，发布应用时，这个目录全部打包到一个应用名是.crx的压缩文件中。<br>[<a href=\"https://chrome.google.com/webstore/developer/dashboard]上传应用的时候，可以自动生成.crx文件\" target=\"_blank\" rel=\"external\">https://chrome.google.com/webstore/developer/dashboard]上传应用的时候，可以自动生成.crx文件</a><br>或者使用浏览器的 更多工具》扩展程序》打包扩展程序 功能，生成.crx文件。</li>\n</ul>\n</blockquote>\n<h4 id=\"manifest-json\">manifest.json</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"string\">\"name\"</span>: <span class=\"string\">\"My Extension\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"version\"</span>: <span class=\"string\">\"2.1\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"description\"</span>: <span class=\"string\">\"Gets information from Google.\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"icons\"</span>: &#123; <span class=\"string\">\"128\"</span>: <span class=\"string\">\"icon_128.png\"</span> &#125;,</div><div class=\"line\">\t<span class=\"string\">\"background_page\"</span>: <span class=\"string\">\"bg.html\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"permissions\"</span>: [<span class=\"string\">\"http://*.google.com/\"</span>, <span class=\"string\">\"https://*.google.com/\"</span>],</div><div class=\"line\">\t<span class=\"string\">\"browser_action\"</span>: &#123;</div><div class=\"line\">\t\t<span class=\"string\">\"default_title\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"default_icon\"</span>: <span class=\"string\">\"icon_19.png\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"default_popup\"</span>: <span class=\"string\">\"popup.html\"</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>manifest.json文件中主要内容都在这里，不难理解</p>\n<h4 id=\"基本架构\">基本架构</h4><ol>\n<li>运行app的主页面，可以使用chrome.tabs.create()或者window.open()来显示内部的HTML文件。也可以直接使用html文件。</li>\n<li><p>Content scripts，如果一个页面要与web页面交互，需要使用一个content scripts，content script脚本是指能够在浏览器已经加载的页面内部运行的javascript脚本。可以将content script看作是网页的一部分，而不是它所在的应用的一部分。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"My extension\"</span>,</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"string\">\"content_scripts\"</span>: [</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"string\">\"matches\"</span>: [<span class=\"string\">\"http://www.google.com/*\"</span>],</div><div class=\"line\">      <span class=\"string\">\"css\"</span>: [<span class=\"string\">\"mystyles.css\"</span>],</div><div class=\"line\">      <span class=\"string\">\"js\"</span>: [<span class=\"string\">\"jquery.js\"</span>, <span class=\"string\">\"myscript.js\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  ],</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\">或者</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"My extension\"</span>,</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"string\">\"permissions\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"tabs\"</span>, <span class=\"string\">\"http://www.google.com/*\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">直接注入</div><div class=\"line\"><span class=\"comment\">/* background.html */</span></div><div class=\"line\">chrome.browserAction.onClicked.addListener(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tab</span>) </span>&#123;</div><div class=\"line\">  chrome.tabs.executeScript(<span class=\"literal\">null</span>,</div><div class=\"line\">                           &#123;<span class=\"attr\">code</span>:<span class=\"string\">\"document.body.bgColor='red'\"</span>&#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* manifest.json */</span></div><div class=\"line\"><span class=\"string\">\"permissions\"</span>: [</div><div class=\"line\">  <span class=\"string\">\"tabs\"</span>, <span class=\"string\">\"http://*/*\"</span></div><div class=\"line\">],</div><div class=\"line\"></div><div class=\"line\">注入文件</div><div class=\"line\">chrome.tabs.executeScript(<span class=\"literal\">null</span>, &#123;<span class=\"attr\">file</span>: <span class=\"string\">\"content_script.js\"</span>&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>通信 扩展和web页面之间可以通信，使用 getViews()和getBackgroundPage() 可以获得页面的引用，就能操作页面方法，操作页面dom</p>\n</li>\n<li>数据保存，如果是在非隐身模式下，可以使用localStorage，检查窗口是否在隐身模式下，检查Tab或Window对象的incognito属性。</li>\n</ol>\n<h4 id=\"跨域\">跨域</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* manifest.json */</span></div><div class=\"line\"><span class=\"string\">\"permissions\"</span>: [</div><div class=\"line\">\t<span class=\"string\">\"http://api.test.com/\"</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>","excerpt":"<h4 id=\"简介\">简介</h4><blockquote>\n<p>chrome应用商店里面存放着大量的浏览器应用，这些扩展应用不同于浏览器插件，它们必须依赖浏览器而运行。浏览器应用的本质就是web页面，浏览器支持的API我们都可以使用<br>","more":"</p>\n</blockquote>\n<h4 id=\"准备\">准备</h4><blockquote>\n<ul>\n<li>开发浏览器扩招应用不需要我们学习额外的技能，只需要我们日常开发中使用的html,js,css知识足矣。</li>\n<li>项目中包含的文件<ol>\n<li>manifest</li>\n<li>一个或多个html文件</li>\n<li>javascript文件（可选）</li>\n<li>css文件（可选）</li>\n<li>其他文件，例如图片（可选）</li>\n</ol>\n</li>\n<li>这些文件放在同一个根目录下，发布应用时，这个目录全部打包到一个应用名是.crx的压缩文件中。<br>[<a href=\"https://chrome.google.com/webstore/developer/dashboard]上传应用的时候，可以自动生成.crx文件\">https://chrome.google.com/webstore/developer/dashboard]上传应用的时候，可以自动生成.crx文件</a><br>或者使用浏览器的 更多工具》扩展程序》打包扩展程序 功能，生成.crx文件。</li>\n</ul>\n</blockquote>\n<h4 id=\"manifest-json\">manifest.json</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"string\">\"name\"</span>: <span class=\"string\">\"My Extension\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"version\"</span>: <span class=\"string\">\"2.1\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"description\"</span>: <span class=\"string\">\"Gets information from Google.\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"icons\"</span>: &#123; <span class=\"string\">\"128\"</span>: <span class=\"string\">\"icon_128.png\"</span> &#125;,</div><div class=\"line\">\t<span class=\"string\">\"background_page\"</span>: <span class=\"string\">\"bg.html\"</span>,</div><div class=\"line\">\t<span class=\"string\">\"permissions\"</span>: [<span class=\"string\">\"http://*.google.com/\"</span>, <span class=\"string\">\"https://*.google.com/\"</span>],</div><div class=\"line\">\t<span class=\"string\">\"browser_action\"</span>: &#123;</div><div class=\"line\">\t\t<span class=\"string\">\"default_title\"</span>: <span class=\"string\">\"\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"default_icon\"</span>: <span class=\"string\">\"icon_19.png\"</span>,</div><div class=\"line\">\t\t<span class=\"string\">\"default_popup\"</span>: <span class=\"string\">\"popup.html\"</span></div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>manifest.json文件中主要内容都在这里，不难理解</p>\n<h4 id=\"基本架构\">基本架构</h4><ol>\n<li>运行app的主页面，可以使用chrome.tabs.create()或者window.open()来显示内部的HTML文件。也可以直接使用html文件。</li>\n<li><p>Content scripts，如果一个页面要与web页面交互，需要使用一个content scripts，content script脚本是指能够在浏览器已经加载的页面内部运行的javascript脚本。可以将content script看作是网页的一部分，而不是它所在的应用的一部分。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"My extension\"</span>,</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"string\">\"content_scripts\"</span>: [</div><div class=\"line\">    &#123;</div><div class=\"line\">      <span class=\"string\">\"matches\"</span>: [<span class=\"string\">\"http://www.google.com/*\"</span>],</div><div class=\"line\">      <span class=\"string\">\"css\"</span>: [<span class=\"string\">\"mystyles.css\"</span>],</div><div class=\"line\">      <span class=\"string\">\"js\"</span>: [<span class=\"string\">\"jquery.js\"</span>, <span class=\"string\">\"myscript.js\"</span>]</div><div class=\"line\">    &#125;</div><div class=\"line\">  ],</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\">或者</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"My extension\"</span>,</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"string\">\"permissions\"</span>: [</div><div class=\"line\">    <span class=\"string\">\"tabs\"</span>, <span class=\"string\">\"http://www.google.com/*\"</span></div><div class=\"line\">  ],</div><div class=\"line\">  ...</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">直接注入</div><div class=\"line\"><span class=\"comment\">/* background.html */</span></div><div class=\"line\">chrome.browserAction.onClicked.addListener(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">tab</span>) </span>&#123;</div><div class=\"line\">  chrome.tabs.executeScript(<span class=\"literal\">null</span>,</div><div class=\"line\">                           &#123;<span class=\"attr\">code</span>:<span class=\"string\">\"document.body.bgColor='red'\"</span>&#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* manifest.json */</span></div><div class=\"line\"><span class=\"string\">\"permissions\"</span>: [</div><div class=\"line\">  <span class=\"string\">\"tabs\"</span>, <span class=\"string\">\"http://*/*\"</span></div><div class=\"line\">],</div><div class=\"line\"></div><div class=\"line\">注入文件</div><div class=\"line\">chrome.tabs.executeScript(<span class=\"literal\">null</span>, &#123;<span class=\"attr\">file</span>: <span class=\"string\">\"content_script.js\"</span>&#125;);</div></pre></td></tr></table></figure>\n</li>\n<li><p>通信 扩展和web页面之间可以通信，使用 getViews()和getBackgroundPage() 可以获得页面的引用，就能操作页面方法，操作页面dom</p>\n</li>\n<li>数据保存，如果是在非隐身模式下，可以使用localStorage，检查窗口是否在隐身模式下，检查Tab或Window对象的incognito属性。</li>\n</ol>\n<h4 id=\"跨域\">跨域</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* manifest.json */</span></div><div class=\"line\"><span class=\"string\">\"permissions\"</span>: [</div><div class=\"line\">\t<span class=\"string\">\"http://api.test.com/\"</span></div><div class=\"line\">]</div></pre></td></tr></table></figure>"},{"title":"爬虫","date":"2015-11-02T07:03:01.000Z","toc":true,"_content":"#### phantomjs\n```java\nvar webPage = require('webpage').create();\nvar fs = require('fs');\n\nvar url = 'www.test.com';\nvar downloadPath = '/home/test/';\nvar dom = '#js_test';\n\nwebPage.open(url, function(status) {\n\tif (status !== 'success') {\n\t\tconsole.log('err');\n\t\tphantom.exit(1);\n\t\treturn;\n\t}\n\n\tvar html = webPage.evaluate(function() {\n\t\treturn document.querySelector(dom).innerHTML;\n\t});\n\tvar dateStr = (new Date()).getTime();\n\tfs.write(downloadPath + dateStr + '.html', html,\n\t\t\t'w');\n\tconsole.log('success');\n\tphantom.exit(1);\n});\n```\n<!--more-->\n\n#### nodejs\n```java\nvar http = require('http');\nvar fs = require('fs');\n\nvar url = 'www.test.com';\nvar downloadPath = '/home/test/';\nvar dom = '#js_test';\n\nvar options = {\n\tmethod:'POST',\n\thostname:url,\n\tport:80,\n\tpath:'/',\n\theader:{} //路由发出req中可取到cookie user-agent信息\n};\nvar req = http.request(options,function(res){\n\tres.setEncoding('utf8');\n    res.on('data',function(chunk){\n       console.log('data:' + chunk);\n    });\n    res.on('end',function(chunk){\n\t\tvar html = chunk;\n\t\tvar dateStr = (new Date()).getTime();\n\t\tfs.write(downloadPath + dateStr + '.html', html,\n\t\t\t\t'w');\n\t\tconsole.log('success');\n    \tres.end();\n    });\n});\nreq.on('error',function(e){\n   console.log('err:'+e.message);\n});\nreq.end();\n```\n#### python\n```java\n#coding=utf-8\nimport urllib\nimport re\n\nurl = \"http://www.test.com\"\n\ndef getResources(url):\n\tsource = urllib.urlopen(url)\n    html = source.read()\n\n    reg = r'src=\"(.+?\\.jpg)\"'\n    imgreg = re.compile(reg)\n    imglist = re.findall(imgreg,html)\n    x = 0\n    for imgurl in imglist:\n        urllib.urlretrieve(imgurl,'%s.jpg' % x)\n        x+=1\n\nprint getResources(url)\n```","source":"_posts/爬虫.md","raw":"title: 爬虫\ndate: 2015-11-02 15:03:01\ntags: web\ntoc: true\n---\n#### phantomjs\n```java\nvar webPage = require('webpage').create();\nvar fs = require('fs');\n\nvar url = 'www.test.com';\nvar downloadPath = '/home/test/';\nvar dom = '#js_test';\n\nwebPage.open(url, function(status) {\n\tif (status !== 'success') {\n\t\tconsole.log('err');\n\t\tphantom.exit(1);\n\t\treturn;\n\t}\n\n\tvar html = webPage.evaluate(function() {\n\t\treturn document.querySelector(dom).innerHTML;\n\t});\n\tvar dateStr = (new Date()).getTime();\n\tfs.write(downloadPath + dateStr + '.html', html,\n\t\t\t'w');\n\tconsole.log('success');\n\tphantom.exit(1);\n});\n```\n<!--more-->\n\n#### nodejs\n```java\nvar http = require('http');\nvar fs = require('fs');\n\nvar url = 'www.test.com';\nvar downloadPath = '/home/test/';\nvar dom = '#js_test';\n\nvar options = {\n\tmethod:'POST',\n\thostname:url,\n\tport:80,\n\tpath:'/',\n\theader:{} //路由发出req中可取到cookie user-agent信息\n};\nvar req = http.request(options,function(res){\n\tres.setEncoding('utf8');\n    res.on('data',function(chunk){\n       console.log('data:' + chunk);\n    });\n    res.on('end',function(chunk){\n\t\tvar html = chunk;\n\t\tvar dateStr = (new Date()).getTime();\n\t\tfs.write(downloadPath + dateStr + '.html', html,\n\t\t\t\t'w');\n\t\tconsole.log('success');\n    \tres.end();\n    });\n});\nreq.on('error',function(e){\n   console.log('err:'+e.message);\n});\nreq.end();\n```\n#### python\n```java\n#coding=utf-8\nimport urllib\nimport re\n\nurl = \"http://www.test.com\"\n\ndef getResources(url):\n\tsource = urllib.urlopen(url)\n    html = source.read()\n\n    reg = r'src=\"(.+?\\.jpg)\"'\n    imgreg = re.compile(reg)\n    imglist = re.findall(imgreg,html)\n    x = 0\n    for imgurl in imglist:\n        urllib.urlretrieve(imgurl,'%s.jpg' % x)\n        x+=1\n\nprint getResources(url)\n```","slug":"爬虫","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhqw0040t0yjxxrv03pq","content":"<h4 id=\"phantomjs\">phantomjs</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">var webPage = require(<span class=\"string\">'webpage'</span>).create();</div><div class=\"line\">var fs = require(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\">var url = <span class=\"string\">'www.test.com'</span>;</div><div class=\"line\">var downloadPath = <span class=\"string\">'/home/test/'</span>;</div><div class=\"line\">var dom = <span class=\"string\">'#js_test'</span>;</div><div class=\"line\"></div><div class=\"line\">webPage.open(url, function(status) &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (status !== <span class=\"string\">'success'</span>) &#123;</div><div class=\"line\">\t\tconsole.log(<span class=\"string\">'err'</span>);</div><div class=\"line\">\t\tphantom.exit(<span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tvar html = webPage.evaluate(function() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> document.querySelector(dom).innerHTML;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tvar dateStr = (<span class=\"keyword\">new</span> Date()).getTime();</div><div class=\"line\">\tfs.write(downloadPath + dateStr + <span class=\"string\">'.html'</span>, html,</div><div class=\"line\">\t\t\t<span class=\"string\">'w'</span>);</div><div class=\"line\">\tconsole.log(<span class=\"string\">'success'</span>);</div><div class=\"line\">\tphantom.exit(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"nodejs\">nodejs</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">var http = require(<span class=\"string\">'http'</span>);</div><div class=\"line\">var fs = require(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\">var url = <span class=\"string\">'www.test.com'</span>;</div><div class=\"line\">var downloadPath = <span class=\"string\">'/home/test/'</span>;</div><div class=\"line\">var dom = <span class=\"string\">'#js_test'</span>;</div><div class=\"line\"></div><div class=\"line\">var options = &#123;</div><div class=\"line\">\tmethod:<span class=\"string\">'POST'</span>,</div><div class=\"line\">\thostname:url,</div><div class=\"line\">\tport:<span class=\"number\">80</span>,</div><div class=\"line\">\tpath:<span class=\"string\">'/'</span>,</div><div class=\"line\">\theader:&#123;&#125; <span class=\"comment\">//路由发出req中可取到cookie user-agent信息</span></div><div class=\"line\">&#125;;</div><div class=\"line\">var req = http.request(options,function(res)&#123;</div><div class=\"line\">\tres.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">    res.on(<span class=\"string\">'data'</span>,function(chunk)&#123;</div><div class=\"line\">       console.log(<span class=\"string\">'data:'</span> + chunk);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    res.on(<span class=\"string\">'end'</span>,function(chunk)&#123;</div><div class=\"line\">\t\tvar html = chunk;</div><div class=\"line\">\t\tvar dateStr = (<span class=\"keyword\">new</span> Date()).getTime();</div><div class=\"line\">\t\tfs.write(downloadPath + dateStr + <span class=\"string\">'.html'</span>, html,</div><div class=\"line\">\t\t\t\t<span class=\"string\">'w'</span>);</div><div class=\"line\">\t\tconsole.log(<span class=\"string\">'success'</span>);</div><div class=\"line\">    \tres.end();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">req.on(<span class=\"string\">'error'</span>,function(e)&#123;</div><div class=\"line\">   console.log(<span class=\"string\">'err:'</span>+e.message);</div><div class=\"line\">&#125;);</div><div class=\"line\">req.end();</div></pre></td></tr></table></figure>\n<h4 id=\"python\">python</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">#coding=utf-8</div><div class=\"line\">import urllib</div><div class=\"line\">import re</div><div class=\"line\"></div><div class=\"line\">url = \"http://www.test.com\"</div><div class=\"line\"></div><div class=\"line\">def getResources(url):</div><div class=\"line\">\tsource = urllib.urlopen(url)</div><div class=\"line\">    html = source.read()</div><div class=\"line\"></div><div class=\"line\">    reg = r'src=\"(.+?\\.jpg)\"'</div><div class=\"line\">    imgreg = re.compile(reg)</div><div class=\"line\">    imglist = re.findall(imgreg,html)</div><div class=\"line\">    x = 0</div><div class=\"line\">    for imgurl in imglist:</div><div class=\"line\">        urllib.urlretrieve(imgurl,'%s.jpg' % x)</div><div class=\"line\">        x+=1</div><div class=\"line\"></div><div class=\"line\">print getResources(url)</div></pre></td></tr></table></figure>","excerpt":"<h4 id=\"phantomjs\">phantomjs</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">var webPage = require(<span class=\"string\">'webpage'</span>).create();</div><div class=\"line\">var fs = require(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\">var url = <span class=\"string\">'www.test.com'</span>;</div><div class=\"line\">var downloadPath = <span class=\"string\">'/home/test/'</span>;</div><div class=\"line\">var dom = <span class=\"string\">'#js_test'</span>;</div><div class=\"line\"></div><div class=\"line\">webPage.open(url, function(status) &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (status !== <span class=\"string\">'success'</span>) &#123;</div><div class=\"line\">\t\tconsole.log(<span class=\"string\">'err'</span>);</div><div class=\"line\">\t\tphantom.exit(<span class=\"number\">1</span>);</div><div class=\"line\">\t\t<span class=\"keyword\">return</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tvar html = webPage.evaluate(function() &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> document.querySelector(dom).innerHTML;</div><div class=\"line\">\t&#125;);</div><div class=\"line\">\tvar dateStr = (<span class=\"keyword\">new</span> Date()).getTime();</div><div class=\"line\">\tfs.write(downloadPath + dateStr + <span class=\"string\">'.html'</span>, html,</div><div class=\"line\">\t\t\t<span class=\"string\">'w'</span>);</div><div class=\"line\">\tconsole.log(<span class=\"string\">'success'</span>);</div><div class=\"line\">\tphantom.exit(<span class=\"number\">1</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>","more":"<h4 id=\"nodejs\">nodejs</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\">var http = require(<span class=\"string\">'http'</span>);</div><div class=\"line\">var fs = require(<span class=\"string\">'fs'</span>);</div><div class=\"line\"></div><div class=\"line\">var url = <span class=\"string\">'www.test.com'</span>;</div><div class=\"line\">var downloadPath = <span class=\"string\">'/home/test/'</span>;</div><div class=\"line\">var dom = <span class=\"string\">'#js_test'</span>;</div><div class=\"line\"></div><div class=\"line\">var options = &#123;</div><div class=\"line\">\tmethod:<span class=\"string\">'POST'</span>,</div><div class=\"line\">\thostname:url,</div><div class=\"line\">\tport:<span class=\"number\">80</span>,</div><div class=\"line\">\tpath:<span class=\"string\">'/'</span>,</div><div class=\"line\">\theader:&#123;&#125; <span class=\"comment\">//路由发出req中可取到cookie user-agent信息</span></div><div class=\"line\">&#125;;</div><div class=\"line\">var req = http.request(options,function(res)&#123;</div><div class=\"line\">\tres.setEncoding(<span class=\"string\">'utf8'</span>);</div><div class=\"line\">    res.on(<span class=\"string\">'data'</span>,function(chunk)&#123;</div><div class=\"line\">       console.log(<span class=\"string\">'data:'</span> + chunk);</div><div class=\"line\">    &#125;);</div><div class=\"line\">    res.on(<span class=\"string\">'end'</span>,function(chunk)&#123;</div><div class=\"line\">\t\tvar html = chunk;</div><div class=\"line\">\t\tvar dateStr = (<span class=\"keyword\">new</span> Date()).getTime();</div><div class=\"line\">\t\tfs.write(downloadPath + dateStr + <span class=\"string\">'.html'</span>, html,</div><div class=\"line\">\t\t\t\t<span class=\"string\">'w'</span>);</div><div class=\"line\">\t\tconsole.log(<span class=\"string\">'success'</span>);</div><div class=\"line\">    \tres.end();</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;);</div><div class=\"line\">req.on(<span class=\"string\">'error'</span>,function(e)&#123;</div><div class=\"line\">   console.log(<span class=\"string\">'err:'</span>+e.message);</div><div class=\"line\">&#125;);</div><div class=\"line\">req.end();</div></pre></td></tr></table></figure>\n<h4 id=\"python\">python</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">#coding=utf-8</div><div class=\"line\">import urllib</div><div class=\"line\">import re</div><div class=\"line\"></div><div class=\"line\">url = \"http://www.test.com\"</div><div class=\"line\"></div><div class=\"line\">def getResources(url):</div><div class=\"line\">\tsource = urllib.urlopen(url)</div><div class=\"line\">    html = source.read()</div><div class=\"line\"></div><div class=\"line\">    reg = r'src=\"(.+?\\.jpg)\"'</div><div class=\"line\">    imgreg = re.compile(reg)</div><div class=\"line\">    imglist = re.findall(imgreg,html)</div><div class=\"line\">    x = 0</div><div class=\"line\">    for imgurl in imglist:</div><div class=\"line\">        urllib.urlretrieve(imgurl,'%s.jpg' % x)</div><div class=\"line\">        x+=1</div><div class=\"line\"></div><div class=\"line\">print getResources(url)</div></pre></td></tr></table></figure>"},{"title":"移动端布局","date":"2016-04-14T02:39:45.000Z","toc":true,"_content":"1. 黏性布局 POSITION:STICKY（通过判断支持该属性的浏览器使用该布局） -- http://hao.jser.com/archive/7970/\n<!--more-->\n```javascript\n.sticky {\n    position: -webkit-sticky;\n    position: sticky;\n    top: 0;\n}\n.fixed {\n    position: fixed;\n    top: 0;\n}\n```\n2. Web移动端Fixed布局的解决方案  -- http://efe.baidu.com/blog/mobile-fixed-layout/\n\n","source":"_posts/移动端布局.md","raw":"title: 移动端布局\ndate: 2016-04-14 10:39:45\ntags: web\ntoc: true\n---\n1. 黏性布局 POSITION:STICKY（通过判断支持该属性的浏览器使用该布局） -- http://hao.jser.com/archive/7970/\n<!--more-->\n```javascript\n.sticky {\n    position: -webkit-sticky;\n    position: sticky;\n    top: 0;\n}\n.fixed {\n    position: fixed;\n    top: 0;\n}\n```\n2. Web移动端Fixed布局的解决方案  -- http://efe.baidu.com/blog/mobile-fixed-layout/\n\n","slug":"移动端布局","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhqx0042t0yjn5jp2y1z","content":"<ol>\n<li><p>黏性布局 POSITION:STICKY（通过判断支持该属性的浏览器使用该布局） – <a href=\"http://hao.jser.com/archive/7970/\" target=\"_blank\" rel=\"external\">http://hao.jser.com/archive/7970/</a></p>\n<a id=\"more\"></a>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.sticky &#123;</div><div class=\"line\">    <span class=\"attr\">position</span>: -webkit-sticky;</div><div class=\"line\">    position: sticky;</div><div class=\"line\">    top: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">.fixed &#123;</div><div class=\"line\">    <span class=\"attr\">position</span>: fixed;</div><div class=\"line\">    top: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Web移动端Fixed布局的解决方案  – <a href=\"http://efe.baidu.com/blog/mobile-fixed-layout/\" target=\"_blank\" rel=\"external\">http://efe.baidu.com/blog/mobile-fixed-layout/</a></p>\n</li>\n</ol>\n","excerpt":"<ol>\n<li><p>黏性布局 POSITION:STICKY（通过判断支持该属性的浏览器使用该布局） – <a href=\"http://hao.jser.com/archive/7970/\">http://hao.jser.com/archive/7970/</a></p>","more":"<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">.sticky &#123;</div><div class=\"line\">    <span class=\"attr\">position</span>: -webkit-sticky;</div><div class=\"line\">    position: sticky;</div><div class=\"line\">    top: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">.fixed &#123;</div><div class=\"line\">    <span class=\"attr\">position</span>: fixed;</div><div class=\"line\">    top: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Web移动端Fixed布局的解决方案  – <a href=\"http://efe.baidu.com/blog/mobile-fixed-layout/\">http://efe.baidu.com/blog/mobile-fixed-layout/</a></p>\n</li>\n</ol>"},{"title":"移动端开发性能优化","keywords":"移动端开发性能优化,性能优化","description":"移动端开发性能优化","date":"2016-04-14T02:43:35.000Z","toc":true,"_content":"##### 介绍\n移动端这几年可以说发展的特别快，并且以绝对的优势超过了pc端，所以移动端的应用也越来越多，越来越重要。移动端不同于pc端，从设备的性能，网络差异，屏幕大小都有很大的差异，所以移动端的性能要尤为注意，力争我们的网站在移动端性能达到最佳。\n\n<!--more-->\n\n##### 代码\n从代码层面讲，务必做到精简，高效。移动端平台分ios android windows phone等，每个平台又有很多手机生产商，每种手机的性能又差异很大，还有些厂商还会自己定制浏览器内核，等等因素吧，导致了移动端经常出现各种差异性的表现，常常顾此失彼。那么就要求我们写的代码效率高一些，逻辑精简些，从程序层面减少因性能带来的问题，这是最好的方法去避免出现一些奇葩问题。还要做好一系列的异常处理措施，不要让代码出现报错的情况。减少dom操作，增加数据缓存机制，离线数据处理等，另外代码的精简也可以让页面下载资源的时间减少。\n\n##### 框架\n最近在开发过程中，使用了reactjs这个框架，不得不说这个框架应用起来还是比较顺利的，从开发到最终的页面表现来说，都是比较满意的。但是有一个问题是，在生成的代码中会生成过多的dom节点，这一点需要注意一下。因为在hybrid中，dom元素过多可能会影响页面性能，甚至导致app崩溃。\n\n##### 组件\n应用第三方组件，要慎重考虑，这里就拿iscroll来说，这个组建无疑优化了滑动的体验，但是它是非常耗性能的，还有就是安卓手机上的表现并不理想，在一些滚动监听上也存在问题。\n\n##### 布局与css\n合理的布局能够有效的减少显示上的bug，常见的就是fixed的问题，以及input框和软键盘的问题。\n\n##### 硬件加速\n硬件加速是一件好事，但是它的弊端也显露无疑，电池耗电快，手机发热等等\n\n##### 优化点\n* 合并域名，减少dns解析的时间\n* 请求数量尽量少，相应的数据尽量精简\n* 请求尽量并发，不要串行\n* 静态资源使用单独的域名，做到cookie free，有条件的话使用cdn\n* 合并小图标，使用雪碧图，使用font代替图标\n* 去掉没用cookie，cookie命名尽量简短，cookie值尽量精简\n* 完善本地缓存数据（优先展示出缓存数据，数据返回后再更新）\n* 注意jsonp的请求，jsonp会阻塞页面加载，阻塞页面操作，做好超时异常判断\n* 压缩html中的空格换行，使用gzip压缩\n* css规则不要太复杂，去掉没用的css，css放在head中，js放在body底部\n* 尽量使用原生方法\n* 减少dom操作，尽量缓存dom\n* touch端应该考虑使用离线存储(cache manifest)\n* hybrid尽量使用离线包机制\n* 对于过长的页面，应该考虑优先加载精简页面(短页面)，点击底部加载更多按钮，根据当前gps,network记录当前网络情况(页面其余部分加载时间小于一定范围即可以认定网络好)，下次在一定范围内打开页面默认加载全的页面，否则展示精简页面，对一些低版本的系统，可以让它永远展示精简页面，查看全部才能看到全部内容，这样能够保证用户看到页面的速度\n* 页面内容按需加载，模块可以使用滚动加载，图片使用懒加载\n* 页面渲染尽量不要依赖接口数据返回，接口的不稳定性可能会拖累页面加载时间\n\n","source":"_posts/移动端开发性能优化.md","raw":"title: 移动端开发性能优化\nkeywords: 移动端开发性能优化,性能优化\ndescription: 移动端开发性能优化\ndate: 2016-04-14 10:43:35\ntags: web\ntoc: true\n---\n##### 介绍\n移动端这几年可以说发展的特别快，并且以绝对的优势超过了pc端，所以移动端的应用也越来越多，越来越重要。移动端不同于pc端，从设备的性能，网络差异，屏幕大小都有很大的差异，所以移动端的性能要尤为注意，力争我们的网站在移动端性能达到最佳。\n\n<!--more-->\n\n##### 代码\n从代码层面讲，务必做到精简，高效。移动端平台分ios android windows phone等，每个平台又有很多手机生产商，每种手机的性能又差异很大，还有些厂商还会自己定制浏览器内核，等等因素吧，导致了移动端经常出现各种差异性的表现，常常顾此失彼。那么就要求我们写的代码效率高一些，逻辑精简些，从程序层面减少因性能带来的问题，这是最好的方法去避免出现一些奇葩问题。还要做好一系列的异常处理措施，不要让代码出现报错的情况。减少dom操作，增加数据缓存机制，离线数据处理等，另外代码的精简也可以让页面下载资源的时间减少。\n\n##### 框架\n最近在开发过程中，使用了reactjs这个框架，不得不说这个框架应用起来还是比较顺利的，从开发到最终的页面表现来说，都是比较满意的。但是有一个问题是，在生成的代码中会生成过多的dom节点，这一点需要注意一下。因为在hybrid中，dom元素过多可能会影响页面性能，甚至导致app崩溃。\n\n##### 组件\n应用第三方组件，要慎重考虑，这里就拿iscroll来说，这个组建无疑优化了滑动的体验，但是它是非常耗性能的，还有就是安卓手机上的表现并不理想，在一些滚动监听上也存在问题。\n\n##### 布局与css\n合理的布局能够有效的减少显示上的bug，常见的就是fixed的问题，以及input框和软键盘的问题。\n\n##### 硬件加速\n硬件加速是一件好事，但是它的弊端也显露无疑，电池耗电快，手机发热等等\n\n##### 优化点\n* 合并域名，减少dns解析的时间\n* 请求数量尽量少，相应的数据尽量精简\n* 请求尽量并发，不要串行\n* 静态资源使用单独的域名，做到cookie free，有条件的话使用cdn\n* 合并小图标，使用雪碧图，使用font代替图标\n* 去掉没用cookie，cookie命名尽量简短，cookie值尽量精简\n* 完善本地缓存数据（优先展示出缓存数据，数据返回后再更新）\n* 注意jsonp的请求，jsonp会阻塞页面加载，阻塞页面操作，做好超时异常判断\n* 压缩html中的空格换行，使用gzip压缩\n* css规则不要太复杂，去掉没用的css，css放在head中，js放在body底部\n* 尽量使用原生方法\n* 减少dom操作，尽量缓存dom\n* touch端应该考虑使用离线存储(cache manifest)\n* hybrid尽量使用离线包机制\n* 对于过长的页面，应该考虑优先加载精简页面(短页面)，点击底部加载更多按钮，根据当前gps,network记录当前网络情况(页面其余部分加载时间小于一定范围即可以认定网络好)，下次在一定范围内打开页面默认加载全的页面，否则展示精简页面，对一些低版本的系统，可以让它永远展示精简页面，查看全部才能看到全部内容，这样能够保证用户看到页面的速度\n* 页面内容按需加载，模块可以使用滚动加载，图片使用懒加载\n* 页面渲染尽量不要依赖接口数据返回，接口的不稳定性可能会拖累页面加载时间\n\n","slug":"移动端开发性能优化","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhqy0044t0yjcn8cq4xw","content":"<h5 id=\"介绍\">介绍</h5><p>移动端这几年可以说发展的特别快，并且以绝对的优势超过了pc端，所以移动端的应用也越来越多，越来越重要。移动端不同于pc端，从设备的性能，网络差异，屏幕大小都有很大的差异，所以移动端的性能要尤为注意，力争我们的网站在移动端性能达到最佳。</p>\n<a id=\"more\"></a>\n<h5 id=\"代码\">代码</h5><p>从代码层面讲，务必做到精简，高效。移动端平台分ios android windows phone等，每个平台又有很多手机生产商，每种手机的性能又差异很大，还有些厂商还会自己定制浏览器内核，等等因素吧，导致了移动端经常出现各种差异性的表现，常常顾此失彼。那么就要求我们写的代码效率高一些，逻辑精简些，从程序层面减少因性能带来的问题，这是最好的方法去避免出现一些奇葩问题。还要做好一系列的异常处理措施，不要让代码出现报错的情况。减少dom操作，增加数据缓存机制，离线数据处理等，另外代码的精简也可以让页面下载资源的时间减少。</p>\n<h5 id=\"框架\">框架</h5><p>最近在开发过程中，使用了reactjs这个框架，不得不说这个框架应用起来还是比较顺利的，从开发到最终的页面表现来说，都是比较满意的。但是有一个问题是，在生成的代码中会生成过多的dom节点，这一点需要注意一下。因为在hybrid中，dom元素过多可能会影响页面性能，甚至导致app崩溃。</p>\n<h5 id=\"组件\">组件</h5><p>应用第三方组件，要慎重考虑，这里就拿iscroll来说，这个组建无疑优化了滑动的体验，但是它是非常耗性能的，还有就是安卓手机上的表现并不理想，在一些滚动监听上也存在问题。</p>\n<h5 id=\"布局与css\">布局与css</h5><p>合理的布局能够有效的减少显示上的bug，常见的就是fixed的问题，以及input框和软键盘的问题。</p>\n<h5 id=\"硬件加速\">硬件加速</h5><p>硬件加速是一件好事，但是它的弊端也显露无疑，电池耗电快，手机发热等等</p>\n<h5 id=\"优化点\">优化点</h5><ul>\n<li>合并域名，减少dns解析的时间</li>\n<li>请求数量尽量少，相应的数据尽量精简</li>\n<li>请求尽量并发，不要串行</li>\n<li>静态资源使用单独的域名，做到cookie free，有条件的话使用cdn</li>\n<li>合并小图标，使用雪碧图，使用font代替图标</li>\n<li>去掉没用cookie，cookie命名尽量简短，cookie值尽量精简</li>\n<li>完善本地缓存数据（优先展示出缓存数据，数据返回后再更新）</li>\n<li>注意jsonp的请求，jsonp会阻塞页面加载，阻塞页面操作，做好超时异常判断</li>\n<li>压缩html中的空格换行，使用gzip压缩</li>\n<li>css规则不要太复杂，去掉没用的css，css放在head中，js放在body底部</li>\n<li>尽量使用原生方法</li>\n<li>减少dom操作，尽量缓存dom</li>\n<li>touch端应该考虑使用离线存储(cache manifest)</li>\n<li>hybrid尽量使用离线包机制</li>\n<li>对于过长的页面，应该考虑优先加载精简页面(短页面)，点击底部加载更多按钮，根据当前gps,network记录当前网络情况(页面其余部分加载时间小于一定范围即可以认定网络好)，下次在一定范围内打开页面默认加载全的页面，否则展示精简页面，对一些低版本的系统，可以让它永远展示精简页面，查看全部才能看到全部内容，这样能够保证用户看到页面的速度</li>\n<li>页面内容按需加载，模块可以使用滚动加载，图片使用懒加载</li>\n<li>页面渲染尽量不要依赖接口数据返回，接口的不稳定性可能会拖累页面加载时间</li>\n</ul>\n","excerpt":"<h5 id=\"介绍\">介绍</h5><p>移动端这几年可以说发展的特别快，并且以绝对的优势超过了pc端，所以移动端的应用也越来越多，越来越重要。移动端不同于pc端，从设备的性能，网络差异，屏幕大小都有很大的差异，所以移动端的性能要尤为注意，力争我们的网站在移动端性能达到最佳。</p>","more":"<h5 id=\"代码\">代码</h5><p>从代码层面讲，务必做到精简，高效。移动端平台分ios android windows phone等，每个平台又有很多手机生产商，每种手机的性能又差异很大，还有些厂商还会自己定制浏览器内核，等等因素吧，导致了移动端经常出现各种差异性的表现，常常顾此失彼。那么就要求我们写的代码效率高一些，逻辑精简些，从程序层面减少因性能带来的问题，这是最好的方法去避免出现一些奇葩问题。还要做好一系列的异常处理措施，不要让代码出现报错的情况。减少dom操作，增加数据缓存机制，离线数据处理等，另外代码的精简也可以让页面下载资源的时间减少。</p>\n<h5 id=\"框架\">框架</h5><p>最近在开发过程中，使用了reactjs这个框架，不得不说这个框架应用起来还是比较顺利的，从开发到最终的页面表现来说，都是比较满意的。但是有一个问题是，在生成的代码中会生成过多的dom节点，这一点需要注意一下。因为在hybrid中，dom元素过多可能会影响页面性能，甚至导致app崩溃。</p>\n<h5 id=\"组件\">组件</h5><p>应用第三方组件，要慎重考虑，这里就拿iscroll来说，这个组建无疑优化了滑动的体验，但是它是非常耗性能的，还有就是安卓手机上的表现并不理想，在一些滚动监听上也存在问题。</p>\n<h5 id=\"布局与css\">布局与css</h5><p>合理的布局能够有效的减少显示上的bug，常见的就是fixed的问题，以及input框和软键盘的问题。</p>\n<h5 id=\"硬件加速\">硬件加速</h5><p>硬件加速是一件好事，但是它的弊端也显露无疑，电池耗电快，手机发热等等</p>\n<h5 id=\"优化点\">优化点</h5><ul>\n<li>合并域名，减少dns解析的时间</li>\n<li>请求数量尽量少，相应的数据尽量精简</li>\n<li>请求尽量并发，不要串行</li>\n<li>静态资源使用单独的域名，做到cookie free，有条件的话使用cdn</li>\n<li>合并小图标，使用雪碧图，使用font代替图标</li>\n<li>去掉没用cookie，cookie命名尽量简短，cookie值尽量精简</li>\n<li>完善本地缓存数据（优先展示出缓存数据，数据返回后再更新）</li>\n<li>注意jsonp的请求，jsonp会阻塞页面加载，阻塞页面操作，做好超时异常判断</li>\n<li>压缩html中的空格换行，使用gzip压缩</li>\n<li>css规则不要太复杂，去掉没用的css，css放在head中，js放在body底部</li>\n<li>尽量使用原生方法</li>\n<li>减少dom操作，尽量缓存dom</li>\n<li>touch端应该考虑使用离线存储(cache manifest)</li>\n<li>hybrid尽量使用离线包机制</li>\n<li>对于过长的页面，应该考虑优先加载精简页面(短页面)，点击底部加载更多按钮，根据当前gps,network记录当前网络情况(页面其余部分加载时间小于一定范围即可以认定网络好)，下次在一定范围内打开页面默认加载全的页面，否则展示精简页面，对一些低版本的系统，可以让它永远展示精简页面，查看全部才能看到全部内容，这样能够保证用户看到页面的速度</li>\n<li>页面内容按需加载，模块可以使用滚动加载，图片使用懒加载</li>\n<li>页面渲染尽量不要依赖接口数据返回，接口的不稳定性可能会拖累页面加载时间</li>\n</ul>"},{"title":"网站性能监控showslow","keywords":"网站性能监控showslow,性能监控,showslow","description":"网站性能监控showslow","toc":true,"date":"2017-02-09T06:33:53.000Z","_content":"今天，性能是一个我们常谈的话题，网站性能的重要性不言而喻。\n[showslow](https://github.com/sergeychernyshev/showslow/wiki)是一个github上开源的，能够帮助我们监控网站性能的工具。我们可以使用yslow和pagespeed等工具生成分析结果并以图表的方式展现出来。从而全面了解我们网站有哪些方面需要改进。\n\n<!--more-->\n\n#### 环境\n* 安装PHP环境\n* 安装apache服务器\n* 安装mysql数据库\n\n#### phantomjs\n[安装phantomjs](http://phantomjs.org/download.html)\n\n#### yslowjs\n[yslowjs](http://yslow.org/phantomjs/)\n通过yslow分析页面，上报到showslow\n```bash\n#phantomjs yslow.js http://www.test.com/ --info grade  -b http://127.0.0.1:8088/php/webapp/beacon/yslow/\n```\n\n#### phantomas\n使用phantomas可以收集网络性能指标\n安装: npm install --global phantomas\n通过phantomas生成har\n```bash\nphantomas http://www.test.com/ --engine webkit --har test\n```\n读取har文件内容，通过接口 http://127.0.0.1:8088/php/webapp/beacon/har/?url=http://www.test.com/ 上传到showslow平台\n\n#### pagespeed\n[申请apiKey](https://code.google.com/apis/console/#access)\n通过pagespeed分析页面，上报到showslow\n```bash\ncurl http://127.0.0.1:8088/php/webapp/beacon/pagespeed/?api\\&u=http://www.test.com/\n```\n\n#### HARViewer安装\n[HARViewer](https://github.com/janodvarko/harviewer/archive/master.zip)能够帮助我们\n* [下载HARViewer](https://github.com/janodvarko/harviewer/archive/master.zip)\n* 把解压的文件copy到showslow webapp目录下即可\n\n#### showslow安装\n* [下载showslow](https://github.com/sergeychernyshev/showslow/releases)\n* 把解压文件夹放到apache www目录下即可\n\n```bash\n#unzip showslow\n#cd showslow\n#cp config.sample.php config.php\n#vim config.php\n\n// 配置数据库\n$db = 'showslow';\n$user = 'xxx';\n$pass = 'xxx';\n$host = 'localhost';\n$port = 3306;\n\n// pagespeed测试key\n$pageSpeedOnlineAPIKey = 'xxx';\n\n// 配置har存储\n$enableHARBeacon = true;\n\n// 配置harview目录\n$HARViewerBase = '/php/webapp/harviewer/webapp';\n\n#vim global.php\n\n// 在页面中配置需要监控测试的页面\n$enableMyURLs = true;\n\n#make\n```\n\n这样我们就能在页面添加要监控的网站了\n\n#### 使用\n可以编写脚本，每天定时去执行检测，获取所有监控的url，然后分别去执行上述的那些方法，进行检测和上报的showslow\n\n","source":"_posts/网站性能监控showslow.md","raw":"title: 网站性能监控showslow\nkeywords: 网站性能监控showslow,性能监控,showslow\ndescription: 网站性能监控showslow\ntags: web\ntoc: true\ndate: 2017-02-09 14:33:53\n---\n今天，性能是一个我们常谈的话题，网站性能的重要性不言而喻。\n[showslow](https://github.com/sergeychernyshev/showslow/wiki)是一个github上开源的，能够帮助我们监控网站性能的工具。我们可以使用yslow和pagespeed等工具生成分析结果并以图表的方式展现出来。从而全面了解我们网站有哪些方面需要改进。\n\n<!--more-->\n\n#### 环境\n* 安装PHP环境\n* 安装apache服务器\n* 安装mysql数据库\n\n#### phantomjs\n[安装phantomjs](http://phantomjs.org/download.html)\n\n#### yslowjs\n[yslowjs](http://yslow.org/phantomjs/)\n通过yslow分析页面，上报到showslow\n```bash\n#phantomjs yslow.js http://www.test.com/ --info grade  -b http://127.0.0.1:8088/php/webapp/beacon/yslow/\n```\n\n#### phantomas\n使用phantomas可以收集网络性能指标\n安装: npm install --global phantomas\n通过phantomas生成har\n```bash\nphantomas http://www.test.com/ --engine webkit --har test\n```\n读取har文件内容，通过接口 http://127.0.0.1:8088/php/webapp/beacon/har/?url=http://www.test.com/ 上传到showslow平台\n\n#### pagespeed\n[申请apiKey](https://code.google.com/apis/console/#access)\n通过pagespeed分析页面，上报到showslow\n```bash\ncurl http://127.0.0.1:8088/php/webapp/beacon/pagespeed/?api\\&u=http://www.test.com/\n```\n\n#### HARViewer安装\n[HARViewer](https://github.com/janodvarko/harviewer/archive/master.zip)能够帮助我们\n* [下载HARViewer](https://github.com/janodvarko/harviewer/archive/master.zip)\n* 把解压的文件copy到showslow webapp目录下即可\n\n#### showslow安装\n* [下载showslow](https://github.com/sergeychernyshev/showslow/releases)\n* 把解压文件夹放到apache www目录下即可\n\n```bash\n#unzip showslow\n#cd showslow\n#cp config.sample.php config.php\n#vim config.php\n\n// 配置数据库\n$db = 'showslow';\n$user = 'xxx';\n$pass = 'xxx';\n$host = 'localhost';\n$port = 3306;\n\n// pagespeed测试key\n$pageSpeedOnlineAPIKey = 'xxx';\n\n// 配置har存储\n$enableHARBeacon = true;\n\n// 配置harview目录\n$HARViewerBase = '/php/webapp/harviewer/webapp';\n\n#vim global.php\n\n// 在页面中配置需要监控测试的页面\n$enableMyURLs = true;\n\n#make\n```\n\n这样我们就能在页面添加要监控的网站了\n\n#### 使用\n可以编写脚本，每天定时去执行检测，获取所有监控的url，然后分别去执行上述的那些方法，进行检测和上报的showslow\n\n","slug":"网站性能监控showslow","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhr00046t0yjcn83wc7s","content":"<p>今天，性能是一个我们常谈的话题，网站性能的重要性不言而喻。<br><a href=\"https://github.com/sergeychernyshev/showslow/wiki\" target=\"_blank\" rel=\"external\">showslow</a>是一个github上开源的，能够帮助我们监控网站性能的工具。我们可以使用yslow和pagespeed等工具生成分析结果并以图表的方式展现出来。从而全面了解我们网站有哪些方面需要改进。</p>\n<a id=\"more\"></a>\n<h4 id=\"环境\">环境</h4><ul>\n<li>安装PHP环境</li>\n<li>安装apache服务器</li>\n<li>安装mysql数据库</li>\n</ul>\n<h4 id=\"phantomjs\">phantomjs</h4><p><a href=\"http://phantomjs.org/download.html\" target=\"_blank\" rel=\"external\">安装phantomjs</a></p>\n<h4 id=\"yslowjs\">yslowjs</h4><p><a href=\"http://yslow.org/phantomjs/\" target=\"_blank\" rel=\"external\">yslowjs</a><br>通过yslow分析页面，上报到showslow<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#phantomjs yslow.js http://www.test.com/ --info grade  -b http://127.0.0.1:8088/php/webapp/beacon/yslow/</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"phantomas\">phantomas</h4><p>使用phantomas可以收集网络性能指标<br>安装: npm install –global phantomas<br>通过phantomas生成har<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">phantomas http://www.test.com/ --engine webkit --har <span class=\"built_in\">test</span></div></pre></td></tr></table></figure></p>\n<p>读取har文件内容，通过接口 <a href=\"http://127.0.0.1:8088/php/webapp/beacon/har/?url=http://www.test.com/\" target=\"_blank\" rel=\"external\">http://127.0.0.1:8088/php/webapp/beacon/har/?url=http://www.test.com/</a> 上传到showslow平台</p>\n<h4 id=\"pagespeed\">pagespeed</h4><p><a href=\"https://code.google.com/apis/console/#access\" target=\"_blank\" rel=\"external\">申请apiKey</a><br>通过pagespeed分析页面，上报到showslow<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl http://127.0.0.1:8088/php/webapp/beacon/pagespeed/?api\\&amp;u=http://www.test.com/</div></pre></td></tr></table></figure></p>\n<h4 id=\"HARViewer安装\">HARViewer安装</h4><p><a href=\"https://github.com/janodvarko/harviewer/archive/master.zip\" target=\"_blank\" rel=\"external\">HARViewer</a>能够帮助我们</p>\n<ul>\n<li><a href=\"https://github.com/janodvarko/harviewer/archive/master.zip\" target=\"_blank\" rel=\"external\">下载HARViewer</a></li>\n<li>把解压的文件copy到showslow webapp目录下即可</li>\n</ul>\n<h4 id=\"showslow安装\">showslow安装</h4><ul>\n<li><a href=\"https://github.com/sergeychernyshev/showslow/releases\" target=\"_blank\" rel=\"external\">下载showslow</a></li>\n<li>把解压文件夹放到apache www目录下即可</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#unzip showslow</span></div><div class=\"line\"><span class=\"comment\">#cd showslow</span></div><div class=\"line\"><span class=\"comment\">#cp config.sample.php config.php</span></div><div class=\"line\"><span class=\"comment\">#vim config.php</span></div><div class=\"line\"></div><div class=\"line\">// 配置数据库</div><div class=\"line\"><span class=\"variable\">$db</span> = <span class=\"string\">'showslow'</span>;</div><div class=\"line\"><span class=\"variable\">$user</span> = <span class=\"string\">'xxx'</span>;</div><div class=\"line\"><span class=\"variable\">$pass</span> = <span class=\"string\">'xxx'</span>;</div><div class=\"line\"><span class=\"variable\">$host</span> = <span class=\"string\">'localhost'</span>;</div><div class=\"line\"><span class=\"variable\">$port</span> = 3306;</div><div class=\"line\"></div><div class=\"line\">// pagespeed测试key</div><div class=\"line\"><span class=\"variable\">$pageSpeedOnlineAPIKey</span> = <span class=\"string\">'xxx'</span>;</div><div class=\"line\"></div><div class=\"line\">// 配置har存储</div><div class=\"line\"><span class=\"variable\">$enableHARBeacon</span> = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">// 配置harview目录</div><div class=\"line\"><span class=\"variable\">$HARViewerBase</span> = <span class=\"string\">'/php/webapp/harviewer/webapp'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#vim global.php</span></div><div class=\"line\"></div><div class=\"line\">// 在页面中配置需要监控测试的页面</div><div class=\"line\"><span class=\"variable\">$enableMyURLs</span> = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#make</span></div></pre></td></tr></table></figure>\n<p>这样我们就能在页面添加要监控的网站了</p>\n<h4 id=\"使用\">使用</h4><p>可以编写脚本，每天定时去执行检测，获取所有监控的url，然后分别去执行上述的那些方法，进行检测和上报的showslow</p>\n","excerpt":"<p>今天，性能是一个我们常谈的话题，网站性能的重要性不言而喻。<br><a href=\"https://github.com/sergeychernyshev/showslow/wiki\">showslow</a>是一个github上开源的，能够帮助我们监控网站性能的工具。我们可以使用yslow和pagespeed等工具生成分析结果并以图表的方式展现出来。从而全面了解我们网站有哪些方面需要改进。</p>","more":"<h4 id=\"环境\">环境</h4><ul>\n<li>安装PHP环境</li>\n<li>安装apache服务器</li>\n<li>安装mysql数据库</li>\n</ul>\n<h4 id=\"phantomjs\">phantomjs</h4><p><a href=\"http://phantomjs.org/download.html\">安装phantomjs</a></p>\n<h4 id=\"yslowjs\">yslowjs</h4><p><a href=\"http://yslow.org/phantomjs/\">yslowjs</a><br>通过yslow分析页面，上报到showslow<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#phantomjs yslow.js http://www.test.com/ --info grade  -b http://127.0.0.1:8088/php/webapp/beacon/yslow/</span></div></pre></td></tr></table></figure></p>\n<h4 id=\"phantomas\">phantomas</h4><p>使用phantomas可以收集网络性能指标<br>安装: npm install –global phantomas<br>通过phantomas生成har<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">phantomas http://www.test.com/ --engine webkit --har <span class=\"built_in\">test</span></div></pre></td></tr></table></figure></p>\n<p>读取har文件内容，通过接口 <a href=\"http://127.0.0.1:8088/php/webapp/beacon/har/?url=http://www.test.com/\">http://127.0.0.1:8088/php/webapp/beacon/har/?url=http://www.test.com/</a> 上传到showslow平台</p>\n<h4 id=\"pagespeed\">pagespeed</h4><p><a href=\"https://code.google.com/apis/console/#access\">申请apiKey</a><br>通过pagespeed分析页面，上报到showslow<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">curl http://127.0.0.1:8088/php/webapp/beacon/pagespeed/?api\\&amp;u=http://www.test.com/</div></pre></td></tr></table></figure></p>\n<h4 id=\"HARViewer安装\">HARViewer安装</h4><p><a href=\"https://github.com/janodvarko/harviewer/archive/master.zip\">HARViewer</a>能够帮助我们</p>\n<ul>\n<li><a href=\"https://github.com/janodvarko/harviewer/archive/master.zip\">下载HARViewer</a></li>\n<li>把解压的文件copy到showslow webapp目录下即可</li>\n</ul>\n<h4 id=\"showslow安装\">showslow安装</h4><ul>\n<li><a href=\"https://github.com/sergeychernyshev/showslow/releases\">下载showslow</a></li>\n<li>把解压文件夹放到apache www目录下即可</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#unzip showslow</span></div><div class=\"line\"><span class=\"comment\">#cd showslow</span></div><div class=\"line\"><span class=\"comment\">#cp config.sample.php config.php</span></div><div class=\"line\"><span class=\"comment\">#vim config.php</span></div><div class=\"line\"></div><div class=\"line\">// 配置数据库</div><div class=\"line\"><span class=\"variable\">$db</span> = <span class=\"string\">'showslow'</span>;</div><div class=\"line\"><span class=\"variable\">$user</span> = <span class=\"string\">'xxx'</span>;</div><div class=\"line\"><span class=\"variable\">$pass</span> = <span class=\"string\">'xxx'</span>;</div><div class=\"line\"><span class=\"variable\">$host</span> = <span class=\"string\">'localhost'</span>;</div><div class=\"line\"><span class=\"variable\">$port</span> = 3306;</div><div class=\"line\"></div><div class=\"line\">// pagespeed测试key</div><div class=\"line\"><span class=\"variable\">$pageSpeedOnlineAPIKey</span> = <span class=\"string\">'xxx'</span>;</div><div class=\"line\"></div><div class=\"line\">// 配置har存储</div><div class=\"line\"><span class=\"variable\">$enableHARBeacon</span> = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\">// 配置harview目录</div><div class=\"line\"><span class=\"variable\">$HARViewerBase</span> = <span class=\"string\">'/php/webapp/harviewer/webapp'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#vim global.php</span></div><div class=\"line\"></div><div class=\"line\">// 在页面中配置需要监控测试的页面</div><div class=\"line\"><span class=\"variable\">$enableMyURLs</span> = <span class=\"literal\">true</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#make</span></div></pre></td></tr></table></figure>\n<p>这样我们就能在页面添加要监控的网站了</p>\n<h4 id=\"使用\">使用</h4><p>可以编写脚本，每天定时去执行检测，获取所有监控的url，然后分别去执行上述的那些方法，进行检测和上报的showslow</p>"},{"title":"表单中按回车键自动提交","date":"2015-11-20T07:03:01.000Z","toc":true,"_content":"#### 当form表单中只有一个`<input type=\"text\" name='name' />`时按回车键将会自动将表单提交。\n```javascript\n<form id='formSubmit' action='login.jsp' method='post'>\n<input type='text' name='name' />\n</form>\n```\n<!--more-->\n\n#### 不需要提交的解决方案\n* 添加一个\n```javascript\n<input type='text' style='display:none'/>\n```\n* 不显示输入框，然后回车之后也不会提交：\n```javascript\n<form id='formSubmit' action='login.jsp' method='post'>\n<input type='text' name='name' />\n<input style='display:none' />\n</form>\n```\n* 添加一个onkeydown事件，然后回车之后也不会提交：\n```javascript\n<form id='formSubmit' action='login.jsp' method='post'>\n<input type='text' name='name' onkeydown='if(event.keyCode==13) return false;'/>\n</form>\n```\n* 如果想添加回车事件可以在onkeydown事件中添加判断提交表单：\n```javascript\n<form id='formSubmit' action='login.jsp' method='post'>\n<input style='display:none' />\n<input type='text' name='name' onkeydown='if(event.keyCode==13){bindSubmit();}' />\n</form>\n```\n\n>我们有时候希望回车键敲在文本框（input element）里来提交表单（form），但有时候又不希望如此。比如搜索行为，希望输入完关键词之后直接按回车键立即提交表单，\n而有些复杂表单，可能要避免回车键误操作在未完成表单填写的时候就触发了表单提交。\n\n#### 要控制这些行为，不需要借助js，浏览器已经帮我们做了这些处理，这里总结几条规则：\n* 如果表单里有一个type=”submit”的按钮，回车键生效。\n* 如果表单里只有一个type=”text”的input，不管按钮是什么type，回车键生效。\n* 如果按钮不是用input，而是用button，并且没有加type，IE下默认为type=button，FX默认为type=submit。\n* 其他表单元素如textarea、select不影响，radio checkbox不影响触发规则，但本身在FX下会响应回车键，在IE下不响应。\n* type=”image”的input，效果等同于type=”submit”，不知道为什么会设计这样一种type，不推荐使用，应该用CSS添加背景图合适些。","source":"_posts/表单中按回车键自动提交.md","raw":"title: 表单中按回车键自动提交\ndate: 2015-11-20 15:03:01\ntags: web\ntoc: true\n---\n#### 当form表单中只有一个`<input type=\"text\" name='name' />`时按回车键将会自动将表单提交。\n```javascript\n<form id='formSubmit' action='login.jsp' method='post'>\n<input type='text' name='name' />\n</form>\n```\n<!--more-->\n\n#### 不需要提交的解决方案\n* 添加一个\n```javascript\n<input type='text' style='display:none'/>\n```\n* 不显示输入框，然后回车之后也不会提交：\n```javascript\n<form id='formSubmit' action='login.jsp' method='post'>\n<input type='text' name='name' />\n<input style='display:none' />\n</form>\n```\n* 添加一个onkeydown事件，然后回车之后也不会提交：\n```javascript\n<form id='formSubmit' action='login.jsp' method='post'>\n<input type='text' name='name' onkeydown='if(event.keyCode==13) return false;'/>\n</form>\n```\n* 如果想添加回车事件可以在onkeydown事件中添加判断提交表单：\n```javascript\n<form id='formSubmit' action='login.jsp' method='post'>\n<input style='display:none' />\n<input type='text' name='name' onkeydown='if(event.keyCode==13){bindSubmit();}' />\n</form>\n```\n\n>我们有时候希望回车键敲在文本框（input element）里来提交表单（form），但有时候又不希望如此。比如搜索行为，希望输入完关键词之后直接按回车键立即提交表单，\n而有些复杂表单，可能要避免回车键误操作在未完成表单填写的时候就触发了表单提交。\n\n#### 要控制这些行为，不需要借助js，浏览器已经帮我们做了这些处理，这里总结几条规则：\n* 如果表单里有一个type=”submit”的按钮，回车键生效。\n* 如果表单里只有一个type=”text”的input，不管按钮是什么type，回车键生效。\n* 如果按钮不是用input，而是用button，并且没有加type，IE下默认为type=button，FX默认为type=submit。\n* 其他表单元素如textarea、select不影响，radio checkbox不影响触发规则，但本身在FX下会响应回车键，在IE下不响应。\n* type=”image”的input，效果等同于type=”submit”，不知道为什么会设计这样一种type，不推荐使用，应该用CSS添加背景图合适些。","slug":"表单中按回车键自动提交","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhr10048t0yjsfmhegdj","content":"<h4 id=\"当form表单中只有一个&lt;input_type=&quot;text&quot;_name=&#39;name&#39;_/&gt;时按回车键将会自动将表单提交。\">当form表单中只有一个<code>&lt;input type=&quot;text&quot; name=&#39;name&#39; /&gt;</code>时按回车键将会自动将表单提交。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form id=<span class=\"string\">'formSubmit'</span> action=<span class=\"string\">'login.jsp'</span> method=<span class=\"string\">'post'</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">name</span>=<span class=\"string\">'name'</span> /&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"不需要提交的解决方案\">不需要提交的解决方案</h4><ul>\n<li><p>添加一个</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">'text'</span> style=<span class=\"string\">'display:none'</span>/&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>不显示输入框，然后回车之后也不会提交：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form id=<span class=\"string\">'formSubmit'</span> action=<span class=\"string\">'login.jsp'</span> method=<span class=\"string\">'post'</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">name</span>=<span class=\"string\">'name'</span> /&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">style</span>=<span class=\"string\">'display:none'</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>添加一个onkeydown事件，然后回车之后也不会提交：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form id=<span class=\"string\">'formSubmit'</span> action=<span class=\"string\">'login.jsp'</span> method=<span class=\"string\">'post'</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">name</span>=<span class=\"string\">'name'</span> <span class=\"attr\">onkeydown</span>=<span class=\"string\">'if(event.keyCode==13) return false;'</span>/&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>如果想添加回车事件可以在onkeydown事件中添加判断提交表单：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form id=<span class=\"string\">'formSubmit'</span> action=<span class=\"string\">'login.jsp'</span> method=<span class=\"string\">'post'</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">style</span>=<span class=\"string\">'display:none'</span> /&gt;</span></span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">name</span>=<span class=\"string\">'name'</span> <span class=\"attr\">onkeydown</span>=<span class=\"string\">'if(event.keyCode==13)&#123;bindSubmit();&#125;'</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>我们有时候希望回车键敲在文本框（input element）里来提交表单（form），但有时候又不希望如此。比如搜索行为，希望输入完关键词之后直接按回车键立即提交表单，<br>而有些复杂表单，可能要避免回车键误操作在未完成表单填写的时候就触发了表单提交。</p>\n</blockquote>\n<h4 id=\"要控制这些行为，不需要借助js，浏览器已经帮我们做了这些处理，这里总结几条规则：\">要控制这些行为，不需要借助js，浏览器已经帮我们做了这些处理，这里总结几条规则：</h4><ul>\n<li>如果表单里有一个type=”submit”的按钮，回车键生效。</li>\n<li>如果表单里只有一个type=”text”的input，不管按钮是什么type，回车键生效。</li>\n<li>如果按钮不是用input，而是用button，并且没有加type，IE下默认为type=button，FX默认为type=submit。</li>\n<li>其他表单元素如textarea、select不影响，radio checkbox不影响触发规则，但本身在FX下会响应回车键，在IE下不响应。</li>\n<li>type=”image”的input，效果等同于type=”submit”，不知道为什么会设计这样一种type，不推荐使用，应该用CSS添加背景图合适些。</li>\n</ul>\n","excerpt":"<h4 id=\"当form表单中只有一个&lt;input_type=&quot;text&quot;_name=&#39;name&#39;_/&gt;时按回车键将会自动将表单提交。\">当form表单中只有一个<code>&lt;input type=&quot;text&quot; name=&#39;name&#39; /&gt;</code>时按回车键将会自动将表单提交。</h4><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form id=<span class=\"string\">'formSubmit'</span> action=<span class=\"string\">'login.jsp'</span> method=<span class=\"string\">'post'</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">name</span>=<span class=\"string\">'name'</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></div></pre></td></tr></table></figure>","more":"<h4 id=\"不需要提交的解决方案\">不需要提交的解决方案</h4><ul>\n<li><p>添加一个</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">'text'</span> style=<span class=\"string\">'display:none'</span>/&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>不显示输入框，然后回车之后也不会提交：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form id=<span class=\"string\">'formSubmit'</span> action=<span class=\"string\">'login.jsp'</span> method=<span class=\"string\">'post'</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">name</span>=<span class=\"string\">'name'</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">style</span>=<span class=\"string\">'display:none'</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>添加一个onkeydown事件，然后回车之后也不会提交：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form id=<span class=\"string\">'formSubmit'</span> action=<span class=\"string\">'login.jsp'</span> method=<span class=\"string\">'post'</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">name</span>=<span class=\"string\">'name'</span> <span class=\"attr\">onkeydown</span>=<span class=\"string\">'if(event.keyCode==13) return false;'</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n<li><p>如果想添加回车事件可以在onkeydown事件中添加判断提交表单：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;form id=<span class=\"string\">'formSubmit'</span> action=<span class=\"string\">'login.jsp'</span> method=<span class=\"string\">'post'</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">style</span>=<span class=\"string\">'display:none'</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">'text'</span> <span class=\"attr\">name</span>=<span class=\"string\">'name'</span> <span class=\"attr\">onkeydown</span>=<span class=\"string\">'if(event.keyCode==13)&#123;bindSubmit();&#125;'</span> /&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>我们有时候希望回车键敲在文本框（input element）里来提交表单（form），但有时候又不希望如此。比如搜索行为，希望输入完关键词之后直接按回车键立即提交表单，<br>而有些复杂表单，可能要避免回车键误操作在未完成表单填写的时候就触发了表单提交。</p>\n</blockquote>\n<h4 id=\"要控制这些行为，不需要借助js，浏览器已经帮我们做了这些处理，这里总结几条规则：\">要控制这些行为，不需要借助js，浏览器已经帮我们做了这些处理，这里总结几条规则：</h4><ul>\n<li>如果表单里有一个type=”submit”的按钮，回车键生效。</li>\n<li>如果表单里只有一个type=”text”的input，不管按钮是什么type，回车键生效。</li>\n<li>如果按钮不是用input，而是用button，并且没有加type，IE下默认为type=button，FX默认为type=submit。</li>\n<li>其他表单元素如textarea、select不影响，radio checkbox不影响触发规则，但本身在FX下会响应回车键，在IE下不响应。</li>\n<li>type=”image”的input，效果等同于type=”submit”，不知道为什么会设计这样一种type，不推荐使用，应该用CSS添加背景图合适些。</li>\n</ul>"},{"title":"页面脚本加载分析","date":"2015-10-23T07:03:01.000Z","toc":true,"_content":"#### 今天结合demo，说说页面加载过程中，脚本对加载速度的影响\n\n##### 脚本分为几种情况\n1. header内行内async脚本\n2. header内行内defer脚本\n3. header内行内五defer async脚本\n4. header内外部async脚本\n5. header内外部defer脚本\n6. header内外部无async defer脚本\n7. ajax请求，接口延迟返回\n8. body内脚本情况类似，多一些图片，其中包括延迟返回图片的地址\n<!--more-->\n\n##### 浏览器测试情况\n1. chrome firefox safri IE8 IE6\n\n##### demo暂时不贴上，先对结果进行说明\n1. header部分行内脚本，所有浏览器表现相同， async defer 是无效的\n2. defer在IE6-9都是支持的，defer的脚本延迟执行了\n3. header引用外部脚本，async defer有效\n4. chrome,safri:\n\t* 不添加async defer的立即执行了\n\t* 添加了async的脚本和页面解析时同步的，脚本先下载，在空闲的时候执行，但是执行顺序得不到保证\n5. defer的什么时候执行\n\t* defer 属性规定是否对脚本执行进行延迟，直到页面加载为止。但是在DOMContentLoaded之前，顺序是按照前后defer的先后执行，我们可以认为这种行为就是我们想要的\n6. firfox:\n\t* 脚本加在header中，表现可能出现怪异的情况，外部脚本引用不适合加在header中\n\t* 最后执行defer的\n7. 到了body内\n\t* 顺序执行脚本监听了图片onload，执行结束后向下执行\n\t* 此时动态添加了一个图片，代码中还有很多在ajax回调中加载图片的，都不会影响到window.loaded,但是会影响DOMContentLoaded，document ready\n\t* 同样body内嵌脚本async defer无效，顺序向下执行,IE行为在上面已经说过了\n8. 引用外部脚本\n\t* defer的一定在DOMContentLoaded之前执行\n\t* async的可能出现在DOMContentLoaded之后 例如safri,这个是根据浏览器执行情况\n\t* defer会阻止DOMContentLoaded加载完成\n\t* body中async加载的外部js 不会阻止DOMContentLoaded，可能在DOMContentLoaded之后执行，但是会阻塞loaded\n9. dom加载完了 DOMContentLoaded\n\t* IE6,7,8不支持，但是我们看到了document ready\n10. 高级浏览器，IE8及以上ajax的返回分布在各个时间点，所以ajax异步接口不会对页面加载产生任何阻塞,IE6,7例外，他们的ajax阻塞了页面加载\n11. window.loaded 在图片都加载完后触发\n12. 图片的加载时间会影响onload\n13. ajax是异步接口，不会阻塞页面加载，如果换成无延迟返回，会在onload之前返回结果，主要依赖处理时间\n\n##### 总结\n1. 常规表现（一些高级浏览器）\n2. herder\n\t* header中行内脚本执行顺序不受defer async影响，顺序执行，会阻塞DOMContentLoaded\n\t* header中行内脚本中ajax请求不会对页面加载带来任何阻塞\n\t* header中引用外部脚本，添加defer async后，浏览器表现情况不统一，async的可能先执行，所以引用外部脚本并不适合加在header中，也不适合添加defer asybc标示\n3. body\n\t* body中图片加载会阻塞window.loaded,不会阻塞DOMContentLoaded\n\t* body中行内脚本执行顺序不受defer async影响，顺序执行，阻塞DOMContentLoaded\n\t* body中行内脚本ajax请求不会阻塞页面加载\n\t* body中引用外部脚本，defer async表现正常，外部脚本应该加在body中，body结束标签上面\n4. ajax\n\t* 无论是header还是body中，行内脚本执行的ajax还是外部脚本执行的ajax，都对页面加载没有影响\n5. defer async总结\n\t* defer执行的脚本都会在DOMContentLoaded之前就执行，defer会阻塞页面加载\n\t* async脚本都会在loaded之情执行，它会阻塞window.loaded\n6. DOMContentLoaded,window.loaded以及document ready\n\t* DOMContentLoaded在window.loaded之前执行，阻塞DOMContentLoaded也就会阻塞window.loaded\n\t* document ready在DOMContentLoaded之前执行，说明document ready是监听DOMContentLoaded完成的\n7. IE\n\t* IE支持defer属性,不支持async属性，从IE9及以上支持onload,支持DOMContentLoaded\n\t* IE6，7支持行内脚本defer属性，{color:red} 从表现上来看IE6,7,8,9都支持行内脚本的defer{color}\n\t* 所以我们在ie6,7,8,9中观察到的现象是，行内的先执行async,再执行没加defer async标记的，defer的延迟执行了\n\t* 同时我们又发现IE6,7脚本中ajax影响了页面加载，影响document ready,IE8及以上版本不受影响\n\t* 到了IE8以上，表现和webkit内核浏览器基本相似了\n\n","source":"_posts/页面脚本加载分析.md","raw":"title: 页面脚本加载分析\ndate: 2015-10-23 15:03:01\ntags: javascript\ntoc: true\n---\n#### 今天结合demo，说说页面加载过程中，脚本对加载速度的影响\n\n##### 脚本分为几种情况\n1. header内行内async脚本\n2. header内行内defer脚本\n3. header内行内五defer async脚本\n4. header内外部async脚本\n5. header内外部defer脚本\n6. header内外部无async defer脚本\n7. ajax请求，接口延迟返回\n8. body内脚本情况类似，多一些图片，其中包括延迟返回图片的地址\n<!--more-->\n\n##### 浏览器测试情况\n1. chrome firefox safri IE8 IE6\n\n##### demo暂时不贴上，先对结果进行说明\n1. header部分行内脚本，所有浏览器表现相同， async defer 是无效的\n2. defer在IE6-9都是支持的，defer的脚本延迟执行了\n3. header引用外部脚本，async defer有效\n4. chrome,safri:\n\t* 不添加async defer的立即执行了\n\t* 添加了async的脚本和页面解析时同步的，脚本先下载，在空闲的时候执行，但是执行顺序得不到保证\n5. defer的什么时候执行\n\t* defer 属性规定是否对脚本执行进行延迟，直到页面加载为止。但是在DOMContentLoaded之前，顺序是按照前后defer的先后执行，我们可以认为这种行为就是我们想要的\n6. firfox:\n\t* 脚本加在header中，表现可能出现怪异的情况，外部脚本引用不适合加在header中\n\t* 最后执行defer的\n7. 到了body内\n\t* 顺序执行脚本监听了图片onload，执行结束后向下执行\n\t* 此时动态添加了一个图片，代码中还有很多在ajax回调中加载图片的，都不会影响到window.loaded,但是会影响DOMContentLoaded，document ready\n\t* 同样body内嵌脚本async defer无效，顺序向下执行,IE行为在上面已经说过了\n8. 引用外部脚本\n\t* defer的一定在DOMContentLoaded之前执行\n\t* async的可能出现在DOMContentLoaded之后 例如safri,这个是根据浏览器执行情况\n\t* defer会阻止DOMContentLoaded加载完成\n\t* body中async加载的外部js 不会阻止DOMContentLoaded，可能在DOMContentLoaded之后执行，但是会阻塞loaded\n9. dom加载完了 DOMContentLoaded\n\t* IE6,7,8不支持，但是我们看到了document ready\n10. 高级浏览器，IE8及以上ajax的返回分布在各个时间点，所以ajax异步接口不会对页面加载产生任何阻塞,IE6,7例外，他们的ajax阻塞了页面加载\n11. window.loaded 在图片都加载完后触发\n12. 图片的加载时间会影响onload\n13. ajax是异步接口，不会阻塞页面加载，如果换成无延迟返回，会在onload之前返回结果，主要依赖处理时间\n\n##### 总结\n1. 常规表现（一些高级浏览器）\n2. herder\n\t* header中行内脚本执行顺序不受defer async影响，顺序执行，会阻塞DOMContentLoaded\n\t* header中行内脚本中ajax请求不会对页面加载带来任何阻塞\n\t* header中引用外部脚本，添加defer async后，浏览器表现情况不统一，async的可能先执行，所以引用外部脚本并不适合加在header中，也不适合添加defer asybc标示\n3. body\n\t* body中图片加载会阻塞window.loaded,不会阻塞DOMContentLoaded\n\t* body中行内脚本执行顺序不受defer async影响，顺序执行，阻塞DOMContentLoaded\n\t* body中行内脚本ajax请求不会阻塞页面加载\n\t* body中引用外部脚本，defer async表现正常，外部脚本应该加在body中，body结束标签上面\n4. ajax\n\t* 无论是header还是body中，行内脚本执行的ajax还是外部脚本执行的ajax，都对页面加载没有影响\n5. defer async总结\n\t* defer执行的脚本都会在DOMContentLoaded之前就执行，defer会阻塞页面加载\n\t* async脚本都会在loaded之情执行，它会阻塞window.loaded\n6. DOMContentLoaded,window.loaded以及document ready\n\t* DOMContentLoaded在window.loaded之前执行，阻塞DOMContentLoaded也就会阻塞window.loaded\n\t* document ready在DOMContentLoaded之前执行，说明document ready是监听DOMContentLoaded完成的\n7. IE\n\t* IE支持defer属性,不支持async属性，从IE9及以上支持onload,支持DOMContentLoaded\n\t* IE6，7支持行内脚本defer属性，{color:red} 从表现上来看IE6,7,8,9都支持行内脚本的defer{color}\n\t* 所以我们在ie6,7,8,9中观察到的现象是，行内的先执行async,再执行没加defer async标记的，defer的延迟执行了\n\t* 同时我们又发现IE6,7脚本中ajax影响了页面加载，影响document ready,IE8及以上版本不受影响\n\t* 到了IE8以上，表现和webkit内核浏览器基本相似了\n\n","slug":"页面脚本加载分析","published":1,"updated":"2017-02-17T03:13:09.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciz98xhrc004at0yjwxr0uxf8","content":"<h4 id=\"今天结合demo，说说页面加载过程中，脚本对加载速度的影响\">今天结合demo，说说页面加载过程中，脚本对加载速度的影响</h4><h5 id=\"脚本分为几种情况\">脚本分为几种情况</h5><ol>\n<li>header内行内async脚本</li>\n<li>header内行内defer脚本</li>\n<li>header内行内五defer async脚本</li>\n<li>header内外部async脚本</li>\n<li>header内外部defer脚本</li>\n<li>header内外部无async defer脚本</li>\n<li>ajax请求，接口延迟返回</li>\n<li>body内脚本情况类似，多一些图片，其中包括延迟返回图片的地址<a id=\"more\"></a>\n</li>\n</ol>\n<h5 id=\"浏览器测试情况\">浏览器测试情况</h5><ol>\n<li>chrome firefox safri IE8 IE6</li>\n</ol>\n<h5 id=\"demo暂时不贴上，先对结果进行说明\">demo暂时不贴上，先对结果进行说明</h5><ol>\n<li>header部分行内脚本，所有浏览器表现相同， async defer 是无效的</li>\n<li>defer在IE6-9都是支持的，defer的脚本延迟执行了</li>\n<li>header引用外部脚本，async defer有效</li>\n<li>chrome,safri:<ul>\n<li>不添加async defer的立即执行了</li>\n<li>添加了async的脚本和页面解析时同步的，脚本先下载，在空闲的时候执行，但是执行顺序得不到保证</li>\n</ul>\n</li>\n<li>defer的什么时候执行<ul>\n<li>defer 属性规定是否对脚本执行进行延迟，直到页面加载为止。但是在DOMContentLoaded之前，顺序是按照前后defer的先后执行，我们可以认为这种行为就是我们想要的</li>\n</ul>\n</li>\n<li>firfox:<ul>\n<li>脚本加在header中，表现可能出现怪异的情况，外部脚本引用不适合加在header中</li>\n<li>最后执行defer的</li>\n</ul>\n</li>\n<li>到了body内<ul>\n<li>顺序执行脚本监听了图片onload，执行结束后向下执行</li>\n<li>此时动态添加了一个图片，代码中还有很多在ajax回调中加载图片的，都不会影响到window.loaded,但是会影响DOMContentLoaded，document ready</li>\n<li>同样body内嵌脚本async defer无效，顺序向下执行,IE行为在上面已经说过了</li>\n</ul>\n</li>\n<li>引用外部脚本<ul>\n<li>defer的一定在DOMContentLoaded之前执行</li>\n<li>async的可能出现在DOMContentLoaded之后 例如safri,这个是根据浏览器执行情况</li>\n<li>defer会阻止DOMContentLoaded加载完成</li>\n<li>body中async加载的外部js 不会阻止DOMContentLoaded，可能在DOMContentLoaded之后执行，但是会阻塞loaded</li>\n</ul>\n</li>\n<li>dom加载完了 DOMContentLoaded<ul>\n<li>IE6,7,8不支持，但是我们看到了document ready</li>\n</ul>\n</li>\n<li>高级浏览器，IE8及以上ajax的返回分布在各个时间点，所以ajax异步接口不会对页面加载产生任何阻塞,IE6,7例外，他们的ajax阻塞了页面加载</li>\n<li>window.loaded 在图片都加载完后触发</li>\n<li>图片的加载时间会影响onload</li>\n<li>ajax是异步接口，不会阻塞页面加载，如果换成无延迟返回，会在onload之前返回结果，主要依赖处理时间</li>\n</ol>\n<h5 id=\"总结\">总结</h5><ol>\n<li>常规表现（一些高级浏览器）</li>\n<li>herder<ul>\n<li>header中行内脚本执行顺序不受defer async影响，顺序执行，会阻塞DOMContentLoaded</li>\n<li>header中行内脚本中ajax请求不会对页面加载带来任何阻塞</li>\n<li>header中引用外部脚本，添加defer async后，浏览器表现情况不统一，async的可能先执行，所以引用外部脚本并不适合加在header中，也不适合添加defer asybc标示</li>\n</ul>\n</li>\n<li>body<ul>\n<li>body中图片加载会阻塞window.loaded,不会阻塞DOMContentLoaded</li>\n<li>body中行内脚本执行顺序不受defer async影响，顺序执行，阻塞DOMContentLoaded</li>\n<li>body中行内脚本ajax请求不会阻塞页面加载</li>\n<li>body中引用外部脚本，defer async表现正常，外部脚本应该加在body中，body结束标签上面</li>\n</ul>\n</li>\n<li>ajax<ul>\n<li>无论是header还是body中，行内脚本执行的ajax还是外部脚本执行的ajax，都对页面加载没有影响</li>\n</ul>\n</li>\n<li>defer async总结<ul>\n<li>defer执行的脚本都会在DOMContentLoaded之前就执行，defer会阻塞页面加载</li>\n<li>async脚本都会在loaded之情执行，它会阻塞window.loaded</li>\n</ul>\n</li>\n<li>DOMContentLoaded,window.loaded以及document ready<ul>\n<li>DOMContentLoaded在window.loaded之前执行，阻塞DOMContentLoaded也就会阻塞window.loaded</li>\n<li>document ready在DOMContentLoaded之前执行，说明document ready是监听DOMContentLoaded完成的</li>\n</ul>\n</li>\n<li>IE<ul>\n<li>IE支持defer属性,不支持async属性，从IE9及以上支持onload,支持DOMContentLoaded</li>\n<li>IE6，7支持行内脚本defer属性，{color:red} 从表现上来看IE6,7,8,9都支持行内脚本的defer{color}</li>\n<li>所以我们在ie6,7,8,9中观察到的现象是，行内的先执行async,再执行没加defer async标记的，defer的延迟执行了</li>\n<li>同时我们又发现IE6,7脚本中ajax影响了页面加载，影响document ready,IE8及以上版本不受影响</li>\n<li>到了IE8以上，表现和webkit内核浏览器基本相似了</li>\n</ul>\n</li>\n</ol>\n","excerpt":"<h4 id=\"今天结合demo，说说页面加载过程中，脚本对加载速度的影响\">今天结合demo，说说页面加载过程中，脚本对加载速度的影响</h4><h5 id=\"脚本分为几种情况\">脚本分为几种情况</h5><ol>\n<li>header内行内async脚本</li>\n<li>header内行内defer脚本</li>\n<li>header内行内五defer async脚本</li>\n<li>header内外部async脚本</li>\n<li>header内外部defer脚本</li>\n<li>header内外部无async defer脚本</li>\n<li>ajax请求，接口延迟返回</li>\n<li>body内脚本情况类似，多一些图片，其中包括延迟返回图片的地址","more":"</li>\n</ol>\n<h5 id=\"浏览器测试情况\">浏览器测试情况</h5><ol>\n<li>chrome firefox safri IE8 IE6</li>\n</ol>\n<h5 id=\"demo暂时不贴上，先对结果进行说明\">demo暂时不贴上，先对结果进行说明</h5><ol>\n<li>header部分行内脚本，所有浏览器表现相同， async defer 是无效的</li>\n<li>defer在IE6-9都是支持的，defer的脚本延迟执行了</li>\n<li>header引用外部脚本，async defer有效</li>\n<li>chrome,safri:<ul>\n<li>不添加async defer的立即执行了</li>\n<li>添加了async的脚本和页面解析时同步的，脚本先下载，在空闲的时候执行，但是执行顺序得不到保证</li>\n</ul>\n</li>\n<li>defer的什么时候执行<ul>\n<li>defer 属性规定是否对脚本执行进行延迟，直到页面加载为止。但是在DOMContentLoaded之前，顺序是按照前后defer的先后执行，我们可以认为这种行为就是我们想要的</li>\n</ul>\n</li>\n<li>firfox:<ul>\n<li>脚本加在header中，表现可能出现怪异的情况，外部脚本引用不适合加在header中</li>\n<li>最后执行defer的</li>\n</ul>\n</li>\n<li>到了body内<ul>\n<li>顺序执行脚本监听了图片onload，执行结束后向下执行</li>\n<li>此时动态添加了一个图片，代码中还有很多在ajax回调中加载图片的，都不会影响到window.loaded,但是会影响DOMContentLoaded，document ready</li>\n<li>同样body内嵌脚本async defer无效，顺序向下执行,IE行为在上面已经说过了</li>\n</ul>\n</li>\n<li>引用外部脚本<ul>\n<li>defer的一定在DOMContentLoaded之前执行</li>\n<li>async的可能出现在DOMContentLoaded之后 例如safri,这个是根据浏览器执行情况</li>\n<li>defer会阻止DOMContentLoaded加载完成</li>\n<li>body中async加载的外部js 不会阻止DOMContentLoaded，可能在DOMContentLoaded之后执行，但是会阻塞loaded</li>\n</ul>\n</li>\n<li>dom加载完了 DOMContentLoaded<ul>\n<li>IE6,7,8不支持，但是我们看到了document ready</li>\n</ul>\n</li>\n<li>高级浏览器，IE8及以上ajax的返回分布在各个时间点，所以ajax异步接口不会对页面加载产生任何阻塞,IE6,7例外，他们的ajax阻塞了页面加载</li>\n<li>window.loaded 在图片都加载完后触发</li>\n<li>图片的加载时间会影响onload</li>\n<li>ajax是异步接口，不会阻塞页面加载，如果换成无延迟返回，会在onload之前返回结果，主要依赖处理时间</li>\n</ol>\n<h5 id=\"总结\">总结</h5><ol>\n<li>常规表现（一些高级浏览器）</li>\n<li>herder<ul>\n<li>header中行内脚本执行顺序不受defer async影响，顺序执行，会阻塞DOMContentLoaded</li>\n<li>header中行内脚本中ajax请求不会对页面加载带来任何阻塞</li>\n<li>header中引用外部脚本，添加defer async后，浏览器表现情况不统一，async的可能先执行，所以引用外部脚本并不适合加在header中，也不适合添加defer asybc标示</li>\n</ul>\n</li>\n<li>body<ul>\n<li>body中图片加载会阻塞window.loaded,不会阻塞DOMContentLoaded</li>\n<li>body中行内脚本执行顺序不受defer async影响，顺序执行，阻塞DOMContentLoaded</li>\n<li>body中行内脚本ajax请求不会阻塞页面加载</li>\n<li>body中引用外部脚本，defer async表现正常，外部脚本应该加在body中，body结束标签上面</li>\n</ul>\n</li>\n<li>ajax<ul>\n<li>无论是header还是body中，行内脚本执行的ajax还是外部脚本执行的ajax，都对页面加载没有影响</li>\n</ul>\n</li>\n<li>defer async总结<ul>\n<li>defer执行的脚本都会在DOMContentLoaded之前就执行，defer会阻塞页面加载</li>\n<li>async脚本都会在loaded之情执行，它会阻塞window.loaded</li>\n</ul>\n</li>\n<li>DOMContentLoaded,window.loaded以及document ready<ul>\n<li>DOMContentLoaded在window.loaded之前执行，阻塞DOMContentLoaded也就会阻塞window.loaded</li>\n<li>document ready在DOMContentLoaded之前执行，说明document ready是监听DOMContentLoaded完成的</li>\n</ul>\n</li>\n<li>IE<ul>\n<li>IE支持defer属性,不支持async属性，从IE9及以上支持onload,支持DOMContentLoaded</li>\n<li>IE6，7支持行内脚本defer属性，{color:red} 从表现上来看IE6,7,8,9都支持行内脚本的defer{color}</li>\n<li>所以我们在ie6,7,8,9中观察到的现象是，行内的先执行async,再执行没加defer async标记的，defer的延迟执行了</li>\n<li>同时我们又发现IE6,7脚本中ajax影响了页面加载，影响document ready,IE8及以上版本不受影响</li>\n<li>到了IE8以上，表现和webkit内核浏览器基本相似了</li>\n</ul>\n</li>\n</ol>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciz98xhmh0005t0yjdf748a6v","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhmr0008t0yj5k9xzd97"},{"post_id":"ciz98xhlx0001t0yj8vww2me9","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhmw000at0yjg6k025mv"},{"post_id":"ciz98xhm50002t0yjpjuf1tgv","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhn1000et0yjoqfvs2ri"},{"post_id":"ciz98xhn0000dt0yjfd213vki","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhn5000ht0yjmzg1lfrp"},{"post_id":"ciz98xhmd0004t0yjvey9cv0f","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhn9000jt0yjkgwpk47m"},{"post_id":"ciz98xhn5000it0yjr60wopnd","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhnc000mt0yjoo0x1ikp"},{"post_id":"ciz98xhmn0006t0yj7ylfpct0","tag_id":"ciz98xhn4000gt0yjeosrqgyd","_id":"ciz98xhnf000ot0yjhzw83hjf"},{"post_id":"ciz98xhn9000kt0yjxhv8lnsn","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhni000rt0yjktasm09x"},{"post_id":"ciz98xhnd000nt0yjhqd57xyd","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhnm000tt0yjxwydo5ko"},{"post_id":"ciz98xhmr0009t0yjc2jjztof","tag_id":"ciz98xhn4000gt0yjeosrqgyd","_id":"ciz98xhnp000wt0yjw5cr7zir"},{"post_id":"ciz98xhng000pt0yjktkqnnoz","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhnq000yt0yjn04j686c"},{"post_id":"ciz98xhnj000st0yj3obw4o8f","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhnr0010t0yjwraow9w4"},{"post_id":"ciz98xhmw000bt0yjpbvovj2z","tag_id":"ciz98xhn4000gt0yjeosrqgyd","_id":"ciz98xhnu0012t0yj6iqnqg5w"},{"post_id":"ciz98xhnn000ut0yjk07xe7lf","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhnw0014t0yjjrd6rdor"},{"post_id":"ciz98xhnp000xt0yjh6vhcuy9","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xho40016t0yjhp0wcfh6"},{"post_id":"ciz98xhn2000ft0yj0hg1hoam","tag_id":"ciz98xhno000vt0yjgjusu8th","_id":"ciz98xho50018t0yjc6emaz7t"},{"post_id":"ciz98xhnq000zt0yjthjxcm0t","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xho6001at0yj5xw8ecli"},{"post_id":"ciz98xhns0011t0yj29bni2x6","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xho8001ct0yjacufx89i"},{"post_id":"ciz98xhnu0013t0yj1ep2ixz7","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhoa001et0yjt7978xri"},{"post_id":"ciz98xho20015t0yj1q3b8kot","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhob001gt0yjrsfsi0x5"},{"post_id":"ciz98xho40017t0yj1oc61um0","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhod001it0yji9fu8f2q"},{"post_id":"ciz98xho50019t0yj9tzuzacu","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhog001kt0yjbu8z0fp4"},{"post_id":"ciz98xho7001bt0yjjw10qu37","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhoi001nt0yjzcfl30bv"},{"post_id":"ciz98xho9001dt0yj1xlfdzab","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhoj001pt0yji2zc8q5r"},{"post_id":"ciz98xhoa001ft0yjit3j5t65","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhom001rt0yjonauzbwa"},{"post_id":"ciz98xhob001ht0yj4u783k5o","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhot001ut0yjy33kfgfb"},{"post_id":"ciz98xhoi001ot0yjj3dirv1h","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhou001wt0yjb3hnou9v"},{"post_id":"ciz98xhoj001qt0yjdcz6kqu7","tag_id":"ciz98xhoh001mt0yjbiwn0y1d","_id":"ciz98xhow001yt0yjt1sj05ao"},{"post_id":"ciz98xhod001jt0yjhblm7ryg","tag_id":"ciz98xhoh001mt0yjbiwn0y1d","_id":"ciz98xhoz0020t0yj52jhzdhq"},{"post_id":"ciz98xhoo001st0yjj33f0l84","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhp20022t0yjobv5vr91"},{"post_id":"ciz98xhot001vt0yjh29m7q6j","tag_id":"ciz98xhn4000gt0yjeosrqgyd","_id":"ciz98xhp40024t0yj7ma80b7c"},{"post_id":"ciz98xhog001lt0yjp8h8hbfm","tag_id":"ciz98xhoh001mt0yjbiwn0y1d","_id":"ciz98xhp80026t0yj8nwaxsh6"},{"post_id":"ciz98xhov001xt0yjajwzldnk","tag_id":"ciz98xhn4000gt0yjeosrqgyd","_id":"ciz98xhpa0028t0yjizcvsq30"},{"post_id":"ciz98xhox001zt0yjophxjqfs","tag_id":"ciz98xhn4000gt0yjeosrqgyd","_id":"ciz98xhpb002at0yjajc8073x"},{"post_id":"ciz98xhoz0021t0yj5hhiy1pq","tag_id":"ciz98xhn4000gt0yjeosrqgyd","_id":"ciz98xhpd002ct0yjf8rja6a2"},{"post_id":"ciz98xhp30023t0yj2u28wmd0","tag_id":"ciz98xhn4000gt0yjeosrqgyd","_id":"ciz98xhpe002et0yjpx8yh9uw"},{"post_id":"ciz98xhp40025t0yjsc3ar996","tag_id":"ciz98xhn4000gt0yjeosrqgyd","_id":"ciz98xhpg002gt0yjsbtk7ny5"},{"post_id":"ciz98xhp80027t0yj8u16ctcj","tag_id":"ciz98xhn4000gt0yjeosrqgyd","_id":"ciz98xhpi002it0yjrq15d5fr"},{"post_id":"ciz98xhpa0029t0yjfudhnccl","tag_id":"ciz98xhn4000gt0yjeosrqgyd","_id":"ciz98xhpl002kt0yj62t2im3m"},{"post_id":"ciz98xhpb002bt0yjq04t64sg","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhpn002mt0yj2x8ds773"},{"post_id":"ciz98xhpd002dt0yjq3l6f0i4","tag_id":"ciz98xhoh001mt0yjbiwn0y1d","_id":"ciz98xhpp002ot0yjsakforv3"},{"post_id":"ciz98xhpe002ft0yjzjfwymnw","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhpr002qt0yjynmkcjku"},{"post_id":"ciz98xhph002ht0yj9t03b4ih","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhpt002st0yjghfh1s40"},{"post_id":"ciz98xhpj002jt0yjze77o5oe","tag_id":"ciz98xhn4000gt0yjeosrqgyd","_id":"ciz98xhpv002ut0yj5tgelchk"},{"post_id":"ciz98xhpl002lt0yje6i2iqo0","tag_id":"ciz98xhn4000gt0yjeosrqgyd","_id":"ciz98xhpw002xt0yj4qinidzg"},{"post_id":"ciz98xhpn002nt0yjsl9nlvb2","tag_id":"ciz98xhn4000gt0yjeosrqgyd","_id":"ciz98xhpx002zt0yjheqoaxdw"},{"post_id":"ciz98xhpp002pt0yj3vgvmfi6","tag_id":"ciz98xhn4000gt0yjeosrqgyd","_id":"ciz98xhpx0031t0yjr1kguvzc"},{"post_id":"ciz98xhps002rt0yjyrz1s5ke","tag_id":"ciz98xhn4000gt0yjeosrqgyd","_id":"ciz98xhpz0034t0yjxf79l1rz"},{"post_id":"ciz98xhpx0030t0yj25gibdmh","tag_id":"ciz98xhpw002wt0yjf55q9faj","_id":"ciz98xhq00036t0yj286sc61m"},{"post_id":"ciz98xhpt002tt0yjeu28wsvw","tag_id":"ciz98xhpw002wt0yjf55q9faj","_id":"ciz98xhq20039t0yj008exik4"},{"post_id":"ciz98xhpy0032t0yjh4wk7ssr","tag_id":"ciz98xhpw002wt0yjf55q9faj","_id":"ciz98xhq2003bt0yjp1abcp0u"},{"post_id":"ciz98xhpz0035t0yjeqnjxera","tag_id":"ciz98xhpw002wt0yjf55q9faj","_id":"ciz98xhq3003dt0yjkdy88tgb"},{"post_id":"ciz98xhpv002vt0yj7qpke21l","tag_id":"ciz98xhpw002wt0yjf55q9faj","_id":"ciz98xhq5003ft0yjyr4tdhpn"},{"post_id":"ciz98xhq00037t0yjsybshhj8","tag_id":"ciz98xhpw002wt0yjf55q9faj","_id":"ciz98xhq5003gt0yjfagfyxt3"},{"post_id":"ciz98xhq2003at0yji8jp5mjz","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhq5003ht0yj0h0b6bj2"},{"post_id":"ciz98xhpw002yt0yjo7sn7spw","tag_id":"ciz98xhpw002wt0yjf55q9faj","_id":"ciz98xhq5003it0yj4xeljtk1"},{"post_id":"ciz98xhq3003ct0yjy6tjen3d","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhq6003jt0yjs1m4forx"},{"post_id":"ciz98xhq3003et0yjslb0me1u","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhq6003kt0yjs758koqm"},{"post_id":"ciz98xhqf003lt0yjr18a8eso","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhqi003nt0yjan7zvbtb"},{"post_id":"ciz98xhqg003mt0yjvv3lug6c","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhqk003pt0yj5bh9vdus"},{"post_id":"ciz98xhqj003ot0yjiwnuwdh3","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhql003rt0yj8uu4wgj4"},{"post_id":"ciz98xhqk003qt0yjer6ukbep","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhqo003tt0yjkke1b5br"},{"post_id":"ciz98xhql003st0yja369brae","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhqp003vt0yj3padc2ye"},{"post_id":"ciz98xhqo003ut0yjnr84887g","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhqt003xt0yj045pgtc3"},{"post_id":"ciz98xhqq003wt0yj44o4djf0","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhqv003zt0yjf3m8hbbx"},{"post_id":"ciz98xhqt003yt0yjhodz5p6o","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhqx0041t0yjng8a8cdd"},{"post_id":"ciz98xhqw0040t0yjxxrv03pq","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhqy0043t0yj1h31mge4"},{"post_id":"ciz98xhqx0042t0yjn5jp2y1z","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhr00045t0yj92lsybtd"},{"post_id":"ciz98xhqy0044t0yjcn8cq4xw","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhr10047t0yjm0as6xl2"},{"post_id":"ciz98xhr00046t0yjcn83wc7s","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhrb0049t0yj5r5jdcws"},{"post_id":"ciz98xhr10048t0yjsfmhegdj","tag_id":"ciz98xhm80003t0yjbfbstqz5","_id":"ciz98xhrc004bt0yj47n98koh"},{"post_id":"ciz98xhrc004at0yjwxr0uxf8","tag_id":"ciz98xhmp0007t0yjpah8ddtr","_id":"ciz98xhrd004ct0yjm4yc3fma"}],"Tag":[{"name":"web","_id":"ciz98xhm80003t0yjbfbstqz5"},{"name":"javascript","_id":"ciz98xhmp0007t0yjpah8ddtr"},{"name":"nodejs","_id":"ciz98xhn4000gt0yjeosrqgyd"},{"name":"tools","_id":"ciz98xhno000vt0yjgjusu8th"},{"name":"linux","_id":"ciz98xhoh001mt0yjbiwn0y1d"},{"name":"python","_id":"ciz98xhpw002wt0yjf55q9faj"}]}}