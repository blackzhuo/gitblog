{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1},{"_id":"themes/concise/source/js/totop.js","path":"js/totop.js","modified":1},{"_id":"themes/concise/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1},{"_id":"themes/concise/source/js/jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":1},{"_id":"themes/concise/source/js/gallery.js","path":"js/gallery.js","modified":1},{"_id":"themes/concise/source/js/counter.js","path":"js/counter.js","modified":1},{"_id":"themes/concise/source/imgs/scrollup.png","path":"imgs/scrollup.png","modified":1},{"_id":"themes/concise/source/imgs/logo.png","path":"imgs/logo.png","modified":1},{"_id":"themes/concise/source/imgs/favicon.ico","path":"imgs/favicon.ico","modified":1},{"_id":"themes/concise/source/imgs/author.jpg","path":"imgs/author.jpg","modified":1},{"_id":"themes/concise/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1},{"_id":"themes/concise/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1},{"_id":"themes/concise/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1},{"_id":"themes/concise/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1},{"_id":"themes/concise/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1},{"_id":"themes/concise/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1},{"_id":"themes/concise/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1},{"_id":"themes/concise/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1},{"_id":"themes/concise/source/css/style.styl","path":"css/style.styl","modified":1},{"_id":"themes/concise/source/css/font/fontdiao.woff","path":"css/font/fontdiao.woff","modified":1},{"_id":"themes/concise/source/css/font/fontdiao.ttf","path":"css/font/fontdiao.ttf","modified":1},{"_id":"themes/concise/source/css/font/fontdiao.svg","path":"css/font/fontdiao.svg","modified":1},{"_id":"themes/concise/source/css/font/fontdiao.eot","path":"css/font/fontdiao.eot","modified":1},{"_id":"themes/concise/source/css/font/fontawesome-webfont.woff","path":"css/font/fontawesome-webfont.woff","modified":1},{"_id":"themes/concise/source/css/font/fontawesome-webfont.ttf","path":"css/font/fontawesome-webfont.ttf","modified":1},{"_id":"themes/concise/source/css/font/fontawesome-webfont.svg","path":"css/font/fontawesome-webfont.svg","modified":1},{"_id":"themes/concise/source/css/font/fontawesome-webfont.eot","path":"css/font/fontawesome-webfont.eot","modified":1},{"_id":"themes/concise/source/css/font/FontAwesome.otf","path":"css/font/FontAwesome.otf","modified":1}],"Cache":[{"_id":"source/_posts/BigPipe.md","shasum":"1dc6d8b7971c6602bbfa6ec797bdf9c38d5788db","modified":1481112281000},{"_id":"source/_posts/CNAME","shasum":"fb63616f7672bb3764ac3a59d29a3436827807f3","modified":1481112281000},{"_id":"source/_posts/DOM操作.md","shasum":"08712d99b18e7d80aee48fb39c9e8bc6ce9d197c","modified":1481112281000},{"_id":"source/CNAME","shasum":"fd02134de092b93822372d124a4dfa947e97069d","modified":1481112281000},{"_id":"source/_posts/Jcrop.md","shasum":"e169b3e0e8e0df5f4f87aa62204b30c559b503c1","modified":1481112281000},{"_id":"source/_posts/Dom元素尺寸相关.md","shasum":"fc17b4acd26441d40237c1aae84ef5e8ee16afc5","modified":1481112281000},{"_id":"source/_posts/NodeJs搭建Http服务器.md","shasum":"306a416cec0017002e7462724f35bf3fe57072ba","modified":1481112281000},{"_id":"source/_posts/NodeJs子进程.md","shasum":"47f4101fcd45d9bac74551fe22b57221a34578f5","modified":1481112281000},{"_id":"source/_posts/NodeJs模块之http.md","shasum":"f5b43dc9d5731a3a4d70c07cc2219ca60d7301dd","modified":1481112281000},{"_id":"source/_posts/Synergy实现多个主机之间共享键鼠.md","shasum":"86357a297be04965b1b86bc9fab8e1f4afa086e2","modified":1481112281000},{"_id":"source/_posts/RactiveJs应用.md","shasum":"112a4815c564adca823a258223150f16d467c28d","modified":1481112281000},{"_id":"source/_posts/avalon应用.md","shasum":"7c8cba0138c3f05fea4c765e779e5277f232ba52","modified":1481112281000},{"_id":"source/_posts/fetch.md","shasum":"b48c6296af727d0026b57001d98dcd3a1b8e623e","modified":1481112281000},{"_id":"source/_posts/html5文件上传.md","shasum":"a5191ac765b60872e1003d3e605fc962967f5a8f","modified":1481112281000},{"_id":"source/_posts/html页面中meta标签.md","shasum":"d931bfd240735339edb4bd1efa62a0bfe909a0bd","modified":1481112281000},{"_id":"source/_posts/javascript中判断变量类型.md","shasum":"16981f4549ecf662b360cc3212dd67eb37876db9","modified":1481112281000},{"_id":"source/_posts/javascript中变量作用域.md","shasum":"aa808b8c8f0d6cc07b89bbdcd45e7b802f4ffdcb","modified":1481112281000},{"_id":"source/_posts/javascript变量提升与函数声明.md","shasum":"fa1fa4e2127aad81e98417f39350884afb92af2c","modified":1481112281000},{"_id":"source/_posts/javascript实现浏览器本地存储.md","shasum":"821d6ee3a40a84425a7afdfe142cc2f67f7df41b","modified":1481112281000},{"_id":"source/_posts/javascript实现继承.md","shasum":"7b8f028679527a0ef0a19d4001891243521cb195","modified":1481112281000},{"_id":"source/_posts/javascript对象的深度拷贝.md","shasum":"2f64b3a9f77cbd6a88c3c99bce19f27617b3c44e","modified":1481112281000},{"_id":"source/_posts/javascript对象之navigator.md","shasum":"b8f8b7207b8b874a7cdd95e6edfbaec7038b9e05","modified":1481112281000},{"_id":"source/_posts/javascript数组.md","shasum":"924b186e085e9bc9ea5b9287565fbb7960973a6a","modified":1481112281000},{"_id":"source/_posts/javascript数组排序.md","shasum":"1d97d481323c8165e01c9f16d65d1e016aa5478f","modified":1481112281000},{"_id":"source/_posts/javascript数组的深度拷贝.md","shasum":"60bb303b4ba4e008ff89431c23d90ee6eddbac46","modified":1481112281000},{"_id":"source/_posts/javascript脚本执行对页面加载的影响.md","shasum":"85b9d19752eefced43d08e69abe0153ea840e3a6","modified":1481112281000},{"_id":"source/_posts/javascript跳出循环.md","shasum":"f75f52c2d6642b2d93739acb7635b97526b2327c","modified":1481112281000},{"_id":"source/_posts/javascript面向对象相关.md","shasum":"3986187ef35a3482b45c8e76fd11da5034a01a70","modified":1481112281000},{"_id":"source/_posts/linux常用命令.md","shasum":"9129a03c3e117803b4ef105f221608d5117b1bee","modified":1481112281000},{"_id":"source/_posts/markdown语法.md","shasum":"4a829387bea79cb3af49382bea8661f3b385edc0","modified":1481112281000},{"_id":"source/_posts/linux下创建服务.md","shasum":"f84b829fcdff0aab5b9b6f9fbf094c3f05427c98","modified":1486446710000},{"_id":"source/_posts/mongodb.md","shasum":"e9609b2caf08215cddf5e1b98b47ff9e774276be","modified":1481112281000},{"_id":"source/_posts/nginx配置https.md","shasum":"3e769c20f5181a634e8df7534c64c11601ad995f","modified":1481112281000},{"_id":"source/_posts/nodejs中fs模块.md","shasum":"52f5dc545551fdede2233624381b8e32d886c48d","modified":1481112281000},{"_id":"source/_posts/nodejs-mongodb.md","shasum":"119eefab1142e0a645cb37472d993230cbe77d01","modified":1481112281000},{"_id":"source/_posts/nodejs开发控制台工具.md","shasum":"32e883409463bc8652c6c101348310fcf0b98b42","modified":1481112281000},{"_id":"source/_posts/nodejs利用session做登录控制.md","shasum":"1c0c35a2395d2125b31c604b62caef73ed7207f9","modified":1481112281000},{"_id":"source/_posts/nodejs网页抓取.md","shasum":"30e7ca3b3ce2f0d68dc3d39b96a6e2b358dd5595","modified":1481112281000},{"_id":"source/_posts/nodejs读取指定路径下文件夹文件.md","shasum":"43a97efcc4c807727a1438fa9c947c35660b5b4e","modified":1481112281000},{"_id":"source/_posts/nodejs调用phantom.md","shasum":"9c00a9b0b32c6e832ab829c556c42287acfd42b1","modified":1481112281000},{"_id":"source/_posts/npm包开发.md","shasum":"0edb0c13ef27d544e4e6ee31ebf5e488cb20173b","modified":1481112281000},{"_id":"source/_posts/reactjs应用.md","shasum":"f06c096e05bad2f57e56247ffb7f431764ac3b5a","modified":1481112281000},{"_id":"source/_posts/smartcropJs.md","shasum":"22745e5d87fbff9caeedd34d417fb2ab47cc80e4","modified":1481112281000},{"_id":"source/_posts/touch开发性能优化.md","shasum":"bbcf5bfabc812c98017496cfeec8c89f5de5a28d","modified":1481112281000},{"_id":"source/_posts/velocity语法.md","shasum":"c5d32e33a90200d90e9559099020a488778facde","modified":1481112281000},{"_id":"source/_posts/shell基础.md","shasum":"d2df10ec0f2fd6bd60738eac440363df95674309","modified":1481112281000},{"_id":"source/_posts/从零开始Node-01.md","shasum":"96a8a8c4951130c2c03b1cc45cdd1f483da70019","modified":1481112281000},{"_id":"source/_posts/从零开始Node-03.md","shasum":"ac1d0aaeee70e8a3c54573f4e827b1003946ad9b","modified":1481112281000},{"_id":"source/_posts/从零开始Node-04.md","shasum":"1c40a4eb6b4995183eb47f4831b6623d5991b376","modified":1481112281000},{"_id":"source/_posts/从零开始Node-02.md","shasum":"14f5743f71e3674b4157fa112b5e93bd3f9be1b8","modified":1481112281000},{"_id":"source/_posts/从零开始Node-05.md","shasum":"6b3996adcaa6b3cd0f0e6e9618d9886c6ace4d36","modified":1481112281000},{"_id":"source/_posts/从零开始Python-01.md","shasum":"392d207ddc948a3232eabcec56bf55d21efe153e","modified":1481112281000},{"_id":"source/_posts/从零开始Python-02.md","shasum":"c7d14dcac1f0b6ed6eb4f92db871619a55ce3614","modified":1481112281000},{"_id":"source/_posts/从零开始Python-03.md","shasum":"52bd108b1c5392ef01a0cad2ad54a355bc336138","modified":1481112281000},{"_id":"source/_posts/从零开始Python-04.md","shasum":"d725ca323a050a6d9de919e896be4880659c607a","modified":1481112281000},{"_id":"source/_posts/从零开始Python-06.md","shasum":"35093573303c5e8281c0cb9c15c31e95d7b2e314","modified":1481112281000},{"_id":"source/_posts/从零开始Python-07.md","shasum":"0ae042590d8d7d06dc1405367401fd5bbf3283f3","modified":1481112281000},{"_id":"source/_posts/从零开始Python-05.md","shasum":"bc66fd4d05e518c66bd058aa2ed95d3db507495e","modified":1481112281000},{"_id":"source/_posts/使用nproxy实现本地代理.md","shasum":"47369de756b2f78fa5bb73abb4b4dd943b563673","modified":1481112281000},{"_id":"source/_posts/动态脚本.md","shasum":"05d2faa45c531124669593d8cb564b0534944c4f","modified":1481112281000},{"_id":"source/_posts/前端知识点集合.md","shasum":"4db421024595448ba7d45e83ffe1e9aa19661d6e","modified":1481112281000},{"_id":"source/_posts/动画.md","shasum":"e47783b3c4139b1122f46d04d1c30ac6703ba45d","modified":1481112281000},{"_id":"source/_posts/如何调试移动端网页.md","shasum":"f0058ffb042affea0d7246773367e361a22002f9","modified":1481112281000},{"_id":"source/_posts/延迟加载解决方案.md","shasum":"4a3fcd0e5892564953f031f478ee953f2f0f40ad","modified":1481112281000},{"_id":"source/_posts/异步javascript.md","shasum":"cef0a93d41fa80a8db80f056565d48db92d55f20","modified":1481112281000},{"_id":"source/_posts/浏览器扩展应用开发.md","shasum":"7a57000942006bc8341ea7b58f345bb0e1ae7a36","modified":1481112281000},{"_id":"source/_posts/爬虫.md","shasum":"f54d236ad844e12d7f0c57f85b4a38c023ae9503","modified":1481112281000},{"_id":"source/_posts/微信小程序开发.md","shasum":"f142a81a3764c904f0eea6a0a271885a129f3314","modified":1481112281000},{"_id":"source/_posts/移动端布局.md","shasum":"f54ffa91045a81cf694e4e2fcd35bf1d1d53f80d","modified":1481112281000},{"_id":"source/_posts/表单中按回车键自动提交.md","shasum":"ef44448ab94b737daf8f47175ffd70c2ae80842b","modified":1481112281000},{"_id":"source/_posts/页面脚本加载分析.md","shasum":"aeaeef80e10c04c846c9aa7e93b7c934bfa1e9bf","modified":1481112281000},{"_id":"source/about/index.md","shasum":"1bffd2c36e8c723965098ea3643938386de30b3e","modified":1481112281000},{"_id":"themes/concise/source/css/_base/utils.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481112281000},{"_id":"themes/concise/README_ZH.md","shasum":"9d7c96d33ca316996d54e766b34e2bb4636e3f51","modified":1481112281000},{"_id":"themes/concise/LICENSE","shasum":"9fc4002ee3d7d73a33d88f686bb41927f4a80424","modified":1481112281000},{"_id":"themes/concise/_config.yml","shasum":"b309ed9b8c5d0c68e7999c48b06fe6c388c7de75","modified":1481112281000},{"_id":"themes/concise/README.md","shasum":"b4e68d3f218eded85bae3220f688cd0f5b4ff3c5","modified":1481112281000},{"_id":"themes/concise/layout/_partial/after_footer.ejs","shasum":"dddb4f9b682a4df056175ea2c2ba1c5038eeba12","modified":1481112281000},{"_id":"themes/concise/languages/zh-CN.yml","shasum":"1b7d34e0fc88db3fd6daab75ac315efa59c3a7cd","modified":1481112281000},{"_id":"themes/concise/languages/default.yml","shasum":"5db1f550634d9ba11ea0a6388e866f95f01a93b2","modified":1481112281000},{"_id":"themes/concise/languages/zh-TW.yml","shasum":"1b7d34e0fc88db3fd6daab75ac315efa59c3a7cd","modified":1481112281000},{"_id":"themes/concise/layout/_partial/article.ejs","shasum":"82e7cc900dbdaca502b93a5cbeaf153d3dca0f07","modified":1481112281000},{"_id":"themes/concise/layout/_partial/footer.ejs","shasum":"3d66df9bd2f8d21117bae3d7b68d391c812eeaf2","modified":1481112281000},{"_id":"themes/concise/layout/_partial/article_2.ejs","shasum":"06445448b12c0475c21aa1ba645822f738916d20","modified":1481112281000},{"_id":"themes/concise/layout/_partial/archive.ejs","shasum":"29ff211b455d57a2067d9b0ff56abb3aabf88d35","modified":1481112281000},{"_id":"themes/concise/layout/_partial/google_analytics.ejs","shasum":"09585ef60b18844ae8810d30308d76278f194ba8","modified":1481112281000},{"_id":"themes/concise/layout/_partial/header.ejs","shasum":"4b27b54876d3e9da8c5e38723e5d2fef04292612","modified":1481112281000},{"_id":"themes/concise/layout/_partial/math-jax.ejs","shasum":"f59ee799c8804eb545dc65b683bbdaa515633a7a","modified":1481112281000},{"_id":"themes/concise/layout/_partial/head.ejs","shasum":"6811e892567841ff323bfeea650a8f333b42c3da","modified":1481112281000},{"_id":"themes/concise/layout/_partial/pagination.ejs","shasum":"1206b630a07444e8744365f14ddb26095c925ae1","modified":1481112281000},{"_id":"themes/concise/layout/_partial/post/article.ejs","shasum":"3f157de67a7d1e11a91ea70c0e6914b4f8dcb7fc","modified":1481112281000},{"_id":"themes/concise/layout/_partial/post/category.ejs","shasum":"be740939c5c2d4ffdbed9557b4e63a590058b476","modified":1481112281000},{"_id":"themes/concise/layout/_partial/post/baidushare.ejs","shasum":"940b2c1b23403b989dfaf0e979cbed19b212276f","modified":1481112281000},{"_id":"themes/concise/layout/_partial/post/gallery.ejs","shasum":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1481112281000},{"_id":"themes/concise/layout/_partial/post/comment.ejs","shasum":"6d09fdafe0bd60c0387f6e8ec6d6aef9f607ba0d","modified":1481112281000},{"_id":"themes/concise/layout/_partial/post/pagination.ejs","shasum":"3e9e6fd7e719bac399e706f28baf415f577ea363","modified":1481112281000},{"_id":"themes/concise/layout/_partial/post/tag.ejs","shasum":"095418df66a27a28cbab16d7cb0d16001b0e23f1","modified":1481112281000},{"_id":"themes/concise/layout/_partial/post/title.ejs","shasum":"d7fbc575d35ae68f9045a382c651450e4131f335","modified":1481112281000},{"_id":"themes/concise/layout/_partial/post/header.ejs","shasum":"3b2d653f5dfcd6f58a291a35eda240458dd69b1b","modified":1481112281000},{"_id":"themes/concise/layout/_partial/sidebar.ejs","shasum":"caf351797a18d03d8ee945ceb9f83785c50c09f9","modified":1481112281000},{"_id":"themes/concise/layout/_partial/totop.ejs","shasum":"337a3f9c4cc1968601698c993002e03a6892b7fc","modified":1481112281000},{"_id":"themes/concise/layout/_widget/category.ejs","shasum":"8a2b90dc29661371f060f710668929c3588e15e4","modified":1481112281000},{"_id":"themes/concise/layout/_widget/links.ejs","shasum":"023e6a9fd7f34eb0f35e45093abd740a4f6f43a6","modified":1481112281000},{"_id":"themes/concise/layout/_widget/recent_comments.ejs","shasum":"2f4fae2bc1ca491b2a7e48e803065a66cee21f40","modified":1481112281000},{"_id":"themes/concise/layout/_widget/search.ejs","shasum":"ac9099d234ace9b3eadd5322239f8c149cd10021","modified":1481112281000},{"_id":"themes/concise/layout/_widget/weibo.ejs","shasum":"a81938299e5ed23fd02c552bdc9d40f29948dfd2","modified":1481112281000},{"_id":"themes/concise/layout/_widget/tagcloud.ejs","shasum":"a236c86481196ae43206e056ba78cec14f1ac014","modified":1481112281000},{"_id":"themes/concise/layout/archive.ejs","shasum":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1481112281000},{"_id":"themes/concise/layout/_widget/tag.ejs","shasum":"1914db78bea49c333067d79fe7ad9567d2b08d00","modified":1481112281000},{"_id":"themes/concise/layout/index.ejs","shasum":"b024d199cd0f280694244fea1eaa99813f1ada0a","modified":1481112281000},{"_id":"themes/concise/layout/layout.ejs","shasum":"5725f27f161f15cc44e4a6c55251eeebb5e123a7","modified":1481112281000},{"_id":"themes/concise/layout/page.ejs","shasum":"fd4ee754cec9e39a33c00f90a22ccf6639db1078","modified":1481112281000},{"_id":"themes/concise/layout/category.ejs","shasum":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1481112281000},{"_id":"themes/concise/layout/tag.ejs","shasum":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1481112281000},{"_id":"themes/concise/source/css/_base/layout.styl","shasum":"98e124e1582f0985b5b995da78850e15111d7190","modified":1481112281000},{"_id":"themes/concise/source/css/_base/variable.styl","shasum":"98fc63ca68915b690d410a2e82bc42a1774b47c8","modified":1481112281000},{"_id":"themes/concise/layout/post.ejs","shasum":"fd4ee754cec9e39a33c00f90a22ccf6639db1078","modified":1481112281000},{"_id":"themes/concise/source/css/_partial/archive.styl","shasum":"67fe4aae8e2f4b37395450c620114ed7aedbc007","modified":1481112281000},{"_id":"themes/concise/source/css/_partial/comment.styl","shasum":"7217deecf31cd5b498f1d6938ec775cf390925e0","modified":1481112281000},{"_id":"themes/concise/source/css/_partial/footer.styl","shasum":"94aeb2848f9e106b2042c13f2e819359d7116bfe","modified":1481112281000},{"_id":"themes/concise/source/css/_partial/article.styl","shasum":"f43a8d7003404b61b8139f821eff65576af4f451","modified":1481112281000},{"_id":"themes/concise/source/css/_partial/header.styl","shasum":"446c3c617004b4242fff244dd5cb705eb7352215","modified":1481112281000},{"_id":"themes/concise/source/css/_partial/recent_comment.styl","shasum":"fd32c90f90f933e51394ad86e0a3ccde00102bc8","modified":1481112281000},{"_id":"themes/concise/source/css/_partial/index.styl","shasum":"df18a54f3bd44dc74bdf4c41c2b1014f3120b9b4","modified":1481112281000},{"_id":"themes/concise/source/css/_partial/sidebar.styl","shasum":"de8573f11d2769ea810d55eec69183bdf57831b0","modified":1481112281000},{"_id":"themes/concise/source/css/_partial/syntax.styl","shasum":"6dac3435a74faa483cb98e86847a715c57f01644","modified":1481112281000},{"_id":"themes/concise/source/css/font/fontawesome-webfont.eot","shasum":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1481112281000},{"_id":"themes/concise/source/css/font/fontawesome-webfont.woff","shasum":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1481112281000},{"_id":"themes/concise/source/css/font/fontdiao.eot","shasum":"b86d86b4d150d794de1b2f33a6b6119170bc2e84","modified":1481112281000},{"_id":"themes/concise/source/css/font/fontdiao.ttf","shasum":"ec74cab50808d3cf154deb898a901b2bf91e40f1","modified":1481112281000},{"_id":"themes/concise/source/css/style.styl","shasum":"03b2ff8632e0ae79b84f1d54e909409a51ad0b33","modified":1481112281000},{"_id":"themes/concise/source/fancybox/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1481112281000},{"_id":"themes/concise/source/fancybox/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1481112281000},{"_id":"themes/concise/source/css/font/fontdiao.woff","shasum":"454ef07ddeda09ea9801a2892893ab6e1d75e8b8","modified":1481112281000},{"_id":"themes/concise/source/fancybox/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1481112281000},{"_id":"themes/concise/source/fancybox/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1481112281000},{"_id":"themes/concise/source/fancybox/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1481112281000},{"_id":"themes/concise/source/fancybox/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1481112281000},{"_id":"themes/concise/source/fancybox/jquery.fancybox.css","shasum":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1481112281000},{"_id":"themes/concise/source/fancybox/jquery.fancybox.pack.js","shasum":"53360764b429c212f424399384417ccc233bb3be","modified":1481112281000},{"_id":"themes/concise/source/imgs/scrollup.png","shasum":"aadafe1118fa1820f565f30f217b9396361c48fe","modified":1481112281000},{"_id":"themes/concise/source/imgs/favicon.ico","shasum":"b2035b84842afea8c42a01f1cae384341b5b0b80","modified":1481112281000},{"_id":"themes/concise/source/imgs/logo.png","shasum":"431c34935ad6a1b9dc89e54bffe9a0bca894a936","modified":1481112281000},{"_id":"themes/concise/source/js/gallery.js","shasum":"d64473e9711d84267fccd1777f6b6b6fae63f34c","modified":1481112281000},{"_id":"themes/concise/source/js/counter.js","shasum":"8557a4674fa639f11fe78ca14f47089cad8d2df4","modified":1481112281000},{"_id":"themes/concise/source/js/jquery.imagesloaded.min.js","shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1481112281000},{"_id":"themes/concise/source/js/totop.js","shasum":"05cbb8cd660b0bd525102773c11b39feaa660164","modified":1481112281000},{"_id":"themes/concise/source/css/font/FontAwesome.otf","shasum":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1481112281000},{"_id":"themes/concise/source/css/font/fontawesome-webfont.ttf","shasum":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1481112281000},{"_id":"themes/concise/source/imgs/author.jpg","shasum":"804c678d6922ee1d91bef56d608d0425726acc48","modified":1481112281000},{"_id":"themes/concise/source/js/jquery-2.1.0.min.js","shasum":"98884258cbdb0d939fa2c5e74fc7ac9e56d8170f","modified":1481112281000},{"_id":"themes/concise/source/css/font/fontdiao.svg","shasum":"696bd584a358dc3fde8424a6d6459b605d15685c","modified":1481112281000},{"_id":"themes/concise/source/css/font/fontawesome-webfont.svg","shasum":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1481112281000},{"_id":"public/CNAME","modified":1486448836861,"shasum":"fd02134de092b93822372d124a4dfa947e97069d"},{"_id":"public/js/totop.js","modified":1486448836866,"shasum":"05cbb8cd660b0bd525102773c11b39feaa660164"},{"_id":"public/js/jquery.imagesloaded.min.js","modified":1486448836868,"shasum":"4109837b1f6477bacc6b095a863b1b95b1b3693f"},{"_id":"public/js/jquery-2.1.0.min.js","modified":1486448836871,"shasum":"98884258cbdb0d939fa2c5e74fc7ac9e56d8170f"},{"_id":"public/js/gallery.js","modified":1486448836874,"shasum":"d64473e9711d84267fccd1777f6b6b6fae63f34c"},{"_id":"public/js/counter.js","modified":1486448836877,"shasum":"8557a4674fa639f11fe78ca14f47089cad8d2df4"},{"_id":"public/imgs/scrollup.png","modified":1486448836881,"shasum":"aadafe1118fa1820f565f30f217b9396361c48fe"},{"_id":"public/imgs/logo.png","modified":1486448836883,"shasum":"431c34935ad6a1b9dc89e54bffe9a0bca894a936"},{"_id":"public/imgs/favicon.ico","modified":1486448836886,"shasum":"b2035b84842afea8c42a01f1cae384341b5b0b80"},{"_id":"public/imgs/author.jpg","modified":1486448836889,"shasum":"804c678d6922ee1d91bef56d608d0425726acc48"},{"_id":"public/fancybox/jquery.fancybox.pack.js","modified":1486448836894,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/fancybox/jquery.fancybox.css","modified":1486448836897,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/fancybox/fancybox_sprite@2x.png","modified":1486448836899,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/fancybox/fancybox_sprite.png","modified":1486448836901,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/fancybox/fancybox_overlay.png","modified":1486448836904,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/fancybox/fancybox_loading@2x.gif","modified":1486448836907,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/fancybox/fancybox_loading.gif","modified":1486448836910,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/fancybox/blank.gif","modified":1486448836913,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/css/style.css","modified":1486448837543,"shasum":"b1f04a794a6105048bad23ed0a8c6fabbdc74f59"},{"_id":"public/css/font/fontdiao.woff","modified":1486448837724,"shasum":"454ef07ddeda09ea9801a2892893ab6e1d75e8b8"},{"_id":"public/css/font/fontdiao.ttf","modified":1486448837727,"shasum":"ec74cab50808d3cf154deb898a901b2bf91e40f1"},{"_id":"public/css/font/fontdiao.svg","modified":1486448837729,"shasum":"696bd584a358dc3fde8424a6d6459b605d15685c"},{"_id":"public/css/font/fontdiao.eot","modified":1486448837732,"shasum":"b86d86b4d150d794de1b2f33a6b6119170bc2e84"},{"_id":"public/css/font/fontawesome-webfont.woff","modified":1486448837734,"shasum":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c"},{"_id":"public/css/font/fontawesome-webfont.ttf","modified":1486448837738,"shasum":"6225ccc4ec94d060f19efab97ca42d842845b949"},{"_id":"public/css/font/fontawesome-webfont.svg","modified":1486448837743,"shasum":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9"},{"_id":"public/css/font/fontawesome-webfont.eot","modified":1486448837748,"shasum":"0183979056f0b87616cd99d5c54a48f3b771eee6"},{"_id":"public/css/font/FontAwesome.otf","modified":1486448837750,"shasum":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe"},{"_id":"public/about/index.html","modified":1486448837809,"shasum":"367224ae65f1482bde57d2590febbb311b2fb7a5"},{"_id":"public/2017/02/07/linux下创建服务/index.html","modified":1486448837839,"shasum":"c6462a46f3441dec8aa91ad809fdaab68421f9a3"},{"_id":"public/2016/11/03/微信小程序开发/index.html","modified":1486448837885,"shasum":"76643175729b3103e028f489309c9f70be1c2c35"},{"_id":"public/2016/11/02/nodejs利用session做登录控制/index.html","modified":1486448837900,"shasum":"1f5350fbfc8ba0a783785da3f985f78976c7d92d"},{"_id":"public/2016/10/31/nodejs-mongodb/index.html","modified":1486448837921,"shasum":"f72fe544ec3e9e2748b40cdd85b00ab9a3f59d5c"},{"_id":"public/2016/10/31/mongodb/index.html","modified":1486448837972,"shasum":"bb699897fa83ef5d042d6385fec41bfe64017d04"},{"_id":"public/2016/08/31/fetch/index.html","modified":1486448837981,"shasum":"02da17b857a5206f172c73b5f0b506255a829d44"},{"_id":"public/2016/04/14/touch开发性能优化/index.html","modified":1486448837992,"shasum":"3a95cc59415835f2ff54bf8ec8be6f5676645fc3"},{"_id":"public/2016/04/14/reactjs应用/index.html","modified":1486448838018,"shasum":"4b73d2817a50491739c74be084ac7d13e045cf99"},{"_id":"public/2016/04/14/nodejs开发控制台工具/index.html","modified":1486448838040,"shasum":"e4f1aa6f87592fa846c38b1b4b9fd00e8a172868"},{"_id":"public/2016/04/14/npm包开发/index.html","modified":1486448838055,"shasum":"59c0c44b5be3502ead0379b7c380418efa48be40"},{"_id":"public/2016/04/14/移动端布局/index.html","modified":1486448838062,"shasum":"b8163e219e3f9d6dd26e1459b6b913df7f512128"},{"_id":"public/2015/11/25/动态脚本/index.html","modified":1486448838073,"shasum":"bde3d0c491758ba9734929bccb9abc8857b46c68"},{"_id":"public/2015/11/24/DOM操作/index.html","modified":1486448838099,"shasum":"8be31af08ce4bbf2aece3a256ff82c8f07f57a4b"},{"_id":"public/2015/11/23/shell基础/index.html","modified":1486448838116,"shasum":"468b3c3b0bf9b5dae23f20b27cae15f26099f2ca"},{"_id":"public/2015/11/22/使用nproxy实现本地代理/index.html","modified":1486448838128,"shasum":"0e7ec78a0f3fa65b9c8d5c18513f3abd9fa5c91d"},{"_id":"public/2015/11/21/javascript面向对象相关/index.html","modified":1486448838138,"shasum":"985f04840523047a11992cfcb0db8ab8ec93aefc"},{"_id":"public/2015/11/21/nginx配置https/index.html","modified":1486448838151,"shasum":"93f617c61068c6a0a4071db7d2c2af2e36b02f82"},{"_id":"public/2015/11/20/表单中按回车键自动提交/index.html","modified":1486448838167,"shasum":"0e46deccce31c4f4bd71255111dbf65bce5f7cb4"},{"_id":"public/2015/11/19/前端知识点集合/index.html","modified":1486448838185,"shasum":"5d032ed5e326a597bd0ee085625373a019d7b08d"},{"_id":"public/2015/11/18/异步javascript/index.html","modified":1486448838200,"shasum":"5bd8461fbbb2c4a4d0bc0523f15119f4ead199ec"},{"_id":"public/2015/11/17/动画/index.html","modified":1486448838212,"shasum":"f4ed883553077b15740d72b1fa829db993e9e2ab"},{"_id":"public/2015/11/16/Synergy实现多个主机之间共享键鼠/index.html","modified":1486448838223,"shasum":"b4e6f4da564303ec6d23ac02dffefb46e72d0ff4"},{"_id":"public/2015/11/15/Jcrop/index.html","modified":1486448838235,"shasum":"5cbae20c6346ea4245e95efa5f76e4de4f4cae77"},{"_id":"public/2015/11/14/smartcropJs/index.html","modified":1486448838253,"shasum":"67b64383a0aa98f13cb44db5b7b3d33352b0958a"},{"_id":"public/2015/11/13/RactiveJs应用/index.html","modified":1486448838272,"shasum":"06747f18ca33154bfebdb40f7678d295bd1c45a4"},{"_id":"public/2015/11/12/avalon应用/index.html","modified":1486448838290,"shasum":"906c65147327d76c55de8f156932d1a658031322"},{"_id":"public/2015/11/11/html页面中meta标签/index.html","modified":1486448838312,"shasum":"782fd1f277ae4ff9d98b5a5d4701aea7f681a11b"},{"_id":"public/2015/11/10/浏览器扩展应用开发/index.html","modified":1486448838328,"shasum":"2594782ca38857bcdec545589a3d351364e7fae2"},{"_id":"public/2015/11/09/BigPipe/index.html","modified":1486448838344,"shasum":"5678b6105970ea625f3bbfd9e5db4293a59e4d12"},{"_id":"public/2015/11/08/nodejs调用phantom/index.html","modified":1486448838361,"shasum":"a165a685617f2e1ae8ea5e3e5879b18166341071"},{"_id":"public/2015/11/07/nodejs读取指定路径下文件夹文件/index.html","modified":1486448838373,"shasum":"0a629df4f5dc0a69eae8db49ad18094b79b0e2f9"},{"_id":"public/2015/11/06/nodejs网页抓取/index.html","modified":1486448838393,"shasum":"4fdb31c8785edfbef09e01cd71bd8cb3f389fac5"},{"_id":"public/2015/11/05/nodejs中fs模块/index.html","modified":1486448838419,"shasum":"9ab20d03e95a1b077f77012550f59a37da7c11a4"},{"_id":"public/2015/11/04/javascript变量提升与函数声明/index.html","modified":1486448838434,"shasum":"d7dd6510b21bbb0f978a2691f37a4b9905d0ce35"},{"_id":"public/2015/11/03/javascript实现继承/index.html","modified":1486448838446,"shasum":"a5f3ca8077c1822f27f6e1120fe91bea5fa32284"},{"_id":"public/2015/11/02/爬虫/index.html","modified":1486448838457,"shasum":"ef21abb6f8affd5846ba31f49d2cd042906b1b34"},{"_id":"public/2015/11/01/NodeJs搭建Http服务器/index.html","modified":1486448838473,"shasum":"60482b3d67dabc30856ae20fbd7ca82737feba11"},{"_id":"public/2015/10/31/NodeJs模块之http/index.html","modified":1486448838493,"shasum":"b4c9be33f613eb56b8c4ffa73c1864d17c2c03fe"},{"_id":"public/2015/10/30/javascript数组排序/index.html","modified":1486448838508,"shasum":"17f5fc6c41572a4295b79854717aa53b23ba077e"},{"_id":"public/2015/10/29/NodeJs子进程/index.html","modified":1486448838529,"shasum":"c133092cd1e650b5cad486b1d8252cdc5a71f73d"},{"_id":"public/2015/10/28/linux常用命令/index.html","modified":1486448838538,"shasum":"7672c6b36669526fb466aa0a9169e68291c89e2d"},{"_id":"public/2015/10/27/javascript数组的深度拷贝/index.html","modified":1486448838547,"shasum":"3c51e492c94e195b234c84ee3f34899113b0e2e3"},{"_id":"public/2015/10/26/javascript对象的深度拷贝/index.html","modified":1486448838563,"shasum":"45055f2c2f029b33d0e7061ec974d074d5544c57"},{"_id":"public/2015/10/25/延迟加载解决方案/index.html","modified":1486448838576,"shasum":"b3c01df3f3e804e15b54617aa63b0b9b68c64d36"},{"_id":"public/2015/10/24/javascript脚本执行对页面加载的影响/index.html","modified":1486448838591,"shasum":"901bc68733594ee000d3c2daff55cb06c3d7d5d0"},{"_id":"public/2015/10/23/页面脚本加载分析/index.html","modified":1486448838608,"shasum":"de6bb61c61963e7a7cdcf640b2761d62beda29dc"},{"_id":"public/2015/10/22/javascript中判断变量类型/index.html","modified":1486448838627,"shasum":"a7e7e02706e7429e181f2ec49ba6c800ab27436d"},{"_id":"public/2015/10/21/javascript中变量作用域/index.html","modified":1486448838643,"shasum":"894fe68f6a356ba96030121b73f4d2fc0b7971e7"},{"_id":"public/2015/10/20/markdown语法/index.html","modified":1486448838660,"shasum":"0b885f00c3fb1e92f27228647a9a5d7746832395"},{"_id":"public/2015/10/19/velocity语法/index.html","modified":1486448838674,"shasum":"7e74394944f32d751216720ae50dd5f9933af4ba"},{"_id":"public/2015/10/18/javascript对象之navigator/index.html","modified":1486448838684,"shasum":"64457f26eece9175441d3d42c2eccfa21d838b6b"},{"_id":"public/2015/10/17/javascript跳出循环/index.html","modified":1486448838702,"shasum":"485585e99e081ee9dcf37f46340ceacfc7449b12"},{"_id":"public/2015/10/16/从零开始Node-05/index.html","modified":1486448838721,"shasum":"131258c11b1507ecb2108628f1b89996aa3d0e81"},{"_id":"public/2015/10/15/从零开始Node-04/index.html","modified":1486448838734,"shasum":"7954dec8e90f154679117f690b7cf603ae407e9f"},{"_id":"public/2015/10/14/从零开始Node-03/index.html","modified":1486448838762,"shasum":"3ea787b46e50f7aa7127fe8b10ced9e180c835f6"},{"_id":"public/2015/10/13/从零开始Node-02/index.html","modified":1486448838779,"shasum":"4ce219687a0359685b44ff20de59a0287bc48522"},{"_id":"public/2015/10/13/从零开始Node-01/index.html","modified":1486448838795,"shasum":"35bfcb4853dc5f41e72388997b56a1cd7e32e406"},{"_id":"public/2015/10/12/从零开始Python-07/index.html","modified":1486448838804,"shasum":"326e854c6556afa6ef5125471bf24bd65b08ac76"},{"_id":"public/2015/10/11/从零开始Python-06/index.html","modified":1486448838814,"shasum":"42567384b738d9f5a96100f38098403e53bd95d6"},{"_id":"public/2015/10/10/从零开始Python-05/index.html","modified":1486448838822,"shasum":"78120b7282c44a40b5bd1bc91b25270400f2b13c"},{"_id":"public/2015/10/09/从零开始Python-04/index.html","modified":1486448838842,"shasum":"3dfd52a90aba3c3a2b80af000e660e5417e588c9"},{"_id":"public/2015/10/08/从零开始Python-03/index.html","modified":1486448838863,"shasum":"4e4d8017e2912ce1e887890d83ae364e14d36e48"},{"_id":"public/2015/10/07/从零开始Python-02/index.html","modified":1486448838877,"shasum":"247f920b9e9f4fd79f13525011282c923fcce98d"},{"_id":"public/2015/10/06/从零开始Python-01/index.html","modified":1486448838883,"shasum":"b04f8e65f4b8ece4f0b975dac1980076f7442ed6"},{"_id":"public/2015/10/05/Dom元素尺寸相关/index.html","modified":1486448838898,"shasum":"9f0e5a7b6e89e51d8c425014b9639bacf58c7580"},{"_id":"public/2015/10/04/html5文件上传/index.html","modified":1486448838914,"shasum":"c1934f460dbee19a9b25763629bd4e943538347b"},{"_id":"public/2015/10/03/javascript数组/index.html","modified":1486448838929,"shasum":"04082b3d5add4e5d99f70d456238d951cc3ca959"},{"_id":"public/2015/10/02/javascript实现浏览器本地存储/index.html","modified":1486448838938,"shasum":"88047e355665227915b7a58d7f2ea936732d036e"},{"_id":"public/2015/10/01/如何调试移动端网页/index.html","modified":1486448838950,"shasum":"e7d3173b2e10b6d6fff04a893fdfd95bd484b4e2"},{"_id":"public/archives/index.html","modified":1486448838968,"shasum":"98082565f27c3da54b9ce92740ef5a99f72c0877"},{"_id":"public/archives/page/2/index.html","modified":1486448838978,"shasum":"b293b9e9938a2316557750ad5265debdbd05edff"},{"_id":"public/archives/page/3/index.html","modified":1486448838990,"shasum":"a9e5b13e19081be5a5f47b5ef4b6bfa226611bbd"},{"_id":"public/archives/page/4/index.html","modified":1486448839000,"shasum":"26a74eabe28b66bea51853415b073fc07a5bf6e3"},{"_id":"public/archives/page/5/index.html","modified":1486448839014,"shasum":"ed1c76386030e9e797ca388938158bbd00d80190"},{"_id":"public/archives/page/6/index.html","modified":1486448839023,"shasum":"9025d5a54539eeaacb08ea02a8db551bcdd30a5d"},{"_id":"public/archives/page/7/index.html","modified":1486448839035,"shasum":"2764b3d6bdce2cc949158153ee333c4d889f7564"},{"_id":"public/archives/2015/index.html","modified":1486448839042,"shasum":"f163bb3792e71a47eeb4db32ce37b6b815292108"},{"_id":"public/archives/2015/page/2/index.html","modified":1486448839051,"shasum":"13b98748d12c2e2ff315622ca4bd200bd92cc16d"},{"_id":"public/archives/2015/page/3/index.html","modified":1486448839064,"shasum":"3a14f886ce4c26956d94d7200b12b2720a62165a"},{"_id":"public/archives/2015/page/4/index.html","modified":1486448839075,"shasum":"df1de809569471d843867cb8e6c64525f4ed8332"},{"_id":"public/archives/2015/page/5/index.html","modified":1486448839085,"shasum":"7475f146180076b0fbb89ecfc426d2f8b0d504e4"},{"_id":"public/archives/2015/page/6/index.html","modified":1486448839095,"shasum":"71c4ac82146c1c1afd94dd7cbcc93706ecb475e1"},{"_id":"public/archives/2015/10/index.html","modified":1486448839115,"shasum":"2da0ad1c12fd3fb1211eda881b50342fd32076d7"},{"_id":"public/archives/2015/10/page/2/index.html","modified":1486448839127,"shasum":"e86d546f2b453fa09e02cacd38c72adce73b8984"},{"_id":"public/archives/2015/10/page/3/index.html","modified":1486448839141,"shasum":"2b3f581ad1e8b8044c69a10b9d946befc2711f9d"},{"_id":"public/archives/2015/10/page/4/index.html","modified":1486448839152,"shasum":"3d7c66e8b64cd9d41def51fe0805d93ac89e4345"},{"_id":"public/archives/2015/11/index.html","modified":1486448839166,"shasum":"8fead268cf973a63e5fa95df3b0a624080cf64f1"},{"_id":"public/archives/2015/11/page/2/index.html","modified":1486448839173,"shasum":"bf6340c030d354cf713538d6dee74a308311e552"},{"_id":"public/archives/2015/11/page/3/index.html","modified":1486448839182,"shasum":"03f3eade0d8f796472a39b2546a86fdf0d29b546"},{"_id":"public/archives/2016/index.html","modified":1486448839190,"shasum":"a88244e4b63266ec85bb21ed77a379f86207d1ac"},{"_id":"public/archives/2016/04/index.html","modified":1486448839201,"shasum":"ecc0b4f8cbea1ddb8f167cc16a70b07c59ae8acd"},{"_id":"public/archives/2016/08/index.html","modified":1486448839208,"shasum":"08c169df64ebba98a7594fa69679940c91305f2e"},{"_id":"public/archives/2016/10/index.html","modified":1486448839217,"shasum":"bc0769531eed47993d01cf5e68d9e9c4b601d221"},{"_id":"public/archives/2016/11/index.html","modified":1486448839225,"shasum":"36769cb79cb8d6009d21a6ec7a01099194a355aa"},{"_id":"public/archives/2017/index.html","modified":1486448839242,"shasum":"0672f96e8030f7ad6e36ead23539d473fcc4672a"},{"_id":"public/archives/2017/02/index.html","modified":1486448839257,"shasum":"2ac658da5ad8cbbb30651de99adb2fd1afbdeae9"},{"_id":"public/atom.xml","modified":1486448839263,"shasum":"861188e9875b5bff7b17e8e26ea5d332f232c792"},{"_id":"public/index.html","modified":1486448839303,"shasum":"1478a5bf56c30bb1fba5d71d4ac5643632c87d77"},{"_id":"public/page/2/index.html","modified":1486448839316,"shasum":"484034a8bb44fa4ae1ce468805f01d1121ef1d15"},{"_id":"public/page/3/index.html","modified":1486448839335,"shasum":"fede7da32945caab0131b241ab5d48906b87b606"},{"_id":"public/page/4/index.html","modified":1486448839348,"shasum":"e418e05f0c2e324a69bb4d3d75a1cf0e8145d9dc"},{"_id":"public/page/5/index.html","modified":1486448839368,"shasum":"4298761dfbf3be5e367d12381b89aee6d87dbf35"},{"_id":"public/page/6/index.html","modified":1486448839394,"shasum":"ab25fdc1cd4d344da7df41f77042ddaefdf8921d"},{"_id":"public/page/7/index.html","modified":1486448839412,"shasum":"a095180f7f77a842bfead45ecb85d20106b009de"},{"_id":"public/tags/javascript/index.html","modified":1486448839428,"shasum":"9ce55aab5eb3d4e485f1cabb0b0805f1e59afb9c"},{"_id":"public/tags/javascript/page/2/index.html","modified":1486448839442,"shasum":"156645434021b54d585489347515436590d3fc76"},{"_id":"public/tags/javascript/page/3/index.html","modified":1486448839450,"shasum":"507c4d23117d60c0f765582b15c3b0e88eac72be"},{"_id":"public/tags/web/index.html","modified":1486448839464,"shasum":"140e0ea4ba37300e587bc6ba652dfa9bf79b859b"},{"_id":"public/tags/web/page/2/index.html","modified":1486448839482,"shasum":"966e2251475601632512bb207d511ff5afee7139"},{"_id":"public/tags/python/index.html","modified":1486448839494,"shasum":"8e371fe7aa866cbebdc14b0aa8366bc094e0cc82"},{"_id":"public/tags/nodejs/index.html","modified":1486448839510,"shasum":"cf41856af3666d4fb7d89adbb29d78afdf410941"},{"_id":"public/tags/nodejs/page/2/index.html","modified":1486448839523,"shasum":"2beb6d976872be347e1f0484ce9a4a2f4f037aef"},{"_id":"public/tags/linux/index.html","modified":1486448839533,"shasum":"79c0b86f007ea5d455920fea3fa0958aa45e361a"},{"_id":"public/tags/tools/index.html","modified":1486448839543,"shasum":"6130dce267e14d6296e22b360a82f35da494c6dc"}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2015-10-01T09:41:32.000Z","_content":"#### 个人简介\n\n##### 经历\n>web前端工程师，2014年至今就职于去哪儿网，度假部门FE，先后参与开发c2b私人订制项目,b2b同业网，b2c tts交易系统，b2b2c系统，app首页(hy),touch首页,度假搜索频道,度假团购等。\n\n##### 技能\njavascript avalon nodejs reactjs css\n\n##### 联系方式\n* mobile: 18515981595\n* email: wuzhuo0425@163.com","source":"about/index.md","raw":"title: about\ndate: 2015-10-01 17:41:32\n---\n#### 个人简介\n\n##### 经历\n>web前端工程师，2014年至今就职于去哪儿网，度假部门FE，先后参与开发c2b私人订制项目,b2b同业网，b2c tts交易系统，b2b2c系统，app首页(hy),touch首页,度假搜索频道,度假团购等。\n\n##### 技能\njavascript avalon nodejs reactjs css\n\n##### 联系方式\n* mobile: 18515981595\n* email: wuzhuo0425@163.com","updated":"2016-12-07T12:04:41.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciyv599ee00004wyjh940wnat"}],"Post":[{"title":"页面脚本加载分析","date":"2015-10-23T07:03:01.000Z","toc":true,"_content":"#### 今天结合demo，说说页面加载过程中，脚本对加载速度的影响\n\n##### 脚本分为几种情况\n1. header内行内async脚本\n2. header内行内defer脚本\n3. header内行内五defer async脚本\n4. header内外部async脚本\n5. header内外部defer脚本\n6. header内外部无async defer脚本\n7. ajax请求，接口延迟返回\n8. body内脚本情况类似，多一些图片，其中包括延迟返回图片的地址\n<!--more-->\n\n##### 浏览器测试情况\n1. chrome firefox safri IE8 IE6\n\n##### demo暂时不贴上，先对结果进行说明\n1. header部分行内脚本，所有浏览器表现相同， async defer 是无效的\n2. defer在IE6-9都是支持的，defer的脚本延迟执行了\n3. header引用外部脚本，async defer有效\n4. chrome,safri:\n\t* 不添加async defer的立即执行了\n\t* 添加了async的脚本和页面解析时同步的，脚本先下载，在空闲的时候执行，但是执行顺序得不到保证\n5. defer的什么时候执行\n\t* defer 属性规定是否对脚本执行进行延迟，直到页面加载为止。但是在DOMContentLoaded之前，顺序是按照前后defer的先后执行，我们可以认为这种行为就是我们想要的\n6. firfox:\n\t* 脚本加在header中，表现可能出现怪异的情况，外部脚本引用不适合加在header中\n\t* 最后执行defer的\n7. 到了body内\n\t* 顺序执行脚本监听了图片onload，执行结束后向下执行\n\t* 此时动态添加了一个图片，代码中还有很多在ajax回调中加载图片的，都不会影响到window.loaded,但是会影响DOMContentLoaded，document ready\n\t* 同样body内嵌脚本async defer无效，顺序向下执行,IE行为在上面已经说过了\n8. 引用外部脚本\n\t* defer的一定在DOMContentLoaded之前执行\n\t* async的可能出现在DOMContentLoaded之后 例如safri,这个是根据浏览器执行情况\n\t* defer会阻止DOMContentLoaded加载完成\n\t* body中async加载的外部js 不会阻止DOMContentLoaded，可能在DOMContentLoaded之后执行，但是会阻塞loaded\n9. dom加载完了 DOMContentLoaded\n\t* IE6,7,8不支持，但是我们看到了document ready\n10. 高级浏览器，IE8及以上ajax的返回分布在各个时间点，所以ajax异步接口不会对页面加载产生任何阻塞,IE6,7例外，他们的ajax阻塞了页面加载\n11. window.loaded 在图片都加载完后触发\n12. 图片的加载时间会影响onload\n13. ajax是异步接口，不会阻塞页面加载，如果换成无延迟返回，会在onload之前返回结果，主要依赖处理时间\n\n##### 总结\n1. 常规表现（一些高级浏览器）\n2. herder\n\t* header中行内脚本执行顺序不受defer async影响，顺序执行，会阻塞DOMContentLoaded\n\t* header中行内脚本中ajax请求不会对页面加载带来任何阻塞\n\t* header中引用外部脚本，添加defer async后，浏览器表现情况不统一，async的可能先执行，所以引用外部脚本并不适合加在header中，也不适合添加defer asybc标示\n3. body\n\t* body中图片加载会阻塞window.loaded,不会阻塞DOMContentLoaded\n\t* body中行内脚本执行顺序不受defer async影响，顺序执行，阻塞DOMContentLoaded\n\t* body中行内脚本ajax请求不会阻塞页面加载\n\t* body中引用外部脚本，defer async表现正常，外部脚本应该加在body中，body结束标签上面\n4. ajax\n\t* 无论是header还是body中，行内脚本执行的ajax还是外部脚本执行的ajax，都对页面加载没有影响\n5. defer async总结\n\t* defer执行的脚本都会在DOMContentLoaded之前就执行，defer会阻塞页面加载\n\t* async脚本都会在loaded之情执行，它会阻塞window.loaded\n6. DOMContentLoaded,window.loaded以及document ready\n\t* DOMContentLoaded在window.loaded之前执行，阻塞DOMContentLoaded也就会阻塞window.loaded\n\t* document ready在DOMContentLoaded之前执行，说明document ready是监听DOMContentLoaded完成的\n7. IE\n\t* IE支持defer属性,不支持async属性，从IE9及以上支持onload,支持DOMContentLoaded\n\t* IE6，7支持行内脚本defer属性，{color:red} 从表现上来看IE6,7,8,9都支持行内脚本的defer{color}\n\t* 所以我们在ie6,7,8,9中观察到的现象是，行内的先执行async,再执行没加defer async标记的，defer的延迟执行了\n\t* 同时我们又发现IE6,7脚本中ajax影响了页面加载，影响document ready,IE8及以上版本不受影响\n\t* 到了IE8以上，表现和webkit内核浏览器基本相似了\n\n","source":"_posts/页面脚本加载分析.md","raw":"title: 页面脚本加载分析\ndate: 2015-10-23 15:03:01\ntags: javascript\ntoc: true\n---\n#### 今天结合demo，说说页面加载过程中，脚本对加载速度的影响\n\n##### 脚本分为几种情况\n1. header内行内async脚本\n2. header内行内defer脚本\n3. header内行内五defer async脚本\n4. header内外部async脚本\n5. header内外部defer脚本\n6. header内外部无async defer脚本\n7. ajax请求，接口延迟返回\n8. body内脚本情况类似，多一些图片，其中包括延迟返回图片的地址\n<!--more-->\n\n##### 浏览器测试情况\n1. chrome firefox safri IE8 IE6\n\n##### demo暂时不贴上，先对结果进行说明\n1. header部分行内脚本，所有浏览器表现相同， async defer 是无效的\n2. defer在IE6-9都是支持的，defer的脚本延迟执行了\n3. header引用外部脚本，async defer有效\n4. chrome,safri:\n\t* 不添加async defer的立即执行了\n\t* 添加了async的脚本和页面解析时同步的，脚本先下载，在空闲的时候执行，但是执行顺序得不到保证\n5. defer的什么时候执行\n\t* defer 属性规定是否对脚本执行进行延迟，直到页面加载为止。但是在DOMContentLoaded之前，顺序是按照前后defer的先后执行，我们可以认为这种行为就是我们想要的\n6. firfox:\n\t* 脚本加在header中，表现可能出现怪异的情况，外部脚本引用不适合加在header中\n\t* 最后执行defer的\n7. 到了body内\n\t* 顺序执行脚本监听了图片onload，执行结束后向下执行\n\t* 此时动态添加了一个图片，代码中还有很多在ajax回调中加载图片的，都不会影响到window.loaded,但是会影响DOMContentLoaded，document ready\n\t* 同样body内嵌脚本async defer无效，顺序向下执行,IE行为在上面已经说过了\n8. 引用外部脚本\n\t* defer的一定在DOMContentLoaded之前执行\n\t* async的可能出现在DOMContentLoaded之后 例如safri,这个是根据浏览器执行情况\n\t* defer会阻止DOMContentLoaded加载完成\n\t* body中async加载的外部js 不会阻止DOMContentLoaded，可能在DOMContentLoaded之后执行，但是会阻塞loaded\n9. dom加载完了 DOMContentLoaded\n\t* IE6,7,8不支持，但是我们看到了document ready\n10. 高级浏览器，IE8及以上ajax的返回分布在各个时间点，所以ajax异步接口不会对页面加载产生任何阻塞,IE6,7例外，他们的ajax阻塞了页面加载\n11. window.loaded 在图片都加载完后触发\n12. 图片的加载时间会影响onload\n13. ajax是异步接口，不会阻塞页面加载，如果换成无延迟返回，会在onload之前返回结果，主要依赖处理时间\n\n##### 总结\n1. 常规表现（一些高级浏览器）\n2. herder\n\t* header中行内脚本执行顺序不受defer async影响，顺序执行，会阻塞DOMContentLoaded\n\t* header中行内脚本中ajax请求不会对页面加载带来任何阻塞\n\t* header中引用外部脚本，添加defer async后，浏览器表现情况不统一，async的可能先执行，所以引用外部脚本并不适合加在header中，也不适合添加defer asybc标示\n3. body\n\t* body中图片加载会阻塞window.loaded,不会阻塞DOMContentLoaded\n\t* body中行内脚本执行顺序不受defer async影响，顺序执行，阻塞DOMContentLoaded\n\t* body中行内脚本ajax请求不会阻塞页面加载\n\t* body中引用外部脚本，defer async表现正常，外部脚本应该加在body中，body结束标签上面\n4. ajax\n\t* 无论是header还是body中，行内脚本执行的ajax还是外部脚本执行的ajax，都对页面加载没有影响\n5. defer async总结\n\t* defer执行的脚本都会在DOMContentLoaded之前就执行，defer会阻塞页面加载\n\t* async脚本都会在loaded之情执行，它会阻塞window.loaded\n6. DOMContentLoaded,window.loaded以及document ready\n\t* DOMContentLoaded在window.loaded之前执行，阻塞DOMContentLoaded也就会阻塞window.loaded\n\t* document ready在DOMContentLoaded之前执行，说明document ready是监听DOMContentLoaded完成的\n7. IE\n\t* IE支持defer属性,不支持async属性，从IE9及以上支持onload,支持DOMContentLoaded\n\t* IE6，7支持行内脚本defer属性，{color:red} 从表现上来看IE6,7,8,9都支持行内脚本的defer{color}\n\t* 所以我们在ie6,7,8,9中观察到的现象是，行内的先执行async,再执行没加defer async标记的，defer的延迟执行了\n\t* 同时我们又发现IE6,7脚本中ajax影响了页面加载，影响document ready,IE8及以上版本不受影响\n\t* 到了IE8以上，表现和webkit内核浏览器基本相似了\n\n","slug":"页面脚本加载分析","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599ek00014wyjtnvnif5e"},{"title":"表单中按回车键自动提交","date":"2015-11-20T07:03:01.000Z","toc":true,"_content":"#### 当form表单中只有一个`<input type=\"text\" name='name' />`时按回车键将会自动将表单提交。\n```javascript\n<form id='formSubmit' action='login.jsp' method='post'>\n<input type='text' name='name' />\n</form>\n```\n<!--more-->\n\n#### 不需要提交的解决方案\n* 添加一个\n```javascript\n<input type='text' style='display:none'/>\n```\n* 不显示输入框，然后回车之后也不会提交：\n```javascript\n<form id='formSubmit' action='login.jsp' method='post'>\n<input type='text' name='name' />\n<input style='display:none' />\n</form>\n```\n* 添加一个onkeydown事件，然后回车之后也不会提交：\n```javascript\n<form id='formSubmit' action='login.jsp' method='post'>\n<input type='text' name='name' onkeydown='if(event.keyCode==13) return false;'/>\n</form>\n```\n* 如果想添加回车事件可以在onkeydown事件中添加判断提交表单：\n```javascript\n<form id='formSubmit' action='login.jsp' method='post'>\n<input style='display:none' />\n<input type='text' name='name' onkeydown='if(event.keyCode==13){bindSubmit();}' />\n</form>\n```\n\n>我们有时候希望回车键敲在文本框（input element）里来提交表单（form），但有时候又不希望如此。比如搜索行为，希望输入完关键词之后直接按回车键立即提交表单，\n而有些复杂表单，可能要避免回车键误操作在未完成表单填写的时候就触发了表单提交。\n\n#### 要控制这些行为，不需要借助js，浏览器已经帮我们做了这些处理，这里总结几条规则：\n* 如果表单里有一个type=”submit”的按钮，回车键生效。\n* 如果表单里只有一个type=”text”的input，不管按钮是什么type，回车键生效。\n* 如果按钮不是用input，而是用button，并且没有加type，IE下默认为type=button，FX默认为type=submit。\n* 其他表单元素如textarea、select不影响，radio checkbox不影响触发规则，但本身在FX下会响应回车键，在IE下不响应。\n* type=”image”的input，效果等同于type=”submit”，不知道为什么会设计这样一种type，不推荐使用，应该用CSS添加背景图合适些。","source":"_posts/表单中按回车键自动提交.md","raw":"title: 表单中按回车键自动提交\ndate: 2015-11-20 15:03:01\ntags: web\ntoc: true\n---\n#### 当form表单中只有一个`<input type=\"text\" name='name' />`时按回车键将会自动将表单提交。\n```javascript\n<form id='formSubmit' action='login.jsp' method='post'>\n<input type='text' name='name' />\n</form>\n```\n<!--more-->\n\n#### 不需要提交的解决方案\n* 添加一个\n```javascript\n<input type='text' style='display:none'/>\n```\n* 不显示输入框，然后回车之后也不会提交：\n```javascript\n<form id='formSubmit' action='login.jsp' method='post'>\n<input type='text' name='name' />\n<input style='display:none' />\n</form>\n```\n* 添加一个onkeydown事件，然后回车之后也不会提交：\n```javascript\n<form id='formSubmit' action='login.jsp' method='post'>\n<input type='text' name='name' onkeydown='if(event.keyCode==13) return false;'/>\n</form>\n```\n* 如果想添加回车事件可以在onkeydown事件中添加判断提交表单：\n```javascript\n<form id='formSubmit' action='login.jsp' method='post'>\n<input style='display:none' />\n<input type='text' name='name' onkeydown='if(event.keyCode==13){bindSubmit();}' />\n</form>\n```\n\n>我们有时候希望回车键敲在文本框（input element）里来提交表单（form），但有时候又不希望如此。比如搜索行为，希望输入完关键词之后直接按回车键立即提交表单，\n而有些复杂表单，可能要避免回车键误操作在未完成表单填写的时候就触发了表单提交。\n\n#### 要控制这些行为，不需要借助js，浏览器已经帮我们做了这些处理，这里总结几条规则：\n* 如果表单里有一个type=”submit”的按钮，回车键生效。\n* 如果表单里只有一个type=”text”的input，不管按钮是什么type，回车键生效。\n* 如果按钮不是用input，而是用button，并且没有加type，IE下默认为type=button，FX默认为type=submit。\n* 其他表单元素如textarea、select不影响，radio checkbox不影响触发规则，但本身在FX下会响应回车键，在IE下不响应。\n* type=”image”的input，效果等同于type=”submit”，不知道为什么会设计这样一种type，不推荐使用，应该用CSS添加背景图合适些。","slug":"表单中按回车键自动提交","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599ew00044wyjd2168344"},{"title":"移动端布局","date":"2016-04-14T02:39:45.000Z","toc":true,"_content":"1. 黏性布局 POSITION:STICKY（通过判断支持该属性的浏览器使用该布局） -- http://hao.jser.com/archive/7970/\n<!--more-->\n```javascript\n.sticky {\n    position: -webkit-sticky;\n    position: sticky;\n    top: 0;\n}\n.fixed {\n    position: fixed;\n    top: 0;\n}\n```\n2. Web移动端Fixed布局的解决方案  -- http://efe.baidu.com/blog/mobile-fixed-layout/\n\n","source":"_posts/移动端布局.md","raw":"title: 移动端布局\ndate: 2016-04-14 10:39:45\ntags: web\ntoc: true\n---\n1. 黏性布局 POSITION:STICKY（通过判断支持该属性的浏览器使用该布局） -- http://hao.jser.com/archive/7970/\n<!--more-->\n```javascript\n.sticky {\n    position: -webkit-sticky;\n    position: sticky;\n    top: 0;\n}\n.fixed {\n    position: fixed;\n    top: 0;\n}\n```\n2. Web移动端Fixed布局的解决方案  -- http://efe.baidu.com/blog/mobile-fixed-layout/\n\n","slug":"移动端布局","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599ez00074wyjwe0zwye0"},{"title":"爬虫","date":"2015-11-02T07:03:01.000Z","toc":true,"_content":"#### phantomjs\n```java\nvar webPage = require('webpage').create();\nvar fs = require('fs');\n\nvar url = 'www.test.com';\nvar downloadPath = '/home/test/';\nvar dom = '#js_test';\n\nwebPage.open(url, function(status) {\n\tif (status !== 'success') {\n\t\tconsole.log('err');\n\t\tphantom.exit(1);\n\t\treturn;\n\t}\n\n\tvar html = webPage.evaluate(function() {\n\t\treturn document.querySelector(dom).innerHTML;\n\t});\n\tvar dateStr = (new Date()).getTime();\n\tfs.write(downloadPath + dateStr + '.html', html,\n\t\t\t'w');\n\tconsole.log('success');\n\tphantom.exit(1);\n});\n```\n<!--more-->\n\n#### nodejs\n```java\nvar http = require('http');\nvar fs = require('fs');\n\nvar url = 'www.test.com';\nvar downloadPath = '/home/test/';\nvar dom = '#js_test';\n\nvar options = {\n\tmethod:'POST',\n\thostname:url,\n\tport:80,\n\tpath:'/',\n\theader:{} //路由发出req中可取到cookie user-agent信息\n};\nvar req = http.request(options,function(res){\n\tres.setEncoding('utf8');\n    res.on('data',function(chunk){\n       console.log('data:' + chunk);\n    });\n    res.on('end',function(chunk){\n\t\tvar html = chunk;\n\t\tvar dateStr = (new Date()).getTime();\n\t\tfs.write(downloadPath + dateStr + '.html', html,\n\t\t\t\t'w');\n\t\tconsole.log('success');\n    \tres.end();\n    });\n});\nreq.on('error',function(e){\n   console.log('err:'+e.message);\n});\nreq.end();\n```\n#### python\n```java\n#coding=utf-8\nimport urllib\nimport re\n\nurl = \"http://www.test.com\"\n\ndef getResources(url):\n\tsource = urllib.urlopen(url)\n    html = source.read()\n\n    reg = r'src=\"(.+?\\.jpg)\"'\n    imgreg = re.compile(reg)\n    imglist = re.findall(imgreg,html)\n    x = 0\n    for imgurl in imglist:\n        urllib.urlretrieve(imgurl,'%s.jpg' % x)\n        x+=1\n\nprint getResources(url)\n```","source":"_posts/爬虫.md","raw":"title: 爬虫\ndate: 2015-11-02 15:03:01\ntags: web\ntoc: true\n---\n#### phantomjs\n```java\nvar webPage = require('webpage').create();\nvar fs = require('fs');\n\nvar url = 'www.test.com';\nvar downloadPath = '/home/test/';\nvar dom = '#js_test';\n\nwebPage.open(url, function(status) {\n\tif (status !== 'success') {\n\t\tconsole.log('err');\n\t\tphantom.exit(1);\n\t\treturn;\n\t}\n\n\tvar html = webPage.evaluate(function() {\n\t\treturn document.querySelector(dom).innerHTML;\n\t});\n\tvar dateStr = (new Date()).getTime();\n\tfs.write(downloadPath + dateStr + '.html', html,\n\t\t\t'w');\n\tconsole.log('success');\n\tphantom.exit(1);\n});\n```\n<!--more-->\n\n#### nodejs\n```java\nvar http = require('http');\nvar fs = require('fs');\n\nvar url = 'www.test.com';\nvar downloadPath = '/home/test/';\nvar dom = '#js_test';\n\nvar options = {\n\tmethod:'POST',\n\thostname:url,\n\tport:80,\n\tpath:'/',\n\theader:{} //路由发出req中可取到cookie user-agent信息\n};\nvar req = http.request(options,function(res){\n\tres.setEncoding('utf8');\n    res.on('data',function(chunk){\n       console.log('data:' + chunk);\n    });\n    res.on('end',function(chunk){\n\t\tvar html = chunk;\n\t\tvar dateStr = (new Date()).getTime();\n\t\tfs.write(downloadPath + dateStr + '.html', html,\n\t\t\t\t'w');\n\t\tconsole.log('success');\n    \tres.end();\n    });\n});\nreq.on('error',function(e){\n   console.log('err:'+e.message);\n});\nreq.end();\n```\n#### python\n```java\n#coding=utf-8\nimport urllib\nimport re\n\nurl = \"http://www.test.com\"\n\ndef getResources(url):\n\tsource = urllib.urlopen(url)\n    html = source.read()\n\n    reg = r'src=\"(.+?\\.jpg)\"'\n    imgreg = re.compile(reg)\n    imglist = re.findall(imgreg,html)\n    x = 0\n    for imgurl in imglist:\n        urllib.urlretrieve(imgurl,'%s.jpg' % x)\n        x+=1\n\nprint getResources(url)\n```","slug":"爬虫","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599f100094wyjk8b8cuaj"},{"title":"浏览器扩展应用开发","date":"2015-11-10T07:03:01.000Z","toc":true,"_content":"#### 简介\n>chrome应用商店里面存放着大量的浏览器应用，这些扩展应用不同于浏览器插件，它们必须依赖浏览器而运行。浏览器应用的本质就是web页面，浏览器支持的API我们都可以使用\n<!--more-->\n\n#### 准备\n>* 开发浏览器扩招应用不需要我们学习额外的技能，只需要我们日常开发中使用的html,js,css知识足矣。\n* 项目中包含的文件\n\t1. manifest\n\t2. 一个或多个html文件\n\t3. javascript文件（可选）\n\t4. css文件（可选）\n\t5. 其他文件，例如图片（可选）\n* 这些文件放在同一个根目录下，发布应用时，这个目录全部打包到一个应用名是.crx的压缩文件中。\n[https://chrome.google.com/webstore/developer/dashboard]上传应用的时候，可以自动生成.crx文件\n或者使用浏览器的 更多工具》扩展程序》打包扩展程序 功能，生成.crx文件。\n\n#### manifest.json\n```javascript\n{\n\t\"name\": \"My Extension\",\n\t\"version\": \"2.1\",\n\t\"description\": \"Gets information from Google.\",\n\t\"icons\": { \"128\": \"icon_128.png\" },\n\t\"background_page\": \"bg.html\",\n\t\"permissions\": [\"http://*.google.com/\", \"https://*.google.com/\"],\n\t\"browser_action\": {\n\t\t\"default_title\": \"\",\n\t\t\"default_icon\": \"icon_19.png\",\n\t\t\"default_popup\": \"popup.html\"\n\t}\n}\n```\nmanifest.json文件中主要内容都在这里，不难理解\n\n#### 基本架构\n1. 运行app的主页面，可以使用chrome.tabs.create()或者window.open()来显示内部的HTML文件。也可以直接使用html文件。\n2. Content scripts，如果一个页面要与web页面交互，需要使用一个content scripts，content script脚本是指能够在浏览器已经加载的页面内部运行的javascript脚本。可以将content script看作是网页的一部分，而不是它所在的应用的一部分。\n```javascript\n{\n  \"name\": \"My extension\",\n  ...\n  \"content_scripts\": [\n    {\n      \"matches\": [\"http://www.google.com/*\"],\n      \"css\": [\"mystyles.css\"],\n      \"js\": [\"jquery.js\", \"myscript.js\"]\n    }\n  ],\n  ...\n}\n或者\n{\n  \"name\": \"My extension\",\n  ...\n  \"permissions\": [\n    \"tabs\", \"http://www.google.com/*\"\n  ],\n  ...\n}\n\n直接注入\n/* background.html */\nchrome.browserAction.onClicked.addListener(function(tab) {\n  chrome.tabs.executeScript(null,\n                           {code:\"document.body.bgColor='red'\"});\n});\n\n/* manifest.json */\n\"permissions\": [\n  \"tabs\", \"http://*/*\"\n],\n\n注入文件\nchrome.tabs.executeScript(null, {file: \"content_script.js\"});\n```\n3. 通信 扩展和web页面之间可以通信，使用 getViews()和getBackgroundPage() 可以获得页面的引用，就能操作页面方法，操作页面dom\n4. 数据保存，如果是在非隐身模式下，可以使用localStorage，检查窗口是否在隐身模式下，检查Tab或Window对象的incognito属性。\n\n#### 跨域\n```javascript\n/* manifest.json */\n\"permissions\": [\n\t\"http://api.test.com/\"\n]\n```","source":"_posts/浏览器扩展应用开发.md","raw":"title: 浏览器扩展应用开发\ndate: 2015-11-10 15:03:01\ntags: web\ntoc: true\n---\n#### 简介\n>chrome应用商店里面存放着大量的浏览器应用，这些扩展应用不同于浏览器插件，它们必须依赖浏览器而运行。浏览器应用的本质就是web页面，浏览器支持的API我们都可以使用\n<!--more-->\n\n#### 准备\n>* 开发浏览器扩招应用不需要我们学习额外的技能，只需要我们日常开发中使用的html,js,css知识足矣。\n* 项目中包含的文件\n\t1. manifest\n\t2. 一个或多个html文件\n\t3. javascript文件（可选）\n\t4. css文件（可选）\n\t5. 其他文件，例如图片（可选）\n* 这些文件放在同一个根目录下，发布应用时，这个目录全部打包到一个应用名是.crx的压缩文件中。\n[https://chrome.google.com/webstore/developer/dashboard]上传应用的时候，可以自动生成.crx文件\n或者使用浏览器的 更多工具》扩展程序》打包扩展程序 功能，生成.crx文件。\n\n#### manifest.json\n```javascript\n{\n\t\"name\": \"My Extension\",\n\t\"version\": \"2.1\",\n\t\"description\": \"Gets information from Google.\",\n\t\"icons\": { \"128\": \"icon_128.png\" },\n\t\"background_page\": \"bg.html\",\n\t\"permissions\": [\"http://*.google.com/\", \"https://*.google.com/\"],\n\t\"browser_action\": {\n\t\t\"default_title\": \"\",\n\t\t\"default_icon\": \"icon_19.png\",\n\t\t\"default_popup\": \"popup.html\"\n\t}\n}\n```\nmanifest.json文件中主要内容都在这里，不难理解\n\n#### 基本架构\n1. 运行app的主页面，可以使用chrome.tabs.create()或者window.open()来显示内部的HTML文件。也可以直接使用html文件。\n2. Content scripts，如果一个页面要与web页面交互，需要使用一个content scripts，content script脚本是指能够在浏览器已经加载的页面内部运行的javascript脚本。可以将content script看作是网页的一部分，而不是它所在的应用的一部分。\n```javascript\n{\n  \"name\": \"My extension\",\n  ...\n  \"content_scripts\": [\n    {\n      \"matches\": [\"http://www.google.com/*\"],\n      \"css\": [\"mystyles.css\"],\n      \"js\": [\"jquery.js\", \"myscript.js\"]\n    }\n  ],\n  ...\n}\n或者\n{\n  \"name\": \"My extension\",\n  ...\n  \"permissions\": [\n    \"tabs\", \"http://www.google.com/*\"\n  ],\n  ...\n}\n\n直接注入\n/* background.html */\nchrome.browserAction.onClicked.addListener(function(tab) {\n  chrome.tabs.executeScript(null,\n                           {code:\"document.body.bgColor='red'\"});\n});\n\n/* manifest.json */\n\"permissions\": [\n  \"tabs\", \"http://*/*\"\n],\n\n注入文件\nchrome.tabs.executeScript(null, {file: \"content_script.js\"});\n```\n3. 通信 扩展和web页面之间可以通信，使用 getViews()和getBackgroundPage() 可以获得页面的引用，就能操作页面方法，操作页面dom\n4. 数据保存，如果是在非隐身模式下，可以使用localStorage，检查窗口是否在隐身模式下，检查Tab或Window对象的incognito属性。\n\n#### 跨域\n```javascript\n/* manifest.json */\n\"permissions\": [\n\t\"http://api.test.com/\"\n]\n```","slug":"浏览器扩展应用开发","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599f3000b4wyjhcubnu4n"},{"title":"微信小程序开发","date":"2016-11-03T11:17:42.000Z","toc":true,"_content":"##### 准备\n* 开发环境\n    * 下载开发工具 (https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html)\n    * 按照网上教程破解 (https://github.com/gavinkwoe/weapp-ide-crack)\n    * 或者直接下载破解好的包\n* 学习资料\n    * https://mp.weixin.qq.com/debug/wxadoc/dev/\n\n<!--more-->\n\n##### 开始\n* 打开微信web开发者工具\n* AppID选择 无AppID 或者 随便写一个(破解后)\n* 项目名称随便写\n* 开发目录选择一个空的文件夹\n\n##### 项目目录\n* 文件\n    * app.js 必须 项目的主文件 小程序的逻辑\n    * app.json 必须 小程序的公共设置\n    * app.wxss 非必须 存放小程序的公共样式\n    * 各个文件编写规范以及配置的意义资料中讲的很详细,就不重新描述了。\n* 开发\n>这个小应用中调用了一些wx的组件以及API,实现了一个列表的下拉刷新，上拉加载，每一项的左划菜单(删除，收藏等),开发时间有限，实现的比较粗糙，主要是为了把小程序开发这一套走一遍，知道小程序想干什么，能干什么，怎么干。下面只贴了部分代码。\n\n```javascript\n// app.js\nApp({\n  onLaunch: function () {\n    console.log('App Launch')\n  },\n  onShow: function () {\n    console.log('App Show')\n  },\n  onHide: function () {\n    console.log('App Hide')\n  },\n  globalData: {\n    userInfo: false,\n    nightMode: false\n  }\n})\n```\n\n```javascript\n// app.json\n{\n  \"pages\": [\n    \"page/component/index/index\",\n    \"page/component/pic/pic\",\n    \"page/component/fav/fav\",\n    \"page/component/about/about\"\n  ],\n  \"window\": {\n    \"navigationBarTextStyle\": \"white\",\n    \"navigationBarTitleText\": \"Jokes\",\n    \"navigationBarBackgroundColor\": \"#353336\",\n    \"backgroundColor\": \"#353336\"\n  },\n  \"tabBar\": {\n    \"color\": \"#000000\",\n    \"selectedColor\": \"#ffffff\",\n    \"borderStyle\": \"black\",\n    \"backgroundColor\": \"#413f40\",\n    \"list\": [{\n      \"pagePath\": \"page/component/index/index\",\n      \"iconPath\": \"image/icon_jokes_default.png\",\n      \"selectedIconPath\": \"image/icon_jokes_active.png\",\n      \"text\": \"Jokes\"\n    }, {\n      \"pagePath\": \"page/component/pic/pic\",\n      \"iconPath\": \"image/icon_pic_default.png\",\n      \"selectedIconPath\": \"image/icon_pic_active.png\",\n      \"text\": \"Jokes\"\n    }, {\n      \"pagePath\": \"page/component/fav/fav\",\n      \"iconPath\": \"image/icon_fav_default.png\",\n      \"selectedIconPath\": \"image/icon_fav_active.png\",\n      \"text\": \"fav\"\n    }, {\n      \"pagePath\": \"page/component/about/about\",\n      \"iconPath\": \"image/icon_settings_default.png\",\n      \"selectedIconPath\": \"image/icon_settings_active.png\",\n      \"text\": \"Settings\"\n    }]\n  },\n  \"networkTimeout\": {\n    \"request\": 10000,\n    \"connectSocket\": 10000,\n    \"uploadFile\": 10000,\n    \"downloadFile\": 10000\n  },\n  \"debug\": true\n}\n```\n\n```javascript\n// app.wxss\npage {\n  background-color: #fbf9fe;\n  height: 100%;\n}\n```\n\n```javascript\n// page/component/index/index.js\nvar jodeData,startX,startY,endX,endY,moveStart,\n    topAdImgs = [\n        '../../../image/ad/1.jpg',\n        '../../../image/ad/2.jpg',\n        '../../../image/ad/3.jpg',\n        '../../../image/ad/4.jpg',\n        '../../../image/ad/5.jpg'\n    ];\n\nPage({\n  data: {\n    list: [],\n    itemToView: '',\n    scrollTop: 0,\n    currentPage: 1,\n    bottomHidden: 'none',\n    modalHidden: true,\n    modalText: '',\n    topImages:topAdImgs,\n  },\n  colorMap: ['#86a3c1','#86d1cc','#bdd4e4','#debf88','#f9af02'],\n  parse: function(html) {\n    html = html.replace(/(<p>)|(<\\/p>)|(\\t)|(&nbsp;)/gm, \"\");\n    return html;\n  },\n  prefixData: function(data){\n    var self = this;\n    var favJokes = wx.getStorageSync('favJokes') || [];\n    data.forEach(function(item,index){\n      item.ct = item.ct.substr(0,19);\n      if(item.type === 1){\n        item.text = self.parse(item.text);  \n      }\n      item.background = self.colorMap[index%5];\n      item.right = '0%';\n      item.hidden = 'block';\n      item.hasFav = 'none';\n      favJokes.forEach(function(fitem,findex){\n        if(fitem.id === item.id){\n          item.hasFav = 'block';\n        }\n      });\n    });\n    return data;\n  },\n  onLoad: function(options) {\n    var self = this;\n    wx.request({\n      url: 'https://123.test.com/joke_text?page=' + self.data.currentPage,\n      data: {},\n      header: {\n        'Content-Type': 'application/json'\n      },\n      success: function(res) {\n        var data = res.data;\n        data = self.prefixData(data);\n        self.setData({\n          bottomHidden: 'none'\n        });\n        if(self.data.currentPage === 1){\n          self.setData({\n            list: data\n          });\n          self.toPos(self.data.currentPage);  \n        }else{\n          data = self.data.list.concat(data);\n          self.setData({\n            list: data\n          });\n        }\n      },\n      error: function(){\n        self.setData({\n          bottomHidden: 'none'\n        });\n      }\n    });\n  },\n  toPos: function(page){\n    var self = this;\n    setTimeout(function(){\n      self.setData({\n        itemToView: 'item' + (page-1) * 20\n      });\n    },1000);\n  },\n  reDealData: function(){\n    var allJodes = this.data.list;\n    var favJokes = wx.getStorageSync('favJokes') || [];\n    allJodes.forEach(function(item,index){\n      item.hasFav = 'none';\n      favJokes.forEach(function(fitem,findex){\n        if(fitem.id === item.id){\n          item.hasFav = 'block';\n        }\n      });\n    });\n    this.setData({\n      list: allJodes\n    });\n  },\n  onShow: function() {\n    this.reDealData();\n  },\n  topUpdate: function(event){\n    this.setData({\n      currentPage: 1,\n      itemToView: 'top'\n    });\n    this.onLoad();\n  },\n  bottomLoad: function(event){\n    var page = this.data.currentPage;\n    page = page + 1;\n    this.setData({\n      bottomHidden: 'block',\n      currentPage: page\n    });\n    this.onLoad();\n  },\n  itemScroll: function(event){\n  },\n  itemClick: function(event){\n    // wx.navigationTo({url:\"\"});\n  },\n  itemStart: function(event){\n    var touch = event.touches[0];\n    startX = touch.clientX;\n    startY = touch.clientY;\n    moveStart = true;\n  },\n  itemMove: function(event){\n    var self = this;\n    var dataIndex = event.currentTarget.dataset.idx;\n    jodeData = this.data.list;\n    if(moveStart){\n      var touch = event.touches[0];\n      endX = touch.clientX;\n      endY = touch.clientY;\n      if(Math.abs(startX - endX) >= Math.abs(startY - endY)){\n        if(endX - startX <= -5){\n          jodeData.forEach(function(item,index){\n            item.right = '0%';\n          });\n          jodeData[dataIndex].right = \"20%\";\n        }else{\n          jodeData.forEach(function(item,index){\n            item.right = '0%';\n          });\n        }\n        self.setData({\n          list: jodeData\n        });\n      }\n    }\n    moveStart = false;\n  },\n  modalChange:function(event){\n    this.setData({\n      modalHidden: true,\n      modalText: ''\n    })\n  },\n  tapFav:function(event){\n    var dataIndex = event.currentTarget.dataset.idx;\n    var allJodes = this.data.list;\n    var curJokes = allJodes[dataIndex];\n    curJokes.right = '0%';\n    var favJokes = wx.getStorageSync('favJokes') || [];\n    if(curJokes.hasFav !== 'block'){\n      curJokes.hasFav = 'block';\n      favJokes.unshift(curJokes);\n      wx.setStorageSync('favJokes', favJokes);\n      this.setData({\n        list: allJodes\n      });\n    }else{\n      this.setData({\n        list: allJodes,\n        modalHidden: false,\n        modalText: '添加过了'\n      });\n    }\n  },\n  tapDel:function(event){\n    var dataIndex = event.currentTarget.dataset.idx;\n    var allJodes = this.data.list;\n    var curJokes = allJodes[dataIndex];\n    curJokes.right = '0%';\n    curJokes.hidden = 'none';\n    this.setData({\n      list: allJodes\n    });\n  }\n})\n```\n\n```html\n// page/component/index/index.wxml\n<modal class=\"modal\" hidden=\"{{modalHidden}}\" \n    no-cancel bindconfirm=\"modalChange\">\n  <view> {{modalText}} </view>\n</modal>\n<view class=\"index\">\n    <view class=\"body\">\n    \t<swiper class=\"top-swiper\" indicator-dots=\"true\"\n\t\t  autoplay=\"true\" interval=\"5000\" duration=\"1000\">\n\t\t  <block wx:for=\"{{topImages}}\">\n\t\t    <swiper-item>\n\t\t      <image src=\"{{item}}\" class=\"slide-image\"/>\n\t\t    </swiper-item>\n\t\t  </block>\n\t\t</swiper>\n    \t<scroll-view class=\"scroll-view\" \n    \t    scroll-y=\"true\" bindscrolltoupper=\"topUpdate\"\n    \t    bindscrolltolower=\"bottomLoad\" bindscroll=\"itemScroll\" \n    \t    scroll-into-view=\"{{itemToView}}\" \n    \t    scroll-top=\"{{scrollTop}}\" \n    \t    upper-threshold=\"20\" \n    \t    lower-threshold=\"30\">\n\t    \t<view class=\"list-container\">\n\t    \t\t<view id=\"top\" class=\"pull-update\">\n\t    \t\t\t正在更新\n            <image style=\"width: 30rpx; height: 30rpx;margin-left:10rpx;\" \n\t\t            mode=\"scaleToFill\" src=\"../../../image/loading.gif\"></image>\n\t    \t\t</view>\n\t\t    \t<block wx:for=\"{{list}}\">\n\t\t        <view id=\"item{{index}}\" data-idx=\"{{index}}\" class=\"item\"\n\t\t            style=\"background:{{item.background}};right:{{item.right}};display:{{item.hidden}};\" \n\t\t            bindtap=\"itemClick\" bindtouchstart=\"itemStart\" bindtouchmove=\"itemMove\">\n\t\t        \t<view class=\"info-container\">\n\t\t\t          <view class=\"date\">\n\t\t\t          \t{{item.ct}}\n\t\t\t          </view>\n  \t\t\t        <block wx:if=\"{{item.type == 1}}\">\n  \t\t\t\t\t\t    <view class=\"content\">\n  \t\t\t          \t{{item.text}}\n  \t\t\t          </view>\n  \t\t\t\t\t    </block>\n  \t\t\t\t\t    <block wx:else>\n  \t\t\t\t\t  \t  <view class=\"content\">\n  \t\t\t\t          \t<image class=\"img-info\" mode=\"aspectFit\" \n  \t\t\t\t          \t    src=\"{{item.img}}\"></image>\n  \t\t\t\t          </view>\n  \t\t\t\t          <view class=\"title\">\n  \t\t\t\t          \t{{item.title}}\n  \t\t\t\t          </view>\n  \t\t\t\t\t    </block>\n  \t\t\t      </view>\n\t\t          <image class=\"fav-icon\" mode=\"scaleToFill\" \n\t\t            src=\"../../../image/fav.png\" style=\"display:{{item.hasFav}}\"></image>\n        \t    <view class=\"opt-item opt-fav\" catchtap=\"tapFav\" data-idx=\"{{index}}\">喜欢</view>\n        \t    <view class=\"opt-item opt-del\" catchtap=\"tapDel\" data-idx=\"{{index}}\">删除</view>\n\t\t        </view>\n\t\t\t    </block>\n\t\t\t    <view id=\"bottom\" class=\"pull-load\" style=\"display:{{bottomHidden}};\">\n\t    \t\t\t正在加载\n            <image style=\"width: 30rpx; height: 30rpx;margin-left:10rpx;\"\n\t    \t\t\t            mode=\"scaleToFill\" src=\"../../../image/loading.gif\"></image>\n\t    \t\t</view>\n\t\t\t  </view>\n\t    </scroll-view>\n    </view>\n</view>\n\n```\n\n```javascript\n// page/component/index/index.wxss\n@import '../../common/wxss/base.wxss';\n@import '../../common/wxss/common.wxss';\n```\n\n```javascript\n// page/common/wxss/base.wxss\n.index{\n    background-color: #FBF9FE;\n    font-family: -apple-system-font,Helvetica Neue,Helvetica,sans-serif;\n    flex: 1;\n    min-height: 100%;\n    font-size: 32rpx;\n}\n.body{\n    overflow: hidden;\n}\n```\n\n```javascript\n// page/common/wxss/common.wxss\n.top-swiper{\n    height: 300rpx;\n    width: 100%;\n}\n.slide-image{\n    height: 300rpx;\n    width: 100%;\n}\n.scroll-view{\n    height: 860rpx;\n}\n.pic-view{\n    height: 1160rpx;\n}\n.list-container{\n    margin: 40rpx 0;\n}\n.pull-update{\n    text-align: center;\n    height: 40rpx;\n    line-height: 40rpx;\n    margin-top: -40rpx;\n}\n.pull-load{\n    text-align: center;\n    height: 40rpx;\n    line-height: 40rpx;\n}\n.item{\n    position: relative;\n    display: block;\n    width: 100%;\n  text-align: left;\n  vertical-align: middle;\n  background-color: #fff;\n    border-radius: 3;\n    border: 0 none;\n    margin: 0;\n    min-height: 200rpx;\n    box-sizing: border-box;\n    transition: all .25s ease;\n    -webkit-transition: all .25s ease;\n}\n.opt-item{\n    position: absolute;\n    height: 100%;\n    width: 10%;\n    box-sizing: border-box;\n    padding-left: 20rpx;\n    min-height: 200rpx;\n    writing-mode: vertical-lr;\n    text-align: center;\n    vertical-align: middle;\n    display: inline-block;\n}\n.opt-fav{\n    color: #fff;\n    right: -10%;\n    background: #868484;\n}\n.opt-del{\n    color: #fff;\n    right: -20%;\n    background: #dc4545;\n}\n.fav-del{\n    color: #fff;\n    right: -10%;\n    background: #dc4545;\n}\n.info-container{\n    padding: 0 10rpx;\n}\n.date{\n    color: #fff;\n    text-align: left;\n    padding:18rpx 8rpx 8rpx 8rpx;\n}\n.title{\n    font-size: 28rpx;\n    color: #fff;\n    text-align: left;\n    padding:8rpx 8rpx 18rpx 8rpx;\n    color: #333;\n}\n.content{\n    font-size: 28rpx;\n    text-align: left;\n    padding:8rpx 8rpx 18rpx 8rpx;\n    color: #333;\n}\n.blank-icon{\n    margin: 0 auto;\n}\n.fav-icon{\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 60rpx;\n    height: 60rpx;\n}\n```\n\n##### 简单理解\n* 小程序开发起来难度适中，主要是对框架，API以及组建的了解，开发过程中简单的拼凑，加上自己逻辑的串联，就可以完成一个小应用\n* 对于前端开发来说，成本是非常低的，css，js语法一样，然后就是html，html就相当于我们使用一个新的模版引擎，更加强大的mustache\n* 更像是hybrid开发，我们有调起原生的功能的能力，而又不需要去注册一堆方法(和app约定的方法),例如相册，定位，罗盘，网络，系统信息等\n* 我们不用过多考虑路由的问题，兼容的问题\n* 网络请求没有跨域产生的问题\n* 解决了跨平台，多设备下的交互一致性\n\n##### 资料大全\nhttps://github.com/justjavac/awesome-wechat-weapp?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io\n\n","source":"_posts/微信小程序开发.md","raw":"title: 微信小程序开发\ndate: 2016-11-03 19:17:42\ntags: web\ntoc: true\n---\n##### 准备\n* 开发环境\n    * 下载开发工具 (https://mp.weixin.qq.com/debug/wxadoc/dev/devtools/download.html)\n    * 按照网上教程破解 (https://github.com/gavinkwoe/weapp-ide-crack)\n    * 或者直接下载破解好的包\n* 学习资料\n    * https://mp.weixin.qq.com/debug/wxadoc/dev/\n\n<!--more-->\n\n##### 开始\n* 打开微信web开发者工具\n* AppID选择 无AppID 或者 随便写一个(破解后)\n* 项目名称随便写\n* 开发目录选择一个空的文件夹\n\n##### 项目目录\n* 文件\n    * app.js 必须 项目的主文件 小程序的逻辑\n    * app.json 必须 小程序的公共设置\n    * app.wxss 非必须 存放小程序的公共样式\n    * 各个文件编写规范以及配置的意义资料中讲的很详细,就不重新描述了。\n* 开发\n>这个小应用中调用了一些wx的组件以及API,实现了一个列表的下拉刷新，上拉加载，每一项的左划菜单(删除，收藏等),开发时间有限，实现的比较粗糙，主要是为了把小程序开发这一套走一遍，知道小程序想干什么，能干什么，怎么干。下面只贴了部分代码。\n\n```javascript\n// app.js\nApp({\n  onLaunch: function () {\n    console.log('App Launch')\n  },\n  onShow: function () {\n    console.log('App Show')\n  },\n  onHide: function () {\n    console.log('App Hide')\n  },\n  globalData: {\n    userInfo: false,\n    nightMode: false\n  }\n})\n```\n\n```javascript\n// app.json\n{\n  \"pages\": [\n    \"page/component/index/index\",\n    \"page/component/pic/pic\",\n    \"page/component/fav/fav\",\n    \"page/component/about/about\"\n  ],\n  \"window\": {\n    \"navigationBarTextStyle\": \"white\",\n    \"navigationBarTitleText\": \"Jokes\",\n    \"navigationBarBackgroundColor\": \"#353336\",\n    \"backgroundColor\": \"#353336\"\n  },\n  \"tabBar\": {\n    \"color\": \"#000000\",\n    \"selectedColor\": \"#ffffff\",\n    \"borderStyle\": \"black\",\n    \"backgroundColor\": \"#413f40\",\n    \"list\": [{\n      \"pagePath\": \"page/component/index/index\",\n      \"iconPath\": \"image/icon_jokes_default.png\",\n      \"selectedIconPath\": \"image/icon_jokes_active.png\",\n      \"text\": \"Jokes\"\n    }, {\n      \"pagePath\": \"page/component/pic/pic\",\n      \"iconPath\": \"image/icon_pic_default.png\",\n      \"selectedIconPath\": \"image/icon_pic_active.png\",\n      \"text\": \"Jokes\"\n    }, {\n      \"pagePath\": \"page/component/fav/fav\",\n      \"iconPath\": \"image/icon_fav_default.png\",\n      \"selectedIconPath\": \"image/icon_fav_active.png\",\n      \"text\": \"fav\"\n    }, {\n      \"pagePath\": \"page/component/about/about\",\n      \"iconPath\": \"image/icon_settings_default.png\",\n      \"selectedIconPath\": \"image/icon_settings_active.png\",\n      \"text\": \"Settings\"\n    }]\n  },\n  \"networkTimeout\": {\n    \"request\": 10000,\n    \"connectSocket\": 10000,\n    \"uploadFile\": 10000,\n    \"downloadFile\": 10000\n  },\n  \"debug\": true\n}\n```\n\n```javascript\n// app.wxss\npage {\n  background-color: #fbf9fe;\n  height: 100%;\n}\n```\n\n```javascript\n// page/component/index/index.js\nvar jodeData,startX,startY,endX,endY,moveStart,\n    topAdImgs = [\n        '../../../image/ad/1.jpg',\n        '../../../image/ad/2.jpg',\n        '../../../image/ad/3.jpg',\n        '../../../image/ad/4.jpg',\n        '../../../image/ad/5.jpg'\n    ];\n\nPage({\n  data: {\n    list: [],\n    itemToView: '',\n    scrollTop: 0,\n    currentPage: 1,\n    bottomHidden: 'none',\n    modalHidden: true,\n    modalText: '',\n    topImages:topAdImgs,\n  },\n  colorMap: ['#86a3c1','#86d1cc','#bdd4e4','#debf88','#f9af02'],\n  parse: function(html) {\n    html = html.replace(/(<p>)|(<\\/p>)|(\\t)|(&nbsp;)/gm, \"\");\n    return html;\n  },\n  prefixData: function(data){\n    var self = this;\n    var favJokes = wx.getStorageSync('favJokes') || [];\n    data.forEach(function(item,index){\n      item.ct = item.ct.substr(0,19);\n      if(item.type === 1){\n        item.text = self.parse(item.text);  \n      }\n      item.background = self.colorMap[index%5];\n      item.right = '0%';\n      item.hidden = 'block';\n      item.hasFav = 'none';\n      favJokes.forEach(function(fitem,findex){\n        if(fitem.id === item.id){\n          item.hasFav = 'block';\n        }\n      });\n    });\n    return data;\n  },\n  onLoad: function(options) {\n    var self = this;\n    wx.request({\n      url: 'https://123.test.com/joke_text?page=' + self.data.currentPage,\n      data: {},\n      header: {\n        'Content-Type': 'application/json'\n      },\n      success: function(res) {\n        var data = res.data;\n        data = self.prefixData(data);\n        self.setData({\n          bottomHidden: 'none'\n        });\n        if(self.data.currentPage === 1){\n          self.setData({\n            list: data\n          });\n          self.toPos(self.data.currentPage);  \n        }else{\n          data = self.data.list.concat(data);\n          self.setData({\n            list: data\n          });\n        }\n      },\n      error: function(){\n        self.setData({\n          bottomHidden: 'none'\n        });\n      }\n    });\n  },\n  toPos: function(page){\n    var self = this;\n    setTimeout(function(){\n      self.setData({\n        itemToView: 'item' + (page-1) * 20\n      });\n    },1000);\n  },\n  reDealData: function(){\n    var allJodes = this.data.list;\n    var favJokes = wx.getStorageSync('favJokes') || [];\n    allJodes.forEach(function(item,index){\n      item.hasFav = 'none';\n      favJokes.forEach(function(fitem,findex){\n        if(fitem.id === item.id){\n          item.hasFav = 'block';\n        }\n      });\n    });\n    this.setData({\n      list: allJodes\n    });\n  },\n  onShow: function() {\n    this.reDealData();\n  },\n  topUpdate: function(event){\n    this.setData({\n      currentPage: 1,\n      itemToView: 'top'\n    });\n    this.onLoad();\n  },\n  bottomLoad: function(event){\n    var page = this.data.currentPage;\n    page = page + 1;\n    this.setData({\n      bottomHidden: 'block',\n      currentPage: page\n    });\n    this.onLoad();\n  },\n  itemScroll: function(event){\n  },\n  itemClick: function(event){\n    // wx.navigationTo({url:\"\"});\n  },\n  itemStart: function(event){\n    var touch = event.touches[0];\n    startX = touch.clientX;\n    startY = touch.clientY;\n    moveStart = true;\n  },\n  itemMove: function(event){\n    var self = this;\n    var dataIndex = event.currentTarget.dataset.idx;\n    jodeData = this.data.list;\n    if(moveStart){\n      var touch = event.touches[0];\n      endX = touch.clientX;\n      endY = touch.clientY;\n      if(Math.abs(startX - endX) >= Math.abs(startY - endY)){\n        if(endX - startX <= -5){\n          jodeData.forEach(function(item,index){\n            item.right = '0%';\n          });\n          jodeData[dataIndex].right = \"20%\";\n        }else{\n          jodeData.forEach(function(item,index){\n            item.right = '0%';\n          });\n        }\n        self.setData({\n          list: jodeData\n        });\n      }\n    }\n    moveStart = false;\n  },\n  modalChange:function(event){\n    this.setData({\n      modalHidden: true,\n      modalText: ''\n    })\n  },\n  tapFav:function(event){\n    var dataIndex = event.currentTarget.dataset.idx;\n    var allJodes = this.data.list;\n    var curJokes = allJodes[dataIndex];\n    curJokes.right = '0%';\n    var favJokes = wx.getStorageSync('favJokes') || [];\n    if(curJokes.hasFav !== 'block'){\n      curJokes.hasFav = 'block';\n      favJokes.unshift(curJokes);\n      wx.setStorageSync('favJokes', favJokes);\n      this.setData({\n        list: allJodes\n      });\n    }else{\n      this.setData({\n        list: allJodes,\n        modalHidden: false,\n        modalText: '添加过了'\n      });\n    }\n  },\n  tapDel:function(event){\n    var dataIndex = event.currentTarget.dataset.idx;\n    var allJodes = this.data.list;\n    var curJokes = allJodes[dataIndex];\n    curJokes.right = '0%';\n    curJokes.hidden = 'none';\n    this.setData({\n      list: allJodes\n    });\n  }\n})\n```\n\n```html\n// page/component/index/index.wxml\n<modal class=\"modal\" hidden=\"{{modalHidden}}\" \n    no-cancel bindconfirm=\"modalChange\">\n  <view> {{modalText}} </view>\n</modal>\n<view class=\"index\">\n    <view class=\"body\">\n    \t<swiper class=\"top-swiper\" indicator-dots=\"true\"\n\t\t  autoplay=\"true\" interval=\"5000\" duration=\"1000\">\n\t\t  <block wx:for=\"{{topImages}}\">\n\t\t    <swiper-item>\n\t\t      <image src=\"{{item}}\" class=\"slide-image\"/>\n\t\t    </swiper-item>\n\t\t  </block>\n\t\t</swiper>\n    \t<scroll-view class=\"scroll-view\" \n    \t    scroll-y=\"true\" bindscrolltoupper=\"topUpdate\"\n    \t    bindscrolltolower=\"bottomLoad\" bindscroll=\"itemScroll\" \n    \t    scroll-into-view=\"{{itemToView}}\" \n    \t    scroll-top=\"{{scrollTop}}\" \n    \t    upper-threshold=\"20\" \n    \t    lower-threshold=\"30\">\n\t    \t<view class=\"list-container\">\n\t    \t\t<view id=\"top\" class=\"pull-update\">\n\t    \t\t\t正在更新\n            <image style=\"width: 30rpx; height: 30rpx;margin-left:10rpx;\" \n\t\t            mode=\"scaleToFill\" src=\"../../../image/loading.gif\"></image>\n\t    \t\t</view>\n\t\t    \t<block wx:for=\"{{list}}\">\n\t\t        <view id=\"item{{index}}\" data-idx=\"{{index}}\" class=\"item\"\n\t\t            style=\"background:{{item.background}};right:{{item.right}};display:{{item.hidden}};\" \n\t\t            bindtap=\"itemClick\" bindtouchstart=\"itemStart\" bindtouchmove=\"itemMove\">\n\t\t        \t<view class=\"info-container\">\n\t\t\t          <view class=\"date\">\n\t\t\t          \t{{item.ct}}\n\t\t\t          </view>\n  \t\t\t        <block wx:if=\"{{item.type == 1}}\">\n  \t\t\t\t\t\t    <view class=\"content\">\n  \t\t\t          \t{{item.text}}\n  \t\t\t          </view>\n  \t\t\t\t\t    </block>\n  \t\t\t\t\t    <block wx:else>\n  \t\t\t\t\t  \t  <view class=\"content\">\n  \t\t\t\t          \t<image class=\"img-info\" mode=\"aspectFit\" \n  \t\t\t\t          \t    src=\"{{item.img}}\"></image>\n  \t\t\t\t          </view>\n  \t\t\t\t          <view class=\"title\">\n  \t\t\t\t          \t{{item.title}}\n  \t\t\t\t          </view>\n  \t\t\t\t\t    </block>\n  \t\t\t      </view>\n\t\t          <image class=\"fav-icon\" mode=\"scaleToFill\" \n\t\t            src=\"../../../image/fav.png\" style=\"display:{{item.hasFav}}\"></image>\n        \t    <view class=\"opt-item opt-fav\" catchtap=\"tapFav\" data-idx=\"{{index}}\">喜欢</view>\n        \t    <view class=\"opt-item opt-del\" catchtap=\"tapDel\" data-idx=\"{{index}}\">删除</view>\n\t\t        </view>\n\t\t\t    </block>\n\t\t\t    <view id=\"bottom\" class=\"pull-load\" style=\"display:{{bottomHidden}};\">\n\t    \t\t\t正在加载\n            <image style=\"width: 30rpx; height: 30rpx;margin-left:10rpx;\"\n\t    \t\t\t            mode=\"scaleToFill\" src=\"../../../image/loading.gif\"></image>\n\t    \t\t</view>\n\t\t\t  </view>\n\t    </scroll-view>\n    </view>\n</view>\n\n```\n\n```javascript\n// page/component/index/index.wxss\n@import '../../common/wxss/base.wxss';\n@import '../../common/wxss/common.wxss';\n```\n\n```javascript\n// page/common/wxss/base.wxss\n.index{\n    background-color: #FBF9FE;\n    font-family: -apple-system-font,Helvetica Neue,Helvetica,sans-serif;\n    flex: 1;\n    min-height: 100%;\n    font-size: 32rpx;\n}\n.body{\n    overflow: hidden;\n}\n```\n\n```javascript\n// page/common/wxss/common.wxss\n.top-swiper{\n    height: 300rpx;\n    width: 100%;\n}\n.slide-image{\n    height: 300rpx;\n    width: 100%;\n}\n.scroll-view{\n    height: 860rpx;\n}\n.pic-view{\n    height: 1160rpx;\n}\n.list-container{\n    margin: 40rpx 0;\n}\n.pull-update{\n    text-align: center;\n    height: 40rpx;\n    line-height: 40rpx;\n    margin-top: -40rpx;\n}\n.pull-load{\n    text-align: center;\n    height: 40rpx;\n    line-height: 40rpx;\n}\n.item{\n    position: relative;\n    display: block;\n    width: 100%;\n  text-align: left;\n  vertical-align: middle;\n  background-color: #fff;\n    border-radius: 3;\n    border: 0 none;\n    margin: 0;\n    min-height: 200rpx;\n    box-sizing: border-box;\n    transition: all .25s ease;\n    -webkit-transition: all .25s ease;\n}\n.opt-item{\n    position: absolute;\n    height: 100%;\n    width: 10%;\n    box-sizing: border-box;\n    padding-left: 20rpx;\n    min-height: 200rpx;\n    writing-mode: vertical-lr;\n    text-align: center;\n    vertical-align: middle;\n    display: inline-block;\n}\n.opt-fav{\n    color: #fff;\n    right: -10%;\n    background: #868484;\n}\n.opt-del{\n    color: #fff;\n    right: -20%;\n    background: #dc4545;\n}\n.fav-del{\n    color: #fff;\n    right: -10%;\n    background: #dc4545;\n}\n.info-container{\n    padding: 0 10rpx;\n}\n.date{\n    color: #fff;\n    text-align: left;\n    padding:18rpx 8rpx 8rpx 8rpx;\n}\n.title{\n    font-size: 28rpx;\n    color: #fff;\n    text-align: left;\n    padding:8rpx 8rpx 18rpx 8rpx;\n    color: #333;\n}\n.content{\n    font-size: 28rpx;\n    text-align: left;\n    padding:8rpx 8rpx 18rpx 8rpx;\n    color: #333;\n}\n.blank-icon{\n    margin: 0 auto;\n}\n.fav-icon{\n    position: absolute;\n    right: 0;\n    top: 0;\n    width: 60rpx;\n    height: 60rpx;\n}\n```\n\n##### 简单理解\n* 小程序开发起来难度适中，主要是对框架，API以及组建的了解，开发过程中简单的拼凑，加上自己逻辑的串联，就可以完成一个小应用\n* 对于前端开发来说，成本是非常低的，css，js语法一样，然后就是html，html就相当于我们使用一个新的模版引擎，更加强大的mustache\n* 更像是hybrid开发，我们有调起原生的功能的能力，而又不需要去注册一堆方法(和app约定的方法),例如相册，定位，罗盘，网络，系统信息等\n* 我们不用过多考虑路由的问题，兼容的问题\n* 网络请求没有跨域产生的问题\n* 解决了跨平台，多设备下的交互一致性\n\n##### 资料大全\nhttps://github.com/justjavac/awesome-wechat-weapp?hmsr=toutiao.io&utm_medium=toutiao.io&utm_source=toutiao.io\n\n","slug":"微信小程序开发","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599f4000d4wyj0ct63ife"},{"title":"异步javascript","date":"2015-11-18T07:03:01.000Z","toc":true,"_content":"#### 什么是异步javascript\n>顺序的执行的代码，我们称之为同步代码，异步的过程就是让有些非常耗时的javascript代码放在异步模块中之行，同步代码之行结束后再去之行它。\n\n#### 异步javascript发展过程\n* 回调函数\n\t函数可以作为参数传递给另一个函数，这样的过程称之为回调，当执行完函数的内容后，执行回调函数，来完成异步的模拟。\n\t回调函数可以使程序编的简单易懂，但是耦合性确比较高，维护起来比较麻烦。错误处理容易被忽视，不能return,使用不当会让程序非常臃肿。\n<!--more-->\n* 事件监听\n\t通过事件监听，触发达到异步执行代码的过程。\n* 发布订阅\n\t我们可以创建发布／订阅模式，或者观察者模式，通过订阅，发布的过程来实现异步\n* Promises\n\tPromises是一种规范，Promises允许我们通过链式调用的方式编写代码，增强了代码的可读性。\n","source":"_posts/异步javascript.md","raw":"title: 异步javascript\ndate: 2015-11-18 15:03:01\ntags: javascript\ntoc: true\n---\n#### 什么是异步javascript\n>顺序的执行的代码，我们称之为同步代码，异步的过程就是让有些非常耗时的javascript代码放在异步模块中之行，同步代码之行结束后再去之行它。\n\n#### 异步javascript发展过程\n* 回调函数\n\t函数可以作为参数传递给另一个函数，这样的过程称之为回调，当执行完函数的内容后，执行回调函数，来完成异步的模拟。\n\t回调函数可以使程序编的简单易懂，但是耦合性确比较高，维护起来比较麻烦。错误处理容易被忽视，不能return,使用不当会让程序非常臃肿。\n<!--more-->\n* 事件监听\n\t通过事件监听，触发达到异步执行代码的过程。\n* 发布订阅\n\t我们可以创建发布／订阅模式，或者观察者模式，通过订阅，发布的过程来实现异步\n* Promises\n\tPromises是一种规范，Promises允许我们通过链式调用的方式编写代码，增强了代码的可读性。\n","slug":"异步javascript","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599f6000f4wyje1dvxl3v"},{"title":"延迟加载解决方案","date":"2015-10-25T07:03:01.000Z","toc":true,"_content":"#### 图片\n>* 给图片添加data-lazy等标签，放图片url,等页面加载完再去做替换，不会阻塞页面onload。\n* 同样像上面那样，但是等到页面滚动到特殊位置的时候，才去加载对应图片，实现懒加载。\n* 对于一些大图，我们还可以先给他一个质量低的图片，然后用js创建image对象，给它赋值src,监听它的onload事件，加载完后把url赋给img标签,实现预加载。\n* jquery的lazyload插件，给图片设置data-original类似的标签，可以实现懒加载。\n<!--more-->\n说了这么多，再看看怎么判断浏览器滚动到了哪里，哪些需要加载。\n```javascript\n// 浏览器可视区域 \nfunction getClient(){ \n    var l, t, w, h; \n    l = document.documentElement.scrollLeft || document.body.scrollLeft; \n    t = document.documentElement.scrollTop || document.body.scrollTop; \n    w = document.documentElement.clientWidth; \n    h = document.documentElement.clientHeight; \n    return { left: l, top: t, width: w, height: h }; \n}\n```\n```javascript\n// 待加载资源位置 \nfunction getSubClient(p){ \n    var l = 0, t = 0, w, h; \n    w = p.offsetWidth; \n    h = p.offsetHeight; \n    while(p.offsetParent){ \n        l += p.offsetLeft; \n        t += p.offsetTop; \n        p = p.offsetParent; \n    } \n    return { left: l, top: t, width: w, height: h }; \n}\n```\n```javascript\n// 判断两个矩形是否相交,如果相交说明dom已经出现在了窗口，需要加载了\nfunction intens(rec1, rec2){ \n    var lc1, lc2, tc1, tc2, w1, h1; \n    lc1 = rec1.left + rec1.width / 2; \n    lc2 = rec2.left + rec2.width / 2; \n    tc1 = rec1.top + rec1.height / 2 ; \n    tc2 = rec2.top + rec2.height / 2 ; \n    w1 = (rec1.width + rec2.width) / 2 ; \n    h1 = (rec1.height + rec2.height) / 2; \n    return Math.abs(lc1 - lc2) < w1 && Math.abs(tc1 - tc2) < h1 ; \n}\n```\n```javascript\n// 判断某个区域是否出现在可视区域 \nfunction test(domArr, prec1, callback){ \n    var prec2; \n    for (var i = domArr.length - 1; i >= 0; i--) { \n        if (domArr[i]) { \n            prec2 = getSubClient(domArr[i]); \n            if (intens(prec1, prec2)) { \n                callback(domArr[i]); \n                delete domArr[i]; \n            } \n        } \n    } \n}\n```\n```javascript\n// 检查dom是否出现在可视区域 \nfunction check(){ \n    var prec1 = getClient(); \n    test(eleArr, prec1, function(dom){ \n        dom.innerHTML ＝ '123';\n    }) \n} \nvar ele1 = document.getElementById(\"js_ele1\"); \nvar ele2 = document.getElementById(\"js_ele2\"); \nvar eleArr = [ele1, ele2]; \nwindow.onscroll = function(){ \n    check();\n} \nwindow.onresize = function(){ \n    check(); \n}\n```\n\n#### 非图片\n* 有些在可视区外加载的列表，页面比较靠底部，不需要页面加载的时候就展示，可以等页面滚动到相应的位置再去发请求，做渲染之类的\n* 还有些动画效果也可以这样\n* 但是注意，要做个判断，这样的动作应该只一次就够了\n\n##### 优点\n* 提高网页响应速度，毕竟图片加载会阻塞onload事件\n* 影响网页收录与排名，因为蜘蛛爬页面的时候，如果响应速度快，页面优化值会高\n* 减少请求，降低服务器压力，减少流量\n\n##### 缺点\n* 图片不会被收录\n* 如果响应速度慢，会看到图片加载过程","source":"_posts/延迟加载解决方案.md","raw":"title: 延迟加载解决方案\ndate: 2015-10-25 15:03:01\ntags: javascript\ntoc: true\n---\n#### 图片\n>* 给图片添加data-lazy等标签，放图片url,等页面加载完再去做替换，不会阻塞页面onload。\n* 同样像上面那样，但是等到页面滚动到特殊位置的时候，才去加载对应图片，实现懒加载。\n* 对于一些大图，我们还可以先给他一个质量低的图片，然后用js创建image对象，给它赋值src,监听它的onload事件，加载完后把url赋给img标签,实现预加载。\n* jquery的lazyload插件，给图片设置data-original类似的标签，可以实现懒加载。\n<!--more-->\n说了这么多，再看看怎么判断浏览器滚动到了哪里，哪些需要加载。\n```javascript\n// 浏览器可视区域 \nfunction getClient(){ \n    var l, t, w, h; \n    l = document.documentElement.scrollLeft || document.body.scrollLeft; \n    t = document.documentElement.scrollTop || document.body.scrollTop; \n    w = document.documentElement.clientWidth; \n    h = document.documentElement.clientHeight; \n    return { left: l, top: t, width: w, height: h }; \n}\n```\n```javascript\n// 待加载资源位置 \nfunction getSubClient(p){ \n    var l = 0, t = 0, w, h; \n    w = p.offsetWidth; \n    h = p.offsetHeight; \n    while(p.offsetParent){ \n        l += p.offsetLeft; \n        t += p.offsetTop; \n        p = p.offsetParent; \n    } \n    return { left: l, top: t, width: w, height: h }; \n}\n```\n```javascript\n// 判断两个矩形是否相交,如果相交说明dom已经出现在了窗口，需要加载了\nfunction intens(rec1, rec2){ \n    var lc1, lc2, tc1, tc2, w1, h1; \n    lc1 = rec1.left + rec1.width / 2; \n    lc2 = rec2.left + rec2.width / 2; \n    tc1 = rec1.top + rec1.height / 2 ; \n    tc2 = rec2.top + rec2.height / 2 ; \n    w1 = (rec1.width + rec2.width) / 2 ; \n    h1 = (rec1.height + rec2.height) / 2; \n    return Math.abs(lc1 - lc2) < w1 && Math.abs(tc1 - tc2) < h1 ; \n}\n```\n```javascript\n// 判断某个区域是否出现在可视区域 \nfunction test(domArr, prec1, callback){ \n    var prec2; \n    for (var i = domArr.length - 1; i >= 0; i--) { \n        if (domArr[i]) { \n            prec2 = getSubClient(domArr[i]); \n            if (intens(prec1, prec2)) { \n                callback(domArr[i]); \n                delete domArr[i]; \n            } \n        } \n    } \n}\n```\n```javascript\n// 检查dom是否出现在可视区域 \nfunction check(){ \n    var prec1 = getClient(); \n    test(eleArr, prec1, function(dom){ \n        dom.innerHTML ＝ '123';\n    }) \n} \nvar ele1 = document.getElementById(\"js_ele1\"); \nvar ele2 = document.getElementById(\"js_ele2\"); \nvar eleArr = [ele1, ele2]; \nwindow.onscroll = function(){ \n    check();\n} \nwindow.onresize = function(){ \n    check(); \n}\n```\n\n#### 非图片\n* 有些在可视区外加载的列表，页面比较靠底部，不需要页面加载的时候就展示，可以等页面滚动到相应的位置再去发请求，做渲染之类的\n* 还有些动画效果也可以这样\n* 但是注意，要做个判断，这样的动作应该只一次就够了\n\n##### 优点\n* 提高网页响应速度，毕竟图片加载会阻塞onload事件\n* 影响网页收录与排名，因为蜘蛛爬页面的时候，如果响应速度快，页面优化值会高\n* 减少请求，降低服务器压力，减少流量\n\n##### 缺点\n* 图片不会被收录\n* 如果响应速度慢，会看到图片加载过程","slug":"延迟加载解决方案","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599f8000h4wyjntgo5v5i"},{"title":"如何调试移动端网页","date":"2015-10-01T09:50:37.000Z","toc":true,"_content":"\n#### 真机上调试移动端的页面\n##### 1. mac safri ios设备safri\n>步骤：\n1. 在设置>safri>高级web检查器（打开）\n2. mac下safri 偏好设置>高级>显示开发菜单\n3. 在手机safri访问网址，在开发中找到自己的设备，找到网址，点击就可以调试\n<!--more-->\n\n##### 2. DebugGap\n>官网地址：http://www.debuggap.com/\n* 介绍\n\t* 支持 windows、mac、linux\n\t* 支持HTML5的都支持，不仅限手机内置浏览器，及应用或平台。\n\t* 多设备调试\n\t* 调试功能：\n\t\t* Elements - css修改、结构查看\n\t\t* Network - 网络请求查看\n\t\t* Resources - cookie、本地存储查看\n\t\t* Sources - 断点调试\n\t\t* Console - 控制台\n* 使用：\n\t* windows\n\t\t* 下载windows版本，然后解压，打开 DebugGap.exe,然后可以默认设置也可以自定义设置\n\t\t* 接下来，在我们要调试的页面最底部添加一个引用\n\t\t\t`<script src=\"./debuggap.js\"></script>`\n\t\t* 直接访问我们的页面，页面右上角会多出一个蓝色的圆形按钮，pc上如果点不动，就使用浏览器模拟器\n\t\t* 点击config，把之前设置的ip port填进去，然后点击连接\n\t\t* 再点击蓝色的圆形按钮，再点击Inspect,观察之前起的应用，多一个蓝色框框的区域，点击进去，调试工具就出来了。\n\t\t* 移动设备调试，可以把手机和电脑连接同一个wifi，保证在一个网段，然后在电脑上起一个服务器，保证页面通过手机能访问到，然后手机访问电脑ip+端口号，然后就是页面路径，就可以访问到了，其他操作同上。\n\t* mac,linux\n\t\t* 方法同上\n* 支持情况\n\t* windows从性能以及调试情况来看，支持的最好\n* 断点调试条件\n\t* chrome浏览器可以单步调试，\n\t* 没定制过的webview, Android 4.4+\n\t* 需要在电脑上安装设备驱动，并且打开usb调试，连接数据线\n\n##### 3. Weinre\n>使用方法\n* windows安装 `npm -g install weinre`\n* `weinre —httpPort 8081 —boundHost -all-` 用这个打开8081调试端口\n* 浏览器打开 `http://localhost:8081` 会看到weinre的介绍信息\n* `<script src=\"http://localhost:8081/target/target-script-min.js#anonymous\"></script>`\n* 需要调试的页面加上这个脚本，需要将上面代码中的localhost替换为电脑ip，手机访问页面也可以\n* anonymous 这个可以换成自己的标识，这样多人调试的时候也不会混乱了。\n\n##### 4. vorlon\n>使用方法\n基于 Node.js 和 Socket.IO 开发。\n调试css比较靠谱，其安装方法以及调试方式和Weinre比较类似，但是更容易定位问题，忽略内容，直观的都是dom结构\n* 安装 `npm i -g vorlon`\n* 运行 `vorlon`\n* 需要调试的页面上添加 `<script src=\"http://localhost:1337/vorlon.js\"></script>`这样一段标签\n* 浏览器访问 `http://localhost:1337` 就可以调试了\n\n##### 5. UC浏览器开发版\n>准备\n* adb tool。\n* UC浏览器开发版本(apk)。\n* usb数据线一根\nWIFI的调试方法，保证pc和手机在同一个网段，在PC上打开Chrome或Safari，在地址栏输入：手机IP + :9998，在手机端会弹出确认按钮，点击确认后，就可在pc上看到效果了\n\n##### 6. Chrome\n>调试方法\n* 翻墙。\n* PC Chrome最新版\n* 安卓 Chrome最新版\n* 插线后，在chrome浏览器输入 chrome://inspect\n\n##### 7. Firefox\n>调试方法\n* PC Firefox 15+\n* Android Firefox 15+\n* 一根数据线\n* adb驱动(UC浏览器那步已经安装过了)\n* adb devices（查看连接的设备）\n* adb forward tcp:6000 tcp:6000（本地开一个接口做代理接受数据）\n* 手机端Firefox点击菜单栏的”设置”->”开发者工具”，勾选”远程调试”。\n* PC端Firefox打开about:config，设置devtools.debugger.remote-enabled为True\n* 接下来找到桌面端Firefox-菜单-工具-Web开发者-远程链接。保证端口号和上面开启的端口号一致就好了。\n\n##### 8. Opera\n>调试方法\n* 打开pc opera control+shift+i 打开调试，点击右上角远程调试设置端口，在用模拟器输入opera:debug，连接端口，就可以了\n* 上面这个方法有些过时 打开新版的手机opera浏览器，输入opera:debug，里面讲解了调试方式，工具就是adb和pc chrome浏览器\n稍微麻烦一点，因为要装一些软件，完成后可以用pc端模拟器调试也可以用真机调试。","source":"_posts/如何调试移动端网页.md","raw":"title: 如何调试移动端网页\ndate: 2015-10-01 17:50:37\ntags: web\ntoc: true\n---\n\n#### 真机上调试移动端的页面\n##### 1. mac safri ios设备safri\n>步骤：\n1. 在设置>safri>高级web检查器（打开）\n2. mac下safri 偏好设置>高级>显示开发菜单\n3. 在手机safri访问网址，在开发中找到自己的设备，找到网址，点击就可以调试\n<!--more-->\n\n##### 2. DebugGap\n>官网地址：http://www.debuggap.com/\n* 介绍\n\t* 支持 windows、mac、linux\n\t* 支持HTML5的都支持，不仅限手机内置浏览器，及应用或平台。\n\t* 多设备调试\n\t* 调试功能：\n\t\t* Elements - css修改、结构查看\n\t\t* Network - 网络请求查看\n\t\t* Resources - cookie、本地存储查看\n\t\t* Sources - 断点调试\n\t\t* Console - 控制台\n* 使用：\n\t* windows\n\t\t* 下载windows版本，然后解压，打开 DebugGap.exe,然后可以默认设置也可以自定义设置\n\t\t* 接下来，在我们要调试的页面最底部添加一个引用\n\t\t\t`<script src=\"./debuggap.js\"></script>`\n\t\t* 直接访问我们的页面，页面右上角会多出一个蓝色的圆形按钮，pc上如果点不动，就使用浏览器模拟器\n\t\t* 点击config，把之前设置的ip port填进去，然后点击连接\n\t\t* 再点击蓝色的圆形按钮，再点击Inspect,观察之前起的应用，多一个蓝色框框的区域，点击进去，调试工具就出来了。\n\t\t* 移动设备调试，可以把手机和电脑连接同一个wifi，保证在一个网段，然后在电脑上起一个服务器，保证页面通过手机能访问到，然后手机访问电脑ip+端口号，然后就是页面路径，就可以访问到了，其他操作同上。\n\t* mac,linux\n\t\t* 方法同上\n* 支持情况\n\t* windows从性能以及调试情况来看，支持的最好\n* 断点调试条件\n\t* chrome浏览器可以单步调试，\n\t* 没定制过的webview, Android 4.4+\n\t* 需要在电脑上安装设备驱动，并且打开usb调试，连接数据线\n\n##### 3. Weinre\n>使用方法\n* windows安装 `npm -g install weinre`\n* `weinre —httpPort 8081 —boundHost -all-` 用这个打开8081调试端口\n* 浏览器打开 `http://localhost:8081` 会看到weinre的介绍信息\n* `<script src=\"http://localhost:8081/target/target-script-min.js#anonymous\"></script>`\n* 需要调试的页面加上这个脚本，需要将上面代码中的localhost替换为电脑ip，手机访问页面也可以\n* anonymous 这个可以换成自己的标识，这样多人调试的时候也不会混乱了。\n\n##### 4. vorlon\n>使用方法\n基于 Node.js 和 Socket.IO 开发。\n调试css比较靠谱，其安装方法以及调试方式和Weinre比较类似，但是更容易定位问题，忽略内容，直观的都是dom结构\n* 安装 `npm i -g vorlon`\n* 运行 `vorlon`\n* 需要调试的页面上添加 `<script src=\"http://localhost:1337/vorlon.js\"></script>`这样一段标签\n* 浏览器访问 `http://localhost:1337` 就可以调试了\n\n##### 5. UC浏览器开发版\n>准备\n* adb tool。\n* UC浏览器开发版本(apk)。\n* usb数据线一根\nWIFI的调试方法，保证pc和手机在同一个网段，在PC上打开Chrome或Safari，在地址栏输入：手机IP + :9998，在手机端会弹出确认按钮，点击确认后，就可在pc上看到效果了\n\n##### 6. Chrome\n>调试方法\n* 翻墙。\n* PC Chrome最新版\n* 安卓 Chrome最新版\n* 插线后，在chrome浏览器输入 chrome://inspect\n\n##### 7. Firefox\n>调试方法\n* PC Firefox 15+\n* Android Firefox 15+\n* 一根数据线\n* adb驱动(UC浏览器那步已经安装过了)\n* adb devices（查看连接的设备）\n* adb forward tcp:6000 tcp:6000（本地开一个接口做代理接受数据）\n* 手机端Firefox点击菜单栏的”设置”->”开发者工具”，勾选”远程调试”。\n* PC端Firefox打开about:config，设置devtools.debugger.remote-enabled为True\n* 接下来找到桌面端Firefox-菜单-工具-Web开发者-远程链接。保证端口号和上面开启的端口号一致就好了。\n\n##### 8. Opera\n>调试方法\n* 打开pc opera control+shift+i 打开调试，点击右上角远程调试设置端口，在用模拟器输入opera:debug，连接端口，就可以了\n* 上面这个方法有些过时 打开新版的手机opera浏览器，输入opera:debug，里面讲解了调试方式，工具就是adb和pc chrome浏览器\n稍微麻烦一点，因为要装一些软件，完成后可以用pc端模拟器调试也可以用真机调试。","slug":"如何调试移动端网页","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599fa000j4wyjxrqpfu9f"},{"title":"动画","date":"2015-11-17T07:03:01.000Z","toc":true,"_content":"#### css动画\n* translate\n* transation\n#### animate\n* javascript动画\n* setTimeout\n* setInterval\n* requestAnimationFrame\n<!--more-->\n#### jquery动画\n* animate\n#### js动画库\n#### canvas动画","source":"_posts/动画.md","raw":"title: 动画\ndate: 2015-11-17 15:03:01\ntags: web\ntoc: true\n---\n#### css动画\n* translate\n* transation\n#### animate\n* javascript动画\n* setTimeout\n* setInterval\n* requestAnimationFrame\n<!--more-->\n#### jquery动画\n* animate\n#### js动画库\n#### canvas动画","slug":"动画","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599fc000l4wyjc0nn7kt6"},{"title":"动态脚本","date":"2015-11-25T07:03:01.000Z","toc":true,"_content":"#### 动态加载js\n```javascript\nfunction loadScript(data,type){\n\tvar script = document.createElement(\"script\");\n\tscript.type = \"text/javascript\";\n\ttry{\n\t\tif(type === 1){\n\t\t\tscript.appendChild(document.createTextNode(data));\n\t\t}else{\n\t\t\tscript.src = data;\n\t\t}\n\t}catch(ex){\n\t\tif(type === 1){\n\t\t\tscript.text = code\n\t\t}else{\n\t\t\tscript.src = data;\n\t\t}\n\t}\n\tdocument.body.appendChild(script);\n}\n```\n<!--more-->\n\n#### 动态样式\n```javascript\nfunction loadStyle(data,type){\n\tvar style = document.createElement(\"style\");\n\tstyle.type = \"text/css\";\n\ttry{\n\t\tif(type === 1){\n\t\t\tstyle.appendChild(document.createTextNode(data));\n\t\t}else{\n\t\t\tstyle.href = data;\n\t\t}\n\t}catch(ex){\n\t\tif(type === 1){\n\t\t\tstyle.styleSheet.cssText = css;\n\t\t}else{\n\t\t\tstyle.href = data;\n\t\t}\n\t}\n\tvar head = document.getElementsByTagName(\"head\")[0];\n\thead.appendChild(style);\n}\n```","source":"_posts/动态脚本.md","raw":"title: 动态脚本\ndate: 2015-11-25 15:03:01\ntags: javascript\ntoc: true\n---\n#### 动态加载js\n```javascript\nfunction loadScript(data,type){\n\tvar script = document.createElement(\"script\");\n\tscript.type = \"text/javascript\";\n\ttry{\n\t\tif(type === 1){\n\t\t\tscript.appendChild(document.createTextNode(data));\n\t\t}else{\n\t\t\tscript.src = data;\n\t\t}\n\t}catch(ex){\n\t\tif(type === 1){\n\t\t\tscript.text = code\n\t\t}else{\n\t\t\tscript.src = data;\n\t\t}\n\t}\n\tdocument.body.appendChild(script);\n}\n```\n<!--more-->\n\n#### 动态样式\n```javascript\nfunction loadStyle(data,type){\n\tvar style = document.createElement(\"style\");\n\tstyle.type = \"text/css\";\n\ttry{\n\t\tif(type === 1){\n\t\t\tstyle.appendChild(document.createTextNode(data));\n\t\t}else{\n\t\t\tstyle.href = data;\n\t\t}\n\t}catch(ex){\n\t\tif(type === 1){\n\t\t\tstyle.styleSheet.cssText = css;\n\t\t}else{\n\t\t\tstyle.href = data;\n\t\t}\n\t}\n\tvar head = document.getElementsByTagName(\"head\")[0];\n\thead.appendChild(style);\n}\n```","slug":"动态脚本","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599fe000n4wyj3knq0ws0"},{"title":"前端知识点集合","date":"2015-11-19T07:03:01.000Z","toc":true,"_content":"#### getBoundingClientRect\n>计算视口坐标,方法返回一个有left、right、top、bottom属性的对象，分别表示元素四个位置的相对于视口的坐标。getBoundingClientRect所返回的坐标包含元素的内边距和边框，不包含外边距。兼容性很好，非常好用.\n\n#### scrollIntoView\n>可以让元素直接呈现到可视区域，实际上是屏幕显示区的最顶端\n<!--more-->\n\n#### 检查图片是否加在完\n```javascript\n$('img').load(function(){\n\tconsole.log('load over');\n});\n```\n#### 修复加载失败的图片\n```javascript\n$('img').on('error',function(){\n\t$(this).prop('src','/default.png');\n});\n```\n#### 回到顶部\n```javascript\n$(document).animate({scrollTop:0},1000);\n```\n#### 图片预加载\n```javascript\n$.preLoad = function(){\n\tfor(var i = 0,len = arguments.length;i<len;i++){\n\t\tvar $img = $('<img>');\n\t\t$img.attr('src',arguments[i]);\n\t}\n}\nvar imgList = ['/img1.png','/img2.png'];\n$.preLoad(imgList);\n```javascript\n#### visible\n```javascript\n$(document).on('visibilitychange', function (e) {\n\tif (e.target.visibilityState === 'visible') {\n\t\tconsole.log('visible');\n\t} else {\n\t\tconsole.log('hidden');\n\t}\n});\n```\n用来监听浏览器是否处于激活状态，可视状态\n\n#### ajax调用错误处理\n```javascript\n$(document).ajaxError(function(e,xhr,settings,error){\n\tconsole.log(error);\n});\n```\n#### 获取用户输入keyCode\n```javascript\n<input type=\"text\" onkeydown=\"getCode(event);\" >\n\n//Javascript 代码\n//代码如下:\nfunction getCode(evt){\n\t//兼容IE和Firefox获得keyBoardEvent对象\n\tevt =  evt || window.event;\n\t//兼容IE和Firefox获得keyBoardEvent对象的键值\n\tvar key = evt.keyCode || evt.which;\n\t//显示按键键值\n\tconsole.info(key);\n}\n```\n#### Date在IE8以下版本的问题\n使用 new Date(‘2015-10-10’),在ie8下会转成NaN,需要使用new Date(‘2015/10/10’)，我们可以自定义一个时间转换函数\n```javascript\nfunction parse( dateStr ){\n   if( dateStr instanceof Date ){\n        return dateStr;\n    } else if( /^\\d+$/.test( dateStr ) ) {\n        return new Date( parseInt( dateStr , 10 ) );\n    } else {\n        return new Date( Date.parse( dateStr.replace(/-/g,'/') ) );\n    }\n}\n```\n#### 搜索框的值\n```javascript\n$(\"#js_ipt\")\n   .focus(function(){$(this).val('')})\n   .blur(function(){\n     var $this = $(this);\n    ($this.val() === '')? $this.val('请搜索...') : null;\n });\n ```\n#### 部分刷新\n```javascript\nsetInterval(function() { \n  $(\"#content\").load(url);\n }, 5000);\n ```\n#### 密码强度\n```javascript\n//密码为八位及以上并且字母数字特殊字符三项都包括\nvar strongRegex = new RegExp(\"^(?=.{8,})(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*\\\\W).*$\", \"g\");\n//密码为七位及以上并且字母、数字、特殊字符三项中有两项，强度是中等 \nvar mediumRegex = new RegExp(\"^(?=.{7,})(((?=.*[A-Z])(?=.*[a-z]))|((?=.*[A-Z])(?=.*[0-9]))|((?=.*[a-z])(?=.*[0-9]))).*$\", \"g\");\n//更多字符\nvar enoughRegex = new RegExp(\"(?=.{6,}).*\", \"g\");\n```\n#### 滚动动态加载内容\n```javascript\nvar loading = false;\n$(window).scroll(function(){\n if((($(window).scrollTop()+$(window).height())+250)>=$(document).height()){\n   if(loading == false){\n      loading = true;\n      $('#loadingbar').css(\"display\",\"block\");\n      $.ajax({\n\t\t  url:'/getData.json',\n\t\t  type:'POST',\n\t\t  dataType:'json',\n\t\t  data:{\n\t\t\t  id:'123'\n\t\t  }\n\t  }).done(function(data){\n\t\t  if(data.ret){\n\t\t  }\n\t  });\n    }\n  }\n});\n```javascript\n\n#### url参数转对象\n```javascript\nvar search = location.search.substr(1);\n    obj = {};\nsearch.replace(/([^?&]+)=([^?&]+)/g, function(s, v, k) {\n    obj[v] = decodeURIComponent(k);\n    return k + '=' +  v;\n});\n```","source":"_posts/前端知识点集合.md","raw":"title: 前端知识点集合\ndate: 2015-11-19 15:03:01\ntags: web\ntoc: true\n---\n#### getBoundingClientRect\n>计算视口坐标,方法返回一个有left、right、top、bottom属性的对象，分别表示元素四个位置的相对于视口的坐标。getBoundingClientRect所返回的坐标包含元素的内边距和边框，不包含外边距。兼容性很好，非常好用.\n\n#### scrollIntoView\n>可以让元素直接呈现到可视区域，实际上是屏幕显示区的最顶端\n<!--more-->\n\n#### 检查图片是否加在完\n```javascript\n$('img').load(function(){\n\tconsole.log('load over');\n});\n```\n#### 修复加载失败的图片\n```javascript\n$('img').on('error',function(){\n\t$(this).prop('src','/default.png');\n});\n```\n#### 回到顶部\n```javascript\n$(document).animate({scrollTop:0},1000);\n```\n#### 图片预加载\n```javascript\n$.preLoad = function(){\n\tfor(var i = 0,len = arguments.length;i<len;i++){\n\t\tvar $img = $('<img>');\n\t\t$img.attr('src',arguments[i]);\n\t}\n}\nvar imgList = ['/img1.png','/img2.png'];\n$.preLoad(imgList);\n```javascript\n#### visible\n```javascript\n$(document).on('visibilitychange', function (e) {\n\tif (e.target.visibilityState === 'visible') {\n\t\tconsole.log('visible');\n\t} else {\n\t\tconsole.log('hidden');\n\t}\n});\n```\n用来监听浏览器是否处于激活状态，可视状态\n\n#### ajax调用错误处理\n```javascript\n$(document).ajaxError(function(e,xhr,settings,error){\n\tconsole.log(error);\n});\n```\n#### 获取用户输入keyCode\n```javascript\n<input type=\"text\" onkeydown=\"getCode(event);\" >\n\n//Javascript 代码\n//代码如下:\nfunction getCode(evt){\n\t//兼容IE和Firefox获得keyBoardEvent对象\n\tevt =  evt || window.event;\n\t//兼容IE和Firefox获得keyBoardEvent对象的键值\n\tvar key = evt.keyCode || evt.which;\n\t//显示按键键值\n\tconsole.info(key);\n}\n```\n#### Date在IE8以下版本的问题\n使用 new Date(‘2015-10-10’),在ie8下会转成NaN,需要使用new Date(‘2015/10/10’)，我们可以自定义一个时间转换函数\n```javascript\nfunction parse( dateStr ){\n   if( dateStr instanceof Date ){\n        return dateStr;\n    } else if( /^\\d+$/.test( dateStr ) ) {\n        return new Date( parseInt( dateStr , 10 ) );\n    } else {\n        return new Date( Date.parse( dateStr.replace(/-/g,'/') ) );\n    }\n}\n```\n#### 搜索框的值\n```javascript\n$(\"#js_ipt\")\n   .focus(function(){$(this).val('')})\n   .blur(function(){\n     var $this = $(this);\n    ($this.val() === '')? $this.val('请搜索...') : null;\n });\n ```\n#### 部分刷新\n```javascript\nsetInterval(function() { \n  $(\"#content\").load(url);\n }, 5000);\n ```\n#### 密码强度\n```javascript\n//密码为八位及以上并且字母数字特殊字符三项都包括\nvar strongRegex = new RegExp(\"^(?=.{8,})(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*\\\\W).*$\", \"g\");\n//密码为七位及以上并且字母、数字、特殊字符三项中有两项，强度是中等 \nvar mediumRegex = new RegExp(\"^(?=.{7,})(((?=.*[A-Z])(?=.*[a-z]))|((?=.*[A-Z])(?=.*[0-9]))|((?=.*[a-z])(?=.*[0-9]))).*$\", \"g\");\n//更多字符\nvar enoughRegex = new RegExp(\"(?=.{6,}).*\", \"g\");\n```\n#### 滚动动态加载内容\n```javascript\nvar loading = false;\n$(window).scroll(function(){\n if((($(window).scrollTop()+$(window).height())+250)>=$(document).height()){\n   if(loading == false){\n      loading = true;\n      $('#loadingbar').css(\"display\",\"block\");\n      $.ajax({\n\t\t  url:'/getData.json',\n\t\t  type:'POST',\n\t\t  dataType:'json',\n\t\t  data:{\n\t\t\t  id:'123'\n\t\t  }\n\t  }).done(function(data){\n\t\t  if(data.ret){\n\t\t  }\n\t  });\n    }\n  }\n});\n```javascript\n\n#### url参数转对象\n```javascript\nvar search = location.search.substr(1);\n    obj = {};\nsearch.replace(/([^?&]+)=([^?&]+)/g, function(s, v, k) {\n    obj[v] = decodeURIComponent(k);\n    return k + '=' +  v;\n});\n```","slug":"前端知识点集合","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599fh000p4wyjvzfipliw"},{"title":"使用nproxy实现本地代理","date":"2015-11-22T07:03:01.000Z","toc":true,"_content":"\n#### 安装\n##### 先安装Node.js\n##### 安装nproxy\n```javascript\nsudo npm install -g nproxy\n```\n##### nproxy介绍\n```javascript\nOptions:\n    -h, --help               output usage information\n    -V, --version            output the version number\n    -l, --list [list]        Specify the replace rule file\n    -p, --port [port]        Specify the port\n    -t, --timeout [timeout]  Specify the request timeout(5 seconds by default)\n    -d, --debug              Enable debug mode\n    -n, --networks           Display network interface list\n```\n<!--more-->\n\n##### 开启代理端口\n```javascript\nnproxy -l replace_rule.js -p 8188\n```\n使用本地replace_rule.js转换规则，监听本地8188端口\n\n##### replace_rule.js\n```javascript\nmodule.exports = [\n    {\n        pattern:'http://test.test.com/pro/(.*)',\n        responder:\"http://127.0.0.1/pro/$1\"\n    }\n];\n```\n##### 浏览器怎么做\n* 安装代理插件，一大堆\n* 配置代理 127.0.0.1 端口8188\n* 可以设置自动转换规则，即：哪些网站使用这个代理","source":"_posts/使用nproxy实现本地代理.md","raw":"title: 使用nproxy实现本地代理\ndate: 2015-11-22 15:03:01\ntags: web\ntoc: true\n---\n\n#### 安装\n##### 先安装Node.js\n##### 安装nproxy\n```javascript\nsudo npm install -g nproxy\n```\n##### nproxy介绍\n```javascript\nOptions:\n    -h, --help               output usage information\n    -V, --version            output the version number\n    -l, --list [list]        Specify the replace rule file\n    -p, --port [port]        Specify the port\n    -t, --timeout [timeout]  Specify the request timeout(5 seconds by default)\n    -d, --debug              Enable debug mode\n    -n, --networks           Display network interface list\n```\n<!--more-->\n\n##### 开启代理端口\n```javascript\nnproxy -l replace_rule.js -p 8188\n```\n使用本地replace_rule.js转换规则，监听本地8188端口\n\n##### replace_rule.js\n```javascript\nmodule.exports = [\n    {\n        pattern:'http://test.test.com/pro/(.*)',\n        responder:\"http://127.0.0.1/pro/$1\"\n    }\n];\n```\n##### 浏览器怎么做\n* 安装代理插件，一大堆\n* 配置代理 127.0.0.1 端口8188\n* 可以设置自动转换规则，即：哪些网站使用这个代理","slug":"使用nproxy实现本地代理","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599fj000r4wyjrve9b6oy"},{"title":"从零开始Python-07","date":"2015-10-12T01:12:10.000Z","toc":true,"_content":"##### 迭代\n>使用for in迭代\n```python\nx=['asd','zxc','123']\nfor i in x:\n    print i\n```\n<!--more-->\n\n##### 迭代索引\n```python\nx=['asd','zxc','123']\nfor k,v in x:\n    print k,'-',v\n```\n##### 迭代dict value\n>values方法,把dict转换成value的list\n```python\nx = {'a':1,'b':2}\nprint x.values()\n```\n* itervalues方法,不转换，迭代过程中依次取dict的value\n```python\nx = {'a':1,'b':2}\nprint x.itervalues()\n```\n\n##### 迭代dict key value\n```python\nx = {'a':1,'b':2}\nfor k,v in x.items():\n    print k,'-',v\n```\n* items，iteritems类似，把dict转换成 tuple的list\n\n##### 生成列表\n>range\n```python\nrange(1,100) #[1,2,3,...,100]\n\n[a+a for a in range(1,100)] # 1-100，每个数自身相加 [2,4,6,...,200]\n```\n##### 复杂表达式\n```python\nx = ['a':1,'b':2]\ntmpl=['<div>%s</div><div>%s</div>' (k,v) for k,v in x.iteritems()]\n```\n\n##### 条件过滤\n```python\n[a+a for a in range(1,100) if x > 50 ] # 1-100，每个数自身相加 [2,4,6,...,200]\n```\n\n##### 多层表达式\n```python\n[x+y for x in 'asd' for y in '123'] # ['a1','s2','d3']\n\nx=[]\nfor i in 'asd':\n    for j in '123':\n        x.append(i+j)\n```\n","source":"_posts/从零开始Python-07.md","raw":"title: 从零开始Python-07\ndate: 2015-10-12 09:12:10\ntags: python\ntoc: true\n---\n##### 迭代\n>使用for in迭代\n```python\nx=['asd','zxc','123']\nfor i in x:\n    print i\n```\n<!--more-->\n\n##### 迭代索引\n```python\nx=['asd','zxc','123']\nfor k,v in x:\n    print k,'-',v\n```\n##### 迭代dict value\n>values方法,把dict转换成value的list\n```python\nx = {'a':1,'b':2}\nprint x.values()\n```\n* itervalues方法,不转换，迭代过程中依次取dict的value\n```python\nx = {'a':1,'b':2}\nprint x.itervalues()\n```\n\n##### 迭代dict key value\n```python\nx = {'a':1,'b':2}\nfor k,v in x.items():\n    print k,'-',v\n```\n* items，iteritems类似，把dict转换成 tuple的list\n\n##### 生成列表\n>range\n```python\nrange(1,100) #[1,2,3,...,100]\n\n[a+a for a in range(1,100)] # 1-100，每个数自身相加 [2,4,6,...,200]\n```\n##### 复杂表达式\n```python\nx = ['a':1,'b':2]\ntmpl=['<div>%s</div><div>%s</div>' (k,v) for k,v in x.iteritems()]\n```\n\n##### 条件过滤\n```python\n[a+a for a in range(1,100) if x > 50 ] # 1-100，每个数自身相加 [2,4,6,...,200]\n```\n\n##### 多层表达式\n```python\n[x+y for x in 'asd' for y in '123'] # ['a1','s2','d3']\n\nx=[]\nfor i in 'asd':\n    for j in '123':\n        x.append(i+j)\n```\n","slug":"从零开始Python-07","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599fm000t4wyjk6i55jz7"},{"title":"从零开始Python-06","date":"2015-10-11T13:11:24.000Z","toc":true,"_content":"##### 函数\n###### 内置函数\n> 可以引用math包，里面有很多数学函数\n<!--more-->\n`import math`\n* abs(x)\n```python\nabs(-1)\nabs(11)\n```\n* cmp(x,y)\n```python\ncmp(1,2) #-1\ncmp(1,-1) #1\ncmp(1,1) #0\n```\n* int(x)\n```python\nint('111') #111\nint('1.11') #1\n```\n* str(x)\n```python\nstr(111) #'111'\n```\n\n###### 编写函数\n>使用def语句\n```python\ndef myFuc(a):\n    return a+'...ok'\n```\n如果没有返回结果，函数也会返回None,return None可以简写为return\n\n###### 返回多个值\n```python\ndef myFuc(x,y):\n    xx = x+1\n    yy = y+1\n    return xx,yy\n\na,b = myFuc(1,2) #2,3\n```\n实际返回的是一个tuple,由于是()包着的，所以从语法上讲可以省略括号,多个变量可以同时接收一个tuple,按照对应的位置赋值\n\n###### 递归函数\n>自身调用自身的函数\n```python\ndef myFuc(x):\n    if x==1:\n        return 1\n\nreturn x * myFuc(x-1)\n```\n###### 默认参数\n```python\ndef myFuc(x,y=2):\n    return x*y\n```\n\n###### 可变参数\n```python\ndef muFuc(*args):\n    sum = 0\n    for x in args:\n        sum = sum+x\n    \n    return sum\n\n#args 看成tuple\n```","source":"_posts/从零开始Python-06.md","raw":"title: 从零开始Python-06\ndate: 2015-10-11 21:11:24\ntags: python\ntoc: true\n---\n##### 函数\n###### 内置函数\n> 可以引用math包，里面有很多数学函数\n<!--more-->\n`import math`\n* abs(x)\n```python\nabs(-1)\nabs(11)\n```\n* cmp(x,y)\n```python\ncmp(1,2) #-1\ncmp(1,-1) #1\ncmp(1,1) #0\n```\n* int(x)\n```python\nint('111') #111\nint('1.11') #1\n```\n* str(x)\n```python\nstr(111) #'111'\n```\n\n###### 编写函数\n>使用def语句\n```python\ndef myFuc(a):\n    return a+'...ok'\n```\n如果没有返回结果，函数也会返回None,return None可以简写为return\n\n###### 返回多个值\n```python\ndef myFuc(x,y):\n    xx = x+1\n    yy = y+1\n    return xx,yy\n\na,b = myFuc(1,2) #2,3\n```\n实际返回的是一个tuple,由于是()包着的，所以从语法上讲可以省略括号,多个变量可以同时接收一个tuple,按照对应的位置赋值\n\n###### 递归函数\n>自身调用自身的函数\n```python\ndef myFuc(x):\n    if x==1:\n        return 1\n\nreturn x * myFuc(x-1)\n```\n###### 默认参数\n```python\ndef myFuc(x,y=2):\n    return x*y\n```\n\n###### 可变参数\n```python\ndef muFuc(*args):\n    sum = 0\n    for x in args:\n        sum = sum+x\n    \n    return sum\n\n#args 看成tuple\n```","slug":"从零开始Python-06","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599fo000w4wyj111hiyf9"},{"title":"从零开始Python-05","date":"2015-10-10T03:12:24.000Z","toc":true,"_content":"##### dict\n>键值对 字典\n```python\nx = {'a':1,'b':2}\nlen(x) #集合大小\nprint x['a'] # 1\n```\n<!--more-->\n* key value形式，通过key查找\n* 通过key去访问value，如果key不存在就报错，为了避免报错，可以先判断\n```python\nif 'a' in x:\n    print x['a']\n```\n* 使用get方法，在key不存在的时候返回None\n```python\nprint x.get('a') # 1\n```\n* 查找速度快，但是消耗内存大，list占用内存小，查找速度慢\n* key不能重复\n* 存储没有顺序\n* key不可变\n* 增加一个元素,如果key已经存在则覆盖值\n```python\nx['c'] = 3\n```\n* 遍历for in\n```python\nfor i in x:\n    print i\n    print x[i]\n```\n\n##### set\n\n* 建立一组key,key永远不会重复，无序的，元素不能改变\n```python\nx = set(['a','b','c','c'])\n\nprint x # set(['a','c','b'])\n\n#访问\n'a' in x # True\n```\n* 使用for in遍历\n* 更新set,add()添加，如果已经存在不会报错，remove()移除，如果不存在报错","source":"_posts/从零开始Python-05.md","raw":"title: 从零开始Python-05\ndate: 2015-10-10 11:12:24\ntags: python\ntoc: true\n---\n##### dict\n>键值对 字典\n```python\nx = {'a':1,'b':2}\nlen(x) #集合大小\nprint x['a'] # 1\n```\n<!--more-->\n* key value形式，通过key查找\n* 通过key去访问value，如果key不存在就报错，为了避免报错，可以先判断\n```python\nif 'a' in x:\n    print x['a']\n```\n* 使用get方法，在key不存在的时候返回None\n```python\nprint x.get('a') # 1\n```\n* 查找速度快，但是消耗内存大，list占用内存小，查找速度慢\n* key不能重复\n* 存储没有顺序\n* key不可变\n* 增加一个元素,如果key已经存在则覆盖值\n```python\nx['c'] = 3\n```\n* 遍历for in\n```python\nfor i in x:\n    print i\n    print x[i]\n```\n\n##### set\n\n* 建立一组key,key永远不会重复，无序的，元素不能改变\n```python\nx = set(['a','b','c','c'])\n\nprint x # set(['a','c','b'])\n\n#访问\n'a' in x # True\n```\n* 使用for in遍历\n* 更新set,add()添加，如果已经存在不会报错，remove()移除，如果不存在报错","slug":"从零开始Python-05","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599fr000y4wyj8myk6s7w"},{"title":"从零开始Python-04","date":"2015-10-09T04:09:54.000Z","toc":true,"_content":"##### 控制语句\n###### if\n>条件判断，if条件为true就会执行分支语句\n<!--more-->\n```python\na = 2\nif a == 2:\n    print 'a:',a\n\n#四个空格缩进，具有相同缩进的代码就是一个代码块，退出缩进需要添加一行回车\n```\n###### if else\n>if True执行if代码块，否则执行else代码块\n```python\na = 2\nif a == 2:\n    print 'a 1:',a\n\nelse:\n    print 'a 2:',a\n    \n\na = 2\nif not a == 2:\n    print 'a 1:',a\n\nelse:\n    print 'a 2:',a\n```\n\n###### if elif else\n>if elif条件判断，符合执行，否则执行else\n```python\na = 2\nif a == 1:\n    print 'a 1:',a\n\nelif a == 2:\n    print 'a 2:',a\n\nelse:\n    print 'a 3:',a\n```\n\n###### for\n>list和tuple可以使用for循环，读取每个值\n```python\nx = ['a','b','c']\nfor i in x:\n    print i\n```\n\n###### while\n>根据表达式判断是否结束\n```python\ncount = 100\nindex = 0\nwhile index < count:\n    print index\n    index = index + 1\n```\n\n###### break\n>退出循环\n```python\nall = 0\nx = 1\nwhile True:\n    all = all + x\n    x = x + 1\n    if x > 55:\n        break\n\nprint all\n```\n\n###### continue\n>跳过本次循环，继续执行下一次循环\n```python\nall = [11,22,33,44,55,66,77,88,99]\nsum\nfor x in all:\n    if x < 50:\n        continue\n\n    sum = sum + x\n```\n\n###### 嵌套循环\n>循环内部添加循环\n```python\nfor x in [1,2,3,4,5]:\n    for y in [6,7,8,9,10]:\n        print x+y\n```","source":"_posts/从零开始Python-04.md","raw":"title: 从零开始Python-04\ndate: 2015-10-09 12:09:54\ntags: python\ntoc: true\n---\n##### 控制语句\n###### if\n>条件判断，if条件为true就会执行分支语句\n<!--more-->\n```python\na = 2\nif a == 2:\n    print 'a:',a\n\n#四个空格缩进，具有相同缩进的代码就是一个代码块，退出缩进需要添加一行回车\n```\n###### if else\n>if True执行if代码块，否则执行else代码块\n```python\na = 2\nif a == 2:\n    print 'a 1:',a\n\nelse:\n    print 'a 2:',a\n    \n\na = 2\nif not a == 2:\n    print 'a 1:',a\n\nelse:\n    print 'a 2:',a\n```\n\n###### if elif else\n>if elif条件判断，符合执行，否则执行else\n```python\na = 2\nif a == 1:\n    print 'a 1:',a\n\nelif a == 2:\n    print 'a 2:',a\n\nelse:\n    print 'a 3:',a\n```\n\n###### for\n>list和tuple可以使用for循环，读取每个值\n```python\nx = ['a','b','c']\nfor i in x:\n    print i\n```\n\n###### while\n>根据表达式判断是否结束\n```python\ncount = 100\nindex = 0\nwhile index < count:\n    print index\n    index = index + 1\n```\n\n###### break\n>退出循环\n```python\nall = 0\nx = 1\nwhile True:\n    all = all + x\n    x = x + 1\n    if x > 55:\n        break\n\nprint all\n```\n\n###### continue\n>跳过本次循环，继续执行下一次循环\n```python\nall = [11,22,33,44,55,66,77,88,99]\nsum\nfor x in all:\n    if x < 50:\n        continue\n\n    sum = sum + x\n```\n\n###### 嵌套循环\n>循环内部添加循环\n```python\nfor x in [1,2,3,4,5]:\n    for y in [6,7,8,9,10]:\n        print x+y\n```","slug":"从零开始Python-04","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599ft00104wyjdu61ngvk"},{"title":"从零开始Python-03","date":"2015-10-08T07:14:09.000Z","toc":true,"_content":"##### list\n>数据类型的列表，有序集合，可以执行添加删除操作\n<!--more-->\n```python\nlist1 = ['1','qwe','asd1']\nlist1 # ['1','qwe','asd1']\n\nlist2 = [1,True,'123aS4'] #可以包含不同类型的元素\nlist2 # [1,True,'123aS4']\n\nlist3 = []  #空list\n\nlist2[0] # 1  按照索引访问\nlist[4] #报错，超出索引\n\nlist2[-1] # '123aS4' 倒序访问\nlist[-4] #报错，不存在\n```\n* append 追加到末尾\n* insert(index,item) 指定位置添加元素\n* pop() 删除最后一个元素\n* pop(index) 删除指定位置的元素\n* 替换元素 直接给特定位置元素赋值\n\n##### 切片\n>list切片，字符串切片\n```python\nx = [1,2,3,4,5,6]\nx[:3] #取前三个 索引为0,1,2的元素\nx[1:3] #从索引1开始到索引3结束，取两个元素\nx[:] #取所有元素，返回还是list\nx[::2] #每两个取1个\n#倒序\nx[-1:] #最后一个元素索引－1\n```\n```python\nx='asdfghjkl'\nx[:3]\nx[1:3]\nx[::2]\n```\n\n##### tuple\n>有序列表，元组，与list区别是，一旦创建就不能修改\n```python\ntuple1 = (1,'123',True)\ntuple1[1] # 1\ntuple1[-1] # True\n\n#单元素\ntuple2 = (1,) #如果不加 , 括号会被当作运算符去执行\ntuple2 # (1,)\n\ntuple1 # (1,'123',True) #加不加 , 输出结果都一样\n\n#tuple中的元素包含数组，就变成了可变的，数组的内容可变\nx1 = (1,2,[3,4])\nx2 = x1[2]\nx[1] = 'a'\nx[2] = 'b'\n\nprint x1 # (1,2,['a','b'])\n```","source":"_posts/从零开始Python-03.md","raw":"title: 从零开始Python-03\ndate: 2015-10-08 15:14:09\ntags: python\ntoc: true\n---\n##### list\n>数据类型的列表，有序集合，可以执行添加删除操作\n<!--more-->\n```python\nlist1 = ['1','qwe','asd1']\nlist1 # ['1','qwe','asd1']\n\nlist2 = [1,True,'123aS4'] #可以包含不同类型的元素\nlist2 # [1,True,'123aS4']\n\nlist3 = []  #空list\n\nlist2[0] # 1  按照索引访问\nlist[4] #报错，超出索引\n\nlist2[-1] # '123aS4' 倒序访问\nlist[-4] #报错，不存在\n```\n* append 追加到末尾\n* insert(index,item) 指定位置添加元素\n* pop() 删除最后一个元素\n* pop(index) 删除指定位置的元素\n* 替换元素 直接给特定位置元素赋值\n\n##### 切片\n>list切片，字符串切片\n```python\nx = [1,2,3,4,5,6]\nx[:3] #取前三个 索引为0,1,2的元素\nx[1:3] #从索引1开始到索引3结束，取两个元素\nx[:] #取所有元素，返回还是list\nx[::2] #每两个取1个\n#倒序\nx[-1:] #最后一个元素索引－1\n```\n```python\nx='asdfghjkl'\nx[:3]\nx[1:3]\nx[::2]\n```\n\n##### tuple\n>有序列表，元组，与list区别是，一旦创建就不能修改\n```python\ntuple1 = (1,'123',True)\ntuple1[1] # 1\ntuple1[-1] # True\n\n#单元素\ntuple2 = (1,) #如果不加 , 括号会被当作运算符去执行\ntuple2 # (1,)\n\ntuple1 # (1,'123',True) #加不加 , 输出结果都一样\n\n#tuple中的元素包含数组，就变成了可变的，数组的内容可变\nx1 = (1,2,[3,4])\nx2 = x1[2]\nx[1] = 'a'\nx[2] = 'b'\n\nprint x1 # (1,2,['a','b'])\n```","slug":"从零开始Python-03","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599fv00124wyjw1r2vexg"},{"title":"从零开始Python-02","date":"2015-10-07T03:10:30.000Z","toc":true,"_content":"##### print语句\n>输出语句\n```python\nprint 'hello world'\nprint 'hello','world'\nprint 100\nprint 100+200\n```\n<!--more-->\n\n##### 注释\n>使用#开头\n```python\nprint 'how' #这是个注释\n```\n\n##### 变量\n>大小写英文，数字和_的组合，而且不能用数字开头\n```python\na=1\na_123='qwe'\n```\n\n##### 变量类型不固定的动态语言\n```python\na='ABC'\nb=a\na='XYZ'\nprint b  #'ABC'\n```\n\n##### 定义字符串\n```python\n‘’ “” \\ 转义，后面的字符不做解析\n'I\\'m a jser.\\\"OK\\\"'\nraw字符串，在字符串前面加r,里面的字符不做转义\n‘’’里面放多行字符串’’’，前面也可以加r\n```\n\n##### Unicode字符串\n```python\nu'中文'\nu'''中文'''\nur'''中文 \"韩文\"各种显示'''\n保存文件的时候，可以在第一行添加 ‘# -- coding: utf-8 --‘ 告诉解析起，用utf-8编码读取\n```\n\n##### 整数和浮点数\n>四则运算，整数的运算永远是精确的，浮点数的计算可能不是精确的，计算机二进制处理，在除法运算中 / 取模，% 取余。\n```python\n11/4 #2\n11.0/4 #2.75\n```\n\n##### 布尔类型\n>* and两个都是True,计算结果为True\n* or 一个为True结果就是True,两个都是False结果为False\n* not True变成False,False变成True\n* python把0 空字符串’’ 和None看成False,其他数值和非空字符串都看成True.\n\n##### 短路计算\n>* 计算a and b的时候，如果a是False，根据与运算法则，整个结果都是False，则返回False，如果a为True，则返回b\n* 计算a or b的时候，如果a是True，返回True，因此返回a，如果a为False，则返回b","source":"_posts/从零开始Python-02.md","raw":"title: 从零开始Python-02\ndate: 2015-10-07 11:10:30\ntags: python\ntoc: true\n---\n##### print语句\n>输出语句\n```python\nprint 'hello world'\nprint 'hello','world'\nprint 100\nprint 100+200\n```\n<!--more-->\n\n##### 注释\n>使用#开头\n```python\nprint 'how' #这是个注释\n```\n\n##### 变量\n>大小写英文，数字和_的组合，而且不能用数字开头\n```python\na=1\na_123='qwe'\n```\n\n##### 变量类型不固定的动态语言\n```python\na='ABC'\nb=a\na='XYZ'\nprint b  #'ABC'\n```\n\n##### 定义字符串\n```python\n‘’ “” \\ 转义，后面的字符不做解析\n'I\\'m a jser.\\\"OK\\\"'\nraw字符串，在字符串前面加r,里面的字符不做转义\n‘’’里面放多行字符串’’’，前面也可以加r\n```\n\n##### Unicode字符串\n```python\nu'中文'\nu'''中文'''\nur'''中文 \"韩文\"各种显示'''\n保存文件的时候，可以在第一行添加 ‘# -- coding: utf-8 --‘ 告诉解析起，用utf-8编码读取\n```\n\n##### 整数和浮点数\n>四则运算，整数的运算永远是精确的，浮点数的计算可能不是精确的，计算机二进制处理，在除法运算中 / 取模，% 取余。\n```python\n11/4 #2\n11.0/4 #2.75\n```\n\n##### 布尔类型\n>* and两个都是True,计算结果为True\n* or 一个为True结果就是True,两个都是False结果为False\n* not True变成False,False变成True\n* python把0 空字符串’’ 和None看成False,其他数值和非空字符串都看成True.\n\n##### 短路计算\n>* 计算a and b的时候，如果a是False，根据与运算法则，整个结果都是False，则返回False，如果a为True，则返回b\n* 计算a or b的时候，如果a是True，返回True，因此返回a，如果a为False，则返回b","slug":"从零开始Python-02","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599fw00144wyjjz61wxxo"},{"title":"从零开始Python-01","date":"2015-10-06T02:50:37.000Z","toc":true,"_content":"##### 数据类型\n>计算机不但可以处理数值，还可以处理文本，图形，音频，视频，网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中有如下几种类型：\n<!--more-->\n* 整数\n\t0 －1 900等\n* 浮点数\n\t3.14 -5.5 1.1e9 2.5e-3等\n* 字符串\n\t''或者\"\"括起来的\n* 布尔值\n\tTrue或者False\n* 空值\n\tNone\n\n区分大小写","source":"_posts/从零开始Python-01.md","raw":"title: 从零开始Python-01\ndate: 2015-10-06 10:50:37\ntags: python\ntoc: true\n---\n##### 数据类型\n>计算机不但可以处理数值，还可以处理文本，图形，音频，视频，网页等各种各样的数据，不同的数据，需要定义不同的数据类型。在Python中有如下几种类型：\n<!--more-->\n* 整数\n\t0 －1 900等\n* 浮点数\n\t3.14 -5.5 1.1e9 2.5e-3等\n* 字符串\n\t''或者\"\"括起来的\n* 布尔值\n\tTrue或者False\n* 空值\n\tNone\n\n区分大小写","slug":"从零开始Python-01","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599fx00164wyjg6qfvys0"},{"title":"从零开始Node-04","date":"2015-10-16T04:23:42.000Z","toc":true,"_content":"##### nodejs连接mongodb\n\n###### 操作系统\nOS X\n\n###### 安装\n```javascript\nbrew update\nbrew install mongodb\nbrew install node\nsudo npm install -g express\n```\n<!--more-->\n\n###### 安装路径\nmongo安装在 `/usr/local/bin/mongo` 这个路径\n数据库文件在 `/data/db/` 这个路径\n\n###### 操作mongo\n* 执行mongod\n服务默认使用 host：127.0.0.1 port：27017\n* 执行mongo\n```javascript\nshow dbs 查询已有数据库\nuse databaseTest 创建databaseTest数据库\ndb.createCollection('test') 创建表\nshow collections 查看表\ndb.test.save({name:\"qwe\"}) 插入数据\ndb.test.find() 查找数据\ndb.test.find({name:\"qwe\"})\ndb.remove({name:\"qwe\"}) 删除数据\ndb.test.ensureIndex({\"name\":1}) 创建索引\ndb.test.getIndexes() 查看索引\ndb.test.dropIndex({\"username\":1}) 删除索引\ndb.test.ensureIndex({\"name\":1, \"age\":-1})\n数字1表示name键的索引按升序存储，-1表示age键的索引按照降序方式存储。\ndb.test.ensureIndex({\"id\":1},{\"unique\":true}) 创建唯一索引，插入重复的值将会报错\n如果字段被添加了索引，有可能在插入数据的时候报索引重复的错误，这时候先检查表创建的索引，如果不需要请手动删除索引\n```\n\n###### mongo 配置文件：待补充\n\n###### 连接\n>express 4.x版本有些改动\n* 初始化程序 express -e test 创建test工程\n* 进入package.json 增加\n```javascript\n\"connect-mongo\": \"*\",\n\"mongodb\": \"*\"\n```\n* 执行sudo npm install\n* 根目录创建settings.js 存放数据库配置基本信息\n```javascript\nmodule.exports = {\n    cookieSecret: 'webApp',\n    db: 'webApp',\n    host: '127.0.0.1',\n    port: 27017\n};\n```\n* 创建models文件夹，增加db.js\n```javascript\nvar settings = require('../settings');\nvar mongodb = require('mongodb');\nvar Db = mongodb.Db;\nvar Connection = mongodb.Connection;\nvar Server = mongodb.Server;\nmodule.exports = new Db(settings.db, new Server(settings.host, settings.port, {\n    auto_reconnect: true\n}), {\n    safe: true\n});\n```\n* 在models文件夹下 创建实体类info.js\n```javascript\nvar mongodb = require('./db');\nfunction Info(info) {\n    this.info = info.info;\n}\nmodule.exports = Info;\nInfo.prototype.save = function save(callback) {\n    var info = {\n        id: (new Date()).getTime(),\n        info: this.info\n    };\n    mongodb.open(function(err, db) {\n        if (err) {\n            return callback(err);\n        }\n        db.collection('infoTable', function(err, collection) {\n            if (err) {\n                console.log(err);\n                mongodb.close();\n                return callback(err);\n            }\n            console.log(info);\n            collection.insert(info, {\n                safe: true\n            }, function(err, info) {\n                if (info) {\n                    console.log('ok');\n                } else {\n                    console.log(err);\n                    mongodb.close();\n                    callback(err, info);\n                }\n            });\n        });\n    });\n};\nInfo.prototype.get = function get(userinfo, callback) {\n    mongodb.open(function(err, db) {\n        if (err) {\n            console.log(err);\n            return callback(err);\n        }\n        db.collection('infoTable', function(err, collection) {\n            if (err) {\n                console.log(err);\n                mongodb.close();\n                return callback(err);\n            }\n            collection.findOne({\n                info: userinfo\n            }, function(err, info) {\n                mongodb.close();\n                if (info) {\n                    var info = new Info(info);\n                    console.log(info);\n                } else {\n                    callback(err, null);\n                }\n            });\n        });\n    });\n};\n```\n* 在routes文件夹下添加 post.js\n```javascript\nvar express = require('express');\nvar router = express.Router();\nvar Info = require('../models/info.js')\n\nrouter.post('/', function(req, res, next) {\n    var newInfo = new info({\n        name: req.body.Info || 'test'\n    });\n    newInfo.save(function(err) {\n        if (!err) {\n            console.log('success');\n            res.redirect('/');\n        }\n        console.log('error',err);\n        return res.redirect('/');\n    });\n});\n\nmodule.exports = router;\n```\n* 最后一步，在app.js中添加路由\n```javascript\n...\nvar post = require('./routes/post');\n...\n...\napp.use('/post', post);\n```","source":"_posts/从零开始Node-05.md","raw":"title: 从零开始Node-04\ndate: 2015-10-16 12:23:42\ntags: nodejs\ntoc: true\n---\n##### nodejs连接mongodb\n\n###### 操作系统\nOS X\n\n###### 安装\n```javascript\nbrew update\nbrew install mongodb\nbrew install node\nsudo npm install -g express\n```\n<!--more-->\n\n###### 安装路径\nmongo安装在 `/usr/local/bin/mongo` 这个路径\n数据库文件在 `/data/db/` 这个路径\n\n###### 操作mongo\n* 执行mongod\n服务默认使用 host：127.0.0.1 port：27017\n* 执行mongo\n```javascript\nshow dbs 查询已有数据库\nuse databaseTest 创建databaseTest数据库\ndb.createCollection('test') 创建表\nshow collections 查看表\ndb.test.save({name:\"qwe\"}) 插入数据\ndb.test.find() 查找数据\ndb.test.find({name:\"qwe\"})\ndb.remove({name:\"qwe\"}) 删除数据\ndb.test.ensureIndex({\"name\":1}) 创建索引\ndb.test.getIndexes() 查看索引\ndb.test.dropIndex({\"username\":1}) 删除索引\ndb.test.ensureIndex({\"name\":1, \"age\":-1})\n数字1表示name键的索引按升序存储，-1表示age键的索引按照降序方式存储。\ndb.test.ensureIndex({\"id\":1},{\"unique\":true}) 创建唯一索引，插入重复的值将会报错\n如果字段被添加了索引，有可能在插入数据的时候报索引重复的错误，这时候先检查表创建的索引，如果不需要请手动删除索引\n```\n\n###### mongo 配置文件：待补充\n\n###### 连接\n>express 4.x版本有些改动\n* 初始化程序 express -e test 创建test工程\n* 进入package.json 增加\n```javascript\n\"connect-mongo\": \"*\",\n\"mongodb\": \"*\"\n```\n* 执行sudo npm install\n* 根目录创建settings.js 存放数据库配置基本信息\n```javascript\nmodule.exports = {\n    cookieSecret: 'webApp',\n    db: 'webApp',\n    host: '127.0.0.1',\n    port: 27017\n};\n```\n* 创建models文件夹，增加db.js\n```javascript\nvar settings = require('../settings');\nvar mongodb = require('mongodb');\nvar Db = mongodb.Db;\nvar Connection = mongodb.Connection;\nvar Server = mongodb.Server;\nmodule.exports = new Db(settings.db, new Server(settings.host, settings.port, {\n    auto_reconnect: true\n}), {\n    safe: true\n});\n```\n* 在models文件夹下 创建实体类info.js\n```javascript\nvar mongodb = require('./db');\nfunction Info(info) {\n    this.info = info.info;\n}\nmodule.exports = Info;\nInfo.prototype.save = function save(callback) {\n    var info = {\n        id: (new Date()).getTime(),\n        info: this.info\n    };\n    mongodb.open(function(err, db) {\n        if (err) {\n            return callback(err);\n        }\n        db.collection('infoTable', function(err, collection) {\n            if (err) {\n                console.log(err);\n                mongodb.close();\n                return callback(err);\n            }\n            console.log(info);\n            collection.insert(info, {\n                safe: true\n            }, function(err, info) {\n                if (info) {\n                    console.log('ok');\n                } else {\n                    console.log(err);\n                    mongodb.close();\n                    callback(err, info);\n                }\n            });\n        });\n    });\n};\nInfo.prototype.get = function get(userinfo, callback) {\n    mongodb.open(function(err, db) {\n        if (err) {\n            console.log(err);\n            return callback(err);\n        }\n        db.collection('infoTable', function(err, collection) {\n            if (err) {\n                console.log(err);\n                mongodb.close();\n                return callback(err);\n            }\n            collection.findOne({\n                info: userinfo\n            }, function(err, info) {\n                mongodb.close();\n                if (info) {\n                    var info = new Info(info);\n                    console.log(info);\n                } else {\n                    callback(err, null);\n                }\n            });\n        });\n    });\n};\n```\n* 在routes文件夹下添加 post.js\n```javascript\nvar express = require('express');\nvar router = express.Router();\nvar Info = require('../models/info.js')\n\nrouter.post('/', function(req, res, next) {\n    var newInfo = new info({\n        name: req.body.Info || 'test'\n    });\n    newInfo.save(function(err) {\n        if (!err) {\n            console.log('success');\n            res.redirect('/');\n        }\n        console.log('error',err);\n        return res.redirect('/');\n    });\n});\n\nmodule.exports = router;\n```\n* 最后一步，在app.js中添加路由\n```javascript\n...\nvar post = require('./routes/post');\n...\n...\napp.use('/post', post);\n```","slug":"从零开始Node-05","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599fz00184wyjm22u95yw"},{"title":"从零开始Node-04","date":"2015-10-15T06:33:42.000Z","toc":true,"_content":"##### web开发\n>* 使用express框架\n* 版本 4.x\n* 安装 sudo npm uninstall -g express\n* 安装 sudo npm install -g express-generator,4.x以后的版本需要安装这个\n* 初始化工程 express -e webApp 使用express -h会发现，-e是使用ejs模版\n* webApp工程创建完毕，我们执行 cd webApp && sudo npm install 为工程安装相关依赖\n* package.json会比以往的不同\n<!--more-->\n```javascript\n{\n    \"name\": \"webApp\",\n    \"version\": \"0.0.0\",\n    \"private\": true,\n    \"scripts\": {\n        \"start\": \"node ./bin/www\"\n    },\n        \"dependencies\": {\n        \"body-parser\": \"~1.13.1\",\n        \"cookie-parser\": \"~1.3.5\",\n        \"debug\": \"~2.2.0\",\n        \"ejs\": \"~2.3.2\",\n        \"express\": \"~4.13.0\",\n        \"morgan\": \"~1.6.1\",\n        \"serve-favicon\": \"~2.3.0\"\n    }\n}\n```\n* 启动server npm start 会进入package.json寻找start属性\n* 与以往不同的是，之前http.server启动的代码是在app.js中，而现在是在./bin/www这个文件中\n* 文件结构介绍\n    1 bin下面是一个www文件，启动node server的\n    2 node_modules 安装依赖的模块\n    3 public 静态资源，js css images\n    4 routes 路由\n    5 views 页面模版\n    6 app.js 主文件，引擎，路径，解析器，工具，路由等相关配置\n    7 `package.json` node.js标准配置文件","source":"_posts/从零开始Node-04.md","raw":"title: 从零开始Node-04\ndate: 2015-10-15 14:33:42\ntags: nodejs\ntoc: true\n---\n##### web开发\n>* 使用express框架\n* 版本 4.x\n* 安装 sudo npm uninstall -g express\n* 安装 sudo npm install -g express-generator,4.x以后的版本需要安装这个\n* 初始化工程 express -e webApp 使用express -h会发现，-e是使用ejs模版\n* webApp工程创建完毕，我们执行 cd webApp && sudo npm install 为工程安装相关依赖\n* package.json会比以往的不同\n<!--more-->\n```javascript\n{\n    \"name\": \"webApp\",\n    \"version\": \"0.0.0\",\n    \"private\": true,\n    \"scripts\": {\n        \"start\": \"node ./bin/www\"\n    },\n        \"dependencies\": {\n        \"body-parser\": \"~1.13.1\",\n        \"cookie-parser\": \"~1.3.5\",\n        \"debug\": \"~2.2.0\",\n        \"ejs\": \"~2.3.2\",\n        \"express\": \"~4.13.0\",\n        \"morgan\": \"~1.6.1\",\n        \"serve-favicon\": \"~2.3.0\"\n    }\n}\n```\n* 启动server npm start 会进入package.json寻找start属性\n* 与以往不同的是，之前http.server启动的代码是在app.js中，而现在是在./bin/www这个文件中\n* 文件结构介绍\n    1 bin下面是一个www文件，启动node server的\n    2 node_modules 安装依赖的模块\n    3 public 静态资源，js css images\n    4 routes 路由\n    5 views 页面模版\n    6 app.js 主文件，引擎，路径，解析器，工具，路由等相关配置\n    7 `package.json` node.js标准配置文件","slug":"从零开始Node-04","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599g0001b4wyjnqsgmob7"},{"title":"从零开始Node-03","date":"2015-10-14T05:34:43.000Z","toc":true,"_content":"##### Node.js API\n###### 全局对象\n>在javascript中，window是全局对象\n在Node.js中，global是全局对象。\n<!--more-->\n满足全局变量的条件：\n* 最外层定义的变量\n* 全局对象的属性\n* 隐式定义的变量\n全局变量过多定义过于随意会带来全局变量污染的问题，为了避免全局变量污染，在定义变量的时候使用var\n\n###### process\nNode.js的进程对象\n* Event: ‘exit’\n>process退出时会出发\n* Event: ‘uncaughtException’\n>process发生异常时触发\n* process自定义事件\n```javascript\nprocess.on('test',function(data)){\n    console.log(data);\n    process.exit(0);\n}\nprocess.emmit('test','emmit test');\n```\n* process.stdin\n>标准输入流\n```javascript\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(data) { \n    process.stdout.write('data：' + data.toString());\n});\n```\n* process.stdout\n>标准输出流,比console.log()更底层\n```javascript\nprocess.stdout.write(‘data’)\n```\n* process.argv\n>命令行参数数组\n```javascript\nconsole.log(process.argv); //存储为 test.js\n\n//执行\nnode test.js 1 \"asd\" age=12\n```\n* process.nextTick(callback)\n>为事件循环设置一项任务，在下次事件循环调用响应时调用callback\n```javascript\nfunction deal(args,callback){\n    doit(args);\n    process.nextTick(callback);\n}\ndeal(function(){\n    dome();\n});\n\n//如果doit 和 dome都是很耗时的函数，这样把耗时的操作拆分成两个事件，减少了每个事件执行时间，提高了事件响应速度。\n\n//比setTimeout(fn,times)效率更高\n```\n* process.pid、process.title、process.arch、process.platform\n>进程id，进程名字，进程架构(系统架构，X86)，进程平台(操作系统)\n* process.execPath\n>返回当前node.js进程的启动命令路径\n* process.memorUsage()\n>进程的内存使用情况\n* process.kill(pid, signal=’SIGTERM’)\n>发出一个kill信号给指定pid\n* process.exit(code=0)\n>kill当前进程，退出本进程\n…\n\n###### console\n* console.log()\n>向标准输出流打印字符并以换行符结\n```javascript\nconsole.log(123); //123\nconsole.log('d% world',hello); //hello world\n```\n* console.error()\n>向标准错误流输出\n* console.trace()\n> 向标准错误流输出当前调用栈\n* console.info()\n> 如果只有一个参数，输出这个参数的字符串形式\n如果有多个参数，格式输出\n如果没有参数，只打印一个换行符\n* console.warn()\n>输出警告\n* console.dir(obj)\n>将obj作为参数传递给util.inspect并执行，将返回的结果打印到stdout\n* console.time(label)\n>统计操作执行的时间\n* console.timeEnd(label)\n>统计操作执行的时间\n```javascript\nconsole.time('start');\nvar count=0;\nfor(var i=0;i<9999;i++)\n{\n    count+=i;\n}\nconsole.log('sum='+sum);\nconsole.timeEnd('end');\n```\n* console.assert()\n>计算结果为真返回true\n\n##### util\n>提供常用函数的集合\n* util.inherits\n>是一个实现对象间实现继承的函数\n```javascript\nvar util = require('util');\nfunction parent(){\n    this.name = 'parent';\n    this.age = 55;\n    this.do = function(){\n        console.log('1:' + this.name);\n    };\n\n}\nparent.prototype.show = function(){\n    console.log('2:' + this.name);\n};\n\nfunction child(){\n    this.name = 'child';\n}\n\nutil.inherits(child,parent);\n\nvar testParent = new Parent();\ntestParent.show(); //2:parent\ntestParent.do(); //1:parent\n\n\nvar testChild = new child(); \ntestchild.show(); //2:child\n\n//仅仅继承了在原型中定义的函数，而构造函数内部的属性没有继承。\n```\n* util.inspect\n>将任意对象转换成字符串的方法，通常用在调试和错误输出的时候\n1.接收至少一个对象，要转换的对象\n2.showHidden，可选，true 输出更多隐藏信息\n3.depth 最大递归层数，默认为2，null表示不限层数\n4.color 如果为true，输出将会带颜色\n5.注意：并不是简单的以字符串输出，即便定义了toString也不会调用\n* util.isArray()\n>如果给定的参数 “object” 是一个数组返回true，否则返回false。\n* util.isRegExp()\n>如果给定的参数 “object” 是一个正则表达式返回true，否则返回false。\n* util.isDate()\n>如果给定的参数 “object” 是一个日期返回true，否则返回false。\n* util.isError()\n>如果给定的参数 “object” 是一个错误对象返回true，否则返回false。\n* util.format()\n>返回一个格式化后的字符串\n```javascript\n// %s - String.\n// %d - Number (both integer and float).\n// %j - JSON.\n// %% - single percent sign ('%'). This does not consume an argument.\nutil.format(1, 2, 3); //1 2 3\nutil.format('%s:%s', 'asd', 'qwe'); //asd:qwe\n```\n* util.debug()\n```javascript\nrequire('util').debug('debug');\n```\n##### event\n>events模块不仅用于用户代码与Node.js下层事件循环的交互，还几乎被所有模块依赖。\nevents.EventEmitter,事件发射与事件监听器功能的封装\n```javascript\nvar events = require('events');\nvar emitter = new events.EventEmitter();\nemitter.on('test_event', function(param) { console.log('1-', param);\n});\nemitter.on('test_event', function(param) { console.log('2-', param);\n});\nemitter.emit('test_event', 123);\n\n// 1-123 \n// 2-123\n```\n* EventEmitter.on(event, listener)\n>注册一个监听器，接收事件名和回调函数\n* EventEmitter.emit(event, [arg1], [arg2], […])\n>接收事件名，传递参数\n* EventEmitter.once(event, listener)\n>注册一个单次的监听器，触发一次后就解除\n* EventEmitter.removeListener(event, listener)\n>解除指定的监听器\n* EventEmitter.removeAllListeners([event])\n>解除所有监听器\n* emitter.listeners(event)\n>返回值接收到event所有注册监听的集合\n* emitter.setMaxListeners(n)\n>给EventEmitter设置最大监听数,默认是10个\n* error事件\n>error触发时,EventEmitter如果没有响应的监听器,Node.js 会把它当作异常,退出程序并打印调用栈。我们一般要为会发射 error 事件的对象设置监听器,避免遇到错误后整个程序崩溃\n```javascript\nvar events = require('events');\nvar emitter = new events.EventEmitter();\nemitter.emit('error');\n```\n* 继承EventEmitter\n>只要是支持事件响应的核心模块都是 EventEmitter 的子类\n\n##### fs\n>文件操作模块，提供了文件的读取、写入、更名、删除、遍历目录、链接等\n\n* fs.readFile\n>异步读取\nfs.readFile(filename,[encoding],[callback(err,data)])\n```javascript\nvar fs = require('fs');\nfs.readFile('data.txt', 'utf-8', function(err, data) {\n    if (err) {\n        console.error(err);\n    } else {\n        console.log(data);\n    }\n});\n```\n* fs.readFileSync\n>同步读取\nfs.readFileSync(filename, [encoding])\n* fs.open\n>fs.open(path, flags, [mode], [callback(err, fd)])\n1.path文件路径\n2.flags\n* r 读取模式\n* r+ 读写模式\n* w 写入模式，不存在创建\n* w+ 读写模式，不存在创建\n* a 追加模式，不存在创建\n* a+ 读取追加模式打开，不存在创建\n3.mode 创建文件时指定的文件权限\n* fs.read\n> `fs.read(fd, buffer, offset, length, position, [callback(err, bytesRead, buffer)])`\n```javascript\nvar fs = require('fs');\nfs.open('data.txt', 'r', function(err, fd) { \n    if (err) {\n        console.error(err);\n        return; \n    }\n    var buf = new Buffer(8);\n    fs.read(fd, buf, 0, 8, null, function(err, bytes, buffer) {\n        if (err) {  \n            console.error(err); \n            return;\n        }\n        console.log('data: ' + bytes);\n        console.log(buffer);\n    })\n});\n```\n\n##### HTTP服务器\n```javascript\nvar http = require('http');\nhttp.createServer(function(req, res) { \n    res.writeHead(200, {'Content-Type': 'text/html'}); \n    res.write('<h1>Hello</h1>');\n    res.end('<p>Hello World</p>');\n}).listen(3000);\nconsole.log(\"server is start...port 3000.\");\n```\n* http.Server\n>http模块中的HTTP服务器对象\nhttp.Server的事件\n1.request 客户端请求到来时触发\n2.connection TCP连接建立时触发\n3.close 服务器关闭时触发\n4.checkContinue\n5.upgrade\n6.clientError\n```javascript\nvar http = require('http');\nvar server = new http.Server(); \nserver.on('request', function(req, res) {\n    res.writeHead(200, {'Content-Type': 'text/html'}); \n    res.write('<h1>Hello</h1>');\n    res.end('<p>Hello World</p>');\n}); \nserver.listen(3000);\nconsole.log(\"server is start...port 3000.\");\n```\n* http.ServerRequest\n>http.ServerRequest提供了三个事件控制请求体传输\n1.data 请求体数据到来时，事件触发\n2.end 请求体传输结束时触发\n3.close 请求结束时触发，用户强制终止了传输也会触发\n属性\n1.complete\n2.httpVersion\n3.method\n4.url\n5.headers\n6.trailers\n7.connection\n7.socket\n8.client\n获取GET请求内容\n```javascript\nvar http = require('http'); \nvar url = require('url'); \nvar util = require('util');\nhttp.createServer(function(req, res) { \n    res.writeHead(200, {'Content-Type': 'text/plain'}); \n    res.end(util.inspect(url.parse(req.url, true)));\n}).listen(3000);\n\n//请求 http://127.0.0.1:3000/text/id=123&key=qwe\n```\n获取POST请求内容\n```javascript\nvar http = require('http');\nvar querystring = require('querystring'); \nvar util = require('util');\nhttp.createServer(function(req, res) { \n    var post = '';\n    req.on('data', function(chunk) { \n        post += chunk;\n    });\n    req.on('end', function() {\n        post = querystring.parse(post); res.end(util.inspect(post));\n    });\n}).listen(3000);\n```\n* http.ServerResponse\nresponse.writeHead(statusCode, [headers]) 向请求的客户端发送相应头\nresponse.write(data, [encoding]) 向请求的客户端发送响应内容\nresponse.end([data], [encoding]) 响应结束，告知客户端所有发送已经完成\n\n##### HTTP客户端\n* http.request(options, callback)\n>option 常用的参数\nhost 请求网站的域名或者IP地址\nport 请求网站的端口，默认80\nmethod 请求方法，默认是GET\npath 请求的相对于根的路径\nheaders 一个关联的数组对象，为请求头的内容\ncallback 传递一个参数，为http.ClientResponse的实例\ntp.request 返回一个http.ClientRequest的实例\n\n* http.get(options, callback)\n>更加简便的方法用于处 理GET请求\n函数\nwrite\nend\nrequest.abort()，终止正在发送的请求\nrequest.setTimeout(timeout, [callback]) 设置请求超时时间，请求超时以后,callback 将会被调用\nrequest.setNoDelay([noDelay])\nrequest.setSocketKeepAlive([enable], [initialDelay])\n\n* http.ClientRequest\n>它表示一个正在处理的请求，其头部已经进入请求队列\n\n* http.ClientResponse\n>事件\ndata 数据到达，传递参数chunk，表示接收到的数据\nend 传输结束\nclose 连接结束\n属性\nstatusCode HTTP状态码\nhttpVersion HTTP协议版本\nheaders HTTP请求头\ntrailers HTTP请求尾\n函数\nresponse.setEncoding([encoding])，设置默认编码\nresponse.pause()，暂停接收数据和发送事件，方便实现下载功能\nresponse.resume()，从暂停状态恢复\n","source":"_posts/从零开始Node-03.md","raw":"title: 从零开始Node-03\ndate: 2015-10-14 13:34:43\ntags: nodejs\ntoc: true\n---\n##### Node.js API\n###### 全局对象\n>在javascript中，window是全局对象\n在Node.js中，global是全局对象。\n<!--more-->\n满足全局变量的条件：\n* 最外层定义的变量\n* 全局对象的属性\n* 隐式定义的变量\n全局变量过多定义过于随意会带来全局变量污染的问题，为了避免全局变量污染，在定义变量的时候使用var\n\n###### process\nNode.js的进程对象\n* Event: ‘exit’\n>process退出时会出发\n* Event: ‘uncaughtException’\n>process发生异常时触发\n* process自定义事件\n```javascript\nprocess.on('test',function(data)){\n    console.log(data);\n    process.exit(0);\n}\nprocess.emmit('test','emmit test');\n```\n* process.stdin\n>标准输入流\n```javascript\nprocess.stdin.resume();\nprocess.stdin.setEncoding('utf8');\nprocess.stdin.on('data', function(data) { \n    process.stdout.write('data：' + data.toString());\n});\n```\n* process.stdout\n>标准输出流,比console.log()更底层\n```javascript\nprocess.stdout.write(‘data’)\n```\n* process.argv\n>命令行参数数组\n```javascript\nconsole.log(process.argv); //存储为 test.js\n\n//执行\nnode test.js 1 \"asd\" age=12\n```\n* process.nextTick(callback)\n>为事件循环设置一项任务，在下次事件循环调用响应时调用callback\n```javascript\nfunction deal(args,callback){\n    doit(args);\n    process.nextTick(callback);\n}\ndeal(function(){\n    dome();\n});\n\n//如果doit 和 dome都是很耗时的函数，这样把耗时的操作拆分成两个事件，减少了每个事件执行时间，提高了事件响应速度。\n\n//比setTimeout(fn,times)效率更高\n```\n* process.pid、process.title、process.arch、process.platform\n>进程id，进程名字，进程架构(系统架构，X86)，进程平台(操作系统)\n* process.execPath\n>返回当前node.js进程的启动命令路径\n* process.memorUsage()\n>进程的内存使用情况\n* process.kill(pid, signal=’SIGTERM’)\n>发出一个kill信号给指定pid\n* process.exit(code=0)\n>kill当前进程，退出本进程\n…\n\n###### console\n* console.log()\n>向标准输出流打印字符并以换行符结\n```javascript\nconsole.log(123); //123\nconsole.log('d% world',hello); //hello world\n```\n* console.error()\n>向标准错误流输出\n* console.trace()\n> 向标准错误流输出当前调用栈\n* console.info()\n> 如果只有一个参数，输出这个参数的字符串形式\n如果有多个参数，格式输出\n如果没有参数，只打印一个换行符\n* console.warn()\n>输出警告\n* console.dir(obj)\n>将obj作为参数传递给util.inspect并执行，将返回的结果打印到stdout\n* console.time(label)\n>统计操作执行的时间\n* console.timeEnd(label)\n>统计操作执行的时间\n```javascript\nconsole.time('start');\nvar count=0;\nfor(var i=0;i<9999;i++)\n{\n    count+=i;\n}\nconsole.log('sum='+sum);\nconsole.timeEnd('end');\n```\n* console.assert()\n>计算结果为真返回true\n\n##### util\n>提供常用函数的集合\n* util.inherits\n>是一个实现对象间实现继承的函数\n```javascript\nvar util = require('util');\nfunction parent(){\n    this.name = 'parent';\n    this.age = 55;\n    this.do = function(){\n        console.log('1:' + this.name);\n    };\n\n}\nparent.prototype.show = function(){\n    console.log('2:' + this.name);\n};\n\nfunction child(){\n    this.name = 'child';\n}\n\nutil.inherits(child,parent);\n\nvar testParent = new Parent();\ntestParent.show(); //2:parent\ntestParent.do(); //1:parent\n\n\nvar testChild = new child(); \ntestchild.show(); //2:child\n\n//仅仅继承了在原型中定义的函数，而构造函数内部的属性没有继承。\n```\n* util.inspect\n>将任意对象转换成字符串的方法，通常用在调试和错误输出的时候\n1.接收至少一个对象，要转换的对象\n2.showHidden，可选，true 输出更多隐藏信息\n3.depth 最大递归层数，默认为2，null表示不限层数\n4.color 如果为true，输出将会带颜色\n5.注意：并不是简单的以字符串输出，即便定义了toString也不会调用\n* util.isArray()\n>如果给定的参数 “object” 是一个数组返回true，否则返回false。\n* util.isRegExp()\n>如果给定的参数 “object” 是一个正则表达式返回true，否则返回false。\n* util.isDate()\n>如果给定的参数 “object” 是一个日期返回true，否则返回false。\n* util.isError()\n>如果给定的参数 “object” 是一个错误对象返回true，否则返回false。\n* util.format()\n>返回一个格式化后的字符串\n```javascript\n// %s - String.\n// %d - Number (both integer and float).\n// %j - JSON.\n// %% - single percent sign ('%'). This does not consume an argument.\nutil.format(1, 2, 3); //1 2 3\nutil.format('%s:%s', 'asd', 'qwe'); //asd:qwe\n```\n* util.debug()\n```javascript\nrequire('util').debug('debug');\n```\n##### event\n>events模块不仅用于用户代码与Node.js下层事件循环的交互，还几乎被所有模块依赖。\nevents.EventEmitter,事件发射与事件监听器功能的封装\n```javascript\nvar events = require('events');\nvar emitter = new events.EventEmitter();\nemitter.on('test_event', function(param) { console.log('1-', param);\n});\nemitter.on('test_event', function(param) { console.log('2-', param);\n});\nemitter.emit('test_event', 123);\n\n// 1-123 \n// 2-123\n```\n* EventEmitter.on(event, listener)\n>注册一个监听器，接收事件名和回调函数\n* EventEmitter.emit(event, [arg1], [arg2], […])\n>接收事件名，传递参数\n* EventEmitter.once(event, listener)\n>注册一个单次的监听器，触发一次后就解除\n* EventEmitter.removeListener(event, listener)\n>解除指定的监听器\n* EventEmitter.removeAllListeners([event])\n>解除所有监听器\n* emitter.listeners(event)\n>返回值接收到event所有注册监听的集合\n* emitter.setMaxListeners(n)\n>给EventEmitter设置最大监听数,默认是10个\n* error事件\n>error触发时,EventEmitter如果没有响应的监听器,Node.js 会把它当作异常,退出程序并打印调用栈。我们一般要为会发射 error 事件的对象设置监听器,避免遇到错误后整个程序崩溃\n```javascript\nvar events = require('events');\nvar emitter = new events.EventEmitter();\nemitter.emit('error');\n```\n* 继承EventEmitter\n>只要是支持事件响应的核心模块都是 EventEmitter 的子类\n\n##### fs\n>文件操作模块，提供了文件的读取、写入、更名、删除、遍历目录、链接等\n\n* fs.readFile\n>异步读取\nfs.readFile(filename,[encoding],[callback(err,data)])\n```javascript\nvar fs = require('fs');\nfs.readFile('data.txt', 'utf-8', function(err, data) {\n    if (err) {\n        console.error(err);\n    } else {\n        console.log(data);\n    }\n});\n```\n* fs.readFileSync\n>同步读取\nfs.readFileSync(filename, [encoding])\n* fs.open\n>fs.open(path, flags, [mode], [callback(err, fd)])\n1.path文件路径\n2.flags\n* r 读取模式\n* r+ 读写模式\n* w 写入模式，不存在创建\n* w+ 读写模式，不存在创建\n* a 追加模式，不存在创建\n* a+ 读取追加模式打开，不存在创建\n3.mode 创建文件时指定的文件权限\n* fs.read\n> `fs.read(fd, buffer, offset, length, position, [callback(err, bytesRead, buffer)])`\n```javascript\nvar fs = require('fs');\nfs.open('data.txt', 'r', function(err, fd) { \n    if (err) {\n        console.error(err);\n        return; \n    }\n    var buf = new Buffer(8);\n    fs.read(fd, buf, 0, 8, null, function(err, bytes, buffer) {\n        if (err) {  \n            console.error(err); \n            return;\n        }\n        console.log('data: ' + bytes);\n        console.log(buffer);\n    })\n});\n```\n\n##### HTTP服务器\n```javascript\nvar http = require('http');\nhttp.createServer(function(req, res) { \n    res.writeHead(200, {'Content-Type': 'text/html'}); \n    res.write('<h1>Hello</h1>');\n    res.end('<p>Hello World</p>');\n}).listen(3000);\nconsole.log(\"server is start...port 3000.\");\n```\n* http.Server\n>http模块中的HTTP服务器对象\nhttp.Server的事件\n1.request 客户端请求到来时触发\n2.connection TCP连接建立时触发\n3.close 服务器关闭时触发\n4.checkContinue\n5.upgrade\n6.clientError\n```javascript\nvar http = require('http');\nvar server = new http.Server(); \nserver.on('request', function(req, res) {\n    res.writeHead(200, {'Content-Type': 'text/html'}); \n    res.write('<h1>Hello</h1>');\n    res.end('<p>Hello World</p>');\n}); \nserver.listen(3000);\nconsole.log(\"server is start...port 3000.\");\n```\n* http.ServerRequest\n>http.ServerRequest提供了三个事件控制请求体传输\n1.data 请求体数据到来时，事件触发\n2.end 请求体传输结束时触发\n3.close 请求结束时触发，用户强制终止了传输也会触发\n属性\n1.complete\n2.httpVersion\n3.method\n4.url\n5.headers\n6.trailers\n7.connection\n7.socket\n8.client\n获取GET请求内容\n```javascript\nvar http = require('http'); \nvar url = require('url'); \nvar util = require('util');\nhttp.createServer(function(req, res) { \n    res.writeHead(200, {'Content-Type': 'text/plain'}); \n    res.end(util.inspect(url.parse(req.url, true)));\n}).listen(3000);\n\n//请求 http://127.0.0.1:3000/text/id=123&key=qwe\n```\n获取POST请求内容\n```javascript\nvar http = require('http');\nvar querystring = require('querystring'); \nvar util = require('util');\nhttp.createServer(function(req, res) { \n    var post = '';\n    req.on('data', function(chunk) { \n        post += chunk;\n    });\n    req.on('end', function() {\n        post = querystring.parse(post); res.end(util.inspect(post));\n    });\n}).listen(3000);\n```\n* http.ServerResponse\nresponse.writeHead(statusCode, [headers]) 向请求的客户端发送相应头\nresponse.write(data, [encoding]) 向请求的客户端发送响应内容\nresponse.end([data], [encoding]) 响应结束，告知客户端所有发送已经完成\n\n##### HTTP客户端\n* http.request(options, callback)\n>option 常用的参数\nhost 请求网站的域名或者IP地址\nport 请求网站的端口，默认80\nmethod 请求方法，默认是GET\npath 请求的相对于根的路径\nheaders 一个关联的数组对象，为请求头的内容\ncallback 传递一个参数，为http.ClientResponse的实例\ntp.request 返回一个http.ClientRequest的实例\n\n* http.get(options, callback)\n>更加简便的方法用于处 理GET请求\n函数\nwrite\nend\nrequest.abort()，终止正在发送的请求\nrequest.setTimeout(timeout, [callback]) 设置请求超时时间，请求超时以后,callback 将会被调用\nrequest.setNoDelay([noDelay])\nrequest.setSocketKeepAlive([enable], [initialDelay])\n\n* http.ClientRequest\n>它表示一个正在处理的请求，其头部已经进入请求队列\n\n* http.ClientResponse\n>事件\ndata 数据到达，传递参数chunk，表示接收到的数据\nend 传输结束\nclose 连接结束\n属性\nstatusCode HTTP状态码\nhttpVersion HTTP协议版本\nheaders HTTP请求头\ntrailers HTTP请求尾\n函数\nresponse.setEncoding([encoding])，设置默认编码\nresponse.pause()，暂停接收数据和发送事件，方便实现下载功能\nresponse.resume()，从暂停状态恢复\n","slug":"从零开始Node-03","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599g2001d4wyjrdn8jzhu"},{"title":"从零开始Node-02","date":"2015-10-13T05:30:14.000Z","toc":true,"_content":"##### 异步式I/O\n>Node.js采用单线程事件驱动的异步式 I/O,控制流很大程度上依靠事件和回调函数。\n<!--more-->\n```javascript\n//异步执行\nvar fs = require('fs');\nfs.readFile('1.txt', 'utf-8', function(err, data) {\nif (err) { \n    console.error(err);\n} else { \n    console.log(data);\n} });\nconsole.log('end.');\n//先输出 end 在输出data的内容\n\n\n//同步执行\nvar fs = require('fs');\nvar data = fs.readFileSync('1.txt', 'utf-8'); console.log(data);\nconsole.log('end.');\n//先输出data的内容，再输出end\n```\n\n##### 事件编程\n>Node.js的异步 I/O 操作完成后，会发送一个事件到事件队列，下面介绍一下EventEmitter\n```javascript\nvar EventEmitter = require('events').EventEmitter;\nvar event = new EventEmitter();\nevent.on('event_test', function() { console.log('event_test...');\n});\nsetTimeout(function() { event.emit('event_test');\n}, 3000);\n//3秒后输出 event_test...\n```\nNode.js 程序由事件循环开始,到事件循环结束,所有的逻辑都是事件的回调函数,所以 Node.js 始终在事件循环中,程序入口就是 事件循环第一个事件的回调函数，事件循环会检测事件队列中是否有位处理的事件，直到循环结束。\n```\n\n##### 模块\n>Node.js 的模块和包机制的实现参照了 CommonJS 的标准\nNode.js 中文件和模块是一一对应的，一个Node.js就是一个模块，var http = require('http') http就是一个模块，require后获取这个模块\n一个例子创建，并且引用一个模块\n```javascript\n//声明一个模块\nvar age;\nexports.setAge = function(age) { age = age;\n};\nexports.myAge = function() { console.log(\"i'm \" + age);\n};\n\n//调用\nvar thisModule = require('./module'); //上面的文件名\nthisModule.setAge('12'); \nthisModule.myAge(); //输出 i'm 12\n```\n在Node.js中，如果require两次一个模块，那么也只是一次，并且后实例化的对象会覆盖掉之前的\n```javascript\nvar thisModule1 = require('./module'); //上面的文件名\nthisModule.setAge('11'); \n\nvar thisModule2 = require('./module'); //上面的文件名\nthisModule.setAge('12'); \nthisModule.myAge(); //输出 i'm 12\n//thisModule1 thisModule2指向同一个实例，后看的覆盖了前面的\n```\n* 把对象封装到模块中\n```javascript\nfunction Test() { \n    var age;\n    this.setAge = function(age) {\n        age = age;\n￼    };\n    this.myAge = function() { \n        console.log(\"i'm \" + age);\n    };\n};\nmodule.exports = Test;\n\n//调用\nvar test = require('./test');\ntest = new Hello(); \ntest.setAge(12);\ntest.myAge();\n```\n\n##### 包\n>依照 CommonJS 规范实现包机制，使用npm对包进行管理\nNode.js包是一个目录，必须含有package.json,文件中是包的一些具体内容，配置信息等\nCommonJS规范:\npackage.json必须在包顶层目录下，\n二进制文件在bin下\njavascript文件在lib下\n文档在doc下\n单元测试在test下\n* 包通常是一些模块的集合，制作一个简单的包\n```javascript\n//pkg/index.js\nexports.hello = function(){\n    console.log('hello node.js');\n}\n\n//loadpackage.js\nvar pkg = require('./pkg');\npkg.hello();\n//会输出 hello node.js\n\n//package.json\n{\n    \"main\" : \"./lib/app.js\"\n}\n//重命名index.js 为app.js，放在lib下，同样方式调用这个包，同样生效\n```\nNode.js 调用包时,先检查 package.json 文件的 main 字段,将其作为包的接口模块,如果 package.json 或 main 字段不存在,会尝试找 index.js 或 index.node 作 为包的接口。\npackage.json中包含下面这几项\nname 包名称\ndescription 描述\nversion 版本\nkeywords 关键字\nmaintainers 维护者数组，每个元素要包含 name、email (可选)、web (可选)字段。\ncontributors 贡献者数组，格式同上\nbugs 提交bug地址\nlicenses 许可证数组，每个元素包含 type(许可证名称) url(链接到许可证地址)\nrepositories 仓库托管地址 包含 type,url,path(可选，相对于仓库地址)\ndependencies 包的依赖数组，包名称，版本好组成\n\n##### Node.js 包管理器\n>npm\n1.获取一个包 npm [install/i] [package_name] -g（区分本地模式和全局模式，添加-g的为全局模式）\n2.全局链接 npm link，windows不支持\n3.发布，可以使用npm init创建一个符合标准的package.json,npm adduser获取一个维护包的账号，npm publish就发布出去了，下次修改后，修改package.json中的version再执行npm publish\n4.取消发布 npm unpublish\n\n##### 调试\n>1.Node.js支持单步调试，node debug 后面加需要调试的js文件，就会启动调试工具，暂时不做详细介绍\n2.远程调试\n3.Eclipse调试\n4.node-inspector调试","source":"_posts/从零开始Node-02.md","raw":"title: 从零开始Node-02\ndate: 2015-10-13 13:30:14\ntags: nodejs\ntoc: true\n---\n##### 异步式I/O\n>Node.js采用单线程事件驱动的异步式 I/O,控制流很大程度上依靠事件和回调函数。\n<!--more-->\n```javascript\n//异步执行\nvar fs = require('fs');\nfs.readFile('1.txt', 'utf-8', function(err, data) {\nif (err) { \n    console.error(err);\n} else { \n    console.log(data);\n} });\nconsole.log('end.');\n//先输出 end 在输出data的内容\n\n\n//同步执行\nvar fs = require('fs');\nvar data = fs.readFileSync('1.txt', 'utf-8'); console.log(data);\nconsole.log('end.');\n//先输出data的内容，再输出end\n```\n\n##### 事件编程\n>Node.js的异步 I/O 操作完成后，会发送一个事件到事件队列，下面介绍一下EventEmitter\n```javascript\nvar EventEmitter = require('events').EventEmitter;\nvar event = new EventEmitter();\nevent.on('event_test', function() { console.log('event_test...');\n});\nsetTimeout(function() { event.emit('event_test');\n}, 3000);\n//3秒后输出 event_test...\n```\nNode.js 程序由事件循环开始,到事件循环结束,所有的逻辑都是事件的回调函数,所以 Node.js 始终在事件循环中,程序入口就是 事件循环第一个事件的回调函数，事件循环会检测事件队列中是否有位处理的事件，直到循环结束。\n```\n\n##### 模块\n>Node.js 的模块和包机制的实现参照了 CommonJS 的标准\nNode.js 中文件和模块是一一对应的，一个Node.js就是一个模块，var http = require('http') http就是一个模块，require后获取这个模块\n一个例子创建，并且引用一个模块\n```javascript\n//声明一个模块\nvar age;\nexports.setAge = function(age) { age = age;\n};\nexports.myAge = function() { console.log(\"i'm \" + age);\n};\n\n//调用\nvar thisModule = require('./module'); //上面的文件名\nthisModule.setAge('12'); \nthisModule.myAge(); //输出 i'm 12\n```\n在Node.js中，如果require两次一个模块，那么也只是一次，并且后实例化的对象会覆盖掉之前的\n```javascript\nvar thisModule1 = require('./module'); //上面的文件名\nthisModule.setAge('11'); \n\nvar thisModule2 = require('./module'); //上面的文件名\nthisModule.setAge('12'); \nthisModule.myAge(); //输出 i'm 12\n//thisModule1 thisModule2指向同一个实例，后看的覆盖了前面的\n```\n* 把对象封装到模块中\n```javascript\nfunction Test() { \n    var age;\n    this.setAge = function(age) {\n        age = age;\n￼    };\n    this.myAge = function() { \n        console.log(\"i'm \" + age);\n    };\n};\nmodule.exports = Test;\n\n//调用\nvar test = require('./test');\ntest = new Hello(); \ntest.setAge(12);\ntest.myAge();\n```\n\n##### 包\n>依照 CommonJS 规范实现包机制，使用npm对包进行管理\nNode.js包是一个目录，必须含有package.json,文件中是包的一些具体内容，配置信息等\nCommonJS规范:\npackage.json必须在包顶层目录下，\n二进制文件在bin下\njavascript文件在lib下\n文档在doc下\n单元测试在test下\n* 包通常是一些模块的集合，制作一个简单的包\n```javascript\n//pkg/index.js\nexports.hello = function(){\n    console.log('hello node.js');\n}\n\n//loadpackage.js\nvar pkg = require('./pkg');\npkg.hello();\n//会输出 hello node.js\n\n//package.json\n{\n    \"main\" : \"./lib/app.js\"\n}\n//重命名index.js 为app.js，放在lib下，同样方式调用这个包，同样生效\n```\nNode.js 调用包时,先检查 package.json 文件的 main 字段,将其作为包的接口模块,如果 package.json 或 main 字段不存在,会尝试找 index.js 或 index.node 作 为包的接口。\npackage.json中包含下面这几项\nname 包名称\ndescription 描述\nversion 版本\nkeywords 关键字\nmaintainers 维护者数组，每个元素要包含 name、email (可选)、web (可选)字段。\ncontributors 贡献者数组，格式同上\nbugs 提交bug地址\nlicenses 许可证数组，每个元素包含 type(许可证名称) url(链接到许可证地址)\nrepositories 仓库托管地址 包含 type,url,path(可选，相对于仓库地址)\ndependencies 包的依赖数组，包名称，版本好组成\n\n##### Node.js 包管理器\n>npm\n1.获取一个包 npm [install/i] [package_name] -g（区分本地模式和全局模式，添加-g的为全局模式）\n2.全局链接 npm link，windows不支持\n3.发布，可以使用npm init创建一个符合标准的package.json,npm adduser获取一个维护包的账号，npm publish就发布出去了，下次修改后，修改package.json中的version再执行npm publish\n4.取消发布 npm unpublish\n\n##### 调试\n>1.Node.js支持单步调试，node debug 后面加需要调试的js文件，就会启动调试工具，暂时不做详细介绍\n2.远程调试\n3.Eclipse调试\n4.node-inspector调试","slug":"从零开始Node-02","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599g5001f4wyjvrbas66s"},{"title":"从零开始Node-01","date":"2015-10-13T05:27:04.000Z","toc":true,"_content":"* 安装node,不同系统安装方法不同，到官网上下载并安装\n* 安装node包管理器 curl http://npmjs.org/install.sh | sh\n* 安装node多版本管理器 npm install -g n\n* 安装supervisor npm install -g supervisor 修改代码后不需要手动重启服务器\n* 一个简单的HTTP服务器\n<!--more-->\n```javascript\nvar http = require('http');\nhttp.createServer(function(req, res) { res.writeHead(200, {'Content-Type': 'text/html'}); res.write('<h1>This Server</h1>');\n    res.end('<p>Hello Node.js</p>');\n}).listen(8888);\nconsole.log(\"HTTP server is start...port: 8888.\");\n```","source":"_posts/从零开始Node-01.md","raw":"title: 从零开始Node-01\ndate: 2015-10-13 13:27:04\ntags: nodejs\ntoc: true\n---\n* 安装node,不同系统安装方法不同，到官网上下载并安装\n* 安装node包管理器 curl http://npmjs.org/install.sh | sh\n* 安装node多版本管理器 npm install -g n\n* 安装supervisor npm install -g supervisor 修改代码后不需要手动重启服务器\n* 一个简单的HTTP服务器\n<!--more-->\n```javascript\nvar http = require('http');\nhttp.createServer(function(req, res) { res.writeHead(200, {'Content-Type': 'text/html'}); res.write('<h1>This Server</h1>');\n    res.end('<p>Hello Node.js</p>');\n}).listen(8888);\nconsole.log(\"HTTP server is start...port: 8888.\");\n```","slug":"从零开始Node-01","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599g7001h4wyjxz7e166e"},{"title":"velocity语法","date":"2015-10-19T06:50:38.000Z","toc":true,"_content":"##### velocity\n>基本语法包括`#set`、`#if` 、`#else`、`#end`、`#foreach`、`#end`、`#iinclude`、`#parse`、`#macro`等\n\n###### 注释\n`##单行注释`\n`#* 多行注释 *#`\n`#** 文档格式 存储诸如文档作者、版本信息 *#`\n<!--more-->\n\n###### 引入本地文件\n`#inclede` `#parse`都是用来引入本地文件的\n区别：\n* `#parse只能引入单个文件，#include可以引入多个文件，用 , 分隔`\n* `#parse引入的文件还会被引擎解析，#include引入的文件不会被引擎解析`\n* `#parse引入的文件和父文件之间变量都是共享的`\n\n###### 变量\n变量声明 `#set($title=\"title name\")`\nvelocity是弱类型的\n* `${title}` `$title`都可以使用，但是提倡`${title}`这种用法，在拼接字符串的时候，不会出现歧义，但是引用属性的时候要使用 `$title`这种\n* 变量可以赋以下类型的值：变量引用，字面字符串，属性引用，方法引用，字面数字，数组列表\n* 如果值为null，不会被赋值，还保留原来的值\n* 未定义的变量当字符串处理\n* `$user.getName()` 等于 `$user.Name`\n```javascript\n#set( $name = \"tom\" )\n#set( $age = \"11\" )\n$name is $age.\n#set($all = \"$size$name\" )\n\n##数学特性\n#set( $test = 5 )\n#set( $count = $test + 3 )\n\n##带花括号的属性,方法调用方式，属性,方法需要在花括号之内：\n${cookie.name}\n${request.getCookies()}\n\n##赋值符号左边的变量名不能加感叹号\n```\n###### 数组访问\n>范围操作赋 `[1..10]`\n```javascript\n#foreach( $i in [1..5] )\n    $i\n#end\n```\n###### 对象访问\n>访问方法如下\n```javascript\n#set($obj = {\"qwe\":\"123\", \"asd\":\"456\"})\n$obj.get(\"key\")\n\n#foreach(#ele in $obj)\n    $ele　\n#end\n\n##$ele只取到了value\n##如何取到对象的key呢，可以使用entrySet()或keySet()方法。\n\n#foreach($ele in $!obj.entrySet())\n    $!ele.key : $!ele.value\n#end\n\n#foreach($ele in $obj.keySet())\n    $ele : $obj.get($ele)\n#end\n```\n\n###### 循环\n* `#foreach`\n```javascript\n#foreach($ele in $arrs)\n    $velocityCount is $ele\n#end\n##循环计数变量$velocityCount,默认从1开始，可以在velocity.properties 文件中设为从0或者1开始\n```\n* `#break语句`\n可用于中断 #foreach() 循环。\n\n###### 条件语句\n>用法\n```javascript\n#if( $age < 10 )\n    \n#elseif( $age == 10 )\n    \n#else\n    \n#end\n```\n\n###### 逻辑操作\n`< > == != && || !`这么多运算符\n\n###### 宏\n>定义\n```javascript\n#macro(test)\n<div></div><div></div>\n#end\n```\n带参数的\n```javascript\n#macro(test $person)\n<div>$person.name</div><div>$person.age</div>\n#end\n\ntest($pers)\n```\n###### stop\n>停止模板引擎，通常在Debug时使用\n\n###### 转义\n>如果变量定义了，两个 `\\` 只输出一个 `\\`，如果未定义，则输出所有\n```javascript\n#set($name=\"qwe\") ##定义\n$name ## qwe\n\\$name ## $name\n\\\\$name ## \\qwe\n\\\\\\$name ## \\\\$name\n##未定义\n$name ## $name\n\\$name ## \\$name\n\\\\$name ## \\\\$name\n\\\\\\$name ## \\\\\\$name\n```\n\n###### 内置对象\n`$request`\n`$response`\n`$session`\n```javascript\n#foreach($cookie in $request.getCookies())\n    $cookie.name : $cookie.value\n#end\n\n#set($name = $!request.getParameter('name'))\n```\n\n###### `evaluate()`\n>动态执行一串字符串的值：\n`#evaluate('display #if(true)show#end')`\n\n###### `define()`\n>`#define`指令自定义标签\n```javascript\n#define($hello)\n    Hello ${who}!\n#end\n#set($who = \"world\")\n$hello\n## 显示 \"Hello world!\"\n```\n不需要解析执行的\n```javascript\n#[[\n#define()\n$name\n]]#\n```\n\n###### 注意\n* velocity语法中都是使用双引号，不能使用单引号，变量将以字符串输出\n* velocity会把变量，属性和方法都输出成字符串\n* velocity可以调用在java中定义的方法\n* 输出值的时候我们通常在$后面加上`!` 例如 `$!email`，这样的好处就行，当email没有值的时候，会输出空，否则就会输出`$email`了，这不是我们想要的\n* `$2.50`这样的值是不会出错的，因为velocity变量都是以大小写字符开始的\n* 可以调用java操作string的方法例如 substring，toLowerCase,toUpperCasse等\n* 取数组长度 `$array.size()`\n* 取数组某一项 `$array.get(0)`\n* null逻辑判断\n使用 `#ifnull()` 或 `#ifnotnull()`,要使用这个特性必须在velocity.properties文件中加入：\n```javascript\nuserdirective = org.apache.velocity.tools.generic.directive.Ifnull\nuserdirective = org.apache.velocity.tools.generic.directive.Ifnotnull\n```\n使用null工具判断`#if($null.isNull($foo))`\n空的逻辑判断 `#if (! $foo)` 判断`$foo`为空，判断非空为 `#if ($foo)`","source":"_posts/velocity语法.md","raw":"title: velocity语法\ndate: 2015-10-19 14:50:38\ntags: web\ntoc: true\n---\n##### velocity\n>基本语法包括`#set`、`#if` 、`#else`、`#end`、`#foreach`、`#end`、`#iinclude`、`#parse`、`#macro`等\n\n###### 注释\n`##单行注释`\n`#* 多行注释 *#`\n`#** 文档格式 存储诸如文档作者、版本信息 *#`\n<!--more-->\n\n###### 引入本地文件\n`#inclede` `#parse`都是用来引入本地文件的\n区别：\n* `#parse只能引入单个文件，#include可以引入多个文件，用 , 分隔`\n* `#parse引入的文件还会被引擎解析，#include引入的文件不会被引擎解析`\n* `#parse引入的文件和父文件之间变量都是共享的`\n\n###### 变量\n变量声明 `#set($title=\"title name\")`\nvelocity是弱类型的\n* `${title}` `$title`都可以使用，但是提倡`${title}`这种用法，在拼接字符串的时候，不会出现歧义，但是引用属性的时候要使用 `$title`这种\n* 变量可以赋以下类型的值：变量引用，字面字符串，属性引用，方法引用，字面数字，数组列表\n* 如果值为null，不会被赋值，还保留原来的值\n* 未定义的变量当字符串处理\n* `$user.getName()` 等于 `$user.Name`\n```javascript\n#set( $name = \"tom\" )\n#set( $age = \"11\" )\n$name is $age.\n#set($all = \"$size$name\" )\n\n##数学特性\n#set( $test = 5 )\n#set( $count = $test + 3 )\n\n##带花括号的属性,方法调用方式，属性,方法需要在花括号之内：\n${cookie.name}\n${request.getCookies()}\n\n##赋值符号左边的变量名不能加感叹号\n```\n###### 数组访问\n>范围操作赋 `[1..10]`\n```javascript\n#foreach( $i in [1..5] )\n    $i\n#end\n```\n###### 对象访问\n>访问方法如下\n```javascript\n#set($obj = {\"qwe\":\"123\", \"asd\":\"456\"})\n$obj.get(\"key\")\n\n#foreach(#ele in $obj)\n    $ele　\n#end\n\n##$ele只取到了value\n##如何取到对象的key呢，可以使用entrySet()或keySet()方法。\n\n#foreach($ele in $!obj.entrySet())\n    $!ele.key : $!ele.value\n#end\n\n#foreach($ele in $obj.keySet())\n    $ele : $obj.get($ele)\n#end\n```\n\n###### 循环\n* `#foreach`\n```javascript\n#foreach($ele in $arrs)\n    $velocityCount is $ele\n#end\n##循环计数变量$velocityCount,默认从1开始，可以在velocity.properties 文件中设为从0或者1开始\n```\n* `#break语句`\n可用于中断 #foreach() 循环。\n\n###### 条件语句\n>用法\n```javascript\n#if( $age < 10 )\n    \n#elseif( $age == 10 )\n    \n#else\n    \n#end\n```\n\n###### 逻辑操作\n`< > == != && || !`这么多运算符\n\n###### 宏\n>定义\n```javascript\n#macro(test)\n<div></div><div></div>\n#end\n```\n带参数的\n```javascript\n#macro(test $person)\n<div>$person.name</div><div>$person.age</div>\n#end\n\ntest($pers)\n```\n###### stop\n>停止模板引擎，通常在Debug时使用\n\n###### 转义\n>如果变量定义了，两个 `\\` 只输出一个 `\\`，如果未定义，则输出所有\n```javascript\n#set($name=\"qwe\") ##定义\n$name ## qwe\n\\$name ## $name\n\\\\$name ## \\qwe\n\\\\\\$name ## \\\\$name\n##未定义\n$name ## $name\n\\$name ## \\$name\n\\\\$name ## \\\\$name\n\\\\\\$name ## \\\\\\$name\n```\n\n###### 内置对象\n`$request`\n`$response`\n`$session`\n```javascript\n#foreach($cookie in $request.getCookies())\n    $cookie.name : $cookie.value\n#end\n\n#set($name = $!request.getParameter('name'))\n```\n\n###### `evaluate()`\n>动态执行一串字符串的值：\n`#evaluate('display #if(true)show#end')`\n\n###### `define()`\n>`#define`指令自定义标签\n```javascript\n#define($hello)\n    Hello ${who}!\n#end\n#set($who = \"world\")\n$hello\n## 显示 \"Hello world!\"\n```\n不需要解析执行的\n```javascript\n#[[\n#define()\n$name\n]]#\n```\n\n###### 注意\n* velocity语法中都是使用双引号，不能使用单引号，变量将以字符串输出\n* velocity会把变量，属性和方法都输出成字符串\n* velocity可以调用在java中定义的方法\n* 输出值的时候我们通常在$后面加上`!` 例如 `$!email`，这样的好处就行，当email没有值的时候，会输出空，否则就会输出`$email`了，这不是我们想要的\n* `$2.50`这样的值是不会出错的，因为velocity变量都是以大小写字符开始的\n* 可以调用java操作string的方法例如 substring，toLowerCase,toUpperCasse等\n* 取数组长度 `$array.size()`\n* 取数组某一项 `$array.get(0)`\n* null逻辑判断\n使用 `#ifnull()` 或 `#ifnotnull()`,要使用这个特性必须在velocity.properties文件中加入：\n```javascript\nuserdirective = org.apache.velocity.tools.generic.directive.Ifnull\nuserdirective = org.apache.velocity.tools.generic.directive.Ifnotnull\n```\n使用null工具判断`#if($null.isNull($foo))`\n空的逻辑判断 `#if (! $foo)` 判断`$foo`为空，判断非空为 `#if ($foo)`","slug":"velocity语法","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599ga001j4wyjl436gzir"},{"title":"touch开发性能优化","date":"2016-04-14T02:43:35.000Z","toc":true,"_content":"#### 介绍\n>不觉间开发touch也有一段时间了，之前一直都在做pc端的工作，恍然间发现pc端和touch端开发，也并不能说完全是一回事，当然了代码还是那些代码。这里我要说什么问题呢，就是touch端经常出现的性能相关的问题。通过亲身踩坑，总结一些经验。\n\n<!--more-->\n\n#### 代码\n>从代码层面讲，不能得过且过，务必做到精简，高效。移动端平台分ios android windows phone等，每个平台又有很多手机生产商，每种手机的性能又差异很大，还有些厂商还会自己定制浏览器内核，等等因素吧，导致了移动端经常出现各种差异性的表现，常常顾此失彼。那么就要求我们写的代码效率高一些，逻辑精简些，从程序层面减少因性能带来的问题，这是最好的方法去避免出现一些奇葩问题。还要做好一系列的异常处理措施，不要让代码出现报错的情况。减少dom操作，增加数据缓存机制，离线数据处理等。\n\n#### 框架\n>最近在开发过程中，使用了reactjs这个框架，不得不说这个框架应用起来还是比较顺利的，从开发到最终的页面表现来说，都是比较满意的。但是有一个问题是，在生成的代码中会生成过多的dom节点，这一点需要注意一下。\n\n#### 组件\n>应用第三方组建，还是要慎重考虑的，这里就拿iscroll来说，这个组建无疑优化了滑动的体验，但是它是非常耗性能的，还有就是安卓手机上的表现并不理想，在一些滚动监听上也存在问题。\n\n#### 布局与css\n> 从使用flex到弃用flex, css动画也要注意\n\n#### 硬件加速\n> 硬件加速是一件好事，但是它的弊端也显露无疑，电池耗电快，手机发热等等\n\n#### hybrid\n","source":"_posts/touch开发性能优化.md","raw":"title: touch开发性能优化\ndate: 2016-04-14 10:43:35\ntags: web\ntoc: true\n---\n#### 介绍\n>不觉间开发touch也有一段时间了，之前一直都在做pc端的工作，恍然间发现pc端和touch端开发，也并不能说完全是一回事，当然了代码还是那些代码。这里我要说什么问题呢，就是touch端经常出现的性能相关的问题。通过亲身踩坑，总结一些经验。\n\n<!--more-->\n\n#### 代码\n>从代码层面讲，不能得过且过，务必做到精简，高效。移动端平台分ios android windows phone等，每个平台又有很多手机生产商，每种手机的性能又差异很大，还有些厂商还会自己定制浏览器内核，等等因素吧，导致了移动端经常出现各种差异性的表现，常常顾此失彼。那么就要求我们写的代码效率高一些，逻辑精简些，从程序层面减少因性能带来的问题，这是最好的方法去避免出现一些奇葩问题。还要做好一系列的异常处理措施，不要让代码出现报错的情况。减少dom操作，增加数据缓存机制，离线数据处理等。\n\n#### 框架\n>最近在开发过程中，使用了reactjs这个框架，不得不说这个框架应用起来还是比较顺利的，从开发到最终的页面表现来说，都是比较满意的。但是有一个问题是，在生成的代码中会生成过多的dom节点，这一点需要注意一下。\n\n#### 组件\n>应用第三方组建，还是要慎重考虑的，这里就拿iscroll来说，这个组建无疑优化了滑动的体验，但是它是非常耗性能的，还有就是安卓手机上的表现并不理想，在一些滚动监听上也存在问题。\n\n#### 布局与css\n> 从使用flex到弃用flex, css动画也要注意\n\n#### 硬件加速\n> 硬件加速是一件好事，但是它的弊端也显露无疑，电池耗电快，手机发热等等\n\n#### hybrid\n","slug":"touch开发性能优化","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599gc001l4wyjpkbcf9ca"},{"title":"smartcropJs","date":"2015-11-14T07:03:01.000Z","toc":true,"_content":"#### 智能识别裁剪图片\n[github|https://github.com/jwagner/smartcrop.js]\n\n#### how to use\n```javascript\nSmartCrop.crop(image, {width: 100, height: 100}, function(result){console.log(result);});\n// {topCrop: {x: 300, y: 200, height: 200, width: 200}}\n```\n<!--more-->\n\n#### 兼容性\n除IE6,7,8\n","source":"_posts/smartcropJs.md","raw":"title: smartcropJs\ndate: 2015-11-14 15:03:01\ntags: web\ntoc: true\n---\n#### 智能识别裁剪图片\n[github|https://github.com/jwagner/smartcrop.js]\n\n#### how to use\n```javascript\nSmartCrop.crop(image, {width: 100, height: 100}, function(result){console.log(result);});\n// {topCrop: {x: 300, y: 200, height: 200, width: 200}}\n```\n<!--more-->\n\n#### 兼容性\n除IE6,7,8\n","slug":"smartcropJs","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599gf001n4wyjf8ergagv"},{"title":"shell基础","date":"2015-11-23T07:03:01.000Z","toc":true,"_content":"#### shell分类\n* Bourne Shell（/usr/bin/sh或/bin/sh）\n* Bourne Again Shell（/bin/bash）\n* C Shell（/usr/bin/csh）\n* K Shell（/usr/bin/ksh）\n* Shell for Root（/sbin/sh）\n* eg.\n<!--more-->\n\n##### `#!`\n>`#!`告诉系统其后路径所指定的程序即是解释此脚本文件的Shell程序。\n* 执行\n\t* `./test.sh`使用想对路径\n\t* sh test.sh\n* 变量\n\t* 直接使用变量名 `test=\"123\"`\n\n* 变量名和等号之间不能有空格\n* 首个字符必须为字母（a-z，A-Z）。\n* 中间不能有空格，可以使用下划线（_）。\n* 不能使用标点符号。\n* 不能使用bash里的关键字（可用help命令查看保留关键字）。\n\n##### 使用语句给变量赋值\n* for file inls /etc``\n\n##### 使用变量\n>在变量名前添加美元符号 `$`\n`$test`或者`${test}`\n\n##### 字符串\n* 单引号\n\t* 不能使用变量\n\t* 不能出现单引号，不能使用转译字符\n* 双引号\n\t* 可以使用变量\n\t* 可以使用转译字符\n\n##### 拼接字符串\n* 不需要使用 `+` 符号\n```javascript\nname=\"zhuo\"\nsay=\"hi \"$name\" !\"\nsays = \"hi ${name} !\"\necho say says\n```\n##### 字符串长度\n```javascript\nstring=\"tetetete\"\necho ${#string}\n```\n##### 截取字符串\n```javascript\nstring=\"tetetete\"\necho ${string:2:4}\n```\n##### 查找字符串\n```javascript\nstring=\"asdfsdf werfvsd\"\necho `expr index \"$string\" is`\n```\n##### 数组\n创建数组以及访问数组\n```javascript\narr=(1,2,3,4,5)\n#或者\narr[0]=1\narr[1]=2\narr[2]=3\n#访问\necho ${arr[0]}\n#访问所有元素\necho ${arr[@]}\n```\n##### 数组长度\n```javascript\nlen=${#arr[@]}\n```\n或者\n```javascript\nlen=${$arr[*]}\n```\n数组单个元素长度\n```javascript\nlen=${$arr[n]}\n```\n##### 注释\n* 不支持多行注释，单行注释使用#\n* 开发过程中，为方便注释，可以把需要注释的代码放在一个函数中\n##### echo\n输出字符串\necho string\n```javascriot\necho \"test\"\necho test\necho \"\\\"test\\\"\"\n```\n##### read\n输入字符\nread name\n```javascript\n#!/bin/sh\nread name\necho \"${name}\"\n```\n##### 显示\n`-e`开启转义\n换行\n```javascript\necho -e \"test!\\n\" # \\n换行\necho \"ok\"\n```\n##### 不换行\n```javascript\necho -e \"test!\\c\" # \\c不换行\necho \"ok\"\n```\n##### 输出到文件\n`echo \"test\" > test.txt`\n##### 原格式输出\n使用单引号，不进行转义\n##### 显示执行结果\n`echo `data``\n\n##### test命令\n检测某个条件是否成立\n\t* 数值测试\n\t```javascript\n\t-eq\t等于则为真\n\t-ne\t不等于则为真\n\t-gt\t大于则为真\n\t-ge\t大于等于则为真\n\t-lt\t小于则为真\n\t-le\t小于等于则为真\n\t```\n\t```javascript\n\tx=read\n\ty=read\n\tif test $[x] -eq $[y]\n\tthen\n\t\techo \"ok\"\n\telif test $x -gt $y\n\t\techo \"gt\"\n\telse\n\t\techo \"bad\"\n\tfi\n\t```\n\t* 字符串测试\n\t```javascript\n\t=\t等于则为真\n\t!=\t不相等则为真\n\t-z 字符串\t字符串长度伪则为真\n\t-n 字符串\t字符串长度不伪则为真\n\t```\n\t```javascript\n\tx=read\n\ty=read\n\tif test $x -eq $y\n\tthen\n\t\techo \"ok\"\n\telif test $x -gt $y\n\t\techo \"gt\"\n\telse\n\t\techo \"bad\"\n\tfi\n\t```\n##### 文件测试\n```javascript\n-e 文件名\t如果文件存在则为真\n-r 文件名\t如果文件存在且可读则为真\n-w 文件名\t如果文件存在且可写则为真\n-x 文件名\t如果文件存在且可执行则为真\n-s 文件名\t如果文件存在且至少有一个字符则为真\n-d 文件名\t如果文件存在且为目录则为真\n-f 文件名\t如果文件存在且为普通文件则为真\n-c 文件名\t如果文件存在且为字符型特殊文件则为真\n-b 文件名\t如果文件存在且为块特殊文件则为真\n```\n```javascript\nif test -e ./blog\nthen \n\techo 'file exists'\nelse\n\techo 'file does not exists'\nfi\n```javascript\n`Shell还提供了 与( -a )、或( -o )、非( ! ) 三个逻辑操作符用于将测试条件连接起来，优先级：”!” “-a” “-o”`\n##### 流程控制\n* if else\n```javascript\nx=read\ny=read\nif test $x -eq $y\nthen\n\techo \"ok\"\nelif test $x -gt $y\n\techo \"gt\"\nelse\n\techo \"bad\"\nfi\n```\n##### for\n```javascript\nfor it in 1 2 3 4 5 6 7 8\ndo\n\techo $it\ndone\n```\n##### while\n条件为真则执行\n```javascript\ncount=1\nwhile(($count<10))\ndo\n\techo $count\n\tlet \"count++\"\ndone\n```\n##### until\n直到条件为真停止,用法与while相同\n```javascript\ncount=100\nuntil(($count<=10))\ndo\n\techo $count\n\tlet \"count--\"\ndone\n```\n##### case\n```javascript\necho '请输入1-3的数字:'\nread num\ncase $num in\n\t1) echo '你输入了1'\n\t;;\n\t2) echo '你输入了2'\n\t;;\n\t3) echo '你输入了3'\n\t;;\n\t*) echo '你没有输入1到3的数字'\n\t;;\nesac\n```\n##### break\n跳出所有循环\n##### continue\n结束当前循环，继续执行下一次循环\n##### 函数\n* 定义方式,不需要带参数\n* function fun()\n* fun()\n\t* 参数返回，使用return\n\t* 函数调用，直接使用函数名，不需要加括号，带有参数直接在后面列出，用空格间隔\n\t* 函数返回值在调用函数后，可以通过$?使用\n\t* 函数中的参数，可以使用$n来表示，n>10的时候，使用${n}\n\t* 特殊参数\n\t\t* `$#` 传递到脚本的参数个数\n\t\t* `$*` 以一个单字符串显示所有向脚本传递的参数\n\t\t* `$$` 脚本运行的当前进程ID号\n\t\t* `$!` 后台运行的最后一个进程的ID号\n\t\t* `$@` 与$*相同，但是使用时加引号，并在引号中返回每个参数。\n\t\t* `$-` 显示Shell使用的当前选项，与set命令功能相同。\n\t\t* `$?` 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。\n","source":"_posts/shell基础.md","raw":"title: shell基础\ndate: 2015-11-23 15:03:01\ntags: linux\ntoc: true\n---\n#### shell分类\n* Bourne Shell（/usr/bin/sh或/bin/sh）\n* Bourne Again Shell（/bin/bash）\n* C Shell（/usr/bin/csh）\n* K Shell（/usr/bin/ksh）\n* Shell for Root（/sbin/sh）\n* eg.\n<!--more-->\n\n##### `#!`\n>`#!`告诉系统其后路径所指定的程序即是解释此脚本文件的Shell程序。\n* 执行\n\t* `./test.sh`使用想对路径\n\t* sh test.sh\n* 变量\n\t* 直接使用变量名 `test=\"123\"`\n\n* 变量名和等号之间不能有空格\n* 首个字符必须为字母（a-z，A-Z）。\n* 中间不能有空格，可以使用下划线（_）。\n* 不能使用标点符号。\n* 不能使用bash里的关键字（可用help命令查看保留关键字）。\n\n##### 使用语句给变量赋值\n* for file inls /etc``\n\n##### 使用变量\n>在变量名前添加美元符号 `$`\n`$test`或者`${test}`\n\n##### 字符串\n* 单引号\n\t* 不能使用变量\n\t* 不能出现单引号，不能使用转译字符\n* 双引号\n\t* 可以使用变量\n\t* 可以使用转译字符\n\n##### 拼接字符串\n* 不需要使用 `+` 符号\n```javascript\nname=\"zhuo\"\nsay=\"hi \"$name\" !\"\nsays = \"hi ${name} !\"\necho say says\n```\n##### 字符串长度\n```javascript\nstring=\"tetetete\"\necho ${#string}\n```\n##### 截取字符串\n```javascript\nstring=\"tetetete\"\necho ${string:2:4}\n```\n##### 查找字符串\n```javascript\nstring=\"asdfsdf werfvsd\"\necho `expr index \"$string\" is`\n```\n##### 数组\n创建数组以及访问数组\n```javascript\narr=(1,2,3,4,5)\n#或者\narr[0]=1\narr[1]=2\narr[2]=3\n#访问\necho ${arr[0]}\n#访问所有元素\necho ${arr[@]}\n```\n##### 数组长度\n```javascript\nlen=${#arr[@]}\n```\n或者\n```javascript\nlen=${$arr[*]}\n```\n数组单个元素长度\n```javascript\nlen=${$arr[n]}\n```\n##### 注释\n* 不支持多行注释，单行注释使用#\n* 开发过程中，为方便注释，可以把需要注释的代码放在一个函数中\n##### echo\n输出字符串\necho string\n```javascriot\necho \"test\"\necho test\necho \"\\\"test\\\"\"\n```\n##### read\n输入字符\nread name\n```javascript\n#!/bin/sh\nread name\necho \"${name}\"\n```\n##### 显示\n`-e`开启转义\n换行\n```javascript\necho -e \"test!\\n\" # \\n换行\necho \"ok\"\n```\n##### 不换行\n```javascript\necho -e \"test!\\c\" # \\c不换行\necho \"ok\"\n```\n##### 输出到文件\n`echo \"test\" > test.txt`\n##### 原格式输出\n使用单引号，不进行转义\n##### 显示执行结果\n`echo `data``\n\n##### test命令\n检测某个条件是否成立\n\t* 数值测试\n\t```javascript\n\t-eq\t等于则为真\n\t-ne\t不等于则为真\n\t-gt\t大于则为真\n\t-ge\t大于等于则为真\n\t-lt\t小于则为真\n\t-le\t小于等于则为真\n\t```\n\t```javascript\n\tx=read\n\ty=read\n\tif test $[x] -eq $[y]\n\tthen\n\t\techo \"ok\"\n\telif test $x -gt $y\n\t\techo \"gt\"\n\telse\n\t\techo \"bad\"\n\tfi\n\t```\n\t* 字符串测试\n\t```javascript\n\t=\t等于则为真\n\t!=\t不相等则为真\n\t-z 字符串\t字符串长度伪则为真\n\t-n 字符串\t字符串长度不伪则为真\n\t```\n\t```javascript\n\tx=read\n\ty=read\n\tif test $x -eq $y\n\tthen\n\t\techo \"ok\"\n\telif test $x -gt $y\n\t\techo \"gt\"\n\telse\n\t\techo \"bad\"\n\tfi\n\t```\n##### 文件测试\n```javascript\n-e 文件名\t如果文件存在则为真\n-r 文件名\t如果文件存在且可读则为真\n-w 文件名\t如果文件存在且可写则为真\n-x 文件名\t如果文件存在且可执行则为真\n-s 文件名\t如果文件存在且至少有一个字符则为真\n-d 文件名\t如果文件存在且为目录则为真\n-f 文件名\t如果文件存在且为普通文件则为真\n-c 文件名\t如果文件存在且为字符型特殊文件则为真\n-b 文件名\t如果文件存在且为块特殊文件则为真\n```\n```javascript\nif test -e ./blog\nthen \n\techo 'file exists'\nelse\n\techo 'file does not exists'\nfi\n```javascript\n`Shell还提供了 与( -a )、或( -o )、非( ! ) 三个逻辑操作符用于将测试条件连接起来，优先级：”!” “-a” “-o”`\n##### 流程控制\n* if else\n```javascript\nx=read\ny=read\nif test $x -eq $y\nthen\n\techo \"ok\"\nelif test $x -gt $y\n\techo \"gt\"\nelse\n\techo \"bad\"\nfi\n```\n##### for\n```javascript\nfor it in 1 2 3 4 5 6 7 8\ndo\n\techo $it\ndone\n```\n##### while\n条件为真则执行\n```javascript\ncount=1\nwhile(($count<10))\ndo\n\techo $count\n\tlet \"count++\"\ndone\n```\n##### until\n直到条件为真停止,用法与while相同\n```javascript\ncount=100\nuntil(($count<=10))\ndo\n\techo $count\n\tlet \"count--\"\ndone\n```\n##### case\n```javascript\necho '请输入1-3的数字:'\nread num\ncase $num in\n\t1) echo '你输入了1'\n\t;;\n\t2) echo '你输入了2'\n\t;;\n\t3) echo '你输入了3'\n\t;;\n\t*) echo '你没有输入1到3的数字'\n\t;;\nesac\n```\n##### break\n跳出所有循环\n##### continue\n结束当前循环，继续执行下一次循环\n##### 函数\n* 定义方式,不需要带参数\n* function fun()\n* fun()\n\t* 参数返回，使用return\n\t* 函数调用，直接使用函数名，不需要加括号，带有参数直接在后面列出，用空格间隔\n\t* 函数返回值在调用函数后，可以通过$?使用\n\t* 函数中的参数，可以使用$n来表示，n>10的时候，使用${n}\n\t* 特殊参数\n\t\t* `$#` 传递到脚本的参数个数\n\t\t* `$*` 以一个单字符串显示所有向脚本传递的参数\n\t\t* `$$` 脚本运行的当前进程ID号\n\t\t* `$!` 后台运行的最后一个进程的ID号\n\t\t* `$@` 与$*相同，但是使用时加引号，并在引号中返回每个参数。\n\t\t* `$-` 显示Shell使用的当前选项，与set命令功能相同。\n\t\t* `$?` 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。\n","slug":"shell基础","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599gg001p4wyjzmsz9lyl"},{"title":"reactjs应用","date":"2016-04-14T02:42:32.000Z","toc":true,"_content":"#### reactjs\n官方文档 http://reactjs.cn/react/docs/getting-started.html\n##### 引用reactjs框架\n* 实时转换工具 `npm install -g react-tools` 启动命令 `jsx --watch src/ build/` （或者页面引入jsx编译工具）\n* 引入fetch https://github.com/github/fetch （引入Promise）\n* jsx http://reactjs.cn/react/docs/jsx-in-depth.html\n<!--more-->\n\n##### 过程\n* 通过 React.createClass 定义组件\n* 组件包含的属性，方法(http://reactjs.cn/react/docs/component-specs.html)\n\t* render\n\t* getInitialState\n\t* getDefaultProps\n\t* propTypes\n\t* mixins\n\t* statics\n\t* displayName\n* 生命周期方法(http://reactjs.cn/react/docs/component-specs.html)\n\t* componentWillMount\n\t* componentDidMount\n\t* componentWillReceiveProps\n\t* shouldComponentUpdate\n\t* componentWillUpdate\n\t* componentDidUpdate\n\t* componentWillUnmount\n* 组件生命周期\n>了解组件的生命周期很重要，这在我们哪个阶段去调用什么方法是有帮助的，下面就一起来看一下：\n\n1. getInitialState\n\t* 在组件类创建的时候只调用一次，返回值是 this.state 的初始值\n2. componentWillMount\n\t* 初始化渲染之前只调用一次，如果在这个阶段setState，更新将会通知render\n3. render\n\t* 会根据this.props或者this.state渲染组件\n4. componentDidMount\n\t* 在初始化渲染之后只调用一次，可以操作dom和浏览器交互，通过this.DOMNode()获取DOM节点\n5. componentWillReceiveProps\n\t* 组件接收到新的props都会调用，初始化的时候不会调用这个方法，可以在这里面更新this.state\n6. componentWillUpdate\n\t* 在接收到新的props或者state之前的时候调用，初始化渲染的时候不会调用，里面做更新前的准备工作，不能在里面setState\n7. shouldComponentUpdate\n\t* 在接收到新的props或者state的时候，渲染之前调用，在初始化的时候不会调用，如果确定新的props和state不会导致组件更新，可以返回false,默认返回true\n\t```javascript\n\tshouldComponentUpdate: function(nextProps, nextState) {\n\t  return nextProps.id !== this.props.id;\n\t}\n\t```\n\t* 这个方法可以提升程序性能，一些依赖父级props，组件本身会发送请求的情况，可以判断传入props是否是更新后的，然后再去执行接下来的动作。\n8. componentDidUpdate\n\t* 组件更新到DOM中被调用，初始化的时候不会调用，对dom的操作可以放在这里面执行\n9. componentWillUnmount\n\t* 组件从dom中移除的时候调用，这个方法中清除一些定时操作等\n","source":"_posts/reactjs应用.md","raw":"title: reactjs应用\ndate: 2016-04-14 10:42:32\ntags: web\ntoc: true\n---\n#### reactjs\n官方文档 http://reactjs.cn/react/docs/getting-started.html\n##### 引用reactjs框架\n* 实时转换工具 `npm install -g react-tools` 启动命令 `jsx --watch src/ build/` （或者页面引入jsx编译工具）\n* 引入fetch https://github.com/github/fetch （引入Promise）\n* jsx http://reactjs.cn/react/docs/jsx-in-depth.html\n<!--more-->\n\n##### 过程\n* 通过 React.createClass 定义组件\n* 组件包含的属性，方法(http://reactjs.cn/react/docs/component-specs.html)\n\t* render\n\t* getInitialState\n\t* getDefaultProps\n\t* propTypes\n\t* mixins\n\t* statics\n\t* displayName\n* 生命周期方法(http://reactjs.cn/react/docs/component-specs.html)\n\t* componentWillMount\n\t* componentDidMount\n\t* componentWillReceiveProps\n\t* shouldComponentUpdate\n\t* componentWillUpdate\n\t* componentDidUpdate\n\t* componentWillUnmount\n* 组件生命周期\n>了解组件的生命周期很重要，这在我们哪个阶段去调用什么方法是有帮助的，下面就一起来看一下：\n\n1. getInitialState\n\t* 在组件类创建的时候只调用一次，返回值是 this.state 的初始值\n2. componentWillMount\n\t* 初始化渲染之前只调用一次，如果在这个阶段setState，更新将会通知render\n3. render\n\t* 会根据this.props或者this.state渲染组件\n4. componentDidMount\n\t* 在初始化渲染之后只调用一次，可以操作dom和浏览器交互，通过this.DOMNode()获取DOM节点\n5. componentWillReceiveProps\n\t* 组件接收到新的props都会调用，初始化的时候不会调用这个方法，可以在这里面更新this.state\n6. componentWillUpdate\n\t* 在接收到新的props或者state之前的时候调用，初始化渲染的时候不会调用，里面做更新前的准备工作，不能在里面setState\n7. shouldComponentUpdate\n\t* 在接收到新的props或者state的时候，渲染之前调用，在初始化的时候不会调用，如果确定新的props和state不会导致组件更新，可以返回false,默认返回true\n\t```javascript\n\tshouldComponentUpdate: function(nextProps, nextState) {\n\t  return nextProps.id !== this.props.id;\n\t}\n\t```\n\t* 这个方法可以提升程序性能，一些依赖父级props，组件本身会发送请求的情况，可以判断传入props是否是更新后的，然后再去执行接下来的动作。\n8. componentDidUpdate\n\t* 组件更新到DOM中被调用，初始化的时候不会调用，对dom的操作可以放在这里面执行\n9. componentWillUnmount\n\t* 组件从dom中移除的时候调用，这个方法中清除一些定时操作等\n","slug":"reactjs应用","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599gi001s4wyjxbvxtk6e"},{"title":"npm包开发","date":"2016-04-14T02:41:29.000Z","toc":true,"_content":"#### 环境要求\n* nodejs\n\n#### 基本文件结构\n* package.json \n\t* 使用npm init生成\n\t* 安装依赖模块使用 npm install 模块名\n* 一个主文件 index.js\n* 一个lib文件夹\n\t* 存放源文件\n<!--more-->\n\n#### 例子\n* package.json\n```javascript\n\n{\n  \"name\": \"node-tools\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n```\n\n* index.js\n```javascript\n/*\n* @Author: amos\n* @Date:   2016-04-08 13:57:37\n* @Last Modified by:   amos\n* @Last Modified time: 2016-04-08 13:58:26\n*/\n\n'use strict';\n\nmodule.exports = require(./lib/index);\n```\n\n* `lib/index.js`\n```javascript\n/*\n * @Author: amos\n * @Date:   2016-04-08 13:58:47\n * @Last Modified by:   amos\n * @Last Modified time: 2016-04-08 14:19:04\n */\n\n'use strict';\n\nvar Tools = (function() {\n\t//==================================\n\t// 检测iOS版本\n\tfunction gtIOS() {\n\t\tvar userAgent = window.navigator.userAgent;\n\t\tvar ios = userAgent.match(/(iPad|iPhone|iPod)/s + OS / s([/d_/.] + ) / );\n\t\treturn ios && ios[2] && parseInt(ios[2].replace(/_/g, '.'), 10);\n\t}\n\t//==================================\n\n\t//==================================\n\t// 检测支持css属性\n\tfunction isSupportCss(key, value) {\n\t\tvar prefixTestList = ['', '-webkit-', '-ms-', '-moz-', '-o-'];\n\t\tvar cssText = '';\n\t\tfor (var i = 0; i < prefixTestList.length; i++) {\n\t\t\tcssText += key + ':' + prefixTestList[i] + value + ';';\n\t\t}\n\t\t// 创建一个dom来检查\n\t\tvar div = document.createElement('div');\n\t\tvar body = document.body;\n\t\tdiv.style.cssText = 'display:none;' + cssText;\n\t\tbody.appendChild(div);\n\t\tvar reg = new RegExp(value, i);\n\t\tvar isSupport = reg.test(window.getComputedStyle(div)[key]);\n\t\tbody.removeChild(div);\n\t\tdiv = null;\n\t\treturn isSupport;\n\t}\n\t//==================================\n\n\t//==================================\n\t// 防止内容区域滚到底后引起页面整体的滚动\n\tvar content = document.querySelector('main');\n\tvar startY;\n\n\tcontent.addEventListener('touchstart', function(e) {\n\t\tstartY = e.touches[0].clientY;\n\t});\n\n\tcontent.addEventListener('touchmove', function(e) {\n\t\t// 高位表示向上滚动\n\t\t// 底位表示向下滚动\n\t\t// 1容许 0禁止\n\t\tvar status = '11';\n\t\tvar ele = this;\n\n\t\tvar currentY = e.touches[0].clientY;\n\n\t\tif (ele.scrollTop === 0) {\n\t\t\t// 如果内容小于容器则同时禁止上下滚动\n\t\t\tstatus = ele.offsetHeight >= ele.scrollHeight ? '00' : '01';\n\t\t} else if (ele.scrollTop + ele.offsetHeight >= ele.scrollHeight) {\n\t\t\t// 已经滚到底部了只能向上滚动\n\t\t\tstatus = '10';\n\t\t}\n\n\t\tif (status != '11') {\n\t\t\t// 判断当前的滚动方向\n\t\t\tvar direction = currentY - startY > 0 ? '10' : '01';\n\t\t\t// 操作方向和当前允许状态求与运算，运算结果为0，就说明不允许该方向滚动，则禁止默认事件，阻止滚动\n\t\t\tif (!(parseInt(status, 2) & parseInt(direction, 2))) {\n\t\t\t\tstopEvent(e);\n\t\t\t}\n\t\t}\n\t});\n\t//==================================\n\n\n\treturn {\n\t\tgtIOS: gtIOS,\n\t\tisSupportCss: isSupportCss\n\t};\n}());\n\n\nmodule.exports = Tools;\n```\n\n#### 发布应用\n\t* npm发布\n\t* 通过require的方式引用，直接使用","source":"_posts/npm包开发.md","raw":"title: npm包开发\ndate: 2016-04-14 10:41:29\ntags: nodejs\ntoc: true\n---\n#### 环境要求\n* nodejs\n\n#### 基本文件结构\n* package.json \n\t* 使用npm init生成\n\t* 安装依赖模块使用 npm install 模块名\n* 一个主文件 index.js\n* 一个lib文件夹\n\t* 存放源文件\n<!--more-->\n\n#### 例子\n* package.json\n```javascript\n\n{\n  \"name\": \"node-tools\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n\n```\n\n* index.js\n```javascript\n/*\n* @Author: amos\n* @Date:   2016-04-08 13:57:37\n* @Last Modified by:   amos\n* @Last Modified time: 2016-04-08 13:58:26\n*/\n\n'use strict';\n\nmodule.exports = require(./lib/index);\n```\n\n* `lib/index.js`\n```javascript\n/*\n * @Author: amos\n * @Date:   2016-04-08 13:58:47\n * @Last Modified by:   amos\n * @Last Modified time: 2016-04-08 14:19:04\n */\n\n'use strict';\n\nvar Tools = (function() {\n\t//==================================\n\t// 检测iOS版本\n\tfunction gtIOS() {\n\t\tvar userAgent = window.navigator.userAgent;\n\t\tvar ios = userAgent.match(/(iPad|iPhone|iPod)/s + OS / s([/d_/.] + ) / );\n\t\treturn ios && ios[2] && parseInt(ios[2].replace(/_/g, '.'), 10);\n\t}\n\t//==================================\n\n\t//==================================\n\t// 检测支持css属性\n\tfunction isSupportCss(key, value) {\n\t\tvar prefixTestList = ['', '-webkit-', '-ms-', '-moz-', '-o-'];\n\t\tvar cssText = '';\n\t\tfor (var i = 0; i < prefixTestList.length; i++) {\n\t\t\tcssText += key + ':' + prefixTestList[i] + value + ';';\n\t\t}\n\t\t// 创建一个dom来检查\n\t\tvar div = document.createElement('div');\n\t\tvar body = document.body;\n\t\tdiv.style.cssText = 'display:none;' + cssText;\n\t\tbody.appendChild(div);\n\t\tvar reg = new RegExp(value, i);\n\t\tvar isSupport = reg.test(window.getComputedStyle(div)[key]);\n\t\tbody.removeChild(div);\n\t\tdiv = null;\n\t\treturn isSupport;\n\t}\n\t//==================================\n\n\t//==================================\n\t// 防止内容区域滚到底后引起页面整体的滚动\n\tvar content = document.querySelector('main');\n\tvar startY;\n\n\tcontent.addEventListener('touchstart', function(e) {\n\t\tstartY = e.touches[0].clientY;\n\t});\n\n\tcontent.addEventListener('touchmove', function(e) {\n\t\t// 高位表示向上滚动\n\t\t// 底位表示向下滚动\n\t\t// 1容许 0禁止\n\t\tvar status = '11';\n\t\tvar ele = this;\n\n\t\tvar currentY = e.touches[0].clientY;\n\n\t\tif (ele.scrollTop === 0) {\n\t\t\t// 如果内容小于容器则同时禁止上下滚动\n\t\t\tstatus = ele.offsetHeight >= ele.scrollHeight ? '00' : '01';\n\t\t} else if (ele.scrollTop + ele.offsetHeight >= ele.scrollHeight) {\n\t\t\t// 已经滚到底部了只能向上滚动\n\t\t\tstatus = '10';\n\t\t}\n\n\t\tif (status != '11') {\n\t\t\t// 判断当前的滚动方向\n\t\t\tvar direction = currentY - startY > 0 ? '10' : '01';\n\t\t\t// 操作方向和当前允许状态求与运算，运算结果为0，就说明不允许该方向滚动，则禁止默认事件，阻止滚动\n\t\t\tif (!(parseInt(status, 2) & parseInt(direction, 2))) {\n\t\t\t\tstopEvent(e);\n\t\t\t}\n\t\t}\n\t});\n\t//==================================\n\n\n\treturn {\n\t\tgtIOS: gtIOS,\n\t\tisSupportCss: isSupportCss\n\t};\n}());\n\n\nmodule.exports = Tools;\n```\n\n#### 发布应用\n\t* npm发布\n\t* 通过require的方式引用，直接使用","slug":"npm包开发","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599gk001u4wyjuhxjiun6"},{"title":"nodejs调用phantom","date":"2015-11-08T07:03:01.000Z","toc":true,"_content":"#### phantomjs\n>phantomjs能够截图，查看网页请求信息，对页面进行dom操作等等\n利用phantomjs能够做很多事，例如通过截图对比查看页面是否疵了，网络请求监测网页性能，dom抓取等等\n<!--more-->\n\n#### 安装\n* centos\n```javascript\nsudo yum install gcc gcc-c++ make git openssl-devel freetype-devel fontconfig-devel \ngit clone git://github.com/ariya/phantomjs.git \ncd phantomjs \ngit checkout 1.9 \n./build.sh\n```\n\n#### 截图\n```javascript\n//snapshot.js\nvar page = require('webpage').create();\npage.viewportSize = { width: 320, height: 640 };\npage.open('http://www.test.com', function (status) {\n    if (status !== 'success') {\n        console.log('err!');\n    } else {\n        page.render('1.png');\n    }\n    phantom.exit();\n});\n```\n\n#### dom抓取\n```javascript\nvar page = require('webpage').create();\nfname = system.args[1];\npage.open(\"http://www.test.com\", function () {\n    if (status !== 'success') {\n        console.log('err!');\n        phantom.exit(1);\n        return;\n    }\n    var html;\n    page.evaluate(function () {\n        document.querySelector('#kw').value = 'javascript';\n        document.querySelector('#su').click();\n        html = document.querySelector('.content_left').innerHTML;\n    });\n    //fs.write('/user/test.html',html,'w');\n    phantom.exit();\n});\n```\n\n#### nodejs调用phantomjs\n需要调用的地方，开一个子线程去做\n```javascript\nvar childProcess = require('child_process');\nvar spawn = childProcess.spawn;\nvar Exec = spawn('phantomjs', '/home/user/test.js');\n\n\nExec.stdout.on('data', function(data) {\n\tconsole.log('Exec stdout : ' + data);\n});\n\nExec.stderr.on('data', function(data) {\n\tconsole.log('Exec stderr : ' + data);\n});\n\nExec.on('close', function(data) {\n\tconsole.log('exec close : ' + data);\n});\n```","source":"_posts/nodejs调用phantom.md","raw":"title: nodejs调用phantom\ndate: 2015-11-08 15:03:01\ntags: nodejs\ntoc: true\n---\n#### phantomjs\n>phantomjs能够截图，查看网页请求信息，对页面进行dom操作等等\n利用phantomjs能够做很多事，例如通过截图对比查看页面是否疵了，网络请求监测网页性能，dom抓取等等\n<!--more-->\n\n#### 安装\n* centos\n```javascript\nsudo yum install gcc gcc-c++ make git openssl-devel freetype-devel fontconfig-devel \ngit clone git://github.com/ariya/phantomjs.git \ncd phantomjs \ngit checkout 1.9 \n./build.sh\n```\n\n#### 截图\n```javascript\n//snapshot.js\nvar page = require('webpage').create();\npage.viewportSize = { width: 320, height: 640 };\npage.open('http://www.test.com', function (status) {\n    if (status !== 'success') {\n        console.log('err!');\n    } else {\n        page.render('1.png');\n    }\n    phantom.exit();\n});\n```\n\n#### dom抓取\n```javascript\nvar page = require('webpage').create();\nfname = system.args[1];\npage.open(\"http://www.test.com\", function () {\n    if (status !== 'success') {\n        console.log('err!');\n        phantom.exit(1);\n        return;\n    }\n    var html;\n    page.evaluate(function () {\n        document.querySelector('#kw').value = 'javascript';\n        document.querySelector('#su').click();\n        html = document.querySelector('.content_left').innerHTML;\n    });\n    //fs.write('/user/test.html',html,'w');\n    phantom.exit();\n});\n```\n\n#### nodejs调用phantomjs\n需要调用的地方，开一个子线程去做\n```javascript\nvar childProcess = require('child_process');\nvar spawn = childProcess.spawn;\nvar Exec = spawn('phantomjs', '/home/user/test.js');\n\n\nExec.stdout.on('data', function(data) {\n\tconsole.log('Exec stdout : ' + data);\n});\n\nExec.stderr.on('data', function(data) {\n\tconsole.log('Exec stderr : ' + data);\n});\n\nExec.on('close', function(data) {\n\tconsole.log('exec close : ' + data);\n});\n```","slug":"nodejs调用phantom","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599gn001w4wyjl8dev1ij"},{"title":"nodejs读取指定路径下文件夹文件","date":"2015-11-07T07:03:01.000Z","toc":true,"_content":"#### 扫描文件以及文件夹\n```javascript\nfunction scanFolder(path){\n    var files = [],\n        folders = [],\n        walk = function(path, files, folders){\n            files = fs.readdirSync(path);\n            files.forEach(function(item) {  \n                var curPath = path + '/' + item,\n                    stats = fs.statSync(curPath);\n\n                if (stats.isDirectory()) {  \n                    walk(curPath, files, folders); \n                    folders.push(curPath); \n                } else {  \n                    files.push(curPath); \n                }  \n            });  \n        };  \n\n    walk(path, files, folders);\n\n    console.log('扫描' + path +'成功');\n\n    return {\n        'files': files,\n        'folders': folders\n    }\n}\n```\n<!--more-->\n\n#### 获取每个文件大小\n```javascript\nvar filesList = [];\nstates = fs.statSync(path+'/'+file); \nif(!states.isDirectory()){ \n   var fileObj = new Object();\n   fileObj.size = states.size;//文件大小(字节)\n   fileObj.name = file;//文件名\n   fileObj.path = path+'/'+file; //绝对路径\n   filesList.push(fileObj);\n }\n```","source":"_posts/nodejs读取指定路径下文件夹文件.md","raw":"title: nodejs读取指定路径下文件夹文件\ndate: 2015-11-07 15:03:01\ntags: nodejs\ntoc: true\n---\n#### 扫描文件以及文件夹\n```javascript\nfunction scanFolder(path){\n    var files = [],\n        folders = [],\n        walk = function(path, files, folders){\n            files = fs.readdirSync(path);\n            files.forEach(function(item) {  \n                var curPath = path + '/' + item,\n                    stats = fs.statSync(curPath);\n\n                if (stats.isDirectory()) {  \n                    walk(curPath, files, folders); \n                    folders.push(curPath); \n                } else {  \n                    files.push(curPath); \n                }  \n            });  \n        };  \n\n    walk(path, files, folders);\n\n    console.log('扫描' + path +'成功');\n\n    return {\n        'files': files,\n        'folders': folders\n    }\n}\n```\n<!--more-->\n\n#### 获取每个文件大小\n```javascript\nvar filesList = [];\nstates = fs.statSync(path+'/'+file); \nif(!states.isDirectory()){ \n   var fileObj = new Object();\n   fileObj.size = states.size;//文件大小(字节)\n   fileObj.name = file;//文件名\n   fileObj.path = path+'/'+file; //绝对路径\n   filesList.push(fileObj);\n }\n```","slug":"nodejs读取指定路径下文件夹文件","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599gq001y4wyj6128vnix"},{"title":"nodejs网页抓取","date":"2015-11-06T07:03:01.000Z","toc":true,"_content":"#### cheerio\n>html页面抓取使用的module,可以像jquery一样去操作\n\n#### 读取网页源码\n>使用http.request或者http.get去下载网页源码，使用cheerio去抓取我们需要的内容。\n<!--more-->\n\n#### 保存图片\n>抓取到的图片地址\n```javascript\nvar http = require(\"http\");\nvar fs = require(\"fs\");\nvar url = \"http://123.png\";\nhttp.get(url, function(res) {\n\tvar imgBinary = \"\";\n\tres.setEncoding(\"binary\");\n\tres.on(\"data\", function(chunk) {\n\t\timgBinary += chunk;\n\t});\n\tres.on(\"end\", function() {\n\t\tfs.writeFile(\"./logonew.png\", imgBinary, \"binary\", function(err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log(\"download fail\");\n\t\t\t}\n\t\t\tconsole.log(\"download success\");\n\t\t});\n\t});\n});\n```","source":"_posts/nodejs网页抓取.md","raw":"title: nodejs网页抓取\ndate: 2015-11-06 15:03:01\ntags: nodejs\ntoc: true\n---\n#### cheerio\n>html页面抓取使用的module,可以像jquery一样去操作\n\n#### 读取网页源码\n>使用http.request或者http.get去下载网页源码，使用cheerio去抓取我们需要的内容。\n<!--more-->\n\n#### 保存图片\n>抓取到的图片地址\n```javascript\nvar http = require(\"http\");\nvar fs = require(\"fs\");\nvar url = \"http://123.png\";\nhttp.get(url, function(res) {\n\tvar imgBinary = \"\";\n\tres.setEncoding(\"binary\");\n\tres.on(\"data\", function(chunk) {\n\t\timgBinary += chunk;\n\t});\n\tres.on(\"end\", function() {\n\t\tfs.writeFile(\"./logonew.png\", imgBinary, \"binary\", function(err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log(\"download fail\");\n\t\t\t}\n\t\t\tconsole.log(\"download success\");\n\t\t});\n\t});\n});\n```","slug":"nodejs网页抓取","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599gs00204wyjuqf3kv4j"},{"title":"nodejs开发控制台工具","date":"2016-04-14T02:41:56.000Z","toc":true,"_content":"#### 环境要求\n* nodejs\n\n#### 基本文件结构\n* package.json \n\t* 使用npm init生成\n\t* 安装依赖模块使用 npm install 模块名\n* 一个主文件 index.js\n\n<!--more-->\n\n#### 例子：\n* package.json\n```javascript\n{\n  \"name\": \"node-translate\",\n  \"version\": \"1.0.0\",\n  \"description\": \"translate\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"bin\": {\n    \"trans\": \"./index.js\"\n  },\n  \"author\": \"黑卓\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"color\": \"^0.11.1\",\n    \"colors\": \"^1.1.2\",\n    \"commander\": \"^2.9.0\",\n    \"request\": \"^2.70.0\"\n  }\n}\n```\n* index.js\n```javascript\n#! /usr/bin/env node\n\n/*\n * @Author: 黑卓\n * @Date:   2016-04-07 15:47:33\n * @Last Modified by:   黑卓\n * @Last Modified time: 2016-04-07 17:56:40\n */\n\n'use strict';\n\nvar request = require('request');\nvar colors = require('colors');\n\nvar program = require('commander');\nprogram.version('0.0.1').parse(process.argv);\n\n(function() {\n\n\tvar param = process.argv[2];\n\n\tvar word = param ? param : '';\n\n\tif (!word) {\n\t\tconsole.log('请输入要查询的单词'.underline.red);\n\t\treturn false;\n\t}\n\n\tconsole.log('');\n\tconsole.log('要翻译的单词 : '.green + ' : ' + word.underline.red);\n\tconsole.log('');\n\n\tvar option = {\n\t\tfrom: 'zh',\n\t\tto: 'en',\n\t\tquery: encodeURIComponent(word)\n\t};\n\n\tif (/^[A-Za-z ]+$/.test(word.trim())) {\n\t\toption.from = 'en';\n\t\toption.to = 'zh';\n\t}\n\n\tvar url = 'http://test.com'; // 这里换成了假url\n\n\tvar paramArray = [];\n\tfor (var item in option) {\n\t\tvar pStr = item + '=' + option[item];\n\t\tparamArray.push(pStr);\n\t}\n\n\turl += '?' + paramArray.join('&');\n\n\trequest(url, function(error, response, data) {\n\t\tif (!error && response.statusCode == 200) {\n\t\t\tdata = JSON.parse(data);\n\t\t\tif (data && data.result) {\n\t\t\t\tconsole.log('翻译结果 : '.green + data.result.dst.underline.red || '没有查询到结果'.underline.red);\n\t\t\t} else {\n\t\t\t\tconsole.log('没有查询到结果'.underline.red);\n\t\t\t}\n\t\t\tconsole.log('');\n\t\t}\n\t});\n}());\n```\n#### 链接到全局\nnpm link\n\n#### 自行发布\n\n#### request\nrequest模块让http请求变的简单,https://www.npmjs.com/package/request\n\n#### colors\n终端着色colors插件,https://www.npmjs.com/package/colors\n\n#### program\nnodejs命令行参数处理模块commander,https://www.npmjs.com/package/commander\n","source":"_posts/nodejs开发控制台工具.md","raw":"title: nodejs开发控制台工具\ndate: 2016-04-14 10:41:56\ntags: nodejs\ntoc: true\n---\n#### 环境要求\n* nodejs\n\n#### 基本文件结构\n* package.json \n\t* 使用npm init生成\n\t* 安装依赖模块使用 npm install 模块名\n* 一个主文件 index.js\n\n<!--more-->\n\n#### 例子：\n* package.json\n```javascript\n{\n  \"name\": \"node-translate\",\n  \"version\": \"1.0.0\",\n  \"description\": \"translate\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"bin\": {\n    \"trans\": \"./index.js\"\n  },\n  \"author\": \"黑卓\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"color\": \"^0.11.1\",\n    \"colors\": \"^1.1.2\",\n    \"commander\": \"^2.9.0\",\n    \"request\": \"^2.70.0\"\n  }\n}\n```\n* index.js\n```javascript\n#! /usr/bin/env node\n\n/*\n * @Author: 黑卓\n * @Date:   2016-04-07 15:47:33\n * @Last Modified by:   黑卓\n * @Last Modified time: 2016-04-07 17:56:40\n */\n\n'use strict';\n\nvar request = require('request');\nvar colors = require('colors');\n\nvar program = require('commander');\nprogram.version('0.0.1').parse(process.argv);\n\n(function() {\n\n\tvar param = process.argv[2];\n\n\tvar word = param ? param : '';\n\n\tif (!word) {\n\t\tconsole.log('请输入要查询的单词'.underline.red);\n\t\treturn false;\n\t}\n\n\tconsole.log('');\n\tconsole.log('要翻译的单词 : '.green + ' : ' + word.underline.red);\n\tconsole.log('');\n\n\tvar option = {\n\t\tfrom: 'zh',\n\t\tto: 'en',\n\t\tquery: encodeURIComponent(word)\n\t};\n\n\tif (/^[A-Za-z ]+$/.test(word.trim())) {\n\t\toption.from = 'en';\n\t\toption.to = 'zh';\n\t}\n\n\tvar url = 'http://test.com'; // 这里换成了假url\n\n\tvar paramArray = [];\n\tfor (var item in option) {\n\t\tvar pStr = item + '=' + option[item];\n\t\tparamArray.push(pStr);\n\t}\n\n\turl += '?' + paramArray.join('&');\n\n\trequest(url, function(error, response, data) {\n\t\tif (!error && response.statusCode == 200) {\n\t\t\tdata = JSON.parse(data);\n\t\t\tif (data && data.result) {\n\t\t\t\tconsole.log('翻译结果 : '.green + data.result.dst.underline.red || '没有查询到结果'.underline.red);\n\t\t\t} else {\n\t\t\t\tconsole.log('没有查询到结果'.underline.red);\n\t\t\t}\n\t\t\tconsole.log('');\n\t\t}\n\t});\n}());\n```\n#### 链接到全局\nnpm link\n\n#### 自行发布\n\n#### request\nrequest模块让http请求变的简单,https://www.npmjs.com/package/request\n\n#### colors\n终端着色colors插件,https://www.npmjs.com/package/colors\n\n#### program\nnodejs命令行参数处理模块commander,https://www.npmjs.com/package/commander\n","slug":"nodejs开发控制台工具","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599gw00224wyjmf4dlz7r"},{"title":"nodejs利用session做登录控制","date":"2016-11-02T12:53:28.000Z","toc":true,"_content":"#### background\n\n&nbsp; &nbsp;&nbsp;&nbsp;登录的场景在我们日常应用中有很多，登录的实现过程大家都很清楚，无非就是拿着用户名密去数据库中查询，如果查到了就表示这个人是系统用户，可以登录并且使用系统。那么当用户访问系统页面的时候，我们怎么判断他是不是登录过了呢，这个时候就引出了session。\n&nbsp; &nbsp;&nbsp;&nbsp;session翻译成会话，session的生命周期和浏览器的生命周期一致，session从创建的一刻起开始生效，浏览器关闭session销毁。session是客户端与服务器之间保持状态的解决方案。这种会话的匹配是通过cookie来实现的。\n\n<!--more-->\n\n#### express-session\n\n&nbsp; &nbsp;&nbsp;&nbsp;express-session是基于express框架的专门处理session的中间件，安装 `sudo npm install express-session --save` , session的解析过程需要用到cookieParser, 安装 `sudo npm install cookieParser --save` , 我们在使用的时候，只需要把express-session加入到中间件中，这样所有的路由就都能使用它了，我们可以在req.session中设置和读取session的值。\n\n##### 应用\n\n改造上一节中的例子，这里只介绍一些增加项\napp.js (引用session，加入中间件)\n```javascript\n...\nvar session = require('express-session');\nvar cookieParser = require('cookie-parser');\n...\n...\napp.use(cookieParser());\napp.use(session({\n  resave: false,\n  saveUninitialized: true,\n  name: 'user',\n  cookie: { maxAge: 80000 },\n  secret: 'wz'\n}));\n...\n...\n\n```\n\nroutes/index.js (路由中检查登录session是否存在)\n```javascript\nfunction restrict(req, res, next) {\n  if (req.session.user) {\n    next();\n  } else {\n    res.redirect('/login.page');\n  }\n}\nrouter.get('/index.page',restrict, function(req, res){\n  res.send('success');\n});\nrouter.get('/login.page', function(req, res){\n  res.send('login');\n});\nrouter.get('/login', function(req, res, next){\n    login(req, res, next);\n});\nrouter.get('/logout', function(req, res){\n  req.session.destroy(function(){\n    res.redirect('/login.page');\n  });\n});\n```\n\nmain/login.js (只增加了注释部分的代码)\n```javascript\nfunction queryData(req, res, next,query) {\n    var query = query ? JSON.parse(query) : {};\n    pageModule.find(query).exec(function(err, data) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        if(data && data.length){\n            //只增加了登录成功后，创建一个session的过程\n            req.session.user = data[0].username;\n            dbSuccess.data = data;\n            result = JSON.stringify(dbSuccess);\n            res.end(result);\n        }else{\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n    });\n}\n```\n\n#### 测试过程\n```javascript\n1. http://127.0.0.1:3000/index.page\n2. http://127.0.0.1:3000/login?type=find\n3. http://127.0.0.1:3000/index.page\n```\n分别输入三个url，观察现象，第一个url输入的时候，因为不存在session,所以会跳转到登录页面，\n第二个url为模拟登录过程，创建了一个session，第三个url访问主页，此时存在session,所以可以看到首页内容。\n\n#### express-session常用参数\n* cookie Object类型，设置cookie的一些属性\n* domain cookie作用域\n* expires cookie失效时间\n* httpOnly 禁止客户端访问\n* maxAge 实效时长\n* path cookie路径\n* name 这是session id的值\n* resave 允许重新设置session\n* saveUninitialized 是否session可以修改\n* secret cookie密钥\n* store session存储方式 mongodb等\n\n#### express-session常用方法\n* Session.regenerate() 创建session\n* Session.destroy() 销毁session\n* Session.reload() 重载session\n* Session.save() 保存session","source":"_posts/nodejs利用session做登录控制.md","raw":"title: nodejs利用session做登录控制\ndate: 2016-11-02 20:53:28\ntags: nodejs\ntoc: true\n---\n#### background\n\n&nbsp; &nbsp;&nbsp;&nbsp;登录的场景在我们日常应用中有很多，登录的实现过程大家都很清楚，无非就是拿着用户名密去数据库中查询，如果查到了就表示这个人是系统用户，可以登录并且使用系统。那么当用户访问系统页面的时候，我们怎么判断他是不是登录过了呢，这个时候就引出了session。\n&nbsp; &nbsp;&nbsp;&nbsp;session翻译成会话，session的生命周期和浏览器的生命周期一致，session从创建的一刻起开始生效，浏览器关闭session销毁。session是客户端与服务器之间保持状态的解决方案。这种会话的匹配是通过cookie来实现的。\n\n<!--more-->\n\n#### express-session\n\n&nbsp; &nbsp;&nbsp;&nbsp;express-session是基于express框架的专门处理session的中间件，安装 `sudo npm install express-session --save` , session的解析过程需要用到cookieParser, 安装 `sudo npm install cookieParser --save` , 我们在使用的时候，只需要把express-session加入到中间件中，这样所有的路由就都能使用它了，我们可以在req.session中设置和读取session的值。\n\n##### 应用\n\n改造上一节中的例子，这里只介绍一些增加项\napp.js (引用session，加入中间件)\n```javascript\n...\nvar session = require('express-session');\nvar cookieParser = require('cookie-parser');\n...\n...\napp.use(cookieParser());\napp.use(session({\n  resave: false,\n  saveUninitialized: true,\n  name: 'user',\n  cookie: { maxAge: 80000 },\n  secret: 'wz'\n}));\n...\n...\n\n```\n\nroutes/index.js (路由中检查登录session是否存在)\n```javascript\nfunction restrict(req, res, next) {\n  if (req.session.user) {\n    next();\n  } else {\n    res.redirect('/login.page');\n  }\n}\nrouter.get('/index.page',restrict, function(req, res){\n  res.send('success');\n});\nrouter.get('/login.page', function(req, res){\n  res.send('login');\n});\nrouter.get('/login', function(req, res, next){\n    login(req, res, next);\n});\nrouter.get('/logout', function(req, res){\n  req.session.destroy(function(){\n    res.redirect('/login.page');\n  });\n});\n```\n\nmain/login.js (只增加了注释部分的代码)\n```javascript\nfunction queryData(req, res, next,query) {\n    var query = query ? JSON.parse(query) : {};\n    pageModule.find(query).exec(function(err, data) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        if(data && data.length){\n            //只增加了登录成功后，创建一个session的过程\n            req.session.user = data[0].username;\n            dbSuccess.data = data;\n            result = JSON.stringify(dbSuccess);\n            res.end(result);\n        }else{\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n    });\n}\n```\n\n#### 测试过程\n```javascript\n1. http://127.0.0.1:3000/index.page\n2. http://127.0.0.1:3000/login?type=find\n3. http://127.0.0.1:3000/index.page\n```\n分别输入三个url，观察现象，第一个url输入的时候，因为不存在session,所以会跳转到登录页面，\n第二个url为模拟登录过程，创建了一个session，第三个url访问主页，此时存在session,所以可以看到首页内容。\n\n#### express-session常用参数\n* cookie Object类型，设置cookie的一些属性\n* domain cookie作用域\n* expires cookie失效时间\n* httpOnly 禁止客户端访问\n* maxAge 实效时长\n* path cookie路径\n* name 这是session id的值\n* resave 允许重新设置session\n* saveUninitialized 是否session可以修改\n* secret cookie密钥\n* store session存储方式 mongodb等\n\n#### express-session常用方法\n* Session.regenerate() 创建session\n* Session.destroy() 销毁session\n* Session.reload() 重载session\n* Session.save() 保存session","slug":"nodejs利用session做登录控制","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599gx00244wyjlwbi6d8z"},{"title":"nodejs中fs模块","date":"2015-11-05T07:03:01.000Z","toc":true,"_content":"#### 文件操作模块File System\n* 使用的时候只需要 `var fs = require(‘fs’);`\n#### 常用方法\n##### rename\n* `fs.rename(oldPath, newPath, callback)`\n传入原路径，新路径，回调方法，回调中主要用来检测err异常信息\n```javascript\nvar fs = require('fs');\nfs.rename('jq-1.7.1.js','src/jq-1.7.2.js', function(err){\n if(err){\n    console.log('rename error');\n    throw err;\n }\n console.log('rename success');\n})\n//新路径中src必须存在，否则会报异常\n```\n<!--more-->\n\n##### chmod\n* `fs.chmod(path, mode, callback)`\n修改文件权限，传入文件路径，权限类型，回调函数。\n```javascript\nvar fs = require('fs');\nfs.chmod('jq-1.7.2.js',0777,function(err){\nif(err){\n    console.log('chmod error');\n    throw err;\n }\n console.log('chmod success');\n})\n```\n##### stat\n* `fs.stat(path, callback)`\n获取文件信息，传入文件路径，回调函数，回调中两个参数，异常以及文件信息数组\n```javascript\nvar fs = require('fs');\nfs.stat('jq-1.7.2.js', function(err, stats){\n if(err){\n  console.log('stat error');\n  throw err;\n }else{\n  console.log('stat success');\n  console.log(stats);\n }\n})\nstats.isFile() —— 如果是个标准文件，而不是目录，socket，符号链接或者设备返回true\nstats.isDiretory() —— 如果是目录则返回tue\nstats.isBlockDevice() —— 如果是块设备则返回true\nstats.isChracterDevice() —— 如果是字符设备返回true\nstats.isSymbolickLink() —— 如果是文件链接返回true\nstats.isFifo() —— 如果是个FIFO返回true\nstats.isSocket() —— 如果是个socket返回true\n```\n##### realpath\n* `fs.realpath(path, cache, callback)`\n获取真实路径\n传入参数有文件路径，文件路径中关键字的映射路径，回调，回调中包含异常err以及resolvedPath真实地址\n```javascript\nvar cache = {'/www':'/home/q/www'};\nfs.realpath('/www/project', cache, function (err, resolvedPath) {\n  if (err) {\n    console.log('realpath error');\n    throw err;\n  }\n  console.log('realpath success');\n  console.log(resolvedPath);\n});\n```\n##### rmdir\n* `fs.rmdir(path, callback)`\n删除目录，path要删除的目录，callback回调err\n```javascript\nvar fs = require('fs');\nfs.rmdir('src', function(err){\n if(err){\n  console.log('rmdir err');\n  throw err;\n }\n\n  console.log(\"rmdir success\");\n});\n```\n##### mkdir\n* `fs.mkdir(path, mode, callback)`\n创建目录，path要创建的目录，mode文件权限，callback回调err\n```javascript\nvar fs = require('fs');\nfs.mkdir('src', 0777, function(err){\n if(err){\n  console.log('mkdir err');\n  throw err;\n }\n\n  console.log(\"mkdir success\");\n});\n```\n##### readdir\n* fs.readdir(path, callback)\n读取目录中内容，path要读取的路径，callback回调，err files,files参数保存了目录中所有文件名的数组\n```javascript\nvar fs = require('fs');\nfs.readdir('src', function(err,files){\n if(err){\n  console.log('readdir err');\n  throw err;\n }\n  console.log(\"readdir success\");\n  console.log(files);\n});\n```\n##### open\n* `fs.open(path, flags, mode, callback)`\n打开文件，处理文件之前，需要打开文件\n文件路径，打开方式(r，r+，w，w+，a或者a+)，回调函数 err fd\n```javascript\nvar fs = require('fs');\nfs.open('/src/test', 'r', function(err, fd) {\n    if(err){\n        console.log('open err');\n        throw err;\n    }\n    console.log(fd);\n});\n```\n##### close\n* `fs.close(fd, callback)`\n任何读写操作之后都要关闭文件\n```javascript\nvar fs = require('fs');\nfs.open('/src/test', 'r', function(err, fd) {\n    if(err){\n        console.log('open err');\n        throw err;\n    }\n    console.log(fd);\n    fs.close(fd,function(err){\n        throw err;\n    });\n});\n```\n##### write\n* `fs.write(fd, buffer, offset, length, position, callback)`\n将buffer写入文件\nfd文件描述符,buffer缓冲区,offset-buffer写入的偏移量, length指定文件写入字节数长度, position指定文件写入的起始位置，callback（err, bytesWritten, buffer）bytesWritten指定多少字节数将被写入到文件 ,buffer返回缓冲区对象\n```javascript\nvar fs = require('fs');\nfs.open('src/test.js', 'a', function(err, fd) {\n\tif (err) {\n\t\tconsole.log('open err');\n\t\tthrow err;\n\t}\n\tvar buf = new Buffer(8);\n\tfs.write(fd, buf, 0, 8, 0, function(err, bytesWritten, buffer) {\n\t\tif (err) {\n\t\t\tconsole.log('write err');\n\t\t\tthrow err;\n\t\t}\n\t\tconsole.log(bytesWritten);\n\t\tconsole.log(buffer);\n\n\t\tfs.close(fd, function(err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('close err');\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('close');\n\t\t})\n\t})\n});\n```\n##### write\n* `fs.write(fd, data, position, encoding, callback)`\n将data写入文件\nfd文件描述符,data写入数据，encoding文件编码，callback(err, written, string) written指定多少字符数将被写入到文件，string返回的Buffer\n```javascript\nvar fs = require('fs');\nfs.open('src/test.js', 'a', function(err, fd) {\n\tif (err) {\n\t\tconsole.log('open err');\n\t\tthrow err;\n\t}\n\tvar data = 'test';\n\tfs.write(fd, data, 0, 'utf-8', function(err, written, string) {\n\t\tif (err) {\n\t\t\tconsole.log('write err');\n\t\t\tthrow err;\n\t\t}\n\t\tconsole.log(written);\n\t\tconsole.log(string);\n\n\t\tfs.close(fd, function(err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('close err');\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('close');\n\t\t})\n\t})\n})\n```\n##### read\n* `fs.read(fd, buffer, offset, length, position, callback)`\n根据指定的文件描述符fd来读取文件数据并写入buffer指向的缓冲区对象\nfd 文件描述符，buffer缓冲区，数据将被写入，offset，buffer写入偏移量，length文件指定读取长度，position指定文件读取开始位置，传null表示开始位置，callback回调函数，err，bytesRead读的字节数, buffer缓冲区对象\n```javascript\nvar fs = require('fs');\nfs.open('/src/test', 'r', function(err, fd) {\n    if(err){\n        console.log('open err');\n        throw err;\n    }\n    var buf = new Buffer(8); \n    fs.read(fd, buf, 0, 8, null, function(err,bytesRead,buffer){ \n      if(err){ \n       console.log('read err'); \n       throw err;\n       return; \n      } \n      console.log('bytesRead' +bytesRead); \n      console.log(buffer); \n      fs.close(fd,function(err){\n        throw err;\n      });\n     }) \n});\n```\n##### readFile\n* `fs.readFile(filename, options, callback)`\n以异步的方式读取文件内容。\nfilename 文件路径，option对象，包含 encoding，编码格式，该项是可选的，callback err data\n```javascript\nvar fs = require('fs'); \nfs.readFile('src/test.txt','utf-8', function(err,data){ \n if(err){ \n  console.log('readFile err');\n  throw err; \n }\n  console.log(data);\n})\n```\n##### writeFile\n* `fs.writeFile(filename, data, options, callback)`\n以异步的方式写入文件，文件已存在将被覆盖。\nfilename文件名称，data将要写入的内容，可以使字符串或buffer数据。\noption数组对象，包含：encoding mode flag\ncallback回调err。\n```javascript\nfs.writeFile('src/test.txt', 'test', function (err) {\n  if (err) {\n     console.log('write err');\n     throw err;\n  }\n  console.log('writeFile success');\n});\n```\n##### appendFile\n* `fs.appendFile(filename, data, options, callback)`\n以异步的方式将data插入到文件里，文件不存在会创建一个新文件\n参数解释同上\n```javascript\nfs.appendFile('src/test.txt', 'test', function (err) {\n  if (err) {\n     console.log('write err');\n     throw err;\n  }\n  console.log('writeFile success');\n});\n```\n##### exists\n* `fs.exists(path, callback)`\n检测某个路径下是否存在文件\npath文件路径，callback回调exists true false\n```javascript \nvar fs = require('fs'); \nfs.exists('/src/test', function (exists) { \n\tif(exists){ \n\t\tconsole.log('exists'); \n\t}else{ \n\t\tconsole.log('not exists');\n\t} \n});\n```\n##### 所有方法都有对应的同步操作方式，方法名后面加上Sync,参数中没有callback","source":"_posts/nodejs中fs模块.md","raw":"title: nodejs中fs模块\ndate: 2015-11-05 15:03:01\ntags: nodejs\ntoc: true\n---\n#### 文件操作模块File System\n* 使用的时候只需要 `var fs = require(‘fs’);`\n#### 常用方法\n##### rename\n* `fs.rename(oldPath, newPath, callback)`\n传入原路径，新路径，回调方法，回调中主要用来检测err异常信息\n```javascript\nvar fs = require('fs');\nfs.rename('jq-1.7.1.js','src/jq-1.7.2.js', function(err){\n if(err){\n    console.log('rename error');\n    throw err;\n }\n console.log('rename success');\n})\n//新路径中src必须存在，否则会报异常\n```\n<!--more-->\n\n##### chmod\n* `fs.chmod(path, mode, callback)`\n修改文件权限，传入文件路径，权限类型，回调函数。\n```javascript\nvar fs = require('fs');\nfs.chmod('jq-1.7.2.js',0777,function(err){\nif(err){\n    console.log('chmod error');\n    throw err;\n }\n console.log('chmod success');\n})\n```\n##### stat\n* `fs.stat(path, callback)`\n获取文件信息，传入文件路径，回调函数，回调中两个参数，异常以及文件信息数组\n```javascript\nvar fs = require('fs');\nfs.stat('jq-1.7.2.js', function(err, stats){\n if(err){\n  console.log('stat error');\n  throw err;\n }else{\n  console.log('stat success');\n  console.log(stats);\n }\n})\nstats.isFile() —— 如果是个标准文件，而不是目录，socket，符号链接或者设备返回true\nstats.isDiretory() —— 如果是目录则返回tue\nstats.isBlockDevice() —— 如果是块设备则返回true\nstats.isChracterDevice() —— 如果是字符设备返回true\nstats.isSymbolickLink() —— 如果是文件链接返回true\nstats.isFifo() —— 如果是个FIFO返回true\nstats.isSocket() —— 如果是个socket返回true\n```\n##### realpath\n* `fs.realpath(path, cache, callback)`\n获取真实路径\n传入参数有文件路径，文件路径中关键字的映射路径，回调，回调中包含异常err以及resolvedPath真实地址\n```javascript\nvar cache = {'/www':'/home/q/www'};\nfs.realpath('/www/project', cache, function (err, resolvedPath) {\n  if (err) {\n    console.log('realpath error');\n    throw err;\n  }\n  console.log('realpath success');\n  console.log(resolvedPath);\n});\n```\n##### rmdir\n* `fs.rmdir(path, callback)`\n删除目录，path要删除的目录，callback回调err\n```javascript\nvar fs = require('fs');\nfs.rmdir('src', function(err){\n if(err){\n  console.log('rmdir err');\n  throw err;\n }\n\n  console.log(\"rmdir success\");\n});\n```\n##### mkdir\n* `fs.mkdir(path, mode, callback)`\n创建目录，path要创建的目录，mode文件权限，callback回调err\n```javascript\nvar fs = require('fs');\nfs.mkdir('src', 0777, function(err){\n if(err){\n  console.log('mkdir err');\n  throw err;\n }\n\n  console.log(\"mkdir success\");\n});\n```\n##### readdir\n* fs.readdir(path, callback)\n读取目录中内容，path要读取的路径，callback回调，err files,files参数保存了目录中所有文件名的数组\n```javascript\nvar fs = require('fs');\nfs.readdir('src', function(err,files){\n if(err){\n  console.log('readdir err');\n  throw err;\n }\n  console.log(\"readdir success\");\n  console.log(files);\n});\n```\n##### open\n* `fs.open(path, flags, mode, callback)`\n打开文件，处理文件之前，需要打开文件\n文件路径，打开方式(r，r+，w，w+，a或者a+)，回调函数 err fd\n```javascript\nvar fs = require('fs');\nfs.open('/src/test', 'r', function(err, fd) {\n    if(err){\n        console.log('open err');\n        throw err;\n    }\n    console.log(fd);\n});\n```\n##### close\n* `fs.close(fd, callback)`\n任何读写操作之后都要关闭文件\n```javascript\nvar fs = require('fs');\nfs.open('/src/test', 'r', function(err, fd) {\n    if(err){\n        console.log('open err');\n        throw err;\n    }\n    console.log(fd);\n    fs.close(fd,function(err){\n        throw err;\n    });\n});\n```\n##### write\n* `fs.write(fd, buffer, offset, length, position, callback)`\n将buffer写入文件\nfd文件描述符,buffer缓冲区,offset-buffer写入的偏移量, length指定文件写入字节数长度, position指定文件写入的起始位置，callback（err, bytesWritten, buffer）bytesWritten指定多少字节数将被写入到文件 ,buffer返回缓冲区对象\n```javascript\nvar fs = require('fs');\nfs.open('src/test.js', 'a', function(err, fd) {\n\tif (err) {\n\t\tconsole.log('open err');\n\t\tthrow err;\n\t}\n\tvar buf = new Buffer(8);\n\tfs.write(fd, buf, 0, 8, 0, function(err, bytesWritten, buffer) {\n\t\tif (err) {\n\t\t\tconsole.log('write err');\n\t\t\tthrow err;\n\t\t}\n\t\tconsole.log(bytesWritten);\n\t\tconsole.log(buffer);\n\n\t\tfs.close(fd, function(err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('close err');\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('close');\n\t\t})\n\t})\n});\n```\n##### write\n* `fs.write(fd, data, position, encoding, callback)`\n将data写入文件\nfd文件描述符,data写入数据，encoding文件编码，callback(err, written, string) written指定多少字符数将被写入到文件，string返回的Buffer\n```javascript\nvar fs = require('fs');\nfs.open('src/test.js', 'a', function(err, fd) {\n\tif (err) {\n\t\tconsole.log('open err');\n\t\tthrow err;\n\t}\n\tvar data = 'test';\n\tfs.write(fd, data, 0, 'utf-8', function(err, written, string) {\n\t\tif (err) {\n\t\t\tconsole.log('write err');\n\t\t\tthrow err;\n\t\t}\n\t\tconsole.log(written);\n\t\tconsole.log(string);\n\n\t\tfs.close(fd, function(err) {\n\t\t\tif (err) {\n\t\t\t\tconsole.log('close err');\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tconsole.log('close');\n\t\t})\n\t})\n})\n```\n##### read\n* `fs.read(fd, buffer, offset, length, position, callback)`\n根据指定的文件描述符fd来读取文件数据并写入buffer指向的缓冲区对象\nfd 文件描述符，buffer缓冲区，数据将被写入，offset，buffer写入偏移量，length文件指定读取长度，position指定文件读取开始位置，传null表示开始位置，callback回调函数，err，bytesRead读的字节数, buffer缓冲区对象\n```javascript\nvar fs = require('fs');\nfs.open('/src/test', 'r', function(err, fd) {\n    if(err){\n        console.log('open err');\n        throw err;\n    }\n    var buf = new Buffer(8); \n    fs.read(fd, buf, 0, 8, null, function(err,bytesRead,buffer){ \n      if(err){ \n       console.log('read err'); \n       throw err;\n       return; \n      } \n      console.log('bytesRead' +bytesRead); \n      console.log(buffer); \n      fs.close(fd,function(err){\n        throw err;\n      });\n     }) \n});\n```\n##### readFile\n* `fs.readFile(filename, options, callback)`\n以异步的方式读取文件内容。\nfilename 文件路径，option对象，包含 encoding，编码格式，该项是可选的，callback err data\n```javascript\nvar fs = require('fs'); \nfs.readFile('src/test.txt','utf-8', function(err,data){ \n if(err){ \n  console.log('readFile err');\n  throw err; \n }\n  console.log(data);\n})\n```\n##### writeFile\n* `fs.writeFile(filename, data, options, callback)`\n以异步的方式写入文件，文件已存在将被覆盖。\nfilename文件名称，data将要写入的内容，可以使字符串或buffer数据。\noption数组对象，包含：encoding mode flag\ncallback回调err。\n```javascript\nfs.writeFile('src/test.txt', 'test', function (err) {\n  if (err) {\n     console.log('write err');\n     throw err;\n  }\n  console.log('writeFile success');\n});\n```\n##### appendFile\n* `fs.appendFile(filename, data, options, callback)`\n以异步的方式将data插入到文件里，文件不存在会创建一个新文件\n参数解释同上\n```javascript\nfs.appendFile('src/test.txt', 'test', function (err) {\n  if (err) {\n     console.log('write err');\n     throw err;\n  }\n  console.log('writeFile success');\n});\n```\n##### exists\n* `fs.exists(path, callback)`\n检测某个路径下是否存在文件\npath文件路径，callback回调exists true false\n```javascript \nvar fs = require('fs'); \nfs.exists('/src/test', function (exists) { \n\tif(exists){ \n\t\tconsole.log('exists'); \n\t}else{ \n\t\tconsole.log('not exists');\n\t} \n});\n```\n##### 所有方法都有对应的同步操作方式，方法名后面加上Sync,参数中没有callback","slug":"nodejs中fs模块","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599gy00264wyj90eq7fl9"},{"title":"nodejs+mongodb","date":"2016-10-31T12:53:27.000Z","toc":true,"_content":"这篇文章中，我们使用nodejs搭建简易服务器，然后开发一个登录过程中使用的增删改查接口，数据库使用mongoDB,操作数据库模块选用mongoose。\n\n#### 创建nodejs工程\n>npm init \n>创建package.json文件\n\n<!--more-->\n\n```json\n{\n  \"name\": \"nodeblog\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"^4.14.0\",\n    \"mongoose\": \"^4.6.5\",\n    \"url\": \"^0.11.0\"\n  }\n}\n```\n>dependencies中显示的是安装的依赖包，下面有安装过程，先不用考虑\n\n#### 使用express\n>sudo npm install express --save\n>快速构建web应用模块 资料: http://www.expressjs.com.cn/4x/api.html\n\n#### app.js\n```javascript\nvar express = require('express');\nvar app = express();\napp.get('/', function(req, res){\n  res.send('hello world');\n});\napp.listen(3000);\nconsole.log('nodejs server start, listen port 3000');\n```\n>浏览器打开 http://127.0.0.1:3000/ 页面显示 hello world\n\n#### 使用mongoose\n>sudo npm install mongoose --save\n>数据库操作模块\n\n#### 安装其他模块\n>sudo npm install url --save\n>辅助解析url参数\n\n#### nodejs操作数据库\n>app.js 程序主文件\n```javascript\nvar express = require('express');\nvar app = express();\nvar routes = require('./routes/index');\napp.use('/', routes);\napp.listen(3000);\nconsole.log('nodejs server start, listen port 3000');\n```\n\n>routes/index.js 路由文件\n```javascript\nvar express = require('express');\nvar router = express.Router();\nvar login = require('../main/login');\nrouter.get(['/login'], function(req, res, next) {\n    login(req, res, next);\n});\nmodule.exports = router;\n```\n\n>main/config.js 数据库配置文件\n```javascript\nvar config = {\n\tdbHost: '127.0.0.1',\n\tdbPort: '27017',\n\tdbAdmin: 'superuser',\n\tdbPassword: 'pwd'\n};\nmodule.exports = config;\n```\n\n>main/loginSchema.js 数据库表结构\n```javascript\nvar mongoose = require('mongoose');\nvar loginSchema = new mongoose.Schema({\n\tusername: String,\n\tuserpassword: String\n});\nmodule.exports = loginSchema;\n```\n\n>main/login.js 登录增删改查逻辑文件\n```javascript\nvar url = require('url'),\n    mongoose = require('mongoose'),\n    loginSchema = require('./loginSchema'),\n    config = require('./config');\nvar opt = {\n        user: config.dbAdmin,\n        pass: config.dbPassword,\n        auth: {\n            authdb: 'admin'\n        }\n    },\n    db = mongoose.createConnection(config.dbHost, 'userinfo', config.dbPort, opt),\n    pageModule = db.model(\"user\", loginSchema);\nvar result,\n    dbSuccess = {\n    \tret:true,\n    \tdata:{}\n    }, \n    dbError = {\n    \tret:false,\n    \tdata:'fail'\n    };\n/**\n *  存储数据\n */\nfunction saveData(req, res, next, pageData) {\n    var pageDataModule = new pageModule(JSON.parse(pageData));\n    pageDataModule.save(function(err) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        dbSuccess.data = '操作成功';\n        result = JSON.stringify(dbSuccess);\n        res.end(result);\n    });\n}\n/**\n *  删除数据\n */\nfunction deleteData(req, res, next,query) {\n    var query = query ? JSON.parse(query) : {};\n    pageModule.remove(query).exec(function(err, data) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        dbSuccess.data = '操作成功';\n        result = JSON.stringify(dbSuccess);\n        res.end(result);\n    });\n}\n/**\n *  更新数据\n */\nfunction updateData(req, res, next,query, pageData) {\n    var query = query ? JSON.parse(query) : {};\n    pageData = JSON.parse(pageData);\n    pageModule.findOneAndUpdate(query, pageData).exec(function(err, data) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        dbSuccess.data = '操作成功';\n        result = JSON.stringify(dbSuccess);\n        res.end(result);\n    });\n}\n/**\n *  查询数据\n */\nfunction queryData(req, res, next,query) {\n    var query = query ? JSON.parse(query) : {};\n    pageModule.find(query).exec(function(err, data) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        if(data && data.length){\n            dbSuccess.data = data;\n            result = JSON.stringify(dbSuccess);\n            res.end(result);\n        }else{\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n    });\n}\n/**\n *  增删改查入口\n */\nfunction login(req, res, next){\n\tvar queryObj = url.parse(decodeURIComponent(req.url), true).query,\n\t    type = queryObj.type,\n\t    query = queryObj.query,\n\t    pageData = queryObj.pageData;\n\tswitch(type){\n\t\tcase 'add':\n\t\t\tsaveData(req, res, next,pageData);\n\t\t\tbreak;\n\t\tcase 'delete':\n\t\t\tdeleteData(req, res, next,query);\n\t\t\tbreak;\n\t\tcase 'update':\n\t\t\tupdateData(req, res, next,query, pageData)\n\t\t\tbreak;\n\t\tcase 'find':\n\t\t\tqueryData(req, res, next,query)\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n}\nmodule.exports = login;\n```\n\n#### 测试url\n1.http://127.0.0.1:3000/login?type=add&pageData={\"username\":\"wz\",\"userpassword\":\"wz\"}\n2.http://127.0.0.1:3000/login?type=find\n3.http://127.0.0.1:3000/login?type=update&query={\"username\":\"wz\"}&pageData={\"username\":\"ww\",\"userpassword\":\"wz\"}\n4.http://127.0.0.1:3000/login?type=delete&query={\"username\":\"ww\"}\n>提供的测试url分别做了：1 向数据库中插入一条数据，2 在数据库中查找users表中所有数据，3 修改第一步中添加的数据，4 删除第三步中修改的数据。都以json格式返回给客户端。","source":"_posts/nodejs-mongodb.md","raw":"title: nodejs+mongodb\ndate: 2016-10-31 20:53:27\ntags: nodejs\ntoc: true\n---\n这篇文章中，我们使用nodejs搭建简易服务器，然后开发一个登录过程中使用的增删改查接口，数据库使用mongoDB,操作数据库模块选用mongoose。\n\n#### 创建nodejs工程\n>npm init \n>创建package.json文件\n\n<!--more-->\n\n```json\n{\n  \"name\": \"nodeblog\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"^4.14.0\",\n    \"mongoose\": \"^4.6.5\",\n    \"url\": \"^0.11.0\"\n  }\n}\n```\n>dependencies中显示的是安装的依赖包，下面有安装过程，先不用考虑\n\n#### 使用express\n>sudo npm install express --save\n>快速构建web应用模块 资料: http://www.expressjs.com.cn/4x/api.html\n\n#### app.js\n```javascript\nvar express = require('express');\nvar app = express();\napp.get('/', function(req, res){\n  res.send('hello world');\n});\napp.listen(3000);\nconsole.log('nodejs server start, listen port 3000');\n```\n>浏览器打开 http://127.0.0.1:3000/ 页面显示 hello world\n\n#### 使用mongoose\n>sudo npm install mongoose --save\n>数据库操作模块\n\n#### 安装其他模块\n>sudo npm install url --save\n>辅助解析url参数\n\n#### nodejs操作数据库\n>app.js 程序主文件\n```javascript\nvar express = require('express');\nvar app = express();\nvar routes = require('./routes/index');\napp.use('/', routes);\napp.listen(3000);\nconsole.log('nodejs server start, listen port 3000');\n```\n\n>routes/index.js 路由文件\n```javascript\nvar express = require('express');\nvar router = express.Router();\nvar login = require('../main/login');\nrouter.get(['/login'], function(req, res, next) {\n    login(req, res, next);\n});\nmodule.exports = router;\n```\n\n>main/config.js 数据库配置文件\n```javascript\nvar config = {\n\tdbHost: '127.0.0.1',\n\tdbPort: '27017',\n\tdbAdmin: 'superuser',\n\tdbPassword: 'pwd'\n};\nmodule.exports = config;\n```\n\n>main/loginSchema.js 数据库表结构\n```javascript\nvar mongoose = require('mongoose');\nvar loginSchema = new mongoose.Schema({\n\tusername: String,\n\tuserpassword: String\n});\nmodule.exports = loginSchema;\n```\n\n>main/login.js 登录增删改查逻辑文件\n```javascript\nvar url = require('url'),\n    mongoose = require('mongoose'),\n    loginSchema = require('./loginSchema'),\n    config = require('./config');\nvar opt = {\n        user: config.dbAdmin,\n        pass: config.dbPassword,\n        auth: {\n            authdb: 'admin'\n        }\n    },\n    db = mongoose.createConnection(config.dbHost, 'userinfo', config.dbPort, opt),\n    pageModule = db.model(\"user\", loginSchema);\nvar result,\n    dbSuccess = {\n    \tret:true,\n    \tdata:{}\n    }, \n    dbError = {\n    \tret:false,\n    \tdata:'fail'\n    };\n/**\n *  存储数据\n */\nfunction saveData(req, res, next, pageData) {\n    var pageDataModule = new pageModule(JSON.parse(pageData));\n    pageDataModule.save(function(err) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        dbSuccess.data = '操作成功';\n        result = JSON.stringify(dbSuccess);\n        res.end(result);\n    });\n}\n/**\n *  删除数据\n */\nfunction deleteData(req, res, next,query) {\n    var query = query ? JSON.parse(query) : {};\n    pageModule.remove(query).exec(function(err, data) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        dbSuccess.data = '操作成功';\n        result = JSON.stringify(dbSuccess);\n        res.end(result);\n    });\n}\n/**\n *  更新数据\n */\nfunction updateData(req, res, next,query, pageData) {\n    var query = query ? JSON.parse(query) : {};\n    pageData = JSON.parse(pageData);\n    pageModule.findOneAndUpdate(query, pageData).exec(function(err, data) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        dbSuccess.data = '操作成功';\n        result = JSON.stringify(dbSuccess);\n        res.end(result);\n    });\n}\n/**\n *  查询数据\n */\nfunction queryData(req, res, next,query) {\n    var query = query ? JSON.parse(query) : {};\n    pageModule.find(query).exec(function(err, data) {\n        res.writeHead(200, {\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        });\n        if(err){\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n        if(data && data.length){\n            dbSuccess.data = data;\n            result = JSON.stringify(dbSuccess);\n            res.end(result);\n        }else{\n            result = JSON.stringify(dbError);\n            res.end(result);\n        }\n    });\n}\n/**\n *  增删改查入口\n */\nfunction login(req, res, next){\n\tvar queryObj = url.parse(decodeURIComponent(req.url), true).query,\n\t    type = queryObj.type,\n\t    query = queryObj.query,\n\t    pageData = queryObj.pageData;\n\tswitch(type){\n\t\tcase 'add':\n\t\t\tsaveData(req, res, next,pageData);\n\t\t\tbreak;\n\t\tcase 'delete':\n\t\t\tdeleteData(req, res, next,query);\n\t\t\tbreak;\n\t\tcase 'update':\n\t\t\tupdateData(req, res, next,query, pageData)\n\t\t\tbreak;\n\t\tcase 'find':\n\t\t\tqueryData(req, res, next,query)\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n}\nmodule.exports = login;\n```\n\n#### 测试url\n1.http://127.0.0.1:3000/login?type=add&pageData={\"username\":\"wz\",\"userpassword\":\"wz\"}\n2.http://127.0.0.1:3000/login?type=find\n3.http://127.0.0.1:3000/login?type=update&query={\"username\":\"wz\"}&pageData={\"username\":\"ww\",\"userpassword\":\"wz\"}\n4.http://127.0.0.1:3000/login?type=delete&query={\"username\":\"ww\"}\n>提供的测试url分别做了：1 向数据库中插入一条数据，2 在数据库中查找users表中所有数据，3 修改第一步中添加的数据，4 删除第三步中修改的数据。都以json格式返回给客户端。","slug":"nodejs-mongodb","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599h100284wyjss4fgj2f"},{"title":"nginx配置https","date":"2015-11-21T07:03:01.000Z","toc":true,"_content":"#### 安装\n##### 系统：centos\n* wget下载\n* tar 解压\n* sudo ./configure —with-http_rewrite_module —with-pcre=../pcre-8.36 —with-* http_stub_status_module —with-http_ssl_module —with-http_realip_module 安装这些模块，如果安装失败，请wget下载缺失的包，解压安装后，再重新执行，等号后面添加模块路径\n* sudo make\n* sudo make install\n<!--more-->\n\n##### 配置转发\n```javascript\nupstream  test{\n     server **.**.**.**:****;\n}\n\nserver {\n        listen **.**.**.**:8888;\n        server_name test.test.com;\n        charset utf8;\n        gzip                    off;\n        gzip_http_version       1.1;\n        gzip_buffers            256 64k;\n        gzip_comp_level         5;\n        gzip_min_length         1000;\n        gzip_types              application/x-javascript text/javascript text/plain text/xml text/css image/jpeg image/jpg image/png image/gif application/x-shockwave-flash image/x-icon;\n\n    \n         proxy_set_header  Host  $host;\n         proxy_set_header  X-Real-IP  $remote_addr;\n         proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n\n\n        location ~ /test/ {\n                proxy_pass http://test;\n        }\n}\n```\n\n##### 支持https\n```javascript\nupstream  test{\n     server **.**.**.**:****;\n}\n\nserver {\n        listen **.**.**.**:443 ssl;\n        server_name test.test.com;\n        charset utf8;\n        gzip                    off;\n        gzip_http_version       1.1;\n        gzip_buffers            256 64k;\n        gzip_comp_level         5;\n        gzip_min_length         1000;\n        gzip_types              application/x-javascript text/javascript text/plain text/xml text/css image/jpeg image/jpg image/png image/gif application/x-shockwave-flash image/x-icon;\n\n        ssl on;\n        ssl_certificate             /home/q/nginx/conf/server.crt;\n        ssl_certificate_key         /home/q/nginx/conf/server.key;\n        ssl_session_timeout         5m;\n        ssl_protocols               SSLv3 TLSv1;\n        ssl_ciphers                 ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n        ssl_prefer_server_ciphers   on;\n\n         proxy_set_header  Host  $host;\n         proxy_set_header  X-Real-IP  $remote_addr;\n         proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n\n\n        location ~ /test/ {\n                proxy_pass http://test;\n        }\n}\n```\n##### 证书\n* 两种方式\n\t* 生成证书\n\t\t```javascript\n\t\t#cd /home/q/nginx/conf\n\t\t#openssl genrsa -des3 -out server.key 1024\n\t\t#openssl req -new -key server.key -out server.csr\n\t\t#openssl rsa -in server.key -out server_nopwd.key\n\t\t#openssl x509 -req -days 365 -in server.csr -signkey server_nopwd.key -out server.crt\n\t\t```\n\t\t中途需要输入密码，自己设定即可\n\t* copy\n\t\t直接copy别的机器上面已经存在的证书\n\n##### 浏览器\n* 方法一：如果提示安全提示，点击高级》继续浏览\n* 方法二：把生成的server.crt文件导入到系统的证书管理器就行了，具体方法：不介绍了","source":"_posts/nginx配置https.md","raw":"title: nginx配置https\ndate: 2015-11-21 15:03:01\ntags: web\ntoc: true\n---\n#### 安装\n##### 系统：centos\n* wget下载\n* tar 解压\n* sudo ./configure —with-http_rewrite_module —with-pcre=../pcre-8.36 —with-* http_stub_status_module —with-http_ssl_module —with-http_realip_module 安装这些模块，如果安装失败，请wget下载缺失的包，解压安装后，再重新执行，等号后面添加模块路径\n* sudo make\n* sudo make install\n<!--more-->\n\n##### 配置转发\n```javascript\nupstream  test{\n     server **.**.**.**:****;\n}\n\nserver {\n        listen **.**.**.**:8888;\n        server_name test.test.com;\n        charset utf8;\n        gzip                    off;\n        gzip_http_version       1.1;\n        gzip_buffers            256 64k;\n        gzip_comp_level         5;\n        gzip_min_length         1000;\n        gzip_types              application/x-javascript text/javascript text/plain text/xml text/css image/jpeg image/jpg image/png image/gif application/x-shockwave-flash image/x-icon;\n\n    \n         proxy_set_header  Host  $host;\n         proxy_set_header  X-Real-IP  $remote_addr;\n         proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n\n\n        location ~ /test/ {\n                proxy_pass http://test;\n        }\n}\n```\n\n##### 支持https\n```javascript\nupstream  test{\n     server **.**.**.**:****;\n}\n\nserver {\n        listen **.**.**.**:443 ssl;\n        server_name test.test.com;\n        charset utf8;\n        gzip                    off;\n        gzip_http_version       1.1;\n        gzip_buffers            256 64k;\n        gzip_comp_level         5;\n        gzip_min_length         1000;\n        gzip_types              application/x-javascript text/javascript text/plain text/xml text/css image/jpeg image/jpg image/png image/gif application/x-shockwave-flash image/x-icon;\n\n        ssl on;\n        ssl_certificate             /home/q/nginx/conf/server.crt;\n        ssl_certificate_key         /home/q/nginx/conf/server.key;\n        ssl_session_timeout         5m;\n        ssl_protocols               SSLv3 TLSv1;\n        ssl_ciphers                 ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP;\n        ssl_prefer_server_ciphers   on;\n\n         proxy_set_header  Host  $host;\n         proxy_set_header  X-Real-IP  $remote_addr;\n         proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;\n\n\n        location ~ /test/ {\n                proxy_pass http://test;\n        }\n}\n```\n##### 证书\n* 两种方式\n\t* 生成证书\n\t\t```javascript\n\t\t#cd /home/q/nginx/conf\n\t\t#openssl genrsa -des3 -out server.key 1024\n\t\t#openssl req -new -key server.key -out server.csr\n\t\t#openssl rsa -in server.key -out server_nopwd.key\n\t\t#openssl x509 -req -days 365 -in server.csr -signkey server_nopwd.key -out server.crt\n\t\t```\n\t\t中途需要输入密码，自己设定即可\n\t* copy\n\t\t直接copy别的机器上面已经存在的证书\n\n##### 浏览器\n* 方法一：如果提示安全提示，点击高级》继续浏览\n* 方法二：把生成的server.crt文件导入到系统的证书管理器就行了，具体方法：不介绍了","slug":"nginx配置https","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599h2002a4wyj9ygy21ub"},{"title":"mongodb","date":"2016-10-31T11:57:13.000Z","toc":true,"_content":"#### 环境\n* centeros\n\n#### 下载\n```javascript\nwget http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.10.tgz\n```\n\n#### 解压\n```javascript\nsudo tar -zxvf mongodb-linux-x86_64-3.2.10.tgz \n```\n\n<!--more-->\n#### 加入PATH\n```javascript\ncd mongodb-linux-x86_64-3.2.10\nexport PATH=/home/q/mongodb-linux-x86_64-3.2.10/bin:$PATH\n```\n\n#### 创建基础文件\n```javascript\nsudo mkdir -p data/db\nsudo mkdir logs\nsudo vim ./bin/mongodb.conf\n\n#加入内容\nport=27017\ndbpath=/home/q/mongodb-linux-x86_64-3.2.10/data/db\nlogpath=/home/q/mongodb-linux-x86_64-3.2.10/logs/db.logs\nlogappend=true\n```\n\n#### 启动服务\n```javascript\nsudo mongod -config /home/q/mongodb-linux-x86_64-3.2.10/bin/mongodb.conf  --fork --auth\n```\n\n#### 连接数据库\n```javascript\nmongo\n```\n\n#### 添加用户\n```javascript\nuse admin\ndb.createUser(\n  {\n    user:\"superuser\",\n    pwd:\"pwd\",\n    roles:[\"root\"]\n  }\n)\n```\n\n#### 认证\n```javascript\nuse admin\ndb.auth('superuser','pwd')\n```\n\n#### 添加用户\n```javascript\ndb.createUser(\n   {\n     user: \"zhuo.wu\",\n     pwd: \"zhuo.wu\",\n     roles: [ \"readWrite\", \"dbAdmin\" ]\n   }\n)\n```\n\n#### 查看用户\n```javascript\nshow users\n```\n\n#### 创建数据库\n```javascript\nuse testDB\n```\n\n#### 创建集合\n```javascript\ndb.test.insert({'k':'123'})\nshow dbs\ndb.test.find()\n```\n\n#### 删除集合\n```javascript\ndb.test.drop()\n```\n\n#### 删除数据库\n```javascript\ndb.dropDatabase()\n```\n\n#### 数据库备份\n```javascript\nsudo mongodump -u=superuser -p=pwd\n#mongodump -h dbhost -d dbname -o dbdirectory\n```\n\n#### 数据库恢复\n```javascript\nsudo mongodump -u=superuser -p=pwd\n#mongorestore -h dbhost -d dbname --directoryperdb dbdirectory\n```\n\n#### 定时备份数据库\n* 备份目录\n```javascript\nsudo mkdir -p /home/mongo/temp && sudo chmod -R 777 /home/mongo/temp\nsudo mkdir -p /home/mongo/all && sudo chmod -R 777 /home/mongo/all\n```\n\n* 备份脚本\nsudo vim /home/schedule/mongo.sh\n```javascript\n#!/bin/sh\nuser=superuser\npasswprd=pwd\ndeldays=2\nbackdate=`date +%Y-%m-%d`\nbackname=\"mg_$backdate.tar.gz\"\nmongodump=/home/q/mongodb-linux-x86_64-3.2.10/bin/mongodump\ntemp=/home/mongo/temp\nall=/home/mongo/all\ncd $temp\nrm -rf $temp/*\nmkdir -p $temp/$backdate\n$mongodump -u $user -p $passwprd -o $temp/$backdate\ntar -zcvf $all/$backname $temp/$backdate\nfind $all/ -mtime +$deldays -delete\n```\n\n* 修改权限\n```javascript\nsudo chmod -R 777 /home/schedule/mongo.sh\n```\n\n* 定时任务\nsudo vim /etc/crontab\n```javascript\n40 18 * * * root /home/schedule/mongo.sh\n```\n\n* 重启定时任务\n```javascript\nsudo /etc/rc.d/init.d/crond restart\n```\n\n* 开机启动\n```javascript\nsudo chkconfig crond on\n```\n\n* 启动服务\n```javascript\nsudo service crond start\n```\n\n\n#### 关闭数据库\n```javascript\nuse admin\ndb.auth('superuser','pwd')\ndb.shutdownServer()\n#or\ndb.adminCommand({shutdown : 1, force : true})\n#or\ndb.shutdownServer({force : true})\n```\n\n#### 常见问题\n* 数据库非正常关闭lock\n```javascript\nsudo rm -rf /home/q/mongodb-linux-x86_64-3.2.10/data/db/mongod.lock\nsudo mongod --dbpath /home/q/mongodb-linux-x86_64-3.2.10/data/db --repair\nsudo ./mongod --dbpath /home/q/mongodb-linux-x86_64-3.2.10/data/db\n```\n\n#### 推荐数据库软件\n* Mac: Toad (app store)","source":"_posts/mongodb.md","raw":"title: mongodb\ndate: 2016-10-31 19:57:13\ntags: linux\ntoc: true\n---\n#### 环境\n* centeros\n\n#### 下载\n```javascript\nwget http://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.2.10.tgz\n```\n\n#### 解压\n```javascript\nsudo tar -zxvf mongodb-linux-x86_64-3.2.10.tgz \n```\n\n<!--more-->\n#### 加入PATH\n```javascript\ncd mongodb-linux-x86_64-3.2.10\nexport PATH=/home/q/mongodb-linux-x86_64-3.2.10/bin:$PATH\n```\n\n#### 创建基础文件\n```javascript\nsudo mkdir -p data/db\nsudo mkdir logs\nsudo vim ./bin/mongodb.conf\n\n#加入内容\nport=27017\ndbpath=/home/q/mongodb-linux-x86_64-3.2.10/data/db\nlogpath=/home/q/mongodb-linux-x86_64-3.2.10/logs/db.logs\nlogappend=true\n```\n\n#### 启动服务\n```javascript\nsudo mongod -config /home/q/mongodb-linux-x86_64-3.2.10/bin/mongodb.conf  --fork --auth\n```\n\n#### 连接数据库\n```javascript\nmongo\n```\n\n#### 添加用户\n```javascript\nuse admin\ndb.createUser(\n  {\n    user:\"superuser\",\n    pwd:\"pwd\",\n    roles:[\"root\"]\n  }\n)\n```\n\n#### 认证\n```javascript\nuse admin\ndb.auth('superuser','pwd')\n```\n\n#### 添加用户\n```javascript\ndb.createUser(\n   {\n     user: \"zhuo.wu\",\n     pwd: \"zhuo.wu\",\n     roles: [ \"readWrite\", \"dbAdmin\" ]\n   }\n)\n```\n\n#### 查看用户\n```javascript\nshow users\n```\n\n#### 创建数据库\n```javascript\nuse testDB\n```\n\n#### 创建集合\n```javascript\ndb.test.insert({'k':'123'})\nshow dbs\ndb.test.find()\n```\n\n#### 删除集合\n```javascript\ndb.test.drop()\n```\n\n#### 删除数据库\n```javascript\ndb.dropDatabase()\n```\n\n#### 数据库备份\n```javascript\nsudo mongodump -u=superuser -p=pwd\n#mongodump -h dbhost -d dbname -o dbdirectory\n```\n\n#### 数据库恢复\n```javascript\nsudo mongodump -u=superuser -p=pwd\n#mongorestore -h dbhost -d dbname --directoryperdb dbdirectory\n```\n\n#### 定时备份数据库\n* 备份目录\n```javascript\nsudo mkdir -p /home/mongo/temp && sudo chmod -R 777 /home/mongo/temp\nsudo mkdir -p /home/mongo/all && sudo chmod -R 777 /home/mongo/all\n```\n\n* 备份脚本\nsudo vim /home/schedule/mongo.sh\n```javascript\n#!/bin/sh\nuser=superuser\npasswprd=pwd\ndeldays=2\nbackdate=`date +%Y-%m-%d`\nbackname=\"mg_$backdate.tar.gz\"\nmongodump=/home/q/mongodb-linux-x86_64-3.2.10/bin/mongodump\ntemp=/home/mongo/temp\nall=/home/mongo/all\ncd $temp\nrm -rf $temp/*\nmkdir -p $temp/$backdate\n$mongodump -u $user -p $passwprd -o $temp/$backdate\ntar -zcvf $all/$backname $temp/$backdate\nfind $all/ -mtime +$deldays -delete\n```\n\n* 修改权限\n```javascript\nsudo chmod -R 777 /home/schedule/mongo.sh\n```\n\n* 定时任务\nsudo vim /etc/crontab\n```javascript\n40 18 * * * root /home/schedule/mongo.sh\n```\n\n* 重启定时任务\n```javascript\nsudo /etc/rc.d/init.d/crond restart\n```\n\n* 开机启动\n```javascript\nsudo chkconfig crond on\n```\n\n* 启动服务\n```javascript\nsudo service crond start\n```\n\n\n#### 关闭数据库\n```javascript\nuse admin\ndb.auth('superuser','pwd')\ndb.shutdownServer()\n#or\ndb.adminCommand({shutdown : 1, force : true})\n#or\ndb.shutdownServer({force : true})\n```\n\n#### 常见问题\n* 数据库非正常关闭lock\n```javascript\nsudo rm -rf /home/q/mongodb-linux-x86_64-3.2.10/data/db/mongod.lock\nsudo mongod --dbpath /home/q/mongodb-linux-x86_64-3.2.10/data/db --repair\nsudo ./mongod --dbpath /home/q/mongodb-linux-x86_64-3.2.10/data/db\n```\n\n#### 推荐数据库软件\n* Mac: Toad (app store)","slug":"mongodb","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599h4002c4wyja9wa0aux"},{"title":"markdown语法","date":"2015-10-20T07:03:01.000Z","toc":true,"_content":"##### 段落\n>空行会把上下文分成段落，如果想插入\n标签，在行尾加上两个以上的空格，然后再回车\n<!--more-->\n\n##### 标题\n>1-6个`#`表示对应的1-6级标题\n或者利用在文本下面添加=或者－表示一级标题或者二级标题\n\n##### 区块\n>在文本前面添加`>`表示一个区块\n区块可以有级别，根据级别添加不同数量的`>`就可以\n区块内可以使用任意markdown语法\n\n##### 列表\n>使用`*`后面加上一个空格\n使用`+`后面加上一个空格\n使用`-`后面加上一个空格\n使用`1`数字，后面加上一个空格\n\n##### 代码块\n>使用四个空格或者一个tab就代表代码块\n\n##### 分割线\n>用三个或以上的星号,减号,底线,星号之间可以存在空格\n\n##### 链接\n>行内式 参考式\n* 行内式：\n`[`括起来`]`\n链接测试链接 行内.\n链接 没有title.\n* 参考式：\n链接\ntitle(可以用单引号、双引号或是括号包着)\n\n##### 强调\n>`* *` `_ _`包着表示强调\n`** **` `__ __`包着表示强调\n如果在文字前面加入普通的`*`需要使用`\\`转义\n\n##### 代码\n>行内代码使用 \\` \\` 包起来\n如果要在行内使用反引号 \\` 可以使用多个反引号包起这段代码\n多行代码 可以使用三个 \\` 开始 再加上 代码类型 例如javascript 再以三个 \\` 结束\n\n##### 图片\n>行内式：`![图片描述](/images/bg/img1.jpg \"title\")`\n参考式：`![图片描述][id]`\n\n##### 自动链接\n>`http://123.com/`\n`\\`转义\n\n##### 需要转义的字符\n```javascript\n\\   反斜线\n`   反引号\n*   星号\n_   底线\n{}  花括号\n[]  方括号\n()  括号\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   惊叹号\n```\n","source":"_posts/markdown语法.md","raw":"title: markdown语法\ndate: 2015-10-20 15:03:01\ntags: javascript\ntoc: true\n---\n##### 段落\n>空行会把上下文分成段落，如果想插入\n标签，在行尾加上两个以上的空格，然后再回车\n<!--more-->\n\n##### 标题\n>1-6个`#`表示对应的1-6级标题\n或者利用在文本下面添加=或者－表示一级标题或者二级标题\n\n##### 区块\n>在文本前面添加`>`表示一个区块\n区块可以有级别，根据级别添加不同数量的`>`就可以\n区块内可以使用任意markdown语法\n\n##### 列表\n>使用`*`后面加上一个空格\n使用`+`后面加上一个空格\n使用`-`后面加上一个空格\n使用`1`数字，后面加上一个空格\n\n##### 代码块\n>使用四个空格或者一个tab就代表代码块\n\n##### 分割线\n>用三个或以上的星号,减号,底线,星号之间可以存在空格\n\n##### 链接\n>行内式 参考式\n* 行内式：\n`[`括起来`]`\n链接测试链接 行内.\n链接 没有title.\n* 参考式：\n链接\ntitle(可以用单引号、双引号或是括号包着)\n\n##### 强调\n>`* *` `_ _`包着表示强调\n`** **` `__ __`包着表示强调\n如果在文字前面加入普通的`*`需要使用`\\`转义\n\n##### 代码\n>行内代码使用 \\` \\` 包起来\n如果要在行内使用反引号 \\` 可以使用多个反引号包起这段代码\n多行代码 可以使用三个 \\` 开始 再加上 代码类型 例如javascript 再以三个 \\` 结束\n\n##### 图片\n>行内式：`![图片描述](/images/bg/img1.jpg \"title\")`\n参考式：`![图片描述][id]`\n\n##### 自动链接\n>`http://123.com/`\n`\\`转义\n\n##### 需要转义的字符\n```javascript\n\\   反斜线\n`   反引号\n*   星号\n_   底线\n{}  花括号\n[]  方括号\n()  括号\n#   井字号\n+   加号\n-   减号\n.   英文句点\n!   惊叹号\n```\n","slug":"markdown语法","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599h9002e4wyjjkdcbqpe"},{"title":"linux常用命令","date":"2015-10-28T07:03:01.000Z","toc":true,"_content":"#### 常用命令总结\n##### 修改环境变量\n```javascript\nsudo vim ~/.bashrc \n//加入类似环境变量\nexport PATH=${PATH}:/home/me/mongodb/mongodb-linux-x86_64-3.0.4/bin\n```\n<!--more-->\n\n##### 修改文件权限\n```javascript\nsudo chmod -R  777 /data/db\n```\n##### 软链接\n```javascript\nln -s \"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\" /usr/local/bin/subl\n```\n##### scp\n```javascript\nscp /data/a.txt user@1.1.1.1:/home\n```\n##### mongod\n```javascript\nmongod --dbpath /data/db  --fork --logpath=/data/db/work.log\n```\n##### nginx\n```javascript\n//启动ng\nsudo /usr/local/nginx/sbin/nginx\n//重启\n/usr/local/nginx/sbin/nginx -s reload\n//配置\n/usr/local/nginx/conf/nginx.conf\n配置转发\nupstream monitor_server {\n    server 111.111.111.111:80;\n        server 111.111.111.112:80;\n}\n \nserver\n{\n    listen 80;\n    server_name www.test.com;\n    location / {\n        proxy_redirect off;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://monitor_server;\n    }\n    access_log logs/www.test.com_access.log;\n}\n```\n##### cp\n```javascript\ncp -Rf /home/user1/* /root/temp/\n```\n##### 查看进程\n```javascript\nps -ef | grep node\n```\n##### 结束进程\n```javascript\nkill -9 [pid]\n```\n##### rsync\n```javascript\nrsync -av /User/* user@1.1.1.1:~/data\n```\n##### tail\n* 从指定点开始将文件写到标准输出\n* 经常使用 -f 查看日志\n##### node\n* 使用supervisor开启服务，不需要每次变更文件都重启\n* 使用forever执行文件，可以让node脚本一直运行","source":"_posts/linux常用命令.md","raw":"title: linux常用命令\ndate: 2015-10-28 15:03:01\ntags: linux\ntoc: true\n---\n#### 常用命令总结\n##### 修改环境变量\n```javascript\nsudo vim ~/.bashrc \n//加入类似环境变量\nexport PATH=${PATH}:/home/me/mongodb/mongodb-linux-x86_64-3.0.4/bin\n```\n<!--more-->\n\n##### 修改文件权限\n```javascript\nsudo chmod -R  777 /data/db\n```\n##### 软链接\n```javascript\nln -s \"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\" /usr/local/bin/subl\n```\n##### scp\n```javascript\nscp /data/a.txt user@1.1.1.1:/home\n```\n##### mongod\n```javascript\nmongod --dbpath /data/db  --fork --logpath=/data/db/work.log\n```\n##### nginx\n```javascript\n//启动ng\nsudo /usr/local/nginx/sbin/nginx\n//重启\n/usr/local/nginx/sbin/nginx -s reload\n//配置\n/usr/local/nginx/conf/nginx.conf\n配置转发\nupstream monitor_server {\n    server 111.111.111.111:80;\n        server 111.111.111.112:80;\n}\n \nserver\n{\n    listen 80;\n    server_name www.test.com;\n    location / {\n        proxy_redirect off;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_pass http://monitor_server;\n    }\n    access_log logs/www.test.com_access.log;\n}\n```\n##### cp\n```javascript\ncp -Rf /home/user1/* /root/temp/\n```\n##### 查看进程\n```javascript\nps -ef | grep node\n```\n##### 结束进程\n```javascript\nkill -9 [pid]\n```\n##### rsync\n```javascript\nrsync -av /User/* user@1.1.1.1:~/data\n```\n##### tail\n* 从指定点开始将文件写到标准输出\n* 经常使用 -f 查看日志\n##### node\n* 使用supervisor开启服务，不需要每次变更文件都重启\n* 使用forever执行文件，可以让node脚本一直运行","slug":"linux常用命令","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599hc002g4wyjuz29ro6e"},{"title":"linux下创建服务","date":"2017-02-07T05:42:57.000Z","toc":true,"_content":"#### 概述\n我们通过在 /etc/init.d/ 目录下创建bash脚本，实现自定义服务，通过service命令，能够调用服务中的方法，通常一个服务存在 start stop restart status方法。\n<!--more-->\n\n#### 例如\ntest\n```bash\n#!/bin/bash\n# chkconfig: 2345 20 81\n# description: test\ncase \"$1\" in\n  start)\n  echo -n \"starting test:\"\n  echo \"OK\"\n  ;;\n  stop)\n  echo -n \"shutdown test:\"\n  echo \"OK\"\n  ;;\n  status)\n  echo \"test instance is running...\"\n  ;;\n  restart)\n  $0 stop\n  $0 start\n  ;;\n  *)\n  echo \"Usage:`basename $0` start|stop|status|restart\"\nesac\nexit $?\n```\n我们在 /etc/init.d/ 下面添加 test 脚本，然后给文件权限 sudo chmod -R 755, 之后我们就能够通过 \n* sudo service start \n* sudo service stop \n* sudo service restart \n* sudo service status \n* sudo service \n这些命令去调用我们的服务了\n\n#### 加入开机启动 chkconfig\n```bash\nusage:   chkconfig [--list] [--type <type>] [name]\n         chkconfig --add <name>\n         chkconfig --del <name>\n         chkconfig --override <name>\n         chkconfig [--level <levels>] [--type <type>] <name> <on|off|reset|resetpriorities>\n```\nsudo chkconfig --add test\nsudo chkconfig test on\n","source":"_posts/linux下创建服务.md","raw":"title: linux下创建服务\ndate: 2017-02-07 13:42:57\ntags: linux\ntoc: true\n---\n#### 概述\n我们通过在 /etc/init.d/ 目录下创建bash脚本，实现自定义服务，通过service命令，能够调用服务中的方法，通常一个服务存在 start stop restart status方法。\n<!--more-->\n\n#### 例如\ntest\n```bash\n#!/bin/bash\n# chkconfig: 2345 20 81\n# description: test\ncase \"$1\" in\n  start)\n  echo -n \"starting test:\"\n  echo \"OK\"\n  ;;\n  stop)\n  echo -n \"shutdown test:\"\n  echo \"OK\"\n  ;;\n  status)\n  echo \"test instance is running...\"\n  ;;\n  restart)\n  $0 stop\n  $0 start\n  ;;\n  *)\n  echo \"Usage:`basename $0` start|stop|status|restart\"\nesac\nexit $?\n```\n我们在 /etc/init.d/ 下面添加 test 脚本，然后给文件权限 sudo chmod -R 755, 之后我们就能够通过 \n* sudo service start \n* sudo service stop \n* sudo service restart \n* sudo service status \n* sudo service \n这些命令去调用我们的服务了\n\n#### 加入开机启动 chkconfig\n```bash\nusage:   chkconfig [--list] [--type <type>] [name]\n         chkconfig --add <name>\n         chkconfig --del <name>\n         chkconfig --override <name>\n         chkconfig [--level <levels>] [--type <type>] <name> <on|off|reset|resetpriorities>\n```\nsudo chkconfig --add test\nsudo chkconfig test on\n","slug":"linux下创建服务","published":1,"updated":"2017-02-07T05:51:50.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599hd002i4wyjeasin7nd"},{"title":"javascript面向对象相关","date":"2015-11-21T07:03:01.000Z","toc":true,"_content":"#### 判断属性属于实力对象还是原型\n```javascript\nfunction check(name,obj){\n\treturn !(obj.hasOwnProperty) && (name in obj)\n}\n```\n\n<!--more-->\n\n#### for in循环\n>for in循环能够返回对象所有可枚举属性，无论实例中的，还是原型中的。即便是实例中重写了原型中不可枚举的属性，也会访问到。但是在IE8及以下存在bug,这样的属性不会被返回\n\n####继承\n```javascript\nfunction object(o){\n\tfunction F(){};\n\tF.prototype = o;\n\treturn new F();\n}\nfunction inheritPrototype(subType,superType){\n\tvar prototype = object(superType.prototype);\n\tprototype.constructor = subType;\n\tsubType.prototype = prototype;\n}\nfunction SuperType(name){\n\tthis.name = name;\n\tthis.color = [\"red\",\"blue\"];\n}\nSuperType.prototype.sayName = function(){\n\talert(this.name);\n};\nfunction SubType(name,age){\n\tSuperType.call(this,name);\n\tthis.age = age;\n}\ninheritPrototype(SubType,SuperType);\nSubType.prototype.sayAge = function(){\n\talert(this.age);\n};\n```\n>只调用了一次SuperType的构造函数，并且避免了在SubType.prototype上面创建不必要的属性，同时原型链还能保持不变。\n\n#### 单例模式\n```javascript\nvar singleton = function(){\n\tvar private = 0;\n\tfunction privateFunc(){\n\t\treturn false;\n\t}\n\treturn {\n\t\tpublic:true,\n\t\tpublicFunc:function(){\n\t\t\tprivate++;\n\t\t\treturn privateFunc();\n\t\t}\n\t}\n}();\n```","source":"_posts/javascript面向对象相关.md","raw":"title: javascript面向对象相关\ndate: 2015-11-21 15:03:01\ntags: javascript\ntoc: true\n---\n#### 判断属性属于实力对象还是原型\n```javascript\nfunction check(name,obj){\n\treturn !(obj.hasOwnProperty) && (name in obj)\n}\n```\n\n<!--more-->\n\n#### for in循环\n>for in循环能够返回对象所有可枚举属性，无论实例中的，还是原型中的。即便是实例中重写了原型中不可枚举的属性，也会访问到。但是在IE8及以下存在bug,这样的属性不会被返回\n\n####继承\n```javascript\nfunction object(o){\n\tfunction F(){};\n\tF.prototype = o;\n\treturn new F();\n}\nfunction inheritPrototype(subType,superType){\n\tvar prototype = object(superType.prototype);\n\tprototype.constructor = subType;\n\tsubType.prototype = prototype;\n}\nfunction SuperType(name){\n\tthis.name = name;\n\tthis.color = [\"red\",\"blue\"];\n}\nSuperType.prototype.sayName = function(){\n\talert(this.name);\n};\nfunction SubType(name,age){\n\tSuperType.call(this,name);\n\tthis.age = age;\n}\ninheritPrototype(SubType,SuperType);\nSubType.prototype.sayAge = function(){\n\talert(this.age);\n};\n```\n>只调用了一次SuperType的构造函数，并且避免了在SubType.prototype上面创建不必要的属性，同时原型链还能保持不变。\n\n#### 单例模式\n```javascript\nvar singleton = function(){\n\tvar private = 0;\n\tfunction privateFunc(){\n\t\treturn false;\n\t}\n\treturn {\n\t\tpublic:true,\n\t\tpublicFunc:function(){\n\t\t\tprivate++;\n\t\t\treturn privateFunc();\n\t\t}\n\t}\n}();\n```","slug":"javascript面向对象相关","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599hf002k4wyj3jk2qwek"},{"title":"javascript跳出循环","date":"2015-10-17T06:46:49.000Z","toc":true,"_content":"##### break\n>for， while， switch的case分支，使用 break 跳出当前循环；\n<!--more-->\n```javascript\nfor(var i = 0;i<10;i++){\n    for(var j = 0;j<10;j++){\n        if(j>5){\n            break;\n        }\n        console.log(i+''+j); \n    }\n}\n\nvar sum = 0;\nwhile(1){\n    sum++;\n    if(sum>10){\n        break;\n    }\n}\n\nswitch(1){\n    case 1:\n        console.log(1);\n        break;\n    default:\n        console.log('default');\n}\n```\n##### 跳出for多重循环\n```javascript\nloop_i:\nfor(i=0; i<10; i++){\n    loop_j:\n    for(j=0; j<10; j++){\n        if(j>5){break;}\n        if(i===5){break loop_j;}\n        if(i===8){break loop_i;}\n        console.log('loop:'+i+''+j);\n    }\n}\nconsole.log('end:'+i+''+j);\ncontinue\n```\n##### 结束当前循环，继续下一次循环\n```javascript\nfor(var i = 0;i<10;i++){\n    for(var j = 0;j<10;j++){\n        if(j === 5){\n            continue;\n        }\n        console.log(i+''+j); \n    }\n}\n```\n##### return\n>跳出数组forEach循环,跳出jquery each循环(return只能出现在函数里面)\n```javascript\nvar arr = [1,2,3,4,5,6];\narr.forEach(function(item,index){\n    if(index > 3){\n        return false;\n    }\n    console.log(item);\n});\n\nvar arr = [1,2,3,4,5,6];\n$.each(arr,function(k,v){\n    if(k > 3){\n        return false;\n    }\n    console.log(v);\n});\n```","source":"_posts/javascript跳出循环.md","raw":"title: javascript跳出循环\ndate: 2015-10-17 14:46:49\ntags: javascript\ntoc: true\n---\n##### break\n>for， while， switch的case分支，使用 break 跳出当前循环；\n<!--more-->\n```javascript\nfor(var i = 0;i<10;i++){\n    for(var j = 0;j<10;j++){\n        if(j>5){\n            break;\n        }\n        console.log(i+''+j); \n    }\n}\n\nvar sum = 0;\nwhile(1){\n    sum++;\n    if(sum>10){\n        break;\n    }\n}\n\nswitch(1){\n    case 1:\n        console.log(1);\n        break;\n    default:\n        console.log('default');\n}\n```\n##### 跳出for多重循环\n```javascript\nloop_i:\nfor(i=0; i<10; i++){\n    loop_j:\n    for(j=0; j<10; j++){\n        if(j>5){break;}\n        if(i===5){break loop_j;}\n        if(i===8){break loop_i;}\n        console.log('loop:'+i+''+j);\n    }\n}\nconsole.log('end:'+i+''+j);\ncontinue\n```\n##### 结束当前循环，继续下一次循环\n```javascript\nfor(var i = 0;i<10;i++){\n    for(var j = 0;j<10;j++){\n        if(j === 5){\n            continue;\n        }\n        console.log(i+''+j); \n    }\n}\n```\n##### return\n>跳出数组forEach循环,跳出jquery each循环(return只能出现在函数里面)\n```javascript\nvar arr = [1,2,3,4,5,6];\narr.forEach(function(item,index){\n    if(index > 3){\n        return false;\n    }\n    console.log(item);\n});\n\nvar arr = [1,2,3,4,5,6];\n$.each(arr,function(k,v){\n    if(k > 3){\n        return false;\n    }\n    console.log(v);\n});\n```","slug":"javascript跳出循环","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599hh002m4wyjpcm8dy7t"},{"title":"javascript脚本执行对页面加载的影响","date":"2015-10-24T07:03:01.000Z","toc":true,"_content":"#### javascript加载会对页面加载产生什么影响呢？\n##### 我们在代码中添加几种脚本\n>* header中行内 无defer async，async，defer这三种\n* header中外部 无defer async，async，defer这三种\n* body中同上面，并且body中增加动态添加脚本，动态添加分为两类，直接在脚本中append，另一种是ajax异步去apped.\n脚本中都执行了一段计算的代码，执行起来耗时几秒\n<!--more-->\n\n##### 执行结果分析\n>* safri:\n\tasync defer分析同上一篇wiki说明，以后不再说这个\n\theader中任何脚本执行都会阻塞DOMContentLoaded\n\tbody内只有async的外部脚本不会阻塞DOMContentLoaded\n\t所有脚本都会阻塞loaded\n* firefox:\n\t应该说所有脚本都阻塞了DOMContentLoaded，因为body dy script这个动态添加的脚本是在ready后添加执行的，ready之后添加的脚本会阻塞loaded执行\n* chrome:\n\t和safri表现相同\n* IE7:\n\t脚本执行阻塞了document ready,也阻塞了loaded\n* IE8:\n\t动态脚本不会阻塞document ready, loaded\n* IE9:\n\t脚本加载阻塞DOMContentLoaded，也阻塞了loaded\n\n##### 动态加载的外部脚本\n* 不是动态添加的脚本，都会阻塞页DOMContentLoaded，在document ready后添加，会阻塞loaded，在window.onload后添加，是不会阻塞页面加载的\n\n##### 分析\n* 我们打开浏览器 chrome或者firefox,发现对于js脚本http请求之间还会有一段间隔时间，那么这个时间是怎么回事呢，我们发现它是脚本的执行时间，浏览器是单线程执行的，那么它无疑会阻塞我们的页面加载\n* 虽然不同的浏览器都可以并行的下载多个脚本（chrome 2个 firefox 4个，增加静态资源服务器还可以翻倍，ie8以上版本，js可以和图片一样并行加载），但是脚本的执行必须都是单线程的，这是浏览器限制。而且有的时候并行下载数量增加，并不一定会给性能带来好处，反而会影响页面性能，阻塞页面加载，雅虎工程师给出的建议是，2个是最佳的。\n* 我们发现无论脚本在什么时间段去创建都会阻塞window.onload。\n* 那么我们把脚本分成两类，一类是页面UI操作相关的，需要先执行。另一类是逻辑相关的我们把它们放在window.onload后，再去动态的添加脚本，也就是动态的创建script标签，去添加到页面上（动态添加这个脚本的好处还有，脚本可以跨域），那么就不会阻塞页面加载了,还有一种方式，使用setTimeout去加载动态的脚本，也可以达到无阻塞效果。\n* 动态加载带来了一个问题，它打破了常规执行的顺序执行，那么有依赖的代码怎么办，可能就会报一些undefined的错误了，解决办法还是有的，可以监听脚本的onload，ie下的onreadystatechange事件，再去执行有依赖的代码，或者是添加一个轮询方法，检测到变量存在的时候再去执行有依赖的代码。\n* 对于这些问题，requireJS 或者 seaJS都做好了依赖处理，并且脚本也都是动态的添加的，即解决了脚本阻塞的问题也解决了代码依赖的问题。\n* 至于动态的脚本放在header还是body中，这都无所谓了，因为阻塞的过程已经过去了，添加到哪里都不会产生影响。\n\n##### 无阻塞脚本的解决方案\n1. XHR Eval\n通过XHR动态读取脚本，使用Eval让它生效，但是现在已经不推荐使用Eval了，这个我们就不多分析了\n2. XHR Injection\n```javascript\nvar xhrObj = new XMLHttpRequest();\nxhrObj.onreadystatechange = function(){\n    if(xhrObj.readyState == 4){\n        var scriptElem = document.createElement(\"script\");\n        document.getElementsByTagName(\"head\")[0].appendChild(scriptElem);\n        scriptElem.text = xhrObj.responseText;\n    }\n};\nxhrObj.open(\"GET\", \"deal.js\", true);\nxhrObj.send(\"\");\n```\n* Script in Iframe\n\tiframe中创建script标签，不建议使用iframe，并且脚本不能跨域，不推荐使用，了解一下就行\n* Script DOM Element\n```javascript\nvar scriptElem = document.createElement(\"script\");\nscriptElem.src = \"http://domain.com/deal.js\";\ndocument.getElementByTagName(\"head\")[0].appendChild(scriptElem);\n```\n* Script Defer\n\tdeler的兼容性并不好，而且defer只会延迟执行脚本，但是最终还是会在DOMContentLoaded之前执行的\n* document.write Script Tag\n```javascript\ndocument.write(\"<script type='text/javascript' src='deal.js'></script>\");\n```\n只有在IE下能实现并行下载,了解就行\n动态的创建script的dom节点是最好的解决方案\n\n##### 动态脚本加载时机\n>动态脚本，动态创建script到底在什么时候加是最好的呢？\n如果放在onload之后，我们知道在DOMContentLoaded之后到onload之间，会有图片，iframe等资源加载时间，它们阻塞了window.onload,那么js对页面的交互时间也被推迟了，这不是我们想要了\n所以我们把它放在DOMContentLoaded之后,DOMContentLoaded兼容解决方案，看前面的知识","source":"_posts/javascript脚本执行对页面加载的影响.md","raw":"title: javascript脚本执行对页面加载的影响\ndate: 2015-10-24 15:03:01\ntags: javascript\ntoc: true\n---\n#### javascript加载会对页面加载产生什么影响呢？\n##### 我们在代码中添加几种脚本\n>* header中行内 无defer async，async，defer这三种\n* header中外部 无defer async，async，defer这三种\n* body中同上面，并且body中增加动态添加脚本，动态添加分为两类，直接在脚本中append，另一种是ajax异步去apped.\n脚本中都执行了一段计算的代码，执行起来耗时几秒\n<!--more-->\n\n##### 执行结果分析\n>* safri:\n\tasync defer分析同上一篇wiki说明，以后不再说这个\n\theader中任何脚本执行都会阻塞DOMContentLoaded\n\tbody内只有async的外部脚本不会阻塞DOMContentLoaded\n\t所有脚本都会阻塞loaded\n* firefox:\n\t应该说所有脚本都阻塞了DOMContentLoaded，因为body dy script这个动态添加的脚本是在ready后添加执行的，ready之后添加的脚本会阻塞loaded执行\n* chrome:\n\t和safri表现相同\n* IE7:\n\t脚本执行阻塞了document ready,也阻塞了loaded\n* IE8:\n\t动态脚本不会阻塞document ready, loaded\n* IE9:\n\t脚本加载阻塞DOMContentLoaded，也阻塞了loaded\n\n##### 动态加载的外部脚本\n* 不是动态添加的脚本，都会阻塞页DOMContentLoaded，在document ready后添加，会阻塞loaded，在window.onload后添加，是不会阻塞页面加载的\n\n##### 分析\n* 我们打开浏览器 chrome或者firefox,发现对于js脚本http请求之间还会有一段间隔时间，那么这个时间是怎么回事呢，我们发现它是脚本的执行时间，浏览器是单线程执行的，那么它无疑会阻塞我们的页面加载\n* 虽然不同的浏览器都可以并行的下载多个脚本（chrome 2个 firefox 4个，增加静态资源服务器还可以翻倍，ie8以上版本，js可以和图片一样并行加载），但是脚本的执行必须都是单线程的，这是浏览器限制。而且有的时候并行下载数量增加，并不一定会给性能带来好处，反而会影响页面性能，阻塞页面加载，雅虎工程师给出的建议是，2个是最佳的。\n* 我们发现无论脚本在什么时间段去创建都会阻塞window.onload。\n* 那么我们把脚本分成两类，一类是页面UI操作相关的，需要先执行。另一类是逻辑相关的我们把它们放在window.onload后，再去动态的添加脚本，也就是动态的创建script标签，去添加到页面上（动态添加这个脚本的好处还有，脚本可以跨域），那么就不会阻塞页面加载了,还有一种方式，使用setTimeout去加载动态的脚本，也可以达到无阻塞效果。\n* 动态加载带来了一个问题，它打破了常规执行的顺序执行，那么有依赖的代码怎么办，可能就会报一些undefined的错误了，解决办法还是有的，可以监听脚本的onload，ie下的onreadystatechange事件，再去执行有依赖的代码，或者是添加一个轮询方法，检测到变量存在的时候再去执行有依赖的代码。\n* 对于这些问题，requireJS 或者 seaJS都做好了依赖处理，并且脚本也都是动态的添加的，即解决了脚本阻塞的问题也解决了代码依赖的问题。\n* 至于动态的脚本放在header还是body中，这都无所谓了，因为阻塞的过程已经过去了，添加到哪里都不会产生影响。\n\n##### 无阻塞脚本的解决方案\n1. XHR Eval\n通过XHR动态读取脚本，使用Eval让它生效，但是现在已经不推荐使用Eval了，这个我们就不多分析了\n2. XHR Injection\n```javascript\nvar xhrObj = new XMLHttpRequest();\nxhrObj.onreadystatechange = function(){\n    if(xhrObj.readyState == 4){\n        var scriptElem = document.createElement(\"script\");\n        document.getElementsByTagName(\"head\")[0].appendChild(scriptElem);\n        scriptElem.text = xhrObj.responseText;\n    }\n};\nxhrObj.open(\"GET\", \"deal.js\", true);\nxhrObj.send(\"\");\n```\n* Script in Iframe\n\tiframe中创建script标签，不建议使用iframe，并且脚本不能跨域，不推荐使用，了解一下就行\n* Script DOM Element\n```javascript\nvar scriptElem = document.createElement(\"script\");\nscriptElem.src = \"http://domain.com/deal.js\";\ndocument.getElementByTagName(\"head\")[0].appendChild(scriptElem);\n```\n* Script Defer\n\tdeler的兼容性并不好，而且defer只会延迟执行脚本，但是最终还是会在DOMContentLoaded之前执行的\n* document.write Script Tag\n```javascript\ndocument.write(\"<script type='text/javascript' src='deal.js'></script>\");\n```\n只有在IE下能实现并行下载,了解就行\n动态的创建script的dom节点是最好的解决方案\n\n##### 动态脚本加载时机\n>动态脚本，动态创建script到底在什么时候加是最好的呢？\n如果放在onload之后，我们知道在DOMContentLoaded之后到onload之间，会有图片，iframe等资源加载时间，它们阻塞了window.onload,那么js对页面的交互时间也被推迟了，这不是我们想要了\n所以我们把它放在DOMContentLoaded之后,DOMContentLoaded兼容解决方案，看前面的知识","slug":"javascript脚本执行对页面加载的影响","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599hj002o4wyjg4qp20hr"},{"title":"javascript数组的深度拷贝","date":"2015-10-27T07:03:01.000Z","toc":true,"_content":"##### 方法一 slice方法\n```javascript\nvar arr = [\"One\",\"Two\",\"Three\"];\nvar arrtoo = arr.slice(0);\n```\n<!--more-->\n\n##### 方法二 concat方法\n```javascript\nvar arr = [\"One\",\"Two\",\"Three\"];\nvar arrtooo = arr.concat();\n```\n##### 方法三\n通过函数遍历赋值","source":"_posts/javascript数组的深度拷贝.md","raw":"title: javascript数组的深度拷贝\ndate: 2015-10-27 15:03:01\ntags: javascript\ntoc: true\n---\n##### 方法一 slice方法\n```javascript\nvar arr = [\"One\",\"Two\",\"Three\"];\nvar arrtoo = arr.slice(0);\n```\n<!--more-->\n\n##### 方法二 concat方法\n```javascript\nvar arr = [\"One\",\"Two\",\"Three\"];\nvar arrtooo = arr.concat();\n```\n##### 方法三\n通过函数遍历赋值","slug":"javascript数组的深度拷贝","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599hk002q4wyjtmdscsn9"},{"title":"javascript数组排序","date":"2015-10-30T07:03:01.000Z","toc":true,"_content":"##### 自己写逻辑代码进行处理\n>* 遍历数组，做必要的类型转换\n* 选择一种排序方式，快排，冒泡，选择等等完成排序\n<!--more-->\n\n##### 使用sort方法\n* sort方法默认生序排序，不会做数据类型转换，按照ascii字母顺序排序\n* sort方法会改变数组本身，不会生成新数组\n* 自定义规则排序，给sort传处理函数\n```javascript\nvar arr = ['2','7','6','11','18','8','9'];\narr.sort(function(x,y){\n\tfx = parseInt(x,10);\n\tfy = parseInt(y,10);\n\treturn fx>fy?1:-1;\n});\n//[\"2\", \"6\", \"7\", \"8\", \"9\", \"11\", \"18\"]\n```\n* 比较对象，可以写一个函数对对象进行比较\n```javascript\nvar compare = function(key){\n    return function(x, y){\n        var fx, fy;\n        if (typeof x === \"object\" && typeof y === \"object\" && x && y) {\n            fx = x[key];\n            fy = y[key];\n            if (fx === fy) {\n                return 0;\n            }\n            if (typeof fx === typeof fy) {\n                return fx > fy ? 1 : -1;\n            }\n            return typeof fx > typeof fy ? 1 : -1;\n        }\n        else {\n            throw (\"error..\");\n        }\n    }\n}\n```\n* 扩展，如果第一个指定的建相同，按照第二个进行排序\n```javascript\nvar compare = function(key,handler){\n    return function(x, y){\n        var fx, fy;\n        if (typeof x === \"object\" && typeof y === \"object\" && x && y) {\n            fx = x[key];\n            fy = y[key];\n            if (fx === fy) {\n                return typeof handler === 'function' ? handler(x,y):0;\n            }\n            if (typeof fx === typeof fy) {\n                return fx > fy ? 1 : -1;\n            }\n            return typeof fx > typeof fy ? 1 : -1;\n        }\n        else {\n            throw (\"error..\");\n        }\n    }\n}\n```","source":"_posts/javascript数组排序.md","raw":"title: javascript数组排序\ndate: 2015-10-30 15:03:01\ntags: javascript\ntoc: true\n---\n##### 自己写逻辑代码进行处理\n>* 遍历数组，做必要的类型转换\n* 选择一种排序方式，快排，冒泡，选择等等完成排序\n<!--more-->\n\n##### 使用sort方法\n* sort方法默认生序排序，不会做数据类型转换，按照ascii字母顺序排序\n* sort方法会改变数组本身，不会生成新数组\n* 自定义规则排序，给sort传处理函数\n```javascript\nvar arr = ['2','7','6','11','18','8','9'];\narr.sort(function(x,y){\n\tfx = parseInt(x,10);\n\tfy = parseInt(y,10);\n\treturn fx>fy?1:-1;\n});\n//[\"2\", \"6\", \"7\", \"8\", \"9\", \"11\", \"18\"]\n```\n* 比较对象，可以写一个函数对对象进行比较\n```javascript\nvar compare = function(key){\n    return function(x, y){\n        var fx, fy;\n        if (typeof x === \"object\" && typeof y === \"object\" && x && y) {\n            fx = x[key];\n            fy = y[key];\n            if (fx === fy) {\n                return 0;\n            }\n            if (typeof fx === typeof fy) {\n                return fx > fy ? 1 : -1;\n            }\n            return typeof fx > typeof fy ? 1 : -1;\n        }\n        else {\n            throw (\"error..\");\n        }\n    }\n}\n```\n* 扩展，如果第一个指定的建相同，按照第二个进行排序\n```javascript\nvar compare = function(key,handler){\n    return function(x, y){\n        var fx, fy;\n        if (typeof x === \"object\" && typeof y === \"object\" && x && y) {\n            fx = x[key];\n            fy = y[key];\n            if (fx === fy) {\n                return typeof handler === 'function' ? handler(x,y):0;\n            }\n            if (typeof fx === typeof fy) {\n                return fx > fy ? 1 : -1;\n            }\n            return typeof fx > typeof fy ? 1 : -1;\n        }\n        else {\n            throw (\"error..\");\n        }\n    }\n}\n```","slug":"javascript数组排序","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599hl002s4wyjounron0i"},{"title":"javascript数组","date":"2015-10-03T11:16:37.000Z","toc":true,"_content":"#### 数组操作的方法\n* shift：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.shift(); //a：[2,3,4,5] b：1\n```\n<!--more-->\n* unshift：将参数添加到原数组开头，并返回数组的长度\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.unshift(-2,-1); //a：[-2,-1,1,2,3,4,5] b：7 \n//注：在IE6.0下测试返回值总为undefined，FF2.0下测试返回值为7，所以这个方法的返回值不可靠，需要用返回值时可用splice代替本方法来使用。\n```\n* pop：删除原数组最后一项，并返回删除元素的值；如果数组为空则返回undefined\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.pop(); //a：[1,2,3,4] b：5\n```\n* push：将参数添加到原数组末尾，并返回数组的长度\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.push(6,7); //a：[1,2,3,4,5,6,7] b：7\n```\n* concat：返回一个新数组，是将参数添加到原数组中构成的\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.concat(6,7); //a：[1,2,3,4,5] b：[1,2,3,4,5,6,7]\n```\n* splice(start,deleteCount,val1,val2,…)：从start位置开始删除deleteCount项，并从该位置起插入val1,val2,…\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.splice(2,2,7,8,9); //a：[1,2,7,8,9,5] b：[3,4] \nvar b = a.splice(0,1); //同shift \na.splice(0,0,-2,-1); var b = a.length; //同unshift \nvar b = a.splice(a.length-1,1); //同pop \na.splice(a.length,0,6,7); var b = a.length; //同push\n```\n* reverse：将数组反序\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.reverse(); //a：[5,4,3,2,1] b：[5,4,3,2,1]\n```\n* sort(orderfunction)：按指定的参数对数组进行排序\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.sort(); //a：[1,2,3,4,5] b：[1,2,3,4,5]\n```\n* slice(start,end)：返回从原数组中指定开始下标到结束下标之间的项组成的新数组\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.slice(2,5); //a：[1,2,3,4,5] b：[3,4,5]\n```\n* join(separator)：将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.join(\"|\"); //a：[1,2,3,4,5] b：\"1|2|3|4|5\"\n```\n* toSource()\n返回该对象的源代码;\n* toString()\n把数组转换为字符串，并返回结果;\n* toLocaleString()\n把数组转换为本地数组，并返回结果;\n* valueOf()\n返回数组对象的原始值;","source":"_posts/javascript数组.md","raw":"title: javascript数组\ndate: 2015-10-03 19:16:37\ntags: javascript\ntoc: true\n---\n#### 数组操作的方法\n* shift：删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.shift(); //a：[2,3,4,5] b：1\n```\n<!--more-->\n* unshift：将参数添加到原数组开头，并返回数组的长度\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.unshift(-2,-1); //a：[-2,-1,1,2,3,4,5] b：7 \n//注：在IE6.0下测试返回值总为undefined，FF2.0下测试返回值为7，所以这个方法的返回值不可靠，需要用返回值时可用splice代替本方法来使用。\n```\n* pop：删除原数组最后一项，并返回删除元素的值；如果数组为空则返回undefined\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.pop(); //a：[1,2,3,4] b：5\n```\n* push：将参数添加到原数组末尾，并返回数组的长度\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.push(6,7); //a：[1,2,3,4,5,6,7] b：7\n```\n* concat：返回一个新数组，是将参数添加到原数组中构成的\n```javascript\nvar a = [1,2,3,4,5]; \nvar b = a.concat(6,7); //a：[1,2,3,4,5] b：[1,2,3,4,5,6,7]\n```\n* splice(start,deleteCount,val1,val2,…)：从start位置开始删除deleteCount项，并从该位置起插入val1,val2,…\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.splice(2,2,7,8,9); //a：[1,2,7,8,9,5] b：[3,4] \nvar b = a.splice(0,1); //同shift \na.splice(0,0,-2,-1); var b = a.length; //同unshift \nvar b = a.splice(a.length-1,1); //同pop \na.splice(a.length,0,6,7); var b = a.length; //同push\n```\n* reverse：将数组反序\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.reverse(); //a：[5,4,3,2,1] b：[5,4,3,2,1]\n```\n* sort(orderfunction)：按指定的参数对数组进行排序\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.sort(); //a：[1,2,3,4,5] b：[1,2,3,4,5]\n```\n* slice(start,end)：返回从原数组中指定开始下标到结束下标之间的项组成的新数组\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.slice(2,5); //a：[1,2,3,4,5] b：[3,4,5]\n```\n* join(separator)：将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符\n```javascript\nvar a = [1,2,3,4,5];\nvar b = a.join(\"|\"); //a：[1,2,3,4,5] b：\"1|2|3|4|5\"\n```\n* toSource()\n返回该对象的源代码;\n* toString()\n把数组转换为字符串，并返回结果;\n* toLocaleString()\n把数组转换为本地数组，并返回结果;\n* valueOf()\n返回数组对象的原始值;","slug":"javascript数组","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599ho002u4wyjsa8oroh8"},{"title":"javascript对象的深度拷贝","date":"2015-10-26T07:03:01.000Z","toc":true,"_content":"* 浅度复制：对于含有引用类型字段的对象来说，进行浅度复制意味着复制的对象和源对象存在这相同的引用。如果源对象的引用变量的值发生改变，那么被复制的对象的成员值也会发生变化。\n* 深度复制：复制的对象和源对象是独立的。\n<!--more-->\n* javascript中没有拷贝对象的方法，而js中传递引用数据基本都是传址方式。这就会遇到很多麻烦。比如：\n```javascript\nvar o = {\n    name: \"张三\",\n    age: 15\n}\nvar a = o;\na.age = 35;\nconsole.log(o.age); // 35\nconsole.log(a == o); // true\n```\n源数据被修改了，可实际需求不是这样的。\n\n#### JS中深度拷贝对象的方法\n##### 方法1\n```javascript\nfunction clone(src) {\n    function mixin(dest, source, copyFunc) {\n        var name, s, i, empty = {};\n        for(name in source){\n            s = source[name];\n            if(!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))){\n                dest[name] = copyFunc ? copyFunc(s) : s;\n            }\n        }\n        return dest;\n    }\n    if(!src || typeof src != \"object\" || Object.prototype.toString.call(src) === \"[object Function]\"){\n        return src;\n    }\n    if(src.nodeType && \"cloneNode\" in src){\n        return src.cloneNode(true);\n    }\n    if(src instanceof Date){\n        return new Date(src.getTime());\n    }\n    if(src instanceof RegExp){\n        return new RegExp(src);\n    }\n\n    var r, i, l;\n    if(src instanceof Array){\n        r = [];\n        for(i = 0, l = src.length; i < l; ++i){\n            if(i in src){\n                r.push(clone(src[i]));\n            }\n        }\n    } else {\n        r = src.constructor ? new src.constructor() : {};\n    }\n    return mixin(r, src, clone);\n}\n\nvar o = {\n    name: \"张三\",\n    age: 15\n}\nvar a = clone(o);\nconsole.log(a == o); // false，此时a是对象o的一个副本\n```\n##### 方法2\n```javascript\nvar a={name:'yy',age:26};\nvar b=new Object();\nb.name=a.name;\nb.age=a.age;\n```\n##### 方法3\n```javascript\nvar deepCopy= function(source) { \nvar result={};\nfor (var key in source) {\n      result[key] = typeof source[key]===’object’? deepCoyp(source[key]): source[key];\n   } \n   return result; \n}\n```\n##### 方法4\n使用jquery的extend\n","source":"_posts/javascript对象的深度拷贝.md","raw":"title: javascript对象的深度拷贝\ndate: 2015-10-26 15:03:01\ntags: javascript\ntoc: true\n---\n* 浅度复制：对于含有引用类型字段的对象来说，进行浅度复制意味着复制的对象和源对象存在这相同的引用。如果源对象的引用变量的值发生改变，那么被复制的对象的成员值也会发生变化。\n* 深度复制：复制的对象和源对象是独立的。\n<!--more-->\n* javascript中没有拷贝对象的方法，而js中传递引用数据基本都是传址方式。这就会遇到很多麻烦。比如：\n```javascript\nvar o = {\n    name: \"张三\",\n    age: 15\n}\nvar a = o;\na.age = 35;\nconsole.log(o.age); // 35\nconsole.log(a == o); // true\n```\n源数据被修改了，可实际需求不是这样的。\n\n#### JS中深度拷贝对象的方法\n##### 方法1\n```javascript\nfunction clone(src) {\n    function mixin(dest, source, copyFunc) {\n        var name, s, i, empty = {};\n        for(name in source){\n            s = source[name];\n            if(!(name in dest) || (dest[name] !== s && (!(name in empty) || empty[name] !== s))){\n                dest[name] = copyFunc ? copyFunc(s) : s;\n            }\n        }\n        return dest;\n    }\n    if(!src || typeof src != \"object\" || Object.prototype.toString.call(src) === \"[object Function]\"){\n        return src;\n    }\n    if(src.nodeType && \"cloneNode\" in src){\n        return src.cloneNode(true);\n    }\n    if(src instanceof Date){\n        return new Date(src.getTime());\n    }\n    if(src instanceof RegExp){\n        return new RegExp(src);\n    }\n\n    var r, i, l;\n    if(src instanceof Array){\n        r = [];\n        for(i = 0, l = src.length; i < l; ++i){\n            if(i in src){\n                r.push(clone(src[i]));\n            }\n        }\n    } else {\n        r = src.constructor ? new src.constructor() : {};\n    }\n    return mixin(r, src, clone);\n}\n\nvar o = {\n    name: \"张三\",\n    age: 15\n}\nvar a = clone(o);\nconsole.log(a == o); // false，此时a是对象o的一个副本\n```\n##### 方法2\n```javascript\nvar a={name:'yy',age:26};\nvar b=new Object();\nb.name=a.name;\nb.age=a.age;\n```\n##### 方法3\n```javascript\nvar deepCopy= function(source) { \nvar result={};\nfor (var key in source) {\n      result[key] = typeof source[key]===’object’? deepCoyp(source[key]): source[key];\n   } \n   return result; \n}\n```\n##### 方法4\n使用jquery的extend\n","slug":"javascript对象的深度拷贝","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599hq002w4wyjpxcow8uw"},{"title":"javascript对象之navigator","date":"2015-10-18T06:49:20.000Z","toc":true,"_content":"##### 概述\n>navigator对象保存的是浏览器的信息，兼容所有浏览器，只读\n支持的属性\n<!--more-->\n* appCodeName 浏览器代码名\n* appName 浏览器名称\n* appVersion 浏览器平台版本信息\n* browserLanguage 浏览器使用的语言 仅支持IE\n* cookieEnabled 浏览器是否开启cookie支持\n* cpuClass 浏览器所在系统的CPU登记 仅支持IE\n* onLine 是否处于脱机模式 仅支持IE\n* platform 浏览器所在的操作系统平台\n* systemLanguage 浏览器所在操作系统使用的语言 仅支持IE\n* userAgent 浏览器用于HTTP请求的用户代理头的值\n* userLanguage 浏览器所在操作系统的自然语言设置 仅支持IE\n\n我们经常使用的就是userAgent\n1.通过这个可以做touch上对app的唤醒，因为不同平台app唤醒方式有差别，可以使用userAgent做区分处理\n2.pc端可以通过userAgent判断浏览器版本，做兼容处理方案\n3.userAgent可以识别设备","source":"_posts/javascript对象之navigator.md","raw":"title: javascript对象之navigator\ndate: 2015-10-18 14:49:20\ntags: javascript\ntoc: true\n---\n##### 概述\n>navigator对象保存的是浏览器的信息，兼容所有浏览器，只读\n支持的属性\n<!--more-->\n* appCodeName 浏览器代码名\n* appName 浏览器名称\n* appVersion 浏览器平台版本信息\n* browserLanguage 浏览器使用的语言 仅支持IE\n* cookieEnabled 浏览器是否开启cookie支持\n* cpuClass 浏览器所在系统的CPU登记 仅支持IE\n* onLine 是否处于脱机模式 仅支持IE\n* platform 浏览器所在的操作系统平台\n* systemLanguage 浏览器所在操作系统使用的语言 仅支持IE\n* userAgent 浏览器用于HTTP请求的用户代理头的值\n* userLanguage 浏览器所在操作系统的自然语言设置 仅支持IE\n\n我们经常使用的就是userAgent\n1.通过这个可以做touch上对app的唤醒，因为不同平台app唤醒方式有差别，可以使用userAgent做区分处理\n2.pc端可以通过userAgent判断浏览器版本，做兼容处理方案\n3.userAgent可以识别设备","slug":"javascript对象之navigator","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599hr002y4wyjb5hsm68i"},{"title":"javascript实现继承","date":"2015-11-03T07:03:01.000Z","toc":true,"_content":"#### 继承\n\n* 很多语言中都有继承，javascript和其他java等语言不同，他不是一门面向对象的语言，但是他的所有的东西却又都是对象，下面就实现一个继承\n<!--more-->\n```javascript\n//实现一个继承\nfunction Parent(name, age) {\n\tvar pid = '1';\n\tthis.name = name || 'amos';\n\tthis.age = age || 25;\n\tthis.showInfo = function() {\n\t\tconsole.log('my name is ' + this.name + ' ,i am ' + this.age);\n\t};\n}\nParent.prototype = {\n\tshowName: function() {\n\t\tconsole.log('name:' + this.name);\n\t},\n\tshowAge: function() {\n\t\tconsole.log('age:' + this.age);\n\t}\n}\n\nfunction Child(name, age, grade) {\n\tvar cid = '1';\n\tParent.call(this, name, age);\n\tthis.grade = grade || 100;\n\tthis.showGrade = function() {\n\t\tconsole.log('grade:' + this.grade);\n\t};\n\tthis.showPrivate = function() {\n\t\tif (typeof pid === 'undefined') {\n\t\t\tpid = 'undefined';\n\t\t}\n\t\tconsole.log('private:' + cid + ' ' + pid);\n\t}\n}\nChild.prototype = new Parent();\nChild.prototype.info = function() {\n\tconsole.log('info:' + this.name + ' ' + this.age + ' ' + this.grade);\n};\n\nfunction Other(name, age, grade) {\n\tChild.call(this, name, age, grade);\n\tthis.showOther = function() {\n\t\tconsole.log('other');\n\t}\n}\nOther.prototype = new Child();\n\nvar other = new Other('zhuo', 25, 100);\nother.showOther();\nother.showInfo();\nother.showName();\nother.showAge();\nother.showGrade();\nother.info();\nother.showPrivate();\n/*\n1.不使用call 无法传参数\n2.不使用扩展原型链的方式，无法继承原型链上面的方法\n3.无法继承私有属性 pid\n4.不能一次实现多继承\n*/\n```","source":"_posts/javascript实现继承.md","raw":"title: javascript实现继承\ndate: 2015-11-03 15:03:01\ntags: javascript\ntoc: true\n---\n#### 继承\n\n* 很多语言中都有继承，javascript和其他java等语言不同，他不是一门面向对象的语言，但是他的所有的东西却又都是对象，下面就实现一个继承\n<!--more-->\n```javascript\n//实现一个继承\nfunction Parent(name, age) {\n\tvar pid = '1';\n\tthis.name = name || 'amos';\n\tthis.age = age || 25;\n\tthis.showInfo = function() {\n\t\tconsole.log('my name is ' + this.name + ' ,i am ' + this.age);\n\t};\n}\nParent.prototype = {\n\tshowName: function() {\n\t\tconsole.log('name:' + this.name);\n\t},\n\tshowAge: function() {\n\t\tconsole.log('age:' + this.age);\n\t}\n}\n\nfunction Child(name, age, grade) {\n\tvar cid = '1';\n\tParent.call(this, name, age);\n\tthis.grade = grade || 100;\n\tthis.showGrade = function() {\n\t\tconsole.log('grade:' + this.grade);\n\t};\n\tthis.showPrivate = function() {\n\t\tif (typeof pid === 'undefined') {\n\t\t\tpid = 'undefined';\n\t\t}\n\t\tconsole.log('private:' + cid + ' ' + pid);\n\t}\n}\nChild.prototype = new Parent();\nChild.prototype.info = function() {\n\tconsole.log('info:' + this.name + ' ' + this.age + ' ' + this.grade);\n};\n\nfunction Other(name, age, grade) {\n\tChild.call(this, name, age, grade);\n\tthis.showOther = function() {\n\t\tconsole.log('other');\n\t}\n}\nOther.prototype = new Child();\n\nvar other = new Other('zhuo', 25, 100);\nother.showOther();\nother.showInfo();\nother.showName();\nother.showAge();\nother.showGrade();\nother.info();\nother.showPrivate();\n/*\n1.不使用call 无法传参数\n2.不使用扩展原型链的方式，无法继承原型链上面的方法\n3.无法继承私有属性 pid\n4.不能一次实现多继承\n*/\n```","slug":"javascript实现继承","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599hu00304wyj23vbg21g"},{"title":"javascript实现浏览器本地存储","date":"2015-10-02T11:08:17.000Z","toc":true,"_content":"#### 高级浏览器\n##### localStorage\n>一旦存储，除非手动删除，否则永远存储在浏览器本地。\n\n* 优点：容量大，最大可支持5M\n* 缺点：IE8以下的版本不支持，安全性也差，不适合保存敏感数据。\n* 隐私模式下localStorage，只能读取，不能写入，使用前需要检测是否支持，检测代码：\n<!--more-->\n```javascript\nfunction isSupport(){\n    var storage = window.localStorage;\n    if(!storage){\n        return false;\n    }\n    var key = 'jason';\n    try{\n        storage.setItem(key, 'jason');\n        storage.removeItem(key);\n        return false;\n    }catch (error){\n        return true;\n    }\n}\n```\n* localStorage对象可以将数据永久保存在客户端。\n\t* 存储：localStorage.setItem(key,value)\n\t\t* 如果key存在时，更新value\n\t* 获取：localStorage.getItem(key)\n\t\t* 如果key不存在返回null\n\t* 删除：localStorage.removeItem(key)\n\t\t* 一旦删除，key对应的数据将会全部删除\n\t* 全部清除：localStorage.clear()\n\t* 某些时候使用removeItem逐个删除太麻烦，可以使用clear,执行的后果是会清除所有localStorage对象保存的数据\n\t* 遍历localStorage存储的key\n\t\t* `.length` 数据总量，例：localStorage.length\n\t\t* `.key(index)` 获取key，例：var key=localStorage.key(index);\n* 存储JSON格式数据\n\t* `JSON.stringify(data)` 将一个对象转换成JSON格式的数据串,返回转换后的串\n\t* `JSON.parse(data)` 将数据解析成对象，返回解析后的对象\n\n##### IE低版本浏览器（IE8以下的版本）\n* ActiveXObject\n>ActiveXObject 对象为 Microsoft 扩展，仅在 Internet Explorer 中受支持。\nActiveXObject(“htmlfile”)创建的文档是一个完美的HTML文档，它拥有document.title,document.body等HTML DOM专有的属性，还能运行javascript。全局变量this就是我们要找的全局对象，它还拥有我们想要的一切，Array，Boolean，String，Date，Object等等。\n\n* userData\n>UserData是微软为IE专门在系统中开辟的一块存储空间\n正常情况下，这个文件夹在个人文件夹下 `Application Data\\Microsoft\\Internet Explorer\\UserData`\n线上使用时，单个文件的大小限制是128KB，一个域名下总共可以保存1024KB的文件，文件个数应该没有限制。在受限站点里这两个值分别是64KB和640KB，所以如果考虑到各种情况的话，单个文件最好能控制64KB以下,xml格式的文件\n\n* 低版本就是使用UserData进行存储，数据存储在硬盘上\n```javascript\n//javascript\no = document.createElement('input');\no.type = \"hidden\";\no.addBehavior (\"#default#userData\");\n//UserData.o.style.behavior = \"url('#default#userData')\" ;\n//上面的语句也是一样的作用\ndocument.body.appendChild(o);\n<!--html-->\n//说白了UserData就是样式里的一个Behavior，所以这样写也是一样的：\n<input type=hidden class= storeuserData />\n<style>\n.storeuserData {behavior:url(#default#userData);}\n</style>\n```\n* UserData对象有以下的属性和方法：\n\n| 属性 |\t 描述 |\n| :-------- | :--:|\n| expires |\t设置或读取文件过期时间 |\n| XMLDocument |\t读取文件的XML DOM |\n\n| 方法 |\t 描述 |\n| :-------- | :--:|\n| getAttribute\t| 读取指定属性的值 |\n| load\t| 打开文件 |\n| removeAttribute | 删除指定的属性 |\n| save\t| 保存文件 |\n| setAttribute\t| 为指定属性赋值 |\n\n* UserData文件实际上就是一个XML文件，通过文件名->属性的方式保存字符串，如以下一段代码：\n```javascript\no.setAttribute(\"code\", \"hello world!\");\no.save(\"baidu\");\n```\n* 执行后，UserData文件夹中会生成一个baidu[1].xml文件，其中的内容是：\n\t* `<ROOTSTUB code=\"hello,world!\"/>`\n* 在一个文件中可以有多个属性，也就是可以存储多种不同的数据。\n\n##### 兼容所有浏览器\n>store.js就是使用上述两种方式进行兼容使用，从而达到兼容所有浏览器的本地存储\n","source":"_posts/javascript实现浏览器本地存储.md","raw":"title: javascript实现浏览器本地存储\ndate: 2015-10-02 19:08:17\ntags: javascript\ntoc: true\n---\n#### 高级浏览器\n##### localStorage\n>一旦存储，除非手动删除，否则永远存储在浏览器本地。\n\n* 优点：容量大，最大可支持5M\n* 缺点：IE8以下的版本不支持，安全性也差，不适合保存敏感数据。\n* 隐私模式下localStorage，只能读取，不能写入，使用前需要检测是否支持，检测代码：\n<!--more-->\n```javascript\nfunction isSupport(){\n    var storage = window.localStorage;\n    if(!storage){\n        return false;\n    }\n    var key = 'jason';\n    try{\n        storage.setItem(key, 'jason');\n        storage.removeItem(key);\n        return false;\n    }catch (error){\n        return true;\n    }\n}\n```\n* localStorage对象可以将数据永久保存在客户端。\n\t* 存储：localStorage.setItem(key,value)\n\t\t* 如果key存在时，更新value\n\t* 获取：localStorage.getItem(key)\n\t\t* 如果key不存在返回null\n\t* 删除：localStorage.removeItem(key)\n\t\t* 一旦删除，key对应的数据将会全部删除\n\t* 全部清除：localStorage.clear()\n\t* 某些时候使用removeItem逐个删除太麻烦，可以使用clear,执行的后果是会清除所有localStorage对象保存的数据\n\t* 遍历localStorage存储的key\n\t\t* `.length` 数据总量，例：localStorage.length\n\t\t* `.key(index)` 获取key，例：var key=localStorage.key(index);\n* 存储JSON格式数据\n\t* `JSON.stringify(data)` 将一个对象转换成JSON格式的数据串,返回转换后的串\n\t* `JSON.parse(data)` 将数据解析成对象，返回解析后的对象\n\n##### IE低版本浏览器（IE8以下的版本）\n* ActiveXObject\n>ActiveXObject 对象为 Microsoft 扩展，仅在 Internet Explorer 中受支持。\nActiveXObject(“htmlfile”)创建的文档是一个完美的HTML文档，它拥有document.title,document.body等HTML DOM专有的属性，还能运行javascript。全局变量this就是我们要找的全局对象，它还拥有我们想要的一切，Array，Boolean，String，Date，Object等等。\n\n* userData\n>UserData是微软为IE专门在系统中开辟的一块存储空间\n正常情况下，这个文件夹在个人文件夹下 `Application Data\\Microsoft\\Internet Explorer\\UserData`\n线上使用时，单个文件的大小限制是128KB，一个域名下总共可以保存1024KB的文件，文件个数应该没有限制。在受限站点里这两个值分别是64KB和640KB，所以如果考虑到各种情况的话，单个文件最好能控制64KB以下,xml格式的文件\n\n* 低版本就是使用UserData进行存储，数据存储在硬盘上\n```javascript\n//javascript\no = document.createElement('input');\no.type = \"hidden\";\no.addBehavior (\"#default#userData\");\n//UserData.o.style.behavior = \"url('#default#userData')\" ;\n//上面的语句也是一样的作用\ndocument.body.appendChild(o);\n<!--html-->\n//说白了UserData就是样式里的一个Behavior，所以这样写也是一样的：\n<input type=hidden class= storeuserData />\n<style>\n.storeuserData {behavior:url(#default#userData);}\n</style>\n```\n* UserData对象有以下的属性和方法：\n\n| 属性 |\t 描述 |\n| :-------- | :--:|\n| expires |\t设置或读取文件过期时间 |\n| XMLDocument |\t读取文件的XML DOM |\n\n| 方法 |\t 描述 |\n| :-------- | :--:|\n| getAttribute\t| 读取指定属性的值 |\n| load\t| 打开文件 |\n| removeAttribute | 删除指定的属性 |\n| save\t| 保存文件 |\n| setAttribute\t| 为指定属性赋值 |\n\n* UserData文件实际上就是一个XML文件，通过文件名->属性的方式保存字符串，如以下一段代码：\n```javascript\no.setAttribute(\"code\", \"hello world!\");\no.save(\"baidu\");\n```\n* 执行后，UserData文件夹中会生成一个baidu[1].xml文件，其中的内容是：\n\t* `<ROOTSTUB code=\"hello,world!\"/>`\n* 在一个文件中可以有多个属性，也就是可以存储多种不同的数据。\n\n##### 兼容所有浏览器\n>store.js就是使用上述两种方式进行兼容使用，从而达到兼容所有浏览器的本地存储\n","slug":"javascript实现浏览器本地存储","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599hv00324wyj4l257j2l"},{"title":"javascript变量提升与函数声明","date":"2015-11-04T07:03:01.000Z","toc":true,"_content":"#### 变量提升\n* 我们在声明变量的时候，这个变量声明会在当前作用域内提升到最前面去声明\n\n#### 函数声明\n* 函数声明有两种方式，一种就是使用function，另一种就是匿名函数赋值给一个变量\n<!--more-->\n\n##### 基于以上两点，有个问题就出来了，函数声明和函数调用顺序，会有什么影响么,看个例子\n```javascript\n//函数声明\nvar test3 = function() {\n\tconsole.log('test3');\n};\ntest3();\ntest1();\ntest2();\n\nfunction test1() {\n\tconsole.log('test1');\n}\nvar test2 = function() {\n\tconsole.log('test2');\n};\n/*\nfunction声明函数和var声明函数，没有本质上的区别，调用方法都一样，但是存在一个声明和调用顺序的问题\n1.我们知道变量声明过程，var a = 123;分解 var a;被提到最前面，到了赋值体的时候才会 a = 123; a才有值\nfunction test(){console.log('test')} 这个函数声明会被提到前面去声明，所以我们发现，function声明的，在作用域允许范围内都是可用的\n而var 声明的函数，只有在声明的后面才能调用\n*/\n```","source":"_posts/javascript变量提升与函数声明.md","raw":"title: javascript变量提升与函数声明\ndate: 2015-11-04 15:03:01\ntags: javascript\ntoc: true\n---\n#### 变量提升\n* 我们在声明变量的时候，这个变量声明会在当前作用域内提升到最前面去声明\n\n#### 函数声明\n* 函数声明有两种方式，一种就是使用function，另一种就是匿名函数赋值给一个变量\n<!--more-->\n\n##### 基于以上两点，有个问题就出来了，函数声明和函数调用顺序，会有什么影响么,看个例子\n```javascript\n//函数声明\nvar test3 = function() {\n\tconsole.log('test3');\n};\ntest3();\ntest1();\ntest2();\n\nfunction test1() {\n\tconsole.log('test1');\n}\nvar test2 = function() {\n\tconsole.log('test2');\n};\n/*\nfunction声明函数和var声明函数，没有本质上的区别，调用方法都一样，但是存在一个声明和调用顺序的问题\n1.我们知道变量声明过程，var a = 123;分解 var a;被提到最前面，到了赋值体的时候才会 a = 123; a才有值\nfunction test(){console.log('test')} 这个函数声明会被提到前面去声明，所以我们发现，function声明的，在作用域允许范围内都是可用的\n而var 声明的函数，只有在声明的后面才能调用\n*/\n```","slug":"javascript变量提升与函数声明","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599hx00344wyjc92q8ji7"},{"title":"javascript中变量作用域","date":"2015-10-21T07:03:01.000Z","toc":true,"_content":"##### 变量做用域\n<!--more-->\n```javascript\n// *******\n//--理解变量做用域\nvar x = 1;\n\nfunction foo() {\n    console.log(1);\n}\nfoo();\nconsole.log(x);\n//结果\n//1\n//1\n//正常输出全局变量x\n//--\n\nvar x = 1;\n\nfunction foo() {\n    var x = 2;\n    console.log(x);\n}\nfoo();\nconsole.log(x);\n//2\n//1\n//foo中输出的是局部变量的值\n//外面输出的是全局变量的x\n//--\n\nx = 1;\n\nfunction foo() {\n    x = 2;\n    console.log(x);\n    y = 3;\n    console.log(y);\n}\nfoo();\nconsole.log(x);\nconsole.log(y);\n//2\n//3\n//2\n//3\n//foo内重新赋值了全局变量x,并且定义全局变量y\n//--\n\nvar x = 1;\n\nfunction foo() {\n    console.log(x);\n    var x = 2;\n}\nfoo();\nconsole.log(x);\n//结果\n//undefined\n//1\n//变量声明 函数声明，都有一个提升的过程\n// var x = 1分解\n// var x; 会提升到作用域最顶部\n// x = 1;\n//上面的定义相当于\nvar x = 1;\n\nfunction foo() {\n    var x;\n    console.log(x);\n    x = 2;\n}\nfoo();\nconsole.log(x);\n```\n##### 没有块级做用域\n```javascript\n//--没有块级做用域, if for等块无法划分作用域\nfunction foo(num) {\n    var x = 0;\n    if (num > 5) {\n        var j = 10;\n        for (var i = 0; i < num; i++) {\n            j += i;\n        }\n        console.log(x);\n    }\n    console.log(j);\n}\nfoo(10);\n```\n##### 作用域链\n```javascript\n// *******\n// 作用域链\n// 1.当javascaript执行的时候，都会创建一个对应的执行环境，执行环境中存在着函数的调用对象，\n// 2.函数执行环境包括了调用对象，调用对象的属性就是函数的局部变量，每个函数就在这样的执行环境执行，函数外部的代码就在全局变量的执行环境\n// 3.javascript执行环境中，存在着作用域链，是由对象组成的列表或者链\n// 4.在解析一个变量的时候，会现在它最近的执行环境中查找，如果找不到就向上查找，如果最后都没找到就返回undefined\nvar x = 10;\nfunction foo(){\n    console.log(x);\n}\n//现在foo作用域内寻找，如果找不到就向上寻找\n```","source":"_posts/javascript中变量作用域.md","raw":"title: javascript中变量作用域\ndate: 2015-10-21 15:03:01\ntags: javascript\ntoc: true\n---\n##### 变量做用域\n<!--more-->\n```javascript\n// *******\n//--理解变量做用域\nvar x = 1;\n\nfunction foo() {\n    console.log(1);\n}\nfoo();\nconsole.log(x);\n//结果\n//1\n//1\n//正常输出全局变量x\n//--\n\nvar x = 1;\n\nfunction foo() {\n    var x = 2;\n    console.log(x);\n}\nfoo();\nconsole.log(x);\n//2\n//1\n//foo中输出的是局部变量的值\n//外面输出的是全局变量的x\n//--\n\nx = 1;\n\nfunction foo() {\n    x = 2;\n    console.log(x);\n    y = 3;\n    console.log(y);\n}\nfoo();\nconsole.log(x);\nconsole.log(y);\n//2\n//3\n//2\n//3\n//foo内重新赋值了全局变量x,并且定义全局变量y\n//--\n\nvar x = 1;\n\nfunction foo() {\n    console.log(x);\n    var x = 2;\n}\nfoo();\nconsole.log(x);\n//结果\n//undefined\n//1\n//变量声明 函数声明，都有一个提升的过程\n// var x = 1分解\n// var x; 会提升到作用域最顶部\n// x = 1;\n//上面的定义相当于\nvar x = 1;\n\nfunction foo() {\n    var x;\n    console.log(x);\n    x = 2;\n}\nfoo();\nconsole.log(x);\n```\n##### 没有块级做用域\n```javascript\n//--没有块级做用域, if for等块无法划分作用域\nfunction foo(num) {\n    var x = 0;\n    if (num > 5) {\n        var j = 10;\n        for (var i = 0; i < num; i++) {\n            j += i;\n        }\n        console.log(x);\n    }\n    console.log(j);\n}\nfoo(10);\n```\n##### 作用域链\n```javascript\n// *******\n// 作用域链\n// 1.当javascaript执行的时候，都会创建一个对应的执行环境，执行环境中存在着函数的调用对象，\n// 2.函数执行环境包括了调用对象，调用对象的属性就是函数的局部变量，每个函数就在这样的执行环境执行，函数外部的代码就在全局变量的执行环境\n// 3.javascript执行环境中，存在着作用域链，是由对象组成的列表或者链\n// 4.在解析一个变量的时候，会现在它最近的执行环境中查找，如果找不到就向上查找，如果最后都没找到就返回undefined\nvar x = 10;\nfunction foo(){\n    console.log(x);\n}\n//现在foo作用域内寻找，如果找不到就向上寻找\n```","slug":"javascript中变量作用域","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599hy00364wyjtq6ibois"},{"title":"javascript中判断变量类型","date":"2015-10-22T07:03:01.000Z","toc":true,"_content":"##### 数据类型\n>* 原始类型\n\t数字\n\t字符串\n\t布尔值\n* 对象类型\n* 特殊原始值\n\tnull\n\tundefined\n\t把它们归纳成5种基本类型和1种复杂数据类型\n* 基本类型\n\tUndefined\n\tNull\n\tBoolean\n\tNumber\n\tString\n* 复杂数据类型\n\tObject(Array,Function,Date,RegExp等)\n<!--more-->\n\n##### 检测数据类型\n* typeof\n>我们来写个例子，看看typeOf检测变量类型，每种类型都返回什么结果\n```javascript\nvar number = 1,\n    string = 'asd',\n    boolean = true,\n    array = [1,2,3],\n    json = {\"a\":1};\n    func = function foo(){console.log('function');},\n    isundefined = undefined,\n    isnull = null,\n    date = new Date(),\n    reg = new RegExp('.*'),\n    error = new Error();\nconsole.log(typeof number,typeof string,typeof boolean,typeof array,typeof json,typeof func,typeof isundefined,typeof isnull,typeof date,typeof reg,typeof error);\n\n//返回结果\n//number string boolean object object function undefined object object object object\n//number string boolean function undefined都可以判断，但是其他对象类型都返回的object，这样我们就不能清晰的判断部分类型是什么\n//接着往下看\n```\n* instanceof\n>instanceof方法要求我们明确变量的类型，结果返回true false\n```javascript\nvar number = 1,\nstring = 'asd',\nboolean = true,\narray = [1,2,3],\njson = {\"a\":1};\nfunc = function foo(){console.log('function');},\nisundefined = undefined,\nisnull = null,\ndate = new Date(),\nreg = new RegExp('.*'),\nerror = new Error();\nconsole.log(number instanceof Number,string instanceof String,boolean instanceof Boolean,array instanceof Array,json instanceof Object,func instanceof Function,isundefined instanceof Object,isnull instanceof Object,date instanceof Date,reg instanceof RegExp,error instanceof Error);\n\n//返回结果\n//false false false true true true false false true true true\n//number string boolean使用字面量的方式没有检测出类型\n//如果我们使用对象的方式创建时可以的 new Number(1); new String('asd'); new Boolean(true);这样\n//还有一点就是null undefined类型也是Object\n//接着往下看\n```\n* constructor\n>constructor是对象原型上的属性，指向构造函数\n```javascript\nvar number = 1,\nstring = 'asd',\nboolean = true,\narray = [1,2,3],\njson = {\"a\":1};\nfunc = function foo(){console.log('function');},\nisundefined = undefined,\nisnull = null,\ndate = new Date(),\nreg = new RegExp('.*'),\nerror = new Error();\nconsole.log(number.constructor === Number,string.constructor === String,boolean.constructor === Boolean,array.constructor === Array,json.constructor === Object,func.constructor === Function,date.constructor ===  Date,reg.constructor === RegExp,error.constructor === Error);\n//输出结果\n//true true true true true true true true true\n不能判断undefined null\n```\n* Object.prototype.toString.call\n>输出字符串，字符串里有一个数组，第一个参数是Object，第二个参数是变量的类型\n```javascript\nvar number = 1,\nstring = 'asd',\nboolean = true,\narray = [1,2,3],\njson = {\"a\":1};\nfunc = function foo(){console.log('function');},\nisundefined = undefined,\nisnull = null,\ndate = new Date(),\nreg = new RegExp('.*'),\nerror = new Error();\nconsole.log(Object.prototype.toString.call(number),Object.prototype.toString.call( string),Object.prototype.toString.call( boolean),Object.prototype.toString.call( array),Object.prototype.toString.call( json),Object.prototype.toString.call( func),Object.prototype.toString.call( isundefined),Object.prototype.toString.call( isnull),Object.prototype.toString.call( date),Object.prototype.toString.call( reg),Object.prototype.toString.call( error));\n//输出结果\n//[object Number] [object String] [object Boolean] [object Array] [object Object] [object Function] [object Undefined] [object Null] [object Date] [object RegExp] [object Error]\n```\n* jquery中`$.type`\n>jquery封装的判断类型的方法，依赖jquery\n```javascript\nvar number = 1,\nstring = 'asd',\nboolean = true,\narray = [1,2,3],\njson = {\"a\":1};\nfunc = function foo(){console.log('function');},\nisundefined = undefined,\nisnull = null,\ndate = new Date(),\nreg = new RegExp('.*'),\nerror = new Error();\nconsole.log($.type(number),$.type( string),$.type( boolean),$.type( array),$.type( json),$.type( func),$.type( isundefined),$.type( isnull),$.type( date),$.type( reg),$.type( error));\n//输出结果\n//number string boolean array object function undefined null date regexp error\n```\n\n##### 总结\n1.Object.prototype.toString.call和$.type判断的比较精准，返回结果比较像\n2.object和function不能用typeof判断，其他类型可以\n\n","source":"_posts/javascript中判断变量类型.md","raw":"title: javascript中判断变量类型\ndate: 2015-10-22 15:03:01\ntags: javascript\ntoc: true\n---\n##### 数据类型\n>* 原始类型\n\t数字\n\t字符串\n\t布尔值\n* 对象类型\n* 特殊原始值\n\tnull\n\tundefined\n\t把它们归纳成5种基本类型和1种复杂数据类型\n* 基本类型\n\tUndefined\n\tNull\n\tBoolean\n\tNumber\n\tString\n* 复杂数据类型\n\tObject(Array,Function,Date,RegExp等)\n<!--more-->\n\n##### 检测数据类型\n* typeof\n>我们来写个例子，看看typeOf检测变量类型，每种类型都返回什么结果\n```javascript\nvar number = 1,\n    string = 'asd',\n    boolean = true,\n    array = [1,2,3],\n    json = {\"a\":1};\n    func = function foo(){console.log('function');},\n    isundefined = undefined,\n    isnull = null,\n    date = new Date(),\n    reg = new RegExp('.*'),\n    error = new Error();\nconsole.log(typeof number,typeof string,typeof boolean,typeof array,typeof json,typeof func,typeof isundefined,typeof isnull,typeof date,typeof reg,typeof error);\n\n//返回结果\n//number string boolean object object function undefined object object object object\n//number string boolean function undefined都可以判断，但是其他对象类型都返回的object，这样我们就不能清晰的判断部分类型是什么\n//接着往下看\n```\n* instanceof\n>instanceof方法要求我们明确变量的类型，结果返回true false\n```javascript\nvar number = 1,\nstring = 'asd',\nboolean = true,\narray = [1,2,3],\njson = {\"a\":1};\nfunc = function foo(){console.log('function');},\nisundefined = undefined,\nisnull = null,\ndate = new Date(),\nreg = new RegExp('.*'),\nerror = new Error();\nconsole.log(number instanceof Number,string instanceof String,boolean instanceof Boolean,array instanceof Array,json instanceof Object,func instanceof Function,isundefined instanceof Object,isnull instanceof Object,date instanceof Date,reg instanceof RegExp,error instanceof Error);\n\n//返回结果\n//false false false true true true false false true true true\n//number string boolean使用字面量的方式没有检测出类型\n//如果我们使用对象的方式创建时可以的 new Number(1); new String('asd'); new Boolean(true);这样\n//还有一点就是null undefined类型也是Object\n//接着往下看\n```\n* constructor\n>constructor是对象原型上的属性，指向构造函数\n```javascript\nvar number = 1,\nstring = 'asd',\nboolean = true,\narray = [1,2,3],\njson = {\"a\":1};\nfunc = function foo(){console.log('function');},\nisundefined = undefined,\nisnull = null,\ndate = new Date(),\nreg = new RegExp('.*'),\nerror = new Error();\nconsole.log(number.constructor === Number,string.constructor === String,boolean.constructor === Boolean,array.constructor === Array,json.constructor === Object,func.constructor === Function,date.constructor ===  Date,reg.constructor === RegExp,error.constructor === Error);\n//输出结果\n//true true true true true true true true true\n不能判断undefined null\n```\n* Object.prototype.toString.call\n>输出字符串，字符串里有一个数组，第一个参数是Object，第二个参数是变量的类型\n```javascript\nvar number = 1,\nstring = 'asd',\nboolean = true,\narray = [1,2,3],\njson = {\"a\":1};\nfunc = function foo(){console.log('function');},\nisundefined = undefined,\nisnull = null,\ndate = new Date(),\nreg = new RegExp('.*'),\nerror = new Error();\nconsole.log(Object.prototype.toString.call(number),Object.prototype.toString.call( string),Object.prototype.toString.call( boolean),Object.prototype.toString.call( array),Object.prototype.toString.call( json),Object.prototype.toString.call( func),Object.prototype.toString.call( isundefined),Object.prototype.toString.call( isnull),Object.prototype.toString.call( date),Object.prototype.toString.call( reg),Object.prototype.toString.call( error));\n//输出结果\n//[object Number] [object String] [object Boolean] [object Array] [object Object] [object Function] [object Undefined] [object Null] [object Date] [object RegExp] [object Error]\n```\n* jquery中`$.type`\n>jquery封装的判断类型的方法，依赖jquery\n```javascript\nvar number = 1,\nstring = 'asd',\nboolean = true,\narray = [1,2,3],\njson = {\"a\":1};\nfunc = function foo(){console.log('function');},\nisundefined = undefined,\nisnull = null,\ndate = new Date(),\nreg = new RegExp('.*'),\nerror = new Error();\nconsole.log($.type(number),$.type( string),$.type( boolean),$.type( array),$.type( json),$.type( func),$.type( isundefined),$.type( isnull),$.type( date),$.type( reg),$.type( error));\n//输出结果\n//number string boolean array object function undefined null date regexp error\n```\n\n##### 总结\n1.Object.prototype.toString.call和$.type判断的比较精准，返回结果比较像\n2.object和function不能用typeof判断，其他类型可以\n\n","slug":"javascript中判断变量类型","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599hz00384wyj5opr54vw"},{"title":"html页面中meta标签","date":"2015-11-11T07:03:01.000Z","toc":true,"_content":"#### 介绍\n>meta标签提供的数据不会展示页页面当中，但是对于机器来说，这些内容确是重要的，它会告诉机器怎么展示页面，还可以设置搜索引擎对页面的抓取。\n\n##### 属性\n|属性  |\t 值  | 描述|\n| :--------| :--: | :--:|\n|http-equiv|\tcontent-type / expire / refresh / set-cookie|\t把content属性关联到HTTP头部|\n|name\t|author / description / keywords / generator / revised / others|\t把 content 属性关联到一个名称|\n|content\t|text\t|定义用于 content 属性值的格式|\n<!--more-->\n\n##### SEO相关\n* name=”keywords” 网页内容关键字\n* name=”description” 网页内容描述\n* name=”robots” 搜索引擎索引方式\n\tnone 搜索引擎将忽略此网页，等价于noindex，nofollow。\n\tnoindex 搜索引擎不索引此网页。\n\tnofollow 搜索引擎不继续通过此网页的链接索引搜索其它的网页。\n\tall 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。\n\tindex 搜索引擎索引此网页。\n\tfollow 搜索引擎继续通过此网页的链接索引搜索其它的网页。\n* http-equiv=”refresh” 页面重定向和刷新,content内的数字代表时间，多少秒后刷新。如果加url,则会重定向到指定网页\n\t`<meta http-equiv=\"refresh\" content=\"0;url=http://www.baidu.com\" />`\n* name=”author” 作者\n* 针对谷歌GOOGLEBOT使用robots\n\t`<meta name=\"googlebot\" content=\"noindex, nofollow\" />`\n* 针对百度baiduspider使用robots\n\t`<meta name=\"baiduspider\" content=\"noarchive\" />`\n\n##### 移动设备\n* viewport 优化移动页面显示\n\t*  4.7-5寸设备的viewport宽设为360px；\n\t*  5.5寸设备设为400px；\n\t*  iphone6设为375px；\n\t*  ipone6 plus设为414px。\n* 属性\n\t* width：宽度（数值 / device-width）（范围从200 到10,000，默认为980 像素）\n\t* height：高度（数值 / device-height）（范围从223 到10,000）\n\t* initial-scale：初始的缩放比例 （范围从>0 到10）\n\t* minimum-scale：允许用户缩放到的最小比例\n\t* maximum-scale：允许用户缩放到的最大比例\n\t* user-scalable：用户是否可以手动缩 (no,yes)\n\t* minimal-ui：可以在页面加载时最小化上下状态栏。（已弃用）\n\t* 如果和initial-scale=1同时使用user-scalable=no或maximum-scale=1，则用户将不能放大/缩小网页来看到全部的内容。\n* 应用\n\t* WebApp全屏\n\t`<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />`\n\t* 隐藏状态栏/设置状态栏颜色\n\t`<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\" />`\n\t* 添加到主屏后的标题\n\t`<meta name=\"apple-mobile-web-app-title\" content=\"标题\">`\n\t* 忽略数字自动识别为电话号码\n\t`<meta name=\"format-detection\" content=\"telephone=no\" />`\n\t* 忽略识别邮箱\n\t`<meta content=\"email=no\" name=\"format-detection\" />`\n\t* 添加智能 App 广告条 Smart App Banne\n\t`<meta name=\"apple-itunes-app\" content=\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\">`\n* 其他\n```javascript\n<!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n<meta name=\"HandheldFriendly\" content=\"true\">\n<!-- 微软的老式浏览器 -->\n<meta name=\"MobileOptimized\" content=\"320\">\n<!-- uc强制竖屏 -->\n<meta name=\"screen-orientation\" content=\"portrait\">\n<!-- QQ强制竖屏 -->\n<meta name=\"x5-orientation\" content=\"portrait\">\n<!-- UC强制全屏 -->\n<meta name=\"full-screen\" content=\"yes\">\n<!-- QQ强制全屏 -->\n<meta name=\"x5-fullscreen\" content=\"true\">\n<!-- UC应用模式 -->\n<meta name=\"browsermode\" content=\"application\">\n<!-- QQ应用模式 -->\n<meta name=\"x5-page-mode\" content=\"app\">\n<!-- windows phone 点击无高光 -->\n<meta name=\"msapplication-tap-highlight\" content=\"no\">\n```\n\n#### 网页应用\n* 编码\n\t`<meta charset='utf-8' />`\n* 浏览器优先选择\n\t```javascript\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\" >\n\t```\n* 内核控制：控制浏览器使用哪种内核渲染\n\t`<meta name=\"renderer\" content=\"webkit\">`\n\t可选值：webkit，ie-comp，ie-stand\n* 禁止本地缓存\n\t`<meta http-equiv=\"Pragma\" content=\"no-cache\">`\n* Windows 8 tile\n* 适配：PC-手机页面的对应\n\t`<meta name=\"mobile-agent\" content=\"format=html5; url=url\">`\n\t[wml|xhtml|html5]根据手机页面的协议语言，选择其中一种；\n\turl=”url” 后者代表当前PC页所对应的手机页URL，两者必须是一一对应关系。\n* 转码申明 （避免转码使用如下）\n\t`<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />`\n","source":"_posts/html页面中meta标签.md","raw":"title: html页面中meta标签\ndate: 2015-11-11 15:03:01\ntags: web\ntoc: true\n---\n#### 介绍\n>meta标签提供的数据不会展示页页面当中，但是对于机器来说，这些内容确是重要的，它会告诉机器怎么展示页面，还可以设置搜索引擎对页面的抓取。\n\n##### 属性\n|属性  |\t 值  | 描述|\n| :--------| :--: | :--:|\n|http-equiv|\tcontent-type / expire / refresh / set-cookie|\t把content属性关联到HTTP头部|\n|name\t|author / description / keywords / generator / revised / others|\t把 content 属性关联到一个名称|\n|content\t|text\t|定义用于 content 属性值的格式|\n<!--more-->\n\n##### SEO相关\n* name=”keywords” 网页内容关键字\n* name=”description” 网页内容描述\n* name=”robots” 搜索引擎索引方式\n\tnone 搜索引擎将忽略此网页，等价于noindex，nofollow。\n\tnoindex 搜索引擎不索引此网页。\n\tnofollow 搜索引擎不继续通过此网页的链接索引搜索其它的网页。\n\tall 搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。\n\tindex 搜索引擎索引此网页。\n\tfollow 搜索引擎继续通过此网页的链接索引搜索其它的网页。\n* http-equiv=”refresh” 页面重定向和刷新,content内的数字代表时间，多少秒后刷新。如果加url,则会重定向到指定网页\n\t`<meta http-equiv=\"refresh\" content=\"0;url=http://www.baidu.com\" />`\n* name=”author” 作者\n* 针对谷歌GOOGLEBOT使用robots\n\t`<meta name=\"googlebot\" content=\"noindex, nofollow\" />`\n* 针对百度baiduspider使用robots\n\t`<meta name=\"baiduspider\" content=\"noarchive\" />`\n\n##### 移动设备\n* viewport 优化移动页面显示\n\t*  4.7-5寸设备的viewport宽设为360px；\n\t*  5.5寸设备设为400px；\n\t*  iphone6设为375px；\n\t*  ipone6 plus设为414px。\n* 属性\n\t* width：宽度（数值 / device-width）（范围从200 到10,000，默认为980 像素）\n\t* height：高度（数值 / device-height）（范围从223 到10,000）\n\t* initial-scale：初始的缩放比例 （范围从>0 到10）\n\t* minimum-scale：允许用户缩放到的最小比例\n\t* maximum-scale：允许用户缩放到的最大比例\n\t* user-scalable：用户是否可以手动缩 (no,yes)\n\t* minimal-ui：可以在页面加载时最小化上下状态栏。（已弃用）\n\t* 如果和initial-scale=1同时使用user-scalable=no或maximum-scale=1，则用户将不能放大/缩小网页来看到全部的内容。\n* 应用\n\t* WebApp全屏\n\t`<meta name=\"apple-mobile-web-app-capable\" content=\"yes\" />`\n\t* 隐藏状态栏/设置状态栏颜色\n\t`<meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black-translucent\" />`\n\t* 添加到主屏后的标题\n\t`<meta name=\"apple-mobile-web-app-title\" content=\"标题\">`\n\t* 忽略数字自动识别为电话号码\n\t`<meta name=\"format-detection\" content=\"telephone=no\" />`\n\t* 忽略识别邮箱\n\t`<meta content=\"email=no\" name=\"format-detection\" />`\n\t* 添加智能 App 广告条 Smart App Banne\n\t`<meta name=\"apple-itunes-app\" content=\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\">`\n* 其他\n```javascript\n<!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 -->\n<meta name=\"HandheldFriendly\" content=\"true\">\n<!-- 微软的老式浏览器 -->\n<meta name=\"MobileOptimized\" content=\"320\">\n<!-- uc强制竖屏 -->\n<meta name=\"screen-orientation\" content=\"portrait\">\n<!-- QQ强制竖屏 -->\n<meta name=\"x5-orientation\" content=\"portrait\">\n<!-- UC强制全屏 -->\n<meta name=\"full-screen\" content=\"yes\">\n<!-- QQ强制全屏 -->\n<meta name=\"x5-fullscreen\" content=\"true\">\n<!-- UC应用模式 -->\n<meta name=\"browsermode\" content=\"application\">\n<!-- QQ应用模式 -->\n<meta name=\"x5-page-mode\" content=\"app\">\n<!-- windows phone 点击无高光 -->\n<meta name=\"msapplication-tap-highlight\" content=\"no\">\n```\n\n#### 网页应用\n* 编码\n\t`<meta charset='utf-8' />`\n* 浏览器优先选择\n\t```javascript\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\" >\n\t```\n* 内核控制：控制浏览器使用哪种内核渲染\n\t`<meta name=\"renderer\" content=\"webkit\">`\n\t可选值：webkit，ie-comp，ie-stand\n* 禁止本地缓存\n\t`<meta http-equiv=\"Pragma\" content=\"no-cache\">`\n* Windows 8 tile\n* 适配：PC-手机页面的对应\n\t`<meta name=\"mobile-agent\" content=\"format=html5; url=url\">`\n\t[wml|xhtml|html5]根据手机页面的协议语言，选择其中一种；\n\turl=”url” 后者代表当前PC页所对应的手机页URL，两者必须是一一对应关系。\n* 转码申明 （避免转码使用如下）\n\t`<meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" />`\n","slug":"html页面中meta标签","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599i0003a4wyje777vkdq"},{"title":"html5文件上传","date":"2015-10-04T11:20:11.000Z","toc":true,"_content":"#### File\n>* 背景\n我们之前在浏览器端操作文件，一般都是通过flash,silverlight或者ActiveX插件，这些实现都是依赖第三方插件，不够独立也伴随着升级带来的不稳定，也不够通用，使用了这些技术后也很难进行跨平台、跨浏览器、跨设备等情况下实现统一的表现。\n之前图片上传方式，1、form提交。2、flash上传。3、插件上传。\n* form上传无法取消，没有上传进度，flash上传，非IE浏览器无法传递cookie，插件上传的问题就是跨浏览器上传。\n* HTML5的File API可以很轻松的使用JS来控制文件的读取、写入等一系列的操作。\n<!--more-->\n\n##### js对象\n* FileList\nFile对象的集合,file标签设置multiple，就支持多文件上传\n`<input type=\"file\" multiple=\"multiple\" name=\"file\" id=\"js_file\" />`\n* Blob\n原始数据对象\n使用slice方法可以读取原始数据中的某块数据\n属性：size（数据的大小），type（数据的MIME类型）\n* File\n继承自Blob对象,指向一个具体的文件\n属性：name（文件名), lastModifiedDate（最后修改时间)\n* FileReader\n读取文件数据\n* URL scheme\n\n##### FileReader\n* 三个方法\n\t* readAsBinaryString(Blob blob);传入一个Blob对象，读取数据的结果作为二进制字符串的形式放到FileReader的result属性中。\n\t* readAsText(Blob blob, optional DOMString encoding);第一个参数传入Blog对象，第二个参数传入编码格式，异步将数据读取成功后放到result属性中，读取的内容是普通的文本字符串。\n\t* readAsDataURL(Blob blob);传入一个Blob对象，读取内容可以做为URL属性，图片返回结果可以赋值给img的src。\n* 六个事件\n\t* Onloadstart 文件读取开始时触发。\n\t* Progress 读取进行中定时触发。事件参数中会含有已读取总数据量。\n\t* Abort 当读取被中止时触发。\n\t* Error 当读取出错时触发。\n\t* Load 当读取成功完成时触发。\n\t* Loadend 当读取完成时，无论成功或者失败都会触发。\n\n##### 拖拽上传\n>拖拽简介\n拖拽源和拖拽目标：\n* 拖拽源：设置draggable属性为true标识该对象可作为拖拽源。然后监听源对象的dragstart事件，在事件处理函数里设置DataTransfer。在DataTransfer里可以设置拖拽数据的类型和值。比如是纯文本的值，可以设置类型为”text/plain”，url则把类型设置为”text/uri-list”。这样，目标对象就可以根据期望的类型来选择数据了。\n* 拖拽目标：一个拖拽目标必须监听3个事件。\n\t* dragenter：目标对象通过响应这个事件来确定是否接收拖拽。如果接收则需要取消这个事件，停止事件继续传播。\n\t* dragover：通过响应这个事件来显示拖拽的提示效果。\n\t* drop：目标对象通过响应这个事件来处理拖拽数据。在drop事件中可以获取DataTransfer对象，取出要上传的数据。\n","source":"_posts/html5文件上传.md","raw":"title: html5文件上传\ndate: 2015-10-04 19:20:11\ntags: javascript\ntoc: true\n---\n#### File\n>* 背景\n我们之前在浏览器端操作文件，一般都是通过flash,silverlight或者ActiveX插件，这些实现都是依赖第三方插件，不够独立也伴随着升级带来的不稳定，也不够通用，使用了这些技术后也很难进行跨平台、跨浏览器、跨设备等情况下实现统一的表现。\n之前图片上传方式，1、form提交。2、flash上传。3、插件上传。\n* form上传无法取消，没有上传进度，flash上传，非IE浏览器无法传递cookie，插件上传的问题就是跨浏览器上传。\n* HTML5的File API可以很轻松的使用JS来控制文件的读取、写入等一系列的操作。\n<!--more-->\n\n##### js对象\n* FileList\nFile对象的集合,file标签设置multiple，就支持多文件上传\n`<input type=\"file\" multiple=\"multiple\" name=\"file\" id=\"js_file\" />`\n* Blob\n原始数据对象\n使用slice方法可以读取原始数据中的某块数据\n属性：size（数据的大小），type（数据的MIME类型）\n* File\n继承自Blob对象,指向一个具体的文件\n属性：name（文件名), lastModifiedDate（最后修改时间)\n* FileReader\n读取文件数据\n* URL scheme\n\n##### FileReader\n* 三个方法\n\t* readAsBinaryString(Blob blob);传入一个Blob对象，读取数据的结果作为二进制字符串的形式放到FileReader的result属性中。\n\t* readAsText(Blob blob, optional DOMString encoding);第一个参数传入Blog对象，第二个参数传入编码格式，异步将数据读取成功后放到result属性中，读取的内容是普通的文本字符串。\n\t* readAsDataURL(Blob blob);传入一个Blob对象，读取内容可以做为URL属性，图片返回结果可以赋值给img的src。\n* 六个事件\n\t* Onloadstart 文件读取开始时触发。\n\t* Progress 读取进行中定时触发。事件参数中会含有已读取总数据量。\n\t* Abort 当读取被中止时触发。\n\t* Error 当读取出错时触发。\n\t* Load 当读取成功完成时触发。\n\t* Loadend 当读取完成时，无论成功或者失败都会触发。\n\n##### 拖拽上传\n>拖拽简介\n拖拽源和拖拽目标：\n* 拖拽源：设置draggable属性为true标识该对象可作为拖拽源。然后监听源对象的dragstart事件，在事件处理函数里设置DataTransfer。在DataTransfer里可以设置拖拽数据的类型和值。比如是纯文本的值，可以设置类型为”text/plain”，url则把类型设置为”text/uri-list”。这样，目标对象就可以根据期望的类型来选择数据了。\n* 拖拽目标：一个拖拽目标必须监听3个事件。\n\t* dragenter：目标对象通过响应这个事件来确定是否接收拖拽。如果接收则需要取消这个事件，停止事件继续传播。\n\t* dragover：通过响应这个事件来显示拖拽的提示效果。\n\t* drop：目标对象通过响应这个事件来处理拖拽数据。在drop事件中可以获取DataTransfer对象，取出要上传的数据。\n","slug":"html5文件上传","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599i2003c4wyjav5u2g5n"},{"title":"fetch","date":"2016-08-31T13:17:37.000Z","toc":true,"_content":"##### 介绍\n* 遵循Promise解决方案\n* XMLHttpRequest的替代者\n\n##### 使用\n* 引入Promise兼容方案\n* 引入fetch兼容方案（高级浏览器高版本已经支持）\n* 兼容方案以及使用说明见 https://github.com/github/fetch\n<!--more-->\n\n##### 详解\n\n###### Header\n\n###### Request\n\n###### Response\n\n##### 示例\n```javascript\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response\n  } else {\n    var error = new Error(response.statusText)\n    error.response = response\n    throw error\n  }\n}\n\nfunction parseJSON(response) {\n  return response.json()\n}\n\nfetch('/test.json')\n  .then(checkStatus)\n  .then(parseJSON)\n  .then(function(data) {\n    console.log('request succeeded with JSON response', data)\n  }).catch(function(error) {\n    console.log('request failed', error)\n  });\n```","source":"_posts/fetch.md","raw":"title: fetch\ndate: 2016-08-31 21:17:37\ntags: javascript\ntoc: true\n---\n##### 介绍\n* 遵循Promise解决方案\n* XMLHttpRequest的替代者\n\n##### 使用\n* 引入Promise兼容方案\n* 引入fetch兼容方案（高级浏览器高版本已经支持）\n* 兼容方案以及使用说明见 https://github.com/github/fetch\n<!--more-->\n\n##### 详解\n\n###### Header\n\n###### Request\n\n###### Response\n\n##### 示例\n```javascript\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response\n  } else {\n    var error = new Error(response.statusText)\n    error.response = response\n    throw error\n  }\n}\n\nfunction parseJSON(response) {\n  return response.json()\n}\n\nfetch('/test.json')\n  .then(checkStatus)\n  .then(parseJSON)\n  .then(function(data) {\n    console.log('request succeeded with JSON response', data)\n  }).catch(function(error) {\n    console.log('request failed', error)\n  });\n```","slug":"fetch","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599i4003e4wyjop9wjyox"},{"title":"avalon应用","date":"2015-11-12T07:03:01.000Z","toc":true,"_content":"#### 介绍：\navalon是一个轻量型的MVVM框架\n\n#### 配置：\n```javascript\navalon.config({\n    debug: false\n});\n```\n为了方便调试，我们把debug模式设为true,那么avalon源码中的所有调试信息都会在控制台输出，我们把debug设为false就可以屏蔽它们。\n<!--more-->\n\n#### 定义\n`avalon.define()`\n对html页面的处理：\n```html\n<body ms-controller=\"page_model\">\n...\n<p>{{name}}</p>\n<p>{{age}}</p>\n<p>{{from}}</p>\n<a href=\"javascript:;\" ms-click=\"check\">click</a>\n</body>\n```\n```javascript\nvar vm = avalon.define({\n    $id: \"page_model\",\n    name: 'wz',\n    age: 25,\n    from: 'changchun'\n    check: function($events){\n       $events.preventDefault();\n       //do something\n    }\n})\n```\n* avalon.define定义页面对应的controller\n* 放在$skipArray数组里面的属性，将不会被扫描\n* 单向绑定 需要在ms-*属性的值前面加::，或花括号内部的前面加::\n\n#### 常用属性\n* `ms-duplex / ms-duplex-text —text `\n* `ms-visible —boolean`\n* `ms-repeat —list`\n* `ms-value / `\n* `ms-attr-*` —对应html标签的属性\n* `ms-data`\n* `ms-click`\n* `ms-class / ms-hover / ms-active`\n* `ms-widget`\n* `$watch` 属性监控\n```javascript\navalon.vmodels.grid.room_checked.$watch(\"length\", function(n) {\n     $avalon.vmodels.grid.allchecked = n === $$.grid.all_room.size();\n})\n```\n* `$unwatch` 解除监控\n* `$events` 对象，avalon中这个对象替代我们之前用的 event\n#### 扫描\n* 把视图中的所有指令全部抽取出来，转换为一个个视图刷新函数，然后放到一个个数组中，当VM的属性变动时，就会执行这些数组的函数。数组里面的东西不定是函数，也可能是对象，但里面肯定有个视图刷新函数。\n* avalon.scan，有两个可选参数，第一个是元素节点，第二个是数组，里面为一个个VM。\n#### 模版\n* ms-html 可以加载一段html结构\n* ms-include=”template” 负值一个模版变量，用于加载一段html结构\n* ms-include-src=”aaa.html” 用于加载一个资源\n#### 类操作\n* ms-class,\n* ms-hover\n* ms-active\n#### 事件绑定\n* ms-on-*\n#### 绑定\n* 显示绑定ms-visible\n* 插入绑定ms-if\n* 双工绑定ms-duplex\n* 样式绑定ms-css\n* 数据绑定ms-data\n* 属性绑定ms-attr\n* 循环绑定\n  * `ms-repeat 用于循环数组与对象 循环当前元素`\n  * `ms-each 用于循环数组 循环当前元素的内部`\n  * `ms-with 用于循环对象 循环当前元素的内部`\n  * `el: 默认el，也可以用ms-repeat-item，就变成了item指向当前元素。`\n  * `$first: 判定是否为监控数组的第一个元素`\n  * `$last: 判定是否为监控数组的最后一个元素`\n  * `$index: 得到当前元素的索引值`\n  * `$outer: 得到外围循环的那个元素。`\n  * `$remove: 这是一个方法，用于移除此元素`\n* 动画绑定ms-effect\n#### 过滤器\n\n```javascript\n它只能用于{{}}插值表达式。如果不存在参数，要求直接跟|filter，如果存在参传，则要用小括号括起，参数要有逗号\n* html\n* uppercase\n* lowercase\n* truncate – 对长字符串进行截短，truncate(number, truncation), number默认为30\n* camelize --驼峰化处理\n* escape --对类似于HTML格式的字符串进行转义\n* currency\n* number\n* date\n* 自定义过滤器\navalon.filters.format = function(str, args, args2){\n   //str为原数据，默认传入，此方法必须返回一个值\n   /* 具体逻辑 */\n   return ret;\n}\n```\n#### AJAX\n* 功能同jquery ajax\n#### 路由\n#### 加载器\n#### 自定义指令\n#### 显示优化\n* `.ms-controller, [ms-controller]{ visibility:hidden}`\n\n* 我们在页面使用了大量插值表达式，网速慢时，就会被用户看到，认为是乱码了。为了预防这种情况， 我们可以在样式中定义 `.ms-controller, [ms-controller]{ visibility:hidden}` 那么当元素被扫描后，它们才会安全显示出来。\n","source":"_posts/avalon应用.md","raw":"title: avalon应用\ndate: 2015-11-12 15:03:01\ntags: web\ntoc: true\n---\n#### 介绍：\navalon是一个轻量型的MVVM框架\n\n#### 配置：\n```javascript\navalon.config({\n    debug: false\n});\n```\n为了方便调试，我们把debug模式设为true,那么avalon源码中的所有调试信息都会在控制台输出，我们把debug设为false就可以屏蔽它们。\n<!--more-->\n\n#### 定义\n`avalon.define()`\n对html页面的处理：\n```html\n<body ms-controller=\"page_model\">\n...\n<p>{{name}}</p>\n<p>{{age}}</p>\n<p>{{from}}</p>\n<a href=\"javascript:;\" ms-click=\"check\">click</a>\n</body>\n```\n```javascript\nvar vm = avalon.define({\n    $id: \"page_model\",\n    name: 'wz',\n    age: 25,\n    from: 'changchun'\n    check: function($events){\n       $events.preventDefault();\n       //do something\n    }\n})\n```\n* avalon.define定义页面对应的controller\n* 放在$skipArray数组里面的属性，将不会被扫描\n* 单向绑定 需要在ms-*属性的值前面加::，或花括号内部的前面加::\n\n#### 常用属性\n* `ms-duplex / ms-duplex-text —text `\n* `ms-visible —boolean`\n* `ms-repeat —list`\n* `ms-value / `\n* `ms-attr-*` —对应html标签的属性\n* `ms-data`\n* `ms-click`\n* `ms-class / ms-hover / ms-active`\n* `ms-widget`\n* `$watch` 属性监控\n```javascript\navalon.vmodels.grid.room_checked.$watch(\"length\", function(n) {\n     $avalon.vmodels.grid.allchecked = n === $$.grid.all_room.size();\n})\n```\n* `$unwatch` 解除监控\n* `$events` 对象，avalon中这个对象替代我们之前用的 event\n#### 扫描\n* 把视图中的所有指令全部抽取出来，转换为一个个视图刷新函数，然后放到一个个数组中，当VM的属性变动时，就会执行这些数组的函数。数组里面的东西不定是函数，也可能是对象，但里面肯定有个视图刷新函数。\n* avalon.scan，有两个可选参数，第一个是元素节点，第二个是数组，里面为一个个VM。\n#### 模版\n* ms-html 可以加载一段html结构\n* ms-include=”template” 负值一个模版变量，用于加载一段html结构\n* ms-include-src=”aaa.html” 用于加载一个资源\n#### 类操作\n* ms-class,\n* ms-hover\n* ms-active\n#### 事件绑定\n* ms-on-*\n#### 绑定\n* 显示绑定ms-visible\n* 插入绑定ms-if\n* 双工绑定ms-duplex\n* 样式绑定ms-css\n* 数据绑定ms-data\n* 属性绑定ms-attr\n* 循环绑定\n  * `ms-repeat 用于循环数组与对象 循环当前元素`\n  * `ms-each 用于循环数组 循环当前元素的内部`\n  * `ms-with 用于循环对象 循环当前元素的内部`\n  * `el: 默认el，也可以用ms-repeat-item，就变成了item指向当前元素。`\n  * `$first: 判定是否为监控数组的第一个元素`\n  * `$last: 判定是否为监控数组的最后一个元素`\n  * `$index: 得到当前元素的索引值`\n  * `$outer: 得到外围循环的那个元素。`\n  * `$remove: 这是一个方法，用于移除此元素`\n* 动画绑定ms-effect\n#### 过滤器\n\n```javascript\n它只能用于{{}}插值表达式。如果不存在参数，要求直接跟|filter，如果存在参传，则要用小括号括起，参数要有逗号\n* html\n* uppercase\n* lowercase\n* truncate – 对长字符串进行截短，truncate(number, truncation), number默认为30\n* camelize --驼峰化处理\n* escape --对类似于HTML格式的字符串进行转义\n* currency\n* number\n* date\n* 自定义过滤器\navalon.filters.format = function(str, args, args2){\n   //str为原数据，默认传入，此方法必须返回一个值\n   /* 具体逻辑 */\n   return ret;\n}\n```\n#### AJAX\n* 功能同jquery ajax\n#### 路由\n#### 加载器\n#### 自定义指令\n#### 显示优化\n* `.ms-controller, [ms-controller]{ visibility:hidden}`\n\n* 我们在页面使用了大量插值表达式，网速慢时，就会被用户看到，认为是乱码了。为了预防这种情况， 我们可以在样式中定义 `.ms-controller, [ms-controller]{ visibility:hidden}` 那么当元素被扫描后，它们才会安全显示出来。\n","slug":"avalon应用","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599i6003g4wyjxkwbd8q8"},{"title":"Synergy实现多个主机之间共享键鼠","date":"2015-11-16T07:03:01.000Z","toc":true,"_content":"##### 工具\n* Synergy软件\n* 两台电脑，一套键鼠\n<!--more-->\n\n##### 使用方法\n* A电脑做为共享键鼠的主机\n* B电脑去使用共享的键鼠\n* A电脑打开软件后选择共享选项\n* B电脑配置成使用另一台电脑的键鼠，并且配置A电脑IP\n* A电脑点击配置服务，然后在B电脑显示器对应的图标上点击，然后输入B电脑的display name然后确认即可","source":"_posts/Synergy实现多个主机之间共享键鼠.md","raw":"title: Synergy实现多个主机之间共享键鼠\ndate: 2015-11-16 15:03:01\ntags: tools\ntoc: true\n---\n##### 工具\n* Synergy软件\n* 两台电脑，一套键鼠\n<!--more-->\n\n##### 使用方法\n* A电脑做为共享键鼠的主机\n* B电脑去使用共享的键鼠\n* A电脑打开软件后选择共享选项\n* B电脑配置成使用另一台电脑的键鼠，并且配置A电脑IP\n* A电脑点击配置服务，然后在B电脑显示器对应的图标上点击，然后输入B电脑的display name然后确认即可","slug":"Synergy实现多个主机之间共享键鼠","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599i7003i4wyj3smio9eu"},{"title":"RactiveJs应用","date":"2015-11-13T07:03:01.000Z","toc":true,"_content":"#### 简介\nRactive.js是一款简单却功能强大的JS库，它实现了模板，数据绑定，DOM实时更新，事件处理等多个有用的功能。\n\n#### 应用\n关联dom和模版\n```javascript\n//html\n<div id='output'></div>\n<script id='template' type='text/ractive'>\n</script>\n\n//js\nvar ractive = new Ractive({\n\tel: '#output',\n\ttemplate: '#template'\n});\n```\n<!--more-->\n\n#### 模版内绑定属性\n```javascript\n//html\n<div id='output'></div>\n<script id='template' type='text/ractive'>\n<p>{{greeting}} {{name}}!</p>\n</script>\n\n//js\nvar ractive = new Ractive({\n\tel: '#output',\n\ttemplate: '#template'，\n        data: {\n\t    greeting: 'Hello',\n\t    name: 'world'\n\t}\n});\n```\n#### 配置\n#### 模版\n#### mustache模版\n#### 数据和绑定\n#### 事件\n#### 过度效果和动画\n#### 组件\n#### API\n#### 插件\n\n\n#### 待续\n","source":"_posts/RactiveJs应用.md","raw":"title: RactiveJs应用\ndate: 2015-11-13 15:03:01\ntags: web\ntoc: true\n---\n#### 简介\nRactive.js是一款简单却功能强大的JS库，它实现了模板，数据绑定，DOM实时更新，事件处理等多个有用的功能。\n\n#### 应用\n关联dom和模版\n```javascript\n//html\n<div id='output'></div>\n<script id='template' type='text/ractive'>\n</script>\n\n//js\nvar ractive = new Ractive({\n\tel: '#output',\n\ttemplate: '#template'\n});\n```\n<!--more-->\n\n#### 模版内绑定属性\n```javascript\n//html\n<div id='output'></div>\n<script id='template' type='text/ractive'>\n<p>{{greeting}} {{name}}!</p>\n</script>\n\n//js\nvar ractive = new Ractive({\n\tel: '#output',\n\ttemplate: '#template'，\n        data: {\n\t    greeting: 'Hello',\n\t    name: 'world'\n\t}\n});\n```\n#### 配置\n#### 模版\n#### mustache模版\n#### 数据和绑定\n#### 事件\n#### 过度效果和动画\n#### 组件\n#### API\n#### 插件\n\n\n#### 待续\n","slug":"RactiveJs应用","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599i8003l4wyjee5biq14"},{"title":"NodeJs模块之http","date":"2015-10-31T07:03:01.000Z","toc":true,"_content":"#### http\n##### http.createServer是创建服务器的核心\n<!--more-->\n```javascript\nvar http = require('http');\nvar server = http.createServer(function(req,res){\n\tres.writeHeader(200,{'Content-Type':'text/plain'});\n\tres.end('data');\n});\n//另一种创建方式\nvar server = new http.server();\nserver.on('request',function(req,res){\n\tres.writeHeader(200,{'Content-Type':'text/plain'});\n\tres.end('data');\n});\nserver.maxHeadersCount 设置最大请求数，默认是1000， 0代表无限制\nserver.timeout 请求超时时间\n\n//server.on还可以可以监听的事件：\n1. connection\n2. close\n3. checkContinue\n4. connet\n5. upgrade\n6. clientError\n\nserver.listen(3000,function(){\n   console.log('Server is start ... Listen port 3000...');\n});\n```\n##### http.request\n做为客户端向服务器发起请求\n```javascript\nvar http = require('http');\nvar options = {\n\tmethod:'POST',\n\thostname:'www.test.com',\n\tport:80,\n\tpath:'/test',\n\theader:{} //路由发出req中可取到cookie user-agent信息\n};\nvar req = http.request(options,function(res){\n\tres.setEncoding('utf8');\n    res.on('data',function(chunk){\n       console.log('data:' + chunk);\n    });\n    res.on('end',function(chunk){\n\n    });\n    res.write('123');\n    res.end();\n});\nreq.on('error',function(e){\n   console.log(e.message);//请求过程中发生错误\n});\nreq.write('qwe');\nreq.end();\nreq.abort(); //用于阻止请求\nreq.setNoDelay(0); //设置无延迟\n```\n##### http.get\n```javascript\nvar http = require('http');\nhttp.get('http://www.test.com/test',function(res){\n    res.setEncoding('utf8');\n    res.on('data',function(chunk){\n       console.log('data:' + chunk);\n    });\n    res.on('end',function(chunk){\n\n    });\n    res.write('123');\n    res.end();\n}).on('error',function(e){\n    console.log(e.message);//请求过程中发生错误\n});\n```","source":"_posts/NodeJs模块之http.md","raw":"title: NodeJs模块之http\ndate: 2015-10-31 15:03:01\ntags: nodejs\ntoc: true\n---\n#### http\n##### http.createServer是创建服务器的核心\n<!--more-->\n```javascript\nvar http = require('http');\nvar server = http.createServer(function(req,res){\n\tres.writeHeader(200,{'Content-Type':'text/plain'});\n\tres.end('data');\n});\n//另一种创建方式\nvar server = new http.server();\nserver.on('request',function(req,res){\n\tres.writeHeader(200,{'Content-Type':'text/plain'});\n\tres.end('data');\n});\nserver.maxHeadersCount 设置最大请求数，默认是1000， 0代表无限制\nserver.timeout 请求超时时间\n\n//server.on还可以可以监听的事件：\n1. connection\n2. close\n3. checkContinue\n4. connet\n5. upgrade\n6. clientError\n\nserver.listen(3000,function(){\n   console.log('Server is start ... Listen port 3000...');\n});\n```\n##### http.request\n做为客户端向服务器发起请求\n```javascript\nvar http = require('http');\nvar options = {\n\tmethod:'POST',\n\thostname:'www.test.com',\n\tport:80,\n\tpath:'/test',\n\theader:{} //路由发出req中可取到cookie user-agent信息\n};\nvar req = http.request(options,function(res){\n\tres.setEncoding('utf8');\n    res.on('data',function(chunk){\n       console.log('data:' + chunk);\n    });\n    res.on('end',function(chunk){\n\n    });\n    res.write('123');\n    res.end();\n});\nreq.on('error',function(e){\n   console.log(e.message);//请求过程中发生错误\n});\nreq.write('qwe');\nreq.end();\nreq.abort(); //用于阻止请求\nreq.setNoDelay(0); //设置无延迟\n```\n##### http.get\n```javascript\nvar http = require('http');\nhttp.get('http://www.test.com/test',function(res){\n    res.setEncoding('utf8');\n    res.on('data',function(chunk){\n       console.log('data:' + chunk);\n    });\n    res.on('end',function(chunk){\n\n    });\n    res.write('123');\n    res.end();\n}).on('error',function(e){\n    console.log(e.message);//请求过程中发生错误\n});\n```","slug":"NodeJs模块之http","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599ia003n4wyj8lgwi58g"},{"title":"NodeJs搭建Http服务器","date":"2015-11-01T07:03:01.000Z","toc":true,"_content":"#### 介绍\n* 我们之前用过IIS,Apache等服务器，都是做一些配置，然后启动服务，指定端口等等就在本地开启了一个服务器。\n* 现在我们使用nodejs,一步一步实现一个Http服务器，我们主要用到的是http模块，还会使用fs文件操作，url,path模块用作辅助文件读取。\n* 实现\n<!--more-->\n```javascript\n//file_types.js\nexports.file_types = {\n\t\"html\": \"text/html\",\n\t\"js\": \"text/javascript\",\n  \t\"css\": \"text/css\",\n  \t\"json\": \"application/json\",\n  \t\"xml\": \"text/xml\",\n \t\"txt\": \"text/plain\",\n  \t\"gif\": \"image/gif\",\n  \t\"jpeg\": \"image/jpeg\",\n  \t\"jpg\": \"image/jpeg\",\n  \t\"ico\": \"image/x-icon\",\n  \t\"png\": \"image/png\"\n};\n```\n```javascript\nvar http = require('http');\nvar fs=require('fs');\nvar url=require('url');\nvar path=require('path');\nvar file_types=require('./file_types').file_types;\n\nvar listen_port = '8998';\nvar server = new http.Server();\nserver.listen(listen_port);\nconsole.log(\"Server is start ... port: \" + listen_port + \"...\");\n\nserver.on('request',function(req,res){\n    var pathname = url.parse(req.url).pathname;\n    var realPath = path.join(\"assets\", pathname);\n    var extname = path.extname(realPath);\n    extname = extname ? extname.slice(1) : 'unknown';\n    fs.exists(realPath, function (exists) {\n        if (!exists) {\n            res.writeHead(404, {\n                'Content-Type': 'text/plain'\n            });\n\n            res.write(pathname + \" is not found\");\n            res.end();\n        } else {\n            fs.readFile(realPath, function (err, content) {\n                if (err) {\n                    res.writeHead(500, {\n                        'Content-Type': 'text/plain'\n                    });\n                    res.end(err);\n                } else {\n                    var contentType = file_types[extname] || \"text/plain\";\n                    res.writeHead(200, {\n                        'Content-Type': contentType\n                    });\n                    res.write(content);\n                    res.end();\n                }\n            });\n        }\n    });\n});\n```\n* 我们创建了文件的映射规则，对于不用类型的文件，输出不用的文件头，找不到文件返回404,读取错误返回500\n","source":"_posts/NodeJs搭建Http服务器.md","raw":"title: NodeJs搭建Http服务器\ndate: 2015-11-01 15:03:01\ntags: nodejs\ntoc: true\n---\n#### 介绍\n* 我们之前用过IIS,Apache等服务器，都是做一些配置，然后启动服务，指定端口等等就在本地开启了一个服务器。\n* 现在我们使用nodejs,一步一步实现一个Http服务器，我们主要用到的是http模块，还会使用fs文件操作，url,path模块用作辅助文件读取。\n* 实现\n<!--more-->\n```javascript\n//file_types.js\nexports.file_types = {\n\t\"html\": \"text/html\",\n\t\"js\": \"text/javascript\",\n  \t\"css\": \"text/css\",\n  \t\"json\": \"application/json\",\n  \t\"xml\": \"text/xml\",\n \t\"txt\": \"text/plain\",\n  \t\"gif\": \"image/gif\",\n  \t\"jpeg\": \"image/jpeg\",\n  \t\"jpg\": \"image/jpeg\",\n  \t\"ico\": \"image/x-icon\",\n  \t\"png\": \"image/png\"\n};\n```\n```javascript\nvar http = require('http');\nvar fs=require('fs');\nvar url=require('url');\nvar path=require('path');\nvar file_types=require('./file_types').file_types;\n\nvar listen_port = '8998';\nvar server = new http.Server();\nserver.listen(listen_port);\nconsole.log(\"Server is start ... port: \" + listen_port + \"...\");\n\nserver.on('request',function(req,res){\n    var pathname = url.parse(req.url).pathname;\n    var realPath = path.join(\"assets\", pathname);\n    var extname = path.extname(realPath);\n    extname = extname ? extname.slice(1) : 'unknown';\n    fs.exists(realPath, function (exists) {\n        if (!exists) {\n            res.writeHead(404, {\n                'Content-Type': 'text/plain'\n            });\n\n            res.write(pathname + \" is not found\");\n            res.end();\n        } else {\n            fs.readFile(realPath, function (err, content) {\n                if (err) {\n                    res.writeHead(500, {\n                        'Content-Type': 'text/plain'\n                    });\n                    res.end(err);\n                } else {\n                    var contentType = file_types[extname] || \"text/plain\";\n                    res.writeHead(200, {\n                        'Content-Type': contentType\n                    });\n                    res.write(content);\n                    res.end();\n                }\n            });\n        }\n    });\n});\n```\n* 我们创建了文件的映射规则，对于不用类型的文件，输出不用的文件头，找不到文件返回404,读取错误返回500\n","slug":"NodeJs搭建Http服务器","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599ic003p4wyjlx4pd75g"},{"title":"NodeJs子进程","date":"2015-10-29T07:03:01.000Z","toc":true,"_content":"##### child_process\n>* NodeJs的子进程有很多和系统交互的接口，我们先看一下主要的API:\n\t1. child.stdin 标准输入\n\t2. child.stdout 标准输出\n\t3. child.stderr 标准错误输出\n\t4. child.pid 子进程PID\n<!--more-->\n* 生成子进程的方法:\n\t1. `spawn(command,[args],[options])` 启动一个新的进程来执行command，args命令行参数\n\t2. `exex(command,[options],callback)` 启动一个新的进程来执行command命令，callback用于在进程结束时获取辨准输入，标准输出，以及错误信息\n\t3. `execFile(file,[args],[options],[callback])` 启动一个新的进程来执行可执行文件file，callback用于在进程结束时获取辨准输入，标准输出，以及错误信息\n\t4. fork(modulePath,[args],[options]),启动一个新的进程来执行一个javascript文件模块，创建Node子进程\n* 进程间通信：\n\t1. 使用send方法进行发送消息，通过监听message事件来获取消息\n\t```javascript\n\tvar child = require('child_process');\n\tvar fork = child.fork;\n\tvar ch = fork('./test.js');\n\tch.on('message',function(m){\n\t\tconsole.log(m);\n\t});\n\tch.send({k:'key'});\n\t```\n\t```javascript\n\t//test.js\n\tprocess.on('message',function(m){\n\t\tconsole.log(m);\n\t});\n\tprocess.send({k:'test'});\n\t```\n\t2. send方法同步发送消息，要避免发送数据量比较大的数据，造成性能无谓的消耗\n\t3. send(message,[sendHandle])\n\t4. send可以用来发送\n\t\t* net.Native\n\t\t* net.Server\n\t\t* net.Socket\n\t\t* dgram.Native\n\t\t* dgram.Socket\n\t```javascript\n\tvar child = require('child_process');\n\tvar fork = child.fork;\n\tvar ch = fork('./test.js');\n\tvar server = require('net').createServer();\n\tserver.listen(3000,function(){\n\t\tch.send('server',server);\n\t}).on('connection',function(){\n\t\tconsole.log('parent');\n\t});\n\t```\n\t```javascript\n\tprocess.on('message', function(k, v) {\n\t    if (k === 'server') {\n\t        v.on('connection', function() {\n\t            console.log('child');\n\t        });\n\t    }\n\t});\n\t```\n* 使用子进程统计系统登录次数\n```javascript\nvar child = require('child_process');\nvar exec = child.exec;\nvar last = exec('last | wc -l');\nlast.stdout.on('data', function (data) { \n\tconsole.log(data); \n}); \nlast.on('exit', function (code) { \n\tconsole.log('子进程已关闭：' + code); \n});\n```\n\n##### Cluster实现多进程\n```javascript\nvar cluster = require('cluster');\nvar http = require('http');\n\nif (cluster.isMaster) {\n  require('os').cpus().forEach(function(){\n    cluster.fork();\n  });\n  cluster.on('exit', function(worker, code, signal) {\n    console.log('worker ' + worker.process.pid + ' died');\n  });\n  cluster.on('listening', function(worker, address) {  \n    console.log(\"A worker with #\"+worker.id+\" is now connected to \" +\n     address.address +\n    \":\" + address.port);  \n  }); \n} else {\n  http.createServer(function(req, res) {\n    res.writeHead(200);\n    res.end(\"hello world\\n\");\n    console.log('Worker #' + cluster.worker.id + ' make a response');\n  }).listen(8000);\n}\n```\n* 只有主线程才能调用，当有请求发起时，主线程随机分配给某个子进程","source":"_posts/NodeJs子进程.md","raw":"title: NodeJs子进程\ndate: 2015-10-29 15:03:01\ntags: nodejs\ntoc: true\n---\n##### child_process\n>* NodeJs的子进程有很多和系统交互的接口，我们先看一下主要的API:\n\t1. child.stdin 标准输入\n\t2. child.stdout 标准输出\n\t3. child.stderr 标准错误输出\n\t4. child.pid 子进程PID\n<!--more-->\n* 生成子进程的方法:\n\t1. `spawn(command,[args],[options])` 启动一个新的进程来执行command，args命令行参数\n\t2. `exex(command,[options],callback)` 启动一个新的进程来执行command命令，callback用于在进程结束时获取辨准输入，标准输出，以及错误信息\n\t3. `execFile(file,[args],[options],[callback])` 启动一个新的进程来执行可执行文件file，callback用于在进程结束时获取辨准输入，标准输出，以及错误信息\n\t4. fork(modulePath,[args],[options]),启动一个新的进程来执行一个javascript文件模块，创建Node子进程\n* 进程间通信：\n\t1. 使用send方法进行发送消息，通过监听message事件来获取消息\n\t```javascript\n\tvar child = require('child_process');\n\tvar fork = child.fork;\n\tvar ch = fork('./test.js');\n\tch.on('message',function(m){\n\t\tconsole.log(m);\n\t});\n\tch.send({k:'key'});\n\t```\n\t```javascript\n\t//test.js\n\tprocess.on('message',function(m){\n\t\tconsole.log(m);\n\t});\n\tprocess.send({k:'test'});\n\t```\n\t2. send方法同步发送消息，要避免发送数据量比较大的数据，造成性能无谓的消耗\n\t3. send(message,[sendHandle])\n\t4. send可以用来发送\n\t\t* net.Native\n\t\t* net.Server\n\t\t* net.Socket\n\t\t* dgram.Native\n\t\t* dgram.Socket\n\t```javascript\n\tvar child = require('child_process');\n\tvar fork = child.fork;\n\tvar ch = fork('./test.js');\n\tvar server = require('net').createServer();\n\tserver.listen(3000,function(){\n\t\tch.send('server',server);\n\t}).on('connection',function(){\n\t\tconsole.log('parent');\n\t});\n\t```\n\t```javascript\n\tprocess.on('message', function(k, v) {\n\t    if (k === 'server') {\n\t        v.on('connection', function() {\n\t            console.log('child');\n\t        });\n\t    }\n\t});\n\t```\n* 使用子进程统计系统登录次数\n```javascript\nvar child = require('child_process');\nvar exec = child.exec;\nvar last = exec('last | wc -l');\nlast.stdout.on('data', function (data) { \n\tconsole.log(data); \n}); \nlast.on('exit', function (code) { \n\tconsole.log('子进程已关闭：' + code); \n});\n```\n\n##### Cluster实现多进程\n```javascript\nvar cluster = require('cluster');\nvar http = require('http');\n\nif (cluster.isMaster) {\n  require('os').cpus().forEach(function(){\n    cluster.fork();\n  });\n  cluster.on('exit', function(worker, code, signal) {\n    console.log('worker ' + worker.process.pid + ' died');\n  });\n  cluster.on('listening', function(worker, address) {  \n    console.log(\"A worker with #\"+worker.id+\" is now connected to \" +\n     address.address +\n    \":\" + address.port);  \n  }); \n} else {\n  http.createServer(function(req, res) {\n    res.writeHead(200);\n    res.end(\"hello world\\n\");\n    console.log('Worker #' + cluster.worker.id + ' make a response');\n  }).listen(8000);\n}\n```\n* 只有主线程才能调用，当有请求发起时，主线程随机分配给某个子进程","slug":"NodeJs子进程","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599ie003r4wyj0tmsb6tx"},{"title":"Jcrop","date":"2015-11-15T07:03:01.000Z","toc":true,"_content":"#### 引用资源\n##### css\n`<link rel=\"stylesheet\" href=\"jquery.Jcrop.css\">`\n##### JavaScript\n`<script src=\"jquery.js\"></script>`\n`<script src=\"jquery.Jcrop.js\"></script>`\n<!--more-->\n\n##### 使用\n```javascript\n<img id=\"image\" src=\"image.jpg\">\n\n$('#image').Jcrop();\n```\n##### 参数\n|属性\t|值\t|描述|\n|| :-- ||:--: ||:--: ||\n|allowSelect|\ttrue|\t允许新选框|\n|allowMove|\ttrue\t|允许选框移动|\n|allowResize|\ttrue|\t允许选框缩放|\n|aspectRatio|\t1\t|选框宽高比。说明：width/height|\n|keySupport|\ttrue|\t支持键盘控制。按键列表：上下左右（移动选框）、Esc（取消选框）|\n|dragEdges|\ttrue|\t允许拖动边框|\n|boxWidth\t|100|\t画布宽度|\n|boxHeight|\t100\t|画布高度|\n|minSelect|\t[10,10]|\t选择框最小选择尺寸。说明：若选择框小于该尺寸，则自动取消选择|\n|maxSize|\t[10,10]|\t选择框最大尺寸|\n|minSize\t|[10,10]|\t选择框最小尺寸|\n|onChange|\tfunction(data){}|\t选择框改变时的事件|\n|onSelect\t|function(data){}|\t选择框选定时的事件|\n|onDblClick\t|function(data){}|\t在选择框内双击时的事件|\n|onRelease\t|function(data){}|\t取消选择框时的事件|\n后面四个回调函数的参数data是一个对象，包含所选尺寸的x,y,w,h\n\n##### API介绍\n|方法|\t描述|\n|| :-- ||:--: ||\n|getBounds()\t|获取图片实际尺寸，格式为：[w, h]|\n|getWidgetSize()\t|获取图片显示尺寸，格式为：[w, h]|\n|getScaleFactor()\t|获取图片缩放的比例，格式为：[w, h]|\n","source":"_posts/Jcrop.md","raw":"title: Jcrop\ndate: 2015-11-15 15:03:01\ntags: web\ntoc: true\n---\n#### 引用资源\n##### css\n`<link rel=\"stylesheet\" href=\"jquery.Jcrop.css\">`\n##### JavaScript\n`<script src=\"jquery.js\"></script>`\n`<script src=\"jquery.Jcrop.js\"></script>`\n<!--more-->\n\n##### 使用\n```javascript\n<img id=\"image\" src=\"image.jpg\">\n\n$('#image').Jcrop();\n```\n##### 参数\n|属性\t|值\t|描述|\n|| :-- ||:--: ||:--: ||\n|allowSelect|\ttrue|\t允许新选框|\n|allowMove|\ttrue\t|允许选框移动|\n|allowResize|\ttrue|\t允许选框缩放|\n|aspectRatio|\t1\t|选框宽高比。说明：width/height|\n|keySupport|\ttrue|\t支持键盘控制。按键列表：上下左右（移动选框）、Esc（取消选框）|\n|dragEdges|\ttrue|\t允许拖动边框|\n|boxWidth\t|100|\t画布宽度|\n|boxHeight|\t100\t|画布高度|\n|minSelect|\t[10,10]|\t选择框最小选择尺寸。说明：若选择框小于该尺寸，则自动取消选择|\n|maxSize|\t[10,10]|\t选择框最大尺寸|\n|minSize\t|[10,10]|\t选择框最小尺寸|\n|onChange|\tfunction(data){}|\t选择框改变时的事件|\n|onSelect\t|function(data){}|\t选择框选定时的事件|\n|onDblClick\t|function(data){}|\t在选择框内双击时的事件|\n|onRelease\t|function(data){}|\t取消选择框时的事件|\n后面四个回调函数的参数data是一个对象，包含所选尺寸的x,y,w,h\n\n##### API介绍\n|方法|\t描述|\n|| :-- ||:--: ||\n|getBounds()\t|获取图片实际尺寸，格式为：[w, h]|\n|getWidgetSize()\t|获取图片显示尺寸，格式为：[w, h]|\n|getScaleFactor()\t|获取图片缩放的比例，格式为：[w, h]|\n","slug":"Jcrop","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599ih003t4wyjqyfuteyx"},{"title":"Dom元素尺寸相关","date":"2015-10-05T13:11:49.000Z","toc":true,"_content":"##### 元素距左侧偏移量\n```javascript\nfunction getElementLeft(element){\n\tvar leftval = element.offsetLeft;\n\tvar current = element.offsetParent;\n\twhile(current !== null){\n\t\tleftVal += current.offsetLeft;\n\t\tcurrent = current.offsetParent;\n   }\n\treturn leftVal;\n}\n```\n<!--more-->\n\n##### 元素距上方偏移量\n```javascript\nfunction getElementTop(element){\n\tvar topVal = element.offsetTop;\n\tvar current = element.offsetParent;\n\twhile(current !== null){\n\ttopVal += current.offsetTop;\n\tcurrent = current.offsetParent;\t\n  }\n  return topVal;\n}\n```\n#####浏览器视口大小\n```javascript\nfunction getViewport(){\n\tif(document.compatMode === 'BackCompat'){\n\t  return {\n\t   width:document.body.clientWidth,\n\t   height:document.body.clientHeight \n   }\n  }else{\n     return {\n\t  width:document.documentElement.clientWidth,\n height:document.documentElement.clientHeight  \n  }\n  }\n}\n```\n##### 滚动大小\n* scrollHeight 没有滚动情况元素内容总高度\n* scrollWidth 没有滚动情况下元素内容总宽度\n* scrollLeft 隐藏在元素区域左侧像素\n* scrollTop 隐藏在元素区域上方的像素\n\n通过 scrollHeight/clientHeight  和 scrollWidth/clientWidth中最大值可以获取到文档宽高\n\n##### getBoundingClientRect() \n>返回四个属性 left top right bottom\n\n实现\n```javascript\nfunction getBoundingClientRect(element){\n\tvar scrollTop = document.documentElement.scrollTop;\n\tvar scrollLeft = document.documentElement.scrollLeft;\n\tif(element.getBoundingClientRect){\n\t\tif(typeof arguments.callee.offset != 'number'){\n\t\t\tvar temp = document.createElement('div');\n\t\t\ttemp.style.cssText = 'position:absolute;left:0;top:0;';\n\t\t\tdocument.body.appendChild(temp);\n\t\t\targuments.callee.offset = -temp.getBoundingClientRect().top - scrollTop;\n\t\t\tdocument.body.removeChild(temp);\n\t\t\ttemp = null;\n\t\t}\n\t\tvar rect = element.getBoundingClientRect();\n\t\tvar offset = arguments.callee.offset;\n\n\t\treturn {\n\t\t\tleft:rect.left + offset,\n\t\t\tright:rect.right + offset,\n\t\t\ttop:rect.top+offset + offset,\n\t\t\tbottom:rect.bottom + offset\n\t\t};\n\t} else {\n\t\tvar actualLeft = getElementLeft(element);\n\t\tvar actualTop = getElementTop(element);\n\n\t\treturn {\n\t\t\tleft:actualLeft - scrollLeft,\n\t\t\tright:actualLeft + element.offsetWidth - scrollLeft,\n\t\t\ttop:actualTop - scrollTop,\n\t\t\tbottom:actualTop + element.offsetHeight - scrollTop\n\t\t};\n\t}\n}\n```","source":"_posts/Dom元素尺寸相关.md","raw":"title: Dom元素尺寸相关\ndate: 2015-10-05 21:11:49\ntags: javascript\ntoc: true\n---\n##### 元素距左侧偏移量\n```javascript\nfunction getElementLeft(element){\n\tvar leftval = element.offsetLeft;\n\tvar current = element.offsetParent;\n\twhile(current !== null){\n\t\tleftVal += current.offsetLeft;\n\t\tcurrent = current.offsetParent;\n   }\n\treturn leftVal;\n}\n```\n<!--more-->\n\n##### 元素距上方偏移量\n```javascript\nfunction getElementTop(element){\n\tvar topVal = element.offsetTop;\n\tvar current = element.offsetParent;\n\twhile(current !== null){\n\ttopVal += current.offsetTop;\n\tcurrent = current.offsetParent;\t\n  }\n  return topVal;\n}\n```\n#####浏览器视口大小\n```javascript\nfunction getViewport(){\n\tif(document.compatMode === 'BackCompat'){\n\t  return {\n\t   width:document.body.clientWidth,\n\t   height:document.body.clientHeight \n   }\n  }else{\n     return {\n\t  width:document.documentElement.clientWidth,\n height:document.documentElement.clientHeight  \n  }\n  }\n}\n```\n##### 滚动大小\n* scrollHeight 没有滚动情况元素内容总高度\n* scrollWidth 没有滚动情况下元素内容总宽度\n* scrollLeft 隐藏在元素区域左侧像素\n* scrollTop 隐藏在元素区域上方的像素\n\n通过 scrollHeight/clientHeight  和 scrollWidth/clientWidth中最大值可以获取到文档宽高\n\n##### getBoundingClientRect() \n>返回四个属性 left top right bottom\n\n实现\n```javascript\nfunction getBoundingClientRect(element){\n\tvar scrollTop = document.documentElement.scrollTop;\n\tvar scrollLeft = document.documentElement.scrollLeft;\n\tif(element.getBoundingClientRect){\n\t\tif(typeof arguments.callee.offset != 'number'){\n\t\t\tvar temp = document.createElement('div');\n\t\t\ttemp.style.cssText = 'position:absolute;left:0;top:0;';\n\t\t\tdocument.body.appendChild(temp);\n\t\t\targuments.callee.offset = -temp.getBoundingClientRect().top - scrollTop;\n\t\t\tdocument.body.removeChild(temp);\n\t\t\ttemp = null;\n\t\t}\n\t\tvar rect = element.getBoundingClientRect();\n\t\tvar offset = arguments.callee.offset;\n\n\t\treturn {\n\t\t\tleft:rect.left + offset,\n\t\t\tright:rect.right + offset,\n\t\t\ttop:rect.top+offset + offset,\n\t\t\tbottom:rect.bottom + offset\n\t\t};\n\t} else {\n\t\tvar actualLeft = getElementLeft(element);\n\t\tvar actualTop = getElementTop(element);\n\n\t\treturn {\n\t\t\tleft:actualLeft - scrollLeft,\n\t\t\tright:actualLeft + element.offsetWidth - scrollLeft,\n\t\t\ttop:actualTop - scrollTop,\n\t\t\tbottom:actualTop + element.offsetHeight - scrollTop\n\t\t};\n\t}\n}\n```","slug":"Dom元素尺寸相关","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599ii003v4wyjtbdfffyc"},{"title":"DOM操作","date":"2015-11-24T07:03:01.000Z","toc":true,"_content":"#### Node\n##### 操作节点\n* appendChild()\n一个参数，要插入的节点\n* insertBefore()\n两个参数，要插入的节点和参照的节点\n* replaceChild()\n两个参数，要插入的节点和要替换的节点\n* removeChild()\n一个参数，要移除的节点\n* cloneNode()\n一个参数，布尔值，是否执行深度克隆\n* normalize()\n合并文本节点\n<!--more-->\n\n#### Document\n##### document.getElementById\n* IE7及以前的版本忽略大小写，除此之外必须严格按照大小写\n* 如果不传参数返回null\n* IE7及以前的版本如果表单元素name属性和某元素id相等，会返回表单元素\n##### document.getElementsByTagName\n* 返回标签元素的集合\n##### namedItem 返回标签集合中指定name元素\n* 使用中括号的方式能达到namedItem效果\n* 获取所有html元素，传入`*`\n```javascript\nvar images = document.getElementsByTagName('image');\nvar logo = images.namedItem('logo');\nvar author = images['author'];\ndocument.getElementsByName\n```\n与 document.getElementsByTagName 类似\n\n##### 特殊方法\n* document.anchors返回所有带name的a元素\n* document.forms返回所有form元素\n* document.images返回所有img元素\n* document.links返回所有带href的元素\n##### 元素属性\n* id 元素唯一标示\n* title 附加说明\n* className 元素css类\n* lang 元素内容语言代码\n* dir 语言方向\n\n##### 元素方法\n* getAttribute\n不能获取style属性，以及类似onclick这样的事件处理属性\n* setAttribute\n设置属性值，接收两个参数，第一个是属性名，第二个是属性值\n* removeAttribute\n彻底删除属性\n* attributes属性\nElement类型拥有attributes属性\n\n##### 方法\n* getNamedItem(name) 返回指定属性值 (可以使用方括号访问方式)\n```javascript\nvar id = elements.attributes.getNamedItem('id').nodeValue;\nvar id = elements.attributes['id'].nodeValue;\n```\n* removeNamedItem(name) 移除指定属性\n* setNamedItem(node) 添加属性\n* item(pos) 返回位于pos位置的节点\n\n* 遍历所有属性的时候可以使用这些方法\n* attributes属性,不同浏览器返回顺序不一致\n* IE7及以前的版本会返回所有可能的属性，为避免这个，需要使用specified检测，未设置过的特性为false\n\n##### 创建元素\n* document.createElement()\n接收一个参数，创建的标签\n```javascript\nvar div = document.createElement('div');\ndiv.id=\"top\";\ndiv.className = \"m-top\";\n```\n\t* IE中支持参数传入完整的标签内容，有助于避免IE7以及以前版本的一些bug\n\t* 不能动态设置iframe name属性\n\t* 创建name相同的radio，互无联系\n\t* 但是，这样方式又只有IE才支持，所以，使用时需要做检测执行\n##### Text文本节点\n创建文本节点document.createTextNode()\n```javascript\nvar ele = document.createElement('div');\nvar txt = document.createTextNode('hello');\nele.appendChild(txt);\ndocument.body.appendChild(ele);\n```\n##### 规范化文本节点\n* 使用normalize()方法合并文本节点\n\n##### 分割文本节点\n* splitText(pos)方法，pos是指定位置\n##### 其它方法\n* appendData(text)\n* deleteData(offset,count)\n* insertData(offset,text)\n* replaceData(offset,count,text)\n* substringData(offset,data)\n\n##### DocumentFragment\n* 文档片段，创建方法\n\tdocument.createDocumentFragment()\n* 操作复杂dom的时候，可以使用片段操作，这样会避免页面多次页面重新渲染\n\n##### Attr属性\n* 创建属性\ndocument.createAttribute()\n```javascript\nvar attr = document.createAttribute('align');\nattr.value = 'left';\nele.setAttribute(attr);\n```\n##### selector API\n1. querySelector()\n\t* 接收css选择符，返回匹配到的第一个元素\n\t* document.querySelector()\n\t* document.body.querySelector()\n2. querySelectorAll()\n\t* 返回NodeList,使用与querySelector()相同\n","source":"_posts/DOM操作.md","raw":"title: DOM操作\ndate: 2015-11-24 15:03:01\ntags: javascript\ntoc: true\n---\n#### Node\n##### 操作节点\n* appendChild()\n一个参数，要插入的节点\n* insertBefore()\n两个参数，要插入的节点和参照的节点\n* replaceChild()\n两个参数，要插入的节点和要替换的节点\n* removeChild()\n一个参数，要移除的节点\n* cloneNode()\n一个参数，布尔值，是否执行深度克隆\n* normalize()\n合并文本节点\n<!--more-->\n\n#### Document\n##### document.getElementById\n* IE7及以前的版本忽略大小写，除此之外必须严格按照大小写\n* 如果不传参数返回null\n* IE7及以前的版本如果表单元素name属性和某元素id相等，会返回表单元素\n##### document.getElementsByTagName\n* 返回标签元素的集合\n##### namedItem 返回标签集合中指定name元素\n* 使用中括号的方式能达到namedItem效果\n* 获取所有html元素，传入`*`\n```javascript\nvar images = document.getElementsByTagName('image');\nvar logo = images.namedItem('logo');\nvar author = images['author'];\ndocument.getElementsByName\n```\n与 document.getElementsByTagName 类似\n\n##### 特殊方法\n* document.anchors返回所有带name的a元素\n* document.forms返回所有form元素\n* document.images返回所有img元素\n* document.links返回所有带href的元素\n##### 元素属性\n* id 元素唯一标示\n* title 附加说明\n* className 元素css类\n* lang 元素内容语言代码\n* dir 语言方向\n\n##### 元素方法\n* getAttribute\n不能获取style属性，以及类似onclick这样的事件处理属性\n* setAttribute\n设置属性值，接收两个参数，第一个是属性名，第二个是属性值\n* removeAttribute\n彻底删除属性\n* attributes属性\nElement类型拥有attributes属性\n\n##### 方法\n* getNamedItem(name) 返回指定属性值 (可以使用方括号访问方式)\n```javascript\nvar id = elements.attributes.getNamedItem('id').nodeValue;\nvar id = elements.attributes['id'].nodeValue;\n```\n* removeNamedItem(name) 移除指定属性\n* setNamedItem(node) 添加属性\n* item(pos) 返回位于pos位置的节点\n\n* 遍历所有属性的时候可以使用这些方法\n* attributes属性,不同浏览器返回顺序不一致\n* IE7及以前的版本会返回所有可能的属性，为避免这个，需要使用specified检测，未设置过的特性为false\n\n##### 创建元素\n* document.createElement()\n接收一个参数，创建的标签\n```javascript\nvar div = document.createElement('div');\ndiv.id=\"top\";\ndiv.className = \"m-top\";\n```\n\t* IE中支持参数传入完整的标签内容，有助于避免IE7以及以前版本的一些bug\n\t* 不能动态设置iframe name属性\n\t* 创建name相同的radio，互无联系\n\t* 但是，这样方式又只有IE才支持，所以，使用时需要做检测执行\n##### Text文本节点\n创建文本节点document.createTextNode()\n```javascript\nvar ele = document.createElement('div');\nvar txt = document.createTextNode('hello');\nele.appendChild(txt);\ndocument.body.appendChild(ele);\n```\n##### 规范化文本节点\n* 使用normalize()方法合并文本节点\n\n##### 分割文本节点\n* splitText(pos)方法，pos是指定位置\n##### 其它方法\n* appendData(text)\n* deleteData(offset,count)\n* insertData(offset,text)\n* replaceData(offset,count,text)\n* substringData(offset,data)\n\n##### DocumentFragment\n* 文档片段，创建方法\n\tdocument.createDocumentFragment()\n* 操作复杂dom的时候，可以使用片段操作，这样会避免页面多次页面重新渲染\n\n##### Attr属性\n* 创建属性\ndocument.createAttribute()\n```javascript\nvar attr = document.createAttribute('align');\nattr.value = 'left';\nele.setAttribute(attr);\n```\n##### selector API\n1. querySelector()\n\t* 接收css选择符，返回匹配到的第一个元素\n\t* document.querySelector()\n\t* document.body.querySelector()\n2. querySelectorAll()\n\t* 返回NodeList,使用与querySelector()相同\n","slug":"DOM操作","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599ik003x4wyjiqdq5sle"},{"title":"BigPipe","date":"2015-11-09T07:03:01.000Z","toc":true,"_content":"#### BigPipe\n>1. BigPipe就是把网页分解成多个模块，然后通过服务器和浏览器建立管道链接，分别对各个模块进行输出，最后完成一个完整的页面。\n2. 传统方式的页面渲染大致分为两类，一种是使用动态语言jsp，asp.net等进行完整页面的渲染以及交互，另一种是服务端负责渲染最基本的页面结构，或者说是页面上静态的结构，然后由javascript负责渲染页面动态的部分，以及各种交互的部分。\n<!--more-->\n\t* 第一种方式在服务器进行完整的计算渲染后，一次性传输到浏览器端，过程可能会比较长。\n\t* 第二种方式页面渲染速度比较快，但是到了客户端后，可能会发出很多网络数据请求，数据请求的过程对性能的影响也是比较大的。\n\t那么使用bigpipe的好处就突显出来了。\n\t* 首先各个请求都是异步的，互不影响的，当一个请求返回结果后，服务器端就可以继续完成数据处理以及dom元素渲染，然后输出到浏览器端，浏览器端接收到结果后直接渲染页面某一模块。\n\t* 其次，浏览器在整个页面阶段只发出了一个请求，那就是页面请求，页面渲染结束期间，这个请求是不会中断的。\n\t虽然上面叙述了一些bigpipe的好处，但是有没有发现，由于请求接口的过程是异步的，那么返回时间也是不固定的，就会出现页面渲染并不是按照我们预想的顺序。这时候我们又想出了一个办法，在页面初始阶段返回页面基本骨架，然后各个请求返回结果后，渲染到固定模块内，保证页面不会乱。而bigpipe初始阶段返回不闭合的html，等所有传输结束后返回页面闭合标签，整个过程结束。\n3. http1.1 支持持续的连接，这样就可以发出多个请求，并且接收多个请求。还可以发送流水请求，在一个请求未返回结果的时候就继续发生第二个请求。\n\n#### nodejs实现\n1. 核心就是http.requert()\n2. html页面访问直接请求nodejs渲染的页面。\n3. 当请求到达nodejs时，nodejs返回一个不闭合html框架。\n4. nodejs发出多个请求，每个请求都是一个页面的模块部分。\n5. 分别接收到各个请求结果后，处理数据，渲染模版，取到html，返回一个script标签，里面调用客户端脚本，在指定div内写这段html。这段代码就是最简单的`document.getElementById('#id').innerHTML=html;。`\n6. 所有请求返回结果后，nodejs返回页面闭合标签。\n7. 其他的页面效果，特效，交互交给javascript。\n\n#### 简单实现\n\n```javascript\n\nvar http = require('http');\nhttp.createServer(function(request, response) {\n\tresponse.writeHead(200, {\"Content-Type\": \"text/html\"});\n\tresponse.write(\"<!Doctype html><html lang=\\\"en\\\"><head><title>bigpipe</title>\");\n\tresponse.write(\"<script type=\\\"text/javascript\\\">function load(id,html) { var ele=document.getElementById(id); ele.innerHTML = html;}</script>\");\n\tresponse.write(\"</head><body><div id=\\\"top\\\"></div>\");\n\n\tvar url = 'http://test.com/a.json';\n\tvar requestHeaders = request.headers;\n\n\tvar options = {\n\t    url: url,\n\t    method: \"POST\",\n\t    headers: {\n\t        \"user-agent\": requestHeaders[\"user-agent\"],\n\t        \"cookie\": requestHeaders[\"cookie\"]\n\t    },\n\t    timeout: 6000\n\t};\n\n\tvar post = http.request(options);\n\tpost.addListener('response', function(res) {\n\t\tres.addListener('data', function(data) {\n\t\t\tvar html = dealHtml(data);\n\t\t\tresponse.write('<script>load('top','+html+')</script>');\n\t\t});\n\t\tres.addListener('end', function() {\n\t\t\tresponse.end();\n\t\t});\n\t});\n\tpost.end();\n\tresponse.write(\"</body></html>\");\n\n}).listen(8998);\n```","source":"_posts/BigPipe.md","raw":"title: BigPipe\ndate: 2015-11-09 15:03:01\ntags: web\ntoc: true\n---\n#### BigPipe\n>1. BigPipe就是把网页分解成多个模块，然后通过服务器和浏览器建立管道链接，分别对各个模块进行输出，最后完成一个完整的页面。\n2. 传统方式的页面渲染大致分为两类，一种是使用动态语言jsp，asp.net等进行完整页面的渲染以及交互，另一种是服务端负责渲染最基本的页面结构，或者说是页面上静态的结构，然后由javascript负责渲染页面动态的部分，以及各种交互的部分。\n<!--more-->\n\t* 第一种方式在服务器进行完整的计算渲染后，一次性传输到浏览器端，过程可能会比较长。\n\t* 第二种方式页面渲染速度比较快，但是到了客户端后，可能会发出很多网络数据请求，数据请求的过程对性能的影响也是比较大的。\n\t那么使用bigpipe的好处就突显出来了。\n\t* 首先各个请求都是异步的，互不影响的，当一个请求返回结果后，服务器端就可以继续完成数据处理以及dom元素渲染，然后输出到浏览器端，浏览器端接收到结果后直接渲染页面某一模块。\n\t* 其次，浏览器在整个页面阶段只发出了一个请求，那就是页面请求，页面渲染结束期间，这个请求是不会中断的。\n\t虽然上面叙述了一些bigpipe的好处，但是有没有发现，由于请求接口的过程是异步的，那么返回时间也是不固定的，就会出现页面渲染并不是按照我们预想的顺序。这时候我们又想出了一个办法，在页面初始阶段返回页面基本骨架，然后各个请求返回结果后，渲染到固定模块内，保证页面不会乱。而bigpipe初始阶段返回不闭合的html，等所有传输结束后返回页面闭合标签，整个过程结束。\n3. http1.1 支持持续的连接，这样就可以发出多个请求，并且接收多个请求。还可以发送流水请求，在一个请求未返回结果的时候就继续发生第二个请求。\n\n#### nodejs实现\n1. 核心就是http.requert()\n2. html页面访问直接请求nodejs渲染的页面。\n3. 当请求到达nodejs时，nodejs返回一个不闭合html框架。\n4. nodejs发出多个请求，每个请求都是一个页面的模块部分。\n5. 分别接收到各个请求结果后，处理数据，渲染模版，取到html，返回一个script标签，里面调用客户端脚本，在指定div内写这段html。这段代码就是最简单的`document.getElementById('#id').innerHTML=html;。`\n6. 所有请求返回结果后，nodejs返回页面闭合标签。\n7. 其他的页面效果，特效，交互交给javascript。\n\n#### 简单实现\n\n```javascript\n\nvar http = require('http');\nhttp.createServer(function(request, response) {\n\tresponse.writeHead(200, {\"Content-Type\": \"text/html\"});\n\tresponse.write(\"<!Doctype html><html lang=\\\"en\\\"><head><title>bigpipe</title>\");\n\tresponse.write(\"<script type=\\\"text/javascript\\\">function load(id,html) { var ele=document.getElementById(id); ele.innerHTML = html;}</script>\");\n\tresponse.write(\"</head><body><div id=\\\"top\\\"></div>\");\n\n\tvar url = 'http://test.com/a.json';\n\tvar requestHeaders = request.headers;\n\n\tvar options = {\n\t    url: url,\n\t    method: \"POST\",\n\t    headers: {\n\t        \"user-agent\": requestHeaders[\"user-agent\"],\n\t        \"cookie\": requestHeaders[\"cookie\"]\n\t    },\n\t    timeout: 6000\n\t};\n\n\tvar post = http.request(options);\n\tpost.addListener('response', function(res) {\n\t\tres.addListener('data', function(data) {\n\t\t\tvar html = dealHtml(data);\n\t\t\tresponse.write('<script>load('top','+html+')</script>');\n\t\t});\n\t\tres.addListener('end', function() {\n\t\t\tresponse.end();\n\t\t});\n\t});\n\tpost.end();\n\tresponse.write(\"</body></html>\");\n\n}).listen(8998);\n```","slug":"BigPipe","published":1,"updated":"2016-12-07T12:04:41.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciyv599il003z4wyj8lb017ds"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciyv599ek00014wyjtnvnif5e","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599ep00034wyjtgvjz414"},{"post_id":"ciyv599ew00044wyjd2168344","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599ex00064wyjfmo4x2bn"},{"post_id":"ciyv599ez00074wyjwe0zwye0","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599f000084wyja2igehtm"},{"post_id":"ciyv599f100094wyjk8b8cuaj","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599f1000a4wyjjgkbctur"},{"post_id":"ciyv599f3000b4wyjhcubnu4n","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599f3000c4wyj8mr0cree"},{"post_id":"ciyv599f4000d4wyj0ct63ife","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599f5000e4wyjthjt92hx"},{"post_id":"ciyv599f6000f4wyje1dvxl3v","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599f7000g4wyj8x1hhm3r"},{"post_id":"ciyv599f8000h4wyjntgo5v5i","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599f9000i4wyjlfe0hrdb"},{"post_id":"ciyv599fa000j4wyjxrqpfu9f","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599fb000k4wyji2pmt89w"},{"post_id":"ciyv599fc000l4wyjc0nn7kt6","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599fd000m4wyjbebpft3b"},{"post_id":"ciyv599fe000n4wyj3knq0ws0","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599ff000o4wyjw78taz6q"},{"post_id":"ciyv599fh000p4wyjvzfipliw","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599fi000q4wyjdfvgqe3k"},{"post_id":"ciyv599fj000r4wyjrve9b6oy","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599fk000s4wyjedobsnte"},{"post_id":"ciyv599fm000t4wyjk6i55jz7","tag_id":"ciyv599fn000u4wyj4kg1mqpq","_id":"ciyv599fn000v4wyju3csunxm"},{"post_id":"ciyv599fo000w4wyj111hiyf9","tag_id":"ciyv599fn000u4wyj4kg1mqpq","_id":"ciyv599fq000x4wyjpjpmyo7z"},{"post_id":"ciyv599fr000y4wyj8myk6s7w","tag_id":"ciyv599fn000u4wyj4kg1mqpq","_id":"ciyv599fs000z4wyjh14iqwgn"},{"post_id":"ciyv599ft00104wyjdu61ngvk","tag_id":"ciyv599fn000u4wyj4kg1mqpq","_id":"ciyv599fu00114wyjvv7l7g0q"},{"post_id":"ciyv599fv00124wyjw1r2vexg","tag_id":"ciyv599fn000u4wyj4kg1mqpq","_id":"ciyv599fv00134wyjkrkd69b5"},{"post_id":"ciyv599fw00144wyjjz61wxxo","tag_id":"ciyv599fn000u4wyj4kg1mqpq","_id":"ciyv599fx00154wyjuuws5zit"},{"post_id":"ciyv599fx00164wyjg6qfvys0","tag_id":"ciyv599fn000u4wyj4kg1mqpq","_id":"ciyv599fy00174wyjo6ygwgl5"},{"post_id":"ciyv599fz00184wyjm22u95yw","tag_id":"ciyv599fz00194wyjh83svqb7","_id":"ciyv599fz001a4wyjxhpw29mh"},{"post_id":"ciyv599g0001b4wyjnqsgmob7","tag_id":"ciyv599fz00194wyjh83svqb7","_id":"ciyv599g1001c4wyjoyp0tgn8"},{"post_id":"ciyv599g2001d4wyjrdn8jzhu","tag_id":"ciyv599fz00194wyjh83svqb7","_id":"ciyv599g3001e4wyjr4gytuaz"},{"post_id":"ciyv599g5001f4wyjvrbas66s","tag_id":"ciyv599fz00194wyjh83svqb7","_id":"ciyv599g7001g4wyjkcb918x7"},{"post_id":"ciyv599g7001h4wyjxz7e166e","tag_id":"ciyv599fz00194wyjh83svqb7","_id":"ciyv599g9001i4wyjt1r1ezn1"},{"post_id":"ciyv599ga001j4wyjl436gzir","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599gc001k4wyjkltga2u6"},{"post_id":"ciyv599gc001l4wyjpkbcf9ca","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599ge001m4wyjn3sdrp04"},{"post_id":"ciyv599gf001n4wyjf8ergagv","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599gg001o4wyjyecr5t87"},{"post_id":"ciyv599gg001p4wyjzmsz9lyl","tag_id":"ciyv599gh001q4wyj5fr565zp","_id":"ciyv599gi001r4wyj7uvykx0k"},{"post_id":"ciyv599gi001s4wyjxbvxtk6e","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599gj001t4wyj2j0db58p"},{"post_id":"ciyv599gk001u4wyjuhxjiun6","tag_id":"ciyv599fz00194wyjh83svqb7","_id":"ciyv599gk001v4wyjdygoagjq"},{"post_id":"ciyv599gn001w4wyjl8dev1ij","tag_id":"ciyv599fz00194wyjh83svqb7","_id":"ciyv599go001x4wyjyrc1r0by"},{"post_id":"ciyv599gq001y4wyj6128vnix","tag_id":"ciyv599fz00194wyjh83svqb7","_id":"ciyv599gr001z4wyj1x92f82r"},{"post_id":"ciyv599gs00204wyjuqf3kv4j","tag_id":"ciyv599fz00194wyjh83svqb7","_id":"ciyv599gt00214wyjotm13lac"},{"post_id":"ciyv599gw00224wyjmf4dlz7r","tag_id":"ciyv599fz00194wyjh83svqb7","_id":"ciyv599gw00234wyjk79mtz9a"},{"post_id":"ciyv599gx00244wyjlwbi6d8z","tag_id":"ciyv599fz00194wyjh83svqb7","_id":"ciyv599gy00254wyjb7vzqppo"},{"post_id":"ciyv599gy00264wyj90eq7fl9","tag_id":"ciyv599fz00194wyjh83svqb7","_id":"ciyv599gz00274wyjnva34ce9"},{"post_id":"ciyv599h100284wyjss4fgj2f","tag_id":"ciyv599fz00194wyjh83svqb7","_id":"ciyv599h200294wyjqfx23wme"},{"post_id":"ciyv599h2002a4wyj9ygy21ub","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599h3002b4wyjcxf2vbgk"},{"post_id":"ciyv599h4002c4wyja9wa0aux","tag_id":"ciyv599gh001q4wyj5fr565zp","_id":"ciyv599h5002d4wyj47vjw58z"},{"post_id":"ciyv599h9002e4wyjjkdcbqpe","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599hb002f4wyjr4b4afpj"},{"post_id":"ciyv599hc002g4wyjuz29ro6e","tag_id":"ciyv599gh001q4wyj5fr565zp","_id":"ciyv599hc002h4wyjxf8cd82y"},{"post_id":"ciyv599hd002i4wyjeasin7nd","tag_id":"ciyv599gh001q4wyj5fr565zp","_id":"ciyv599he002j4wyjoncjwm3d"},{"post_id":"ciyv599hf002k4wyj3jk2qwek","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599hg002l4wyjgexh7yab"},{"post_id":"ciyv599hh002m4wyjpcm8dy7t","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599hh002n4wyj1ebc024b"},{"post_id":"ciyv599hj002o4wyjg4qp20hr","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599hj002p4wyjf8lj09md"},{"post_id":"ciyv599hk002q4wyjtmdscsn9","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599hl002r4wyji3cqlbqj"},{"post_id":"ciyv599hl002s4wyjounron0i","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599hm002t4wyj8oza68ys"},{"post_id":"ciyv599ho002u4wyjsa8oroh8","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599hp002v4wyj18tywdoh"},{"post_id":"ciyv599hq002w4wyjpxcow8uw","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599hq002x4wyj202qronn"},{"post_id":"ciyv599hr002y4wyjb5hsm68i","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599ht002z4wyj531ad8kk"},{"post_id":"ciyv599hu00304wyj23vbg21g","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599hv00314wyjnlxjby2p"},{"post_id":"ciyv599hv00324wyj4l257j2l","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599hw00334wyj1sa46n0z"},{"post_id":"ciyv599hx00344wyjc92q8ji7","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599hx00354wyjvdv1jh1b"},{"post_id":"ciyv599hy00364wyjtq6ibois","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599hy00374wyjajugilpx"},{"post_id":"ciyv599hz00384wyj5opr54vw","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599i000394wyj3p0ngw53"},{"post_id":"ciyv599i0003a4wyje777vkdq","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599i1003b4wyjdentzvn7"},{"post_id":"ciyv599i2003c4wyjav5u2g5n","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599i4003d4wyj9wa5iabs"},{"post_id":"ciyv599i4003e4wyjop9wjyox","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599i5003f4wyjgbehx72u"},{"post_id":"ciyv599i6003g4wyjxkwbd8q8","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599i6003h4wyjh6i0mm48"},{"post_id":"ciyv599i7003i4wyj3smio9eu","tag_id":"ciyv599i7003j4wyjstts9rni","_id":"ciyv599i7003k4wyjbyugr1fn"},{"post_id":"ciyv599i8003l4wyjee5biq14","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599i8003m4wyj5uq8s1cy"},{"post_id":"ciyv599ia003n4wyj8lgwi58g","tag_id":"ciyv599fz00194wyjh83svqb7","_id":"ciyv599ib003o4wyjp2eti78d"},{"post_id":"ciyv599ic003p4wyjlx4pd75g","tag_id":"ciyv599fz00194wyjh83svqb7","_id":"ciyv599id003q4wyjdmziohe2"},{"post_id":"ciyv599ie003r4wyj0tmsb6tx","tag_id":"ciyv599fz00194wyjh83svqb7","_id":"ciyv599if003s4wyj49m66pi4"},{"post_id":"ciyv599ih003t4wyjqyfuteyx","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599ii003u4wyje2lz58qm"},{"post_id":"ciyv599ii003v4wyjtbdfffyc","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599ij003w4wyjk4qpkg3d"},{"post_id":"ciyv599ik003x4wyjiqdq5sle","tag_id":"ciyv599eo00024wyjyrb8dms7","_id":"ciyv599ik003y4wyj2e0wsr6b"},{"post_id":"ciyv599il003z4wyj8lb017ds","tag_id":"ciyv599ew00054wyj2y6r5qm6","_id":"ciyv599il00404wyje7vxdw9p"}],"Tag":[{"name":"javascript","_id":"ciyv599eo00024wyjyrb8dms7"},{"name":"web","_id":"ciyv599ew00054wyj2y6r5qm6"},{"name":"python","_id":"ciyv599fn000u4wyj4kg1mqpq"},{"name":"nodejs","_id":"ciyv599fz00194wyjh83svqb7"},{"name":"linux","_id":"ciyv599gh001q4wyj5fr565zp"},{"name":"tools","_id":"ciyv599i7003j4wyjstts9rni"}]}}